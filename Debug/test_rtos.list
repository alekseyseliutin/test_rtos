
test_rtos.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f1fc  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006dc  0800f2c0  0800f2c0  0001f2c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f99c  0800f99c  000201d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800f99c  0800f99c  0001f99c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f9a4  0800f9a4  000201d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f9a4  0800f9a4  0001f9a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f9a8  0800f9a8  0001f9a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  0800f9ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002854  200001d8  0800fb84  000201d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002a2c  0800fb84  00022a2c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020200  2**0
                  CONTENTS, READONLY
 13 .debug_info   00024720  00000000  00000000  00020243  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000046db  00000000  00000000  00044963  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001f28  00000000  00000000  00049040  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000183c  00000000  00000000  0004af68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00005d9f  00000000  00000000  0004c7a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000227e6  00000000  00000000  00052543  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cd04f  00000000  00000000  00074d29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000856c  00000000  00000000  00141d78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  0014a2e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001d8 	.word	0x200001d8
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800f2a4 	.word	0x0800f2a4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001dc 	.word	0x200001dc
 8000104:	0800f2a4 	.word	0x0800f2a4

08000108 <strcmp>:
 8000108:	7802      	ldrb	r2, [r0, #0]
 800010a:	780b      	ldrb	r3, [r1, #0]
 800010c:	2a00      	cmp	r2, #0
 800010e:	d003      	beq.n	8000118 <strcmp+0x10>
 8000110:	3001      	adds	r0, #1
 8000112:	3101      	adds	r1, #1
 8000114:	429a      	cmp	r2, r3
 8000116:	d0f7      	beq.n	8000108 <strcmp>
 8000118:	1ad0      	subs	r0, r2, r3
 800011a:	4770      	bx	lr

0800011c <strlen>:
 800011c:	2300      	movs	r3, #0
 800011e:	5cc2      	ldrb	r2, [r0, r3]
 8000120:	3301      	adds	r3, #1
 8000122:	2a00      	cmp	r2, #0
 8000124:	d1fb      	bne.n	800011e <strlen+0x2>
 8000126:	1e58      	subs	r0, r3, #1
 8000128:	4770      	bx	lr
	...

0800012c <__gnu_thumb1_case_uqi>:
 800012c:	b402      	push	{r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0049      	lsls	r1, r1, #1
 8000134:	5c09      	ldrb	r1, [r1, r0]
 8000136:	0049      	lsls	r1, r1, #1
 8000138:	448e      	add	lr, r1
 800013a:	bc02      	pop	{r1}
 800013c:	4770      	bx	lr
 800013e:	46c0      	nop			; (mov r8, r8)

08000140 <__gnu_thumb1_case_shi>:
 8000140:	b403      	push	{r0, r1}
 8000142:	4671      	mov	r1, lr
 8000144:	0849      	lsrs	r1, r1, #1
 8000146:	0040      	lsls	r0, r0, #1
 8000148:	0049      	lsls	r1, r1, #1
 800014a:	5e09      	ldrsh	r1, [r1, r0]
 800014c:	0049      	lsls	r1, r1, #1
 800014e:	448e      	add	lr, r1
 8000150:	bc03      	pop	{r0, r1}
 8000152:	4770      	bx	lr

08000154 <__udivsi3>:
 8000154:	2200      	movs	r2, #0
 8000156:	0843      	lsrs	r3, r0, #1
 8000158:	428b      	cmp	r3, r1
 800015a:	d374      	bcc.n	8000246 <__udivsi3+0xf2>
 800015c:	0903      	lsrs	r3, r0, #4
 800015e:	428b      	cmp	r3, r1
 8000160:	d35f      	bcc.n	8000222 <__udivsi3+0xce>
 8000162:	0a03      	lsrs	r3, r0, #8
 8000164:	428b      	cmp	r3, r1
 8000166:	d344      	bcc.n	80001f2 <__udivsi3+0x9e>
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d328      	bcc.n	80001c0 <__udivsi3+0x6c>
 800016e:	0c03      	lsrs	r3, r0, #16
 8000170:	428b      	cmp	r3, r1
 8000172:	d30d      	bcc.n	8000190 <__udivsi3+0x3c>
 8000174:	22ff      	movs	r2, #255	; 0xff
 8000176:	0209      	lsls	r1, r1, #8
 8000178:	ba12      	rev	r2, r2
 800017a:	0c03      	lsrs	r3, r0, #16
 800017c:	428b      	cmp	r3, r1
 800017e:	d302      	bcc.n	8000186 <__udivsi3+0x32>
 8000180:	1212      	asrs	r2, r2, #8
 8000182:	0209      	lsls	r1, r1, #8
 8000184:	d065      	beq.n	8000252 <__udivsi3+0xfe>
 8000186:	0b03      	lsrs	r3, r0, #12
 8000188:	428b      	cmp	r3, r1
 800018a:	d319      	bcc.n	80001c0 <__udivsi3+0x6c>
 800018c:	e000      	b.n	8000190 <__udivsi3+0x3c>
 800018e:	0a09      	lsrs	r1, r1, #8
 8000190:	0bc3      	lsrs	r3, r0, #15
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x46>
 8000196:	03cb      	lsls	r3, r1, #15
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0b83      	lsrs	r3, r0, #14
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x52>
 80001a2:	038b      	lsls	r3, r1, #14
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0b43      	lsrs	r3, r0, #13
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x5e>
 80001ae:	034b      	lsls	r3, r1, #13
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0b03      	lsrs	r3, r0, #12
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x6a>
 80001ba:	030b      	lsls	r3, r1, #12
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0ac3      	lsrs	r3, r0, #11
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__udivsi3+0x76>
 80001c6:	02cb      	lsls	r3, r1, #11
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	0a83      	lsrs	r3, r0, #10
 80001ce:	428b      	cmp	r3, r1
 80001d0:	d301      	bcc.n	80001d6 <__udivsi3+0x82>
 80001d2:	028b      	lsls	r3, r1, #10
 80001d4:	1ac0      	subs	r0, r0, r3
 80001d6:	4152      	adcs	r2, r2
 80001d8:	0a43      	lsrs	r3, r0, #9
 80001da:	428b      	cmp	r3, r1
 80001dc:	d301      	bcc.n	80001e2 <__udivsi3+0x8e>
 80001de:	024b      	lsls	r3, r1, #9
 80001e0:	1ac0      	subs	r0, r0, r3
 80001e2:	4152      	adcs	r2, r2
 80001e4:	0a03      	lsrs	r3, r0, #8
 80001e6:	428b      	cmp	r3, r1
 80001e8:	d301      	bcc.n	80001ee <__udivsi3+0x9a>
 80001ea:	020b      	lsls	r3, r1, #8
 80001ec:	1ac0      	subs	r0, r0, r3
 80001ee:	4152      	adcs	r2, r2
 80001f0:	d2cd      	bcs.n	800018e <__udivsi3+0x3a>
 80001f2:	09c3      	lsrs	r3, r0, #7
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xa8>
 80001f8:	01cb      	lsls	r3, r1, #7
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0983      	lsrs	r3, r0, #6
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xb4>
 8000204:	018b      	lsls	r3, r1, #6
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	0943      	lsrs	r3, r0, #5
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xc0>
 8000210:	014b      	lsls	r3, r1, #5
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	0903      	lsrs	r3, r0, #4
 8000218:	428b      	cmp	r3, r1
 800021a:	d301      	bcc.n	8000220 <__udivsi3+0xcc>
 800021c:	010b      	lsls	r3, r1, #4
 800021e:	1ac0      	subs	r0, r0, r3
 8000220:	4152      	adcs	r2, r2
 8000222:	08c3      	lsrs	r3, r0, #3
 8000224:	428b      	cmp	r3, r1
 8000226:	d301      	bcc.n	800022c <__udivsi3+0xd8>
 8000228:	00cb      	lsls	r3, r1, #3
 800022a:	1ac0      	subs	r0, r0, r3
 800022c:	4152      	adcs	r2, r2
 800022e:	0883      	lsrs	r3, r0, #2
 8000230:	428b      	cmp	r3, r1
 8000232:	d301      	bcc.n	8000238 <__udivsi3+0xe4>
 8000234:	008b      	lsls	r3, r1, #2
 8000236:	1ac0      	subs	r0, r0, r3
 8000238:	4152      	adcs	r2, r2
 800023a:	0843      	lsrs	r3, r0, #1
 800023c:	428b      	cmp	r3, r1
 800023e:	d301      	bcc.n	8000244 <__udivsi3+0xf0>
 8000240:	004b      	lsls	r3, r1, #1
 8000242:	1ac0      	subs	r0, r0, r3
 8000244:	4152      	adcs	r2, r2
 8000246:	1a41      	subs	r1, r0, r1
 8000248:	d200      	bcs.n	800024c <__udivsi3+0xf8>
 800024a:	4601      	mov	r1, r0
 800024c:	4152      	adcs	r2, r2
 800024e:	4610      	mov	r0, r2
 8000250:	4770      	bx	lr
 8000252:	e7ff      	b.n	8000254 <__udivsi3+0x100>
 8000254:	b501      	push	{r0, lr}
 8000256:	2000      	movs	r0, #0
 8000258:	f000 f8f0 	bl	800043c <__aeabi_idiv0>
 800025c:	bd02      	pop	{r1, pc}
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_uidivmod>:
 8000260:	2900      	cmp	r1, #0
 8000262:	d0f7      	beq.n	8000254 <__udivsi3+0x100>
 8000264:	e776      	b.n	8000154 <__udivsi3>
 8000266:	4770      	bx	lr

08000268 <__divsi3>:
 8000268:	4603      	mov	r3, r0
 800026a:	430b      	orrs	r3, r1
 800026c:	d47f      	bmi.n	800036e <__divsi3+0x106>
 800026e:	2200      	movs	r2, #0
 8000270:	0843      	lsrs	r3, r0, #1
 8000272:	428b      	cmp	r3, r1
 8000274:	d374      	bcc.n	8000360 <__divsi3+0xf8>
 8000276:	0903      	lsrs	r3, r0, #4
 8000278:	428b      	cmp	r3, r1
 800027a:	d35f      	bcc.n	800033c <__divsi3+0xd4>
 800027c:	0a03      	lsrs	r3, r0, #8
 800027e:	428b      	cmp	r3, r1
 8000280:	d344      	bcc.n	800030c <__divsi3+0xa4>
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d328      	bcc.n	80002da <__divsi3+0x72>
 8000288:	0c03      	lsrs	r3, r0, #16
 800028a:	428b      	cmp	r3, r1
 800028c:	d30d      	bcc.n	80002aa <__divsi3+0x42>
 800028e:	22ff      	movs	r2, #255	; 0xff
 8000290:	0209      	lsls	r1, r1, #8
 8000292:	ba12      	rev	r2, r2
 8000294:	0c03      	lsrs	r3, r0, #16
 8000296:	428b      	cmp	r3, r1
 8000298:	d302      	bcc.n	80002a0 <__divsi3+0x38>
 800029a:	1212      	asrs	r2, r2, #8
 800029c:	0209      	lsls	r1, r1, #8
 800029e:	d065      	beq.n	800036c <__divsi3+0x104>
 80002a0:	0b03      	lsrs	r3, r0, #12
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d319      	bcc.n	80002da <__divsi3+0x72>
 80002a6:	e000      	b.n	80002aa <__divsi3+0x42>
 80002a8:	0a09      	lsrs	r1, r1, #8
 80002aa:	0bc3      	lsrs	r3, r0, #15
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x4c>
 80002b0:	03cb      	lsls	r3, r1, #15
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0b83      	lsrs	r3, r0, #14
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x58>
 80002bc:	038b      	lsls	r3, r1, #14
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0b43      	lsrs	r3, r0, #13
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0x64>
 80002c8:	034b      	lsls	r3, r1, #13
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	0b03      	lsrs	r3, r0, #12
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d301      	bcc.n	80002d8 <__divsi3+0x70>
 80002d4:	030b      	lsls	r3, r1, #12
 80002d6:	1ac0      	subs	r0, r0, r3
 80002d8:	4152      	adcs	r2, r2
 80002da:	0ac3      	lsrs	r3, r0, #11
 80002dc:	428b      	cmp	r3, r1
 80002de:	d301      	bcc.n	80002e4 <__divsi3+0x7c>
 80002e0:	02cb      	lsls	r3, r1, #11
 80002e2:	1ac0      	subs	r0, r0, r3
 80002e4:	4152      	adcs	r2, r2
 80002e6:	0a83      	lsrs	r3, r0, #10
 80002e8:	428b      	cmp	r3, r1
 80002ea:	d301      	bcc.n	80002f0 <__divsi3+0x88>
 80002ec:	028b      	lsls	r3, r1, #10
 80002ee:	1ac0      	subs	r0, r0, r3
 80002f0:	4152      	adcs	r2, r2
 80002f2:	0a43      	lsrs	r3, r0, #9
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d301      	bcc.n	80002fc <__divsi3+0x94>
 80002f8:	024b      	lsls	r3, r1, #9
 80002fa:	1ac0      	subs	r0, r0, r3
 80002fc:	4152      	adcs	r2, r2
 80002fe:	0a03      	lsrs	r3, r0, #8
 8000300:	428b      	cmp	r3, r1
 8000302:	d301      	bcc.n	8000308 <__divsi3+0xa0>
 8000304:	020b      	lsls	r3, r1, #8
 8000306:	1ac0      	subs	r0, r0, r3
 8000308:	4152      	adcs	r2, r2
 800030a:	d2cd      	bcs.n	80002a8 <__divsi3+0x40>
 800030c:	09c3      	lsrs	r3, r0, #7
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xae>
 8000312:	01cb      	lsls	r3, r1, #7
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0983      	lsrs	r3, r0, #6
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xba>
 800031e:	018b      	lsls	r3, r1, #6
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	0943      	lsrs	r3, r0, #5
 8000326:	428b      	cmp	r3, r1
 8000328:	d301      	bcc.n	800032e <__divsi3+0xc6>
 800032a:	014b      	lsls	r3, r1, #5
 800032c:	1ac0      	subs	r0, r0, r3
 800032e:	4152      	adcs	r2, r2
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d301      	bcc.n	800033a <__divsi3+0xd2>
 8000336:	010b      	lsls	r3, r1, #4
 8000338:	1ac0      	subs	r0, r0, r3
 800033a:	4152      	adcs	r2, r2
 800033c:	08c3      	lsrs	r3, r0, #3
 800033e:	428b      	cmp	r3, r1
 8000340:	d301      	bcc.n	8000346 <__divsi3+0xde>
 8000342:	00cb      	lsls	r3, r1, #3
 8000344:	1ac0      	subs	r0, r0, r3
 8000346:	4152      	adcs	r2, r2
 8000348:	0883      	lsrs	r3, r0, #2
 800034a:	428b      	cmp	r3, r1
 800034c:	d301      	bcc.n	8000352 <__divsi3+0xea>
 800034e:	008b      	lsls	r3, r1, #2
 8000350:	1ac0      	subs	r0, r0, r3
 8000352:	4152      	adcs	r2, r2
 8000354:	0843      	lsrs	r3, r0, #1
 8000356:	428b      	cmp	r3, r1
 8000358:	d301      	bcc.n	800035e <__divsi3+0xf6>
 800035a:	004b      	lsls	r3, r1, #1
 800035c:	1ac0      	subs	r0, r0, r3
 800035e:	4152      	adcs	r2, r2
 8000360:	1a41      	subs	r1, r0, r1
 8000362:	d200      	bcs.n	8000366 <__divsi3+0xfe>
 8000364:	4601      	mov	r1, r0
 8000366:	4152      	adcs	r2, r2
 8000368:	4610      	mov	r0, r2
 800036a:	4770      	bx	lr
 800036c:	e05d      	b.n	800042a <__divsi3+0x1c2>
 800036e:	0fca      	lsrs	r2, r1, #31
 8000370:	d000      	beq.n	8000374 <__divsi3+0x10c>
 8000372:	4249      	negs	r1, r1
 8000374:	1003      	asrs	r3, r0, #32
 8000376:	d300      	bcc.n	800037a <__divsi3+0x112>
 8000378:	4240      	negs	r0, r0
 800037a:	4053      	eors	r3, r2
 800037c:	2200      	movs	r2, #0
 800037e:	469c      	mov	ip, r3
 8000380:	0903      	lsrs	r3, r0, #4
 8000382:	428b      	cmp	r3, r1
 8000384:	d32d      	bcc.n	80003e2 <__divsi3+0x17a>
 8000386:	0a03      	lsrs	r3, r0, #8
 8000388:	428b      	cmp	r3, r1
 800038a:	d312      	bcc.n	80003b2 <__divsi3+0x14a>
 800038c:	22fc      	movs	r2, #252	; 0xfc
 800038e:	0189      	lsls	r1, r1, #6
 8000390:	ba12      	rev	r2, r2
 8000392:	0a03      	lsrs	r3, r0, #8
 8000394:	428b      	cmp	r3, r1
 8000396:	d30c      	bcc.n	80003b2 <__divsi3+0x14a>
 8000398:	0189      	lsls	r1, r1, #6
 800039a:	1192      	asrs	r2, r2, #6
 800039c:	428b      	cmp	r3, r1
 800039e:	d308      	bcc.n	80003b2 <__divsi3+0x14a>
 80003a0:	0189      	lsls	r1, r1, #6
 80003a2:	1192      	asrs	r2, r2, #6
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d304      	bcc.n	80003b2 <__divsi3+0x14a>
 80003a8:	0189      	lsls	r1, r1, #6
 80003aa:	d03a      	beq.n	8000422 <__divsi3+0x1ba>
 80003ac:	1192      	asrs	r2, r2, #6
 80003ae:	e000      	b.n	80003b2 <__divsi3+0x14a>
 80003b0:	0989      	lsrs	r1, r1, #6
 80003b2:	09c3      	lsrs	r3, r0, #7
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x154>
 80003b8:	01cb      	lsls	r3, r1, #7
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	0983      	lsrs	r3, r0, #6
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x160>
 80003c4:	018b      	lsls	r3, r1, #6
 80003c6:	1ac0      	subs	r0, r0, r3
 80003c8:	4152      	adcs	r2, r2
 80003ca:	0943      	lsrs	r3, r0, #5
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d301      	bcc.n	80003d4 <__divsi3+0x16c>
 80003d0:	014b      	lsls	r3, r1, #5
 80003d2:	1ac0      	subs	r0, r0, r3
 80003d4:	4152      	adcs	r2, r2
 80003d6:	0903      	lsrs	r3, r0, #4
 80003d8:	428b      	cmp	r3, r1
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x178>
 80003dc:	010b      	lsls	r3, r1, #4
 80003de:	1ac0      	subs	r0, r0, r3
 80003e0:	4152      	adcs	r2, r2
 80003e2:	08c3      	lsrs	r3, r0, #3
 80003e4:	428b      	cmp	r3, r1
 80003e6:	d301      	bcc.n	80003ec <__divsi3+0x184>
 80003e8:	00cb      	lsls	r3, r1, #3
 80003ea:	1ac0      	subs	r0, r0, r3
 80003ec:	4152      	adcs	r2, r2
 80003ee:	0883      	lsrs	r3, r0, #2
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d301      	bcc.n	80003f8 <__divsi3+0x190>
 80003f4:	008b      	lsls	r3, r1, #2
 80003f6:	1ac0      	subs	r0, r0, r3
 80003f8:	4152      	adcs	r2, r2
 80003fa:	d2d9      	bcs.n	80003b0 <__divsi3+0x148>
 80003fc:	0843      	lsrs	r3, r0, #1
 80003fe:	428b      	cmp	r3, r1
 8000400:	d301      	bcc.n	8000406 <__divsi3+0x19e>
 8000402:	004b      	lsls	r3, r1, #1
 8000404:	1ac0      	subs	r0, r0, r3
 8000406:	4152      	adcs	r2, r2
 8000408:	1a41      	subs	r1, r0, r1
 800040a:	d200      	bcs.n	800040e <__divsi3+0x1a6>
 800040c:	4601      	mov	r1, r0
 800040e:	4663      	mov	r3, ip
 8000410:	4152      	adcs	r2, r2
 8000412:	105b      	asrs	r3, r3, #1
 8000414:	4610      	mov	r0, r2
 8000416:	d301      	bcc.n	800041c <__divsi3+0x1b4>
 8000418:	4240      	negs	r0, r0
 800041a:	2b00      	cmp	r3, #0
 800041c:	d500      	bpl.n	8000420 <__divsi3+0x1b8>
 800041e:	4249      	negs	r1, r1
 8000420:	4770      	bx	lr
 8000422:	4663      	mov	r3, ip
 8000424:	105b      	asrs	r3, r3, #1
 8000426:	d300      	bcc.n	800042a <__divsi3+0x1c2>
 8000428:	4240      	negs	r0, r0
 800042a:	b501      	push	{r0, lr}
 800042c:	2000      	movs	r0, #0
 800042e:	f000 f805 	bl	800043c <__aeabi_idiv0>
 8000432:	bd02      	pop	{r1, pc}

08000434 <__aeabi_idivmod>:
 8000434:	2900      	cmp	r1, #0
 8000436:	d0f8      	beq.n	800042a <__divsi3+0x1c2>
 8000438:	e716      	b.n	8000268 <__divsi3>
 800043a:	4770      	bx	lr

0800043c <__aeabi_idiv0>:
 800043c:	4770      	bx	lr
 800043e:	46c0      	nop			; (mov r8, r8)

08000440 <__aeabi_cdrcmple>:
 8000440:	4684      	mov	ip, r0
 8000442:	0010      	movs	r0, r2
 8000444:	4662      	mov	r2, ip
 8000446:	468c      	mov	ip, r1
 8000448:	0019      	movs	r1, r3
 800044a:	4663      	mov	r3, ip
 800044c:	e000      	b.n	8000450 <__aeabi_cdcmpeq>
 800044e:	46c0      	nop			; (mov r8, r8)

08000450 <__aeabi_cdcmpeq>:
 8000450:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000452:	f001 fdc9 	bl	8001fe8 <__ledf2>
 8000456:	2800      	cmp	r0, #0
 8000458:	d401      	bmi.n	800045e <__aeabi_cdcmpeq+0xe>
 800045a:	2100      	movs	r1, #0
 800045c:	42c8      	cmn	r0, r1
 800045e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000460 <__aeabi_dcmpeq>:
 8000460:	b510      	push	{r4, lr}
 8000462:	f001 fd19 	bl	8001e98 <__eqdf2>
 8000466:	4240      	negs	r0, r0
 8000468:	3001      	adds	r0, #1
 800046a:	bd10      	pop	{r4, pc}

0800046c <__aeabi_dcmplt>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 fdbb 	bl	8001fe8 <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	db01      	blt.n	800047a <__aeabi_dcmplt+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_dcmple>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f001 fdb1 	bl	8001fe8 <__ledf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dd01      	ble.n	800048e <__aeabi_dcmple+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			; (mov r8, r8)

08000494 <__aeabi_dcmpgt>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f001 fd41 	bl	8001f1c <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	dc01      	bgt.n	80004a2 <__aeabi_dcmpgt+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)

080004a8 <__aeabi_dcmpge>:
 80004a8:	b510      	push	{r4, lr}
 80004aa:	f001 fd37 	bl	8001f1c <__gedf2>
 80004ae:	2800      	cmp	r0, #0
 80004b0:	da01      	bge.n	80004b6 <__aeabi_dcmpge+0xe>
 80004b2:	2000      	movs	r0, #0
 80004b4:	bd10      	pop	{r4, pc}
 80004b6:	2001      	movs	r0, #1
 80004b8:	bd10      	pop	{r4, pc}
 80004ba:	46c0      	nop			; (mov r8, r8)

080004bc <__aeabi_cfrcmple>:
 80004bc:	4684      	mov	ip, r0
 80004be:	0008      	movs	r0, r1
 80004c0:	4661      	mov	r1, ip
 80004c2:	e7ff      	b.n	80004c4 <__aeabi_cfcmpeq>

080004c4 <__aeabi_cfcmpeq>:
 80004c4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004c6:	f000 fcb5 	bl	8000e34 <__lesf2>
 80004ca:	2800      	cmp	r0, #0
 80004cc:	d401      	bmi.n	80004d2 <__aeabi_cfcmpeq+0xe>
 80004ce:	2100      	movs	r1, #0
 80004d0:	42c8      	cmn	r0, r1
 80004d2:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004d4 <__aeabi_fcmpeq>:
 80004d4:	b510      	push	{r4, lr}
 80004d6:	f000 fc41 	bl	8000d5c <__eqsf2>
 80004da:	4240      	negs	r0, r0
 80004dc:	3001      	adds	r0, #1
 80004de:	bd10      	pop	{r4, pc}

080004e0 <__aeabi_fcmplt>:
 80004e0:	b510      	push	{r4, lr}
 80004e2:	f000 fca7 	bl	8000e34 <__lesf2>
 80004e6:	2800      	cmp	r0, #0
 80004e8:	db01      	blt.n	80004ee <__aeabi_fcmplt+0xe>
 80004ea:	2000      	movs	r0, #0
 80004ec:	bd10      	pop	{r4, pc}
 80004ee:	2001      	movs	r0, #1
 80004f0:	bd10      	pop	{r4, pc}
 80004f2:	46c0      	nop			; (mov r8, r8)

080004f4 <__aeabi_fcmple>:
 80004f4:	b510      	push	{r4, lr}
 80004f6:	f000 fc9d 	bl	8000e34 <__lesf2>
 80004fa:	2800      	cmp	r0, #0
 80004fc:	dd01      	ble.n	8000502 <__aeabi_fcmple+0xe>
 80004fe:	2000      	movs	r0, #0
 8000500:	bd10      	pop	{r4, pc}
 8000502:	2001      	movs	r0, #1
 8000504:	bd10      	pop	{r4, pc}
 8000506:	46c0      	nop			; (mov r8, r8)

08000508 <__aeabi_fcmpgt>:
 8000508:	b510      	push	{r4, lr}
 800050a:	f000 fc4d 	bl	8000da8 <__gesf2>
 800050e:	2800      	cmp	r0, #0
 8000510:	dc01      	bgt.n	8000516 <__aeabi_fcmpgt+0xe>
 8000512:	2000      	movs	r0, #0
 8000514:	bd10      	pop	{r4, pc}
 8000516:	2001      	movs	r0, #1
 8000518:	bd10      	pop	{r4, pc}
 800051a:	46c0      	nop			; (mov r8, r8)

0800051c <__aeabi_fcmpge>:
 800051c:	b510      	push	{r4, lr}
 800051e:	f000 fc43 	bl	8000da8 <__gesf2>
 8000522:	2800      	cmp	r0, #0
 8000524:	da01      	bge.n	800052a <__aeabi_fcmpge+0xe>
 8000526:	2000      	movs	r0, #0
 8000528:	bd10      	pop	{r4, pc}
 800052a:	2001      	movs	r0, #1
 800052c:	bd10      	pop	{r4, pc}
 800052e:	46c0      	nop			; (mov r8, r8)

08000530 <__aeabi_uldivmod>:
 8000530:	2b00      	cmp	r3, #0
 8000532:	d111      	bne.n	8000558 <__aeabi_uldivmod+0x28>
 8000534:	2a00      	cmp	r2, #0
 8000536:	d10f      	bne.n	8000558 <__aeabi_uldivmod+0x28>
 8000538:	2900      	cmp	r1, #0
 800053a:	d100      	bne.n	800053e <__aeabi_uldivmod+0xe>
 800053c:	2800      	cmp	r0, #0
 800053e:	d002      	beq.n	8000546 <__aeabi_uldivmod+0x16>
 8000540:	2100      	movs	r1, #0
 8000542:	43c9      	mvns	r1, r1
 8000544:	0008      	movs	r0, r1
 8000546:	b407      	push	{r0, r1, r2}
 8000548:	4802      	ldr	r0, [pc, #8]	; (8000554 <__aeabi_uldivmod+0x24>)
 800054a:	a102      	add	r1, pc, #8	; (adr r1, 8000554 <__aeabi_uldivmod+0x24>)
 800054c:	1840      	adds	r0, r0, r1
 800054e:	9002      	str	r0, [sp, #8]
 8000550:	bd03      	pop	{r0, r1, pc}
 8000552:	46c0      	nop			; (mov r8, r8)
 8000554:	fffffee9 	.word	0xfffffee9
 8000558:	b403      	push	{r0, r1}
 800055a:	4668      	mov	r0, sp
 800055c:	b501      	push	{r0, lr}
 800055e:	9802      	ldr	r0, [sp, #8]
 8000560:	f000 f876 	bl	8000650 <__udivmoddi4>
 8000564:	9b01      	ldr	r3, [sp, #4]
 8000566:	469e      	mov	lr, r3
 8000568:	b002      	add	sp, #8
 800056a:	bc0c      	pop	{r2, r3}
 800056c:	4770      	bx	lr
 800056e:	46c0      	nop			; (mov r8, r8)

08000570 <__aeabi_d2uiz>:
 8000570:	b570      	push	{r4, r5, r6, lr}
 8000572:	2200      	movs	r2, #0
 8000574:	4b0c      	ldr	r3, [pc, #48]	; (80005a8 <__aeabi_d2uiz+0x38>)
 8000576:	0004      	movs	r4, r0
 8000578:	000d      	movs	r5, r1
 800057a:	f7ff ff95 	bl	80004a8 <__aeabi_dcmpge>
 800057e:	2800      	cmp	r0, #0
 8000580:	d104      	bne.n	800058c <__aeabi_d2uiz+0x1c>
 8000582:	0020      	movs	r0, r4
 8000584:	0029      	movs	r1, r5
 8000586:	f002 fbd7 	bl	8002d38 <__aeabi_d2iz>
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	4b06      	ldr	r3, [pc, #24]	; (80005a8 <__aeabi_d2uiz+0x38>)
 800058e:	2200      	movs	r2, #0
 8000590:	0020      	movs	r0, r4
 8000592:	0029      	movs	r1, r5
 8000594:	f002 f84e 	bl	8002634 <__aeabi_dsub>
 8000598:	f002 fbce 	bl	8002d38 <__aeabi_d2iz>
 800059c:	2380      	movs	r3, #128	; 0x80
 800059e:	061b      	lsls	r3, r3, #24
 80005a0:	469c      	mov	ip, r3
 80005a2:	4460      	add	r0, ip
 80005a4:	e7f1      	b.n	800058a <__aeabi_d2uiz+0x1a>
 80005a6:	46c0      	nop			; (mov r8, r8)
 80005a8:	41e00000 	.word	0x41e00000

080005ac <__aeabi_d2lz>:
 80005ac:	b570      	push	{r4, r5, r6, lr}
 80005ae:	0005      	movs	r5, r0
 80005b0:	000c      	movs	r4, r1
 80005b2:	2200      	movs	r2, #0
 80005b4:	2300      	movs	r3, #0
 80005b6:	0028      	movs	r0, r5
 80005b8:	0021      	movs	r1, r4
 80005ba:	f7ff ff57 	bl	800046c <__aeabi_dcmplt>
 80005be:	2800      	cmp	r0, #0
 80005c0:	d108      	bne.n	80005d4 <__aeabi_d2lz+0x28>
 80005c2:	0028      	movs	r0, r5
 80005c4:	0021      	movs	r1, r4
 80005c6:	f000 f80f 	bl	80005e8 <__aeabi_d2ulz>
 80005ca:	0002      	movs	r2, r0
 80005cc:	000b      	movs	r3, r1
 80005ce:	0010      	movs	r0, r2
 80005d0:	0019      	movs	r1, r3
 80005d2:	bd70      	pop	{r4, r5, r6, pc}
 80005d4:	2380      	movs	r3, #128	; 0x80
 80005d6:	061b      	lsls	r3, r3, #24
 80005d8:	18e1      	adds	r1, r4, r3
 80005da:	0028      	movs	r0, r5
 80005dc:	f000 f804 	bl	80005e8 <__aeabi_d2ulz>
 80005e0:	2300      	movs	r3, #0
 80005e2:	4242      	negs	r2, r0
 80005e4:	418b      	sbcs	r3, r1
 80005e6:	e7f2      	b.n	80005ce <__aeabi_d2lz+0x22>

080005e8 <__aeabi_d2ulz>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	2200      	movs	r2, #0
 80005ec:	4b0b      	ldr	r3, [pc, #44]	; (800061c <__aeabi_d2ulz+0x34>)
 80005ee:	000d      	movs	r5, r1
 80005f0:	0004      	movs	r4, r0
 80005f2:	f001 fd5d 	bl	80020b0 <__aeabi_dmul>
 80005f6:	f7ff ffbb 	bl	8000570 <__aeabi_d2uiz>
 80005fa:	0006      	movs	r6, r0
 80005fc:	f002 fc02 	bl	8002e04 <__aeabi_ui2d>
 8000600:	2200      	movs	r2, #0
 8000602:	4b07      	ldr	r3, [pc, #28]	; (8000620 <__aeabi_d2ulz+0x38>)
 8000604:	f001 fd54 	bl	80020b0 <__aeabi_dmul>
 8000608:	0002      	movs	r2, r0
 800060a:	000b      	movs	r3, r1
 800060c:	0020      	movs	r0, r4
 800060e:	0029      	movs	r1, r5
 8000610:	f002 f810 	bl	8002634 <__aeabi_dsub>
 8000614:	f7ff ffac 	bl	8000570 <__aeabi_d2uiz>
 8000618:	0031      	movs	r1, r6
 800061a:	bd70      	pop	{r4, r5, r6, pc}
 800061c:	3df00000 	.word	0x3df00000
 8000620:	41f00000 	.word	0x41f00000

08000624 <__aeabi_l2d>:
 8000624:	b570      	push	{r4, r5, r6, lr}
 8000626:	0006      	movs	r6, r0
 8000628:	0008      	movs	r0, r1
 800062a:	f002 fbbb 	bl	8002da4 <__aeabi_i2d>
 800062e:	2200      	movs	r2, #0
 8000630:	4b06      	ldr	r3, [pc, #24]	; (800064c <__aeabi_l2d+0x28>)
 8000632:	f001 fd3d 	bl	80020b0 <__aeabi_dmul>
 8000636:	000d      	movs	r5, r1
 8000638:	0004      	movs	r4, r0
 800063a:	0030      	movs	r0, r6
 800063c:	f002 fbe2 	bl	8002e04 <__aeabi_ui2d>
 8000640:	002b      	movs	r3, r5
 8000642:	0022      	movs	r2, r4
 8000644:	f000 fdda 	bl	80011fc <__aeabi_dadd>
 8000648:	bd70      	pop	{r4, r5, r6, pc}
 800064a:	46c0      	nop			; (mov r8, r8)
 800064c:	41f00000 	.word	0x41f00000

08000650 <__udivmoddi4>:
 8000650:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000652:	4657      	mov	r7, sl
 8000654:	464e      	mov	r6, r9
 8000656:	4645      	mov	r5, r8
 8000658:	46de      	mov	lr, fp
 800065a:	b5e0      	push	{r5, r6, r7, lr}
 800065c:	0004      	movs	r4, r0
 800065e:	000d      	movs	r5, r1
 8000660:	4692      	mov	sl, r2
 8000662:	4699      	mov	r9, r3
 8000664:	b083      	sub	sp, #12
 8000666:	428b      	cmp	r3, r1
 8000668:	d830      	bhi.n	80006cc <__udivmoddi4+0x7c>
 800066a:	d02d      	beq.n	80006c8 <__udivmoddi4+0x78>
 800066c:	4649      	mov	r1, r9
 800066e:	4650      	mov	r0, sl
 8000670:	f002 fc92 	bl	8002f98 <__clzdi2>
 8000674:	0029      	movs	r1, r5
 8000676:	0006      	movs	r6, r0
 8000678:	0020      	movs	r0, r4
 800067a:	f002 fc8d 	bl	8002f98 <__clzdi2>
 800067e:	1a33      	subs	r3, r6, r0
 8000680:	4698      	mov	r8, r3
 8000682:	3b20      	subs	r3, #32
 8000684:	d434      	bmi.n	80006f0 <__udivmoddi4+0xa0>
 8000686:	469b      	mov	fp, r3
 8000688:	4653      	mov	r3, sl
 800068a:	465a      	mov	r2, fp
 800068c:	4093      	lsls	r3, r2
 800068e:	4642      	mov	r2, r8
 8000690:	001f      	movs	r7, r3
 8000692:	4653      	mov	r3, sl
 8000694:	4093      	lsls	r3, r2
 8000696:	001e      	movs	r6, r3
 8000698:	42af      	cmp	r7, r5
 800069a:	d83b      	bhi.n	8000714 <__udivmoddi4+0xc4>
 800069c:	42af      	cmp	r7, r5
 800069e:	d100      	bne.n	80006a2 <__udivmoddi4+0x52>
 80006a0:	e079      	b.n	8000796 <__udivmoddi4+0x146>
 80006a2:	465b      	mov	r3, fp
 80006a4:	1ba4      	subs	r4, r4, r6
 80006a6:	41bd      	sbcs	r5, r7
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	da00      	bge.n	80006ae <__udivmoddi4+0x5e>
 80006ac:	e076      	b.n	800079c <__udivmoddi4+0x14c>
 80006ae:	2200      	movs	r2, #0
 80006b0:	2300      	movs	r3, #0
 80006b2:	9200      	str	r2, [sp, #0]
 80006b4:	9301      	str	r3, [sp, #4]
 80006b6:	2301      	movs	r3, #1
 80006b8:	465a      	mov	r2, fp
 80006ba:	4093      	lsls	r3, r2
 80006bc:	9301      	str	r3, [sp, #4]
 80006be:	2301      	movs	r3, #1
 80006c0:	4642      	mov	r2, r8
 80006c2:	4093      	lsls	r3, r2
 80006c4:	9300      	str	r3, [sp, #0]
 80006c6:	e029      	b.n	800071c <__udivmoddi4+0xcc>
 80006c8:	4282      	cmp	r2, r0
 80006ca:	d9cf      	bls.n	800066c <__udivmoddi4+0x1c>
 80006cc:	2200      	movs	r2, #0
 80006ce:	2300      	movs	r3, #0
 80006d0:	9200      	str	r2, [sp, #0]
 80006d2:	9301      	str	r3, [sp, #4]
 80006d4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d001      	beq.n	80006de <__udivmoddi4+0x8e>
 80006da:	601c      	str	r4, [r3, #0]
 80006dc:	605d      	str	r5, [r3, #4]
 80006de:	9800      	ldr	r0, [sp, #0]
 80006e0:	9901      	ldr	r1, [sp, #4]
 80006e2:	b003      	add	sp, #12
 80006e4:	bcf0      	pop	{r4, r5, r6, r7}
 80006e6:	46bb      	mov	fp, r7
 80006e8:	46b2      	mov	sl, r6
 80006ea:	46a9      	mov	r9, r5
 80006ec:	46a0      	mov	r8, r4
 80006ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006f0:	4642      	mov	r2, r8
 80006f2:	469b      	mov	fp, r3
 80006f4:	2320      	movs	r3, #32
 80006f6:	1a9b      	subs	r3, r3, r2
 80006f8:	4652      	mov	r2, sl
 80006fa:	40da      	lsrs	r2, r3
 80006fc:	4641      	mov	r1, r8
 80006fe:	0013      	movs	r3, r2
 8000700:	464a      	mov	r2, r9
 8000702:	408a      	lsls	r2, r1
 8000704:	0017      	movs	r7, r2
 8000706:	4642      	mov	r2, r8
 8000708:	431f      	orrs	r7, r3
 800070a:	4653      	mov	r3, sl
 800070c:	4093      	lsls	r3, r2
 800070e:	001e      	movs	r6, r3
 8000710:	42af      	cmp	r7, r5
 8000712:	d9c3      	bls.n	800069c <__udivmoddi4+0x4c>
 8000714:	2200      	movs	r2, #0
 8000716:	2300      	movs	r3, #0
 8000718:	9200      	str	r2, [sp, #0]
 800071a:	9301      	str	r3, [sp, #4]
 800071c:	4643      	mov	r3, r8
 800071e:	2b00      	cmp	r3, #0
 8000720:	d0d8      	beq.n	80006d4 <__udivmoddi4+0x84>
 8000722:	07fb      	lsls	r3, r7, #31
 8000724:	0872      	lsrs	r2, r6, #1
 8000726:	431a      	orrs	r2, r3
 8000728:	4646      	mov	r6, r8
 800072a:	087b      	lsrs	r3, r7, #1
 800072c:	e00e      	b.n	800074c <__udivmoddi4+0xfc>
 800072e:	42ab      	cmp	r3, r5
 8000730:	d101      	bne.n	8000736 <__udivmoddi4+0xe6>
 8000732:	42a2      	cmp	r2, r4
 8000734:	d80c      	bhi.n	8000750 <__udivmoddi4+0x100>
 8000736:	1aa4      	subs	r4, r4, r2
 8000738:	419d      	sbcs	r5, r3
 800073a:	2001      	movs	r0, #1
 800073c:	1924      	adds	r4, r4, r4
 800073e:	416d      	adcs	r5, r5
 8000740:	2100      	movs	r1, #0
 8000742:	3e01      	subs	r6, #1
 8000744:	1824      	adds	r4, r4, r0
 8000746:	414d      	adcs	r5, r1
 8000748:	2e00      	cmp	r6, #0
 800074a:	d006      	beq.n	800075a <__udivmoddi4+0x10a>
 800074c:	42ab      	cmp	r3, r5
 800074e:	d9ee      	bls.n	800072e <__udivmoddi4+0xde>
 8000750:	3e01      	subs	r6, #1
 8000752:	1924      	adds	r4, r4, r4
 8000754:	416d      	adcs	r5, r5
 8000756:	2e00      	cmp	r6, #0
 8000758:	d1f8      	bne.n	800074c <__udivmoddi4+0xfc>
 800075a:	9800      	ldr	r0, [sp, #0]
 800075c:	9901      	ldr	r1, [sp, #4]
 800075e:	465b      	mov	r3, fp
 8000760:	1900      	adds	r0, r0, r4
 8000762:	4169      	adcs	r1, r5
 8000764:	2b00      	cmp	r3, #0
 8000766:	db24      	blt.n	80007b2 <__udivmoddi4+0x162>
 8000768:	002b      	movs	r3, r5
 800076a:	465a      	mov	r2, fp
 800076c:	4644      	mov	r4, r8
 800076e:	40d3      	lsrs	r3, r2
 8000770:	002a      	movs	r2, r5
 8000772:	40e2      	lsrs	r2, r4
 8000774:	001c      	movs	r4, r3
 8000776:	465b      	mov	r3, fp
 8000778:	0015      	movs	r5, r2
 800077a:	2b00      	cmp	r3, #0
 800077c:	db2a      	blt.n	80007d4 <__udivmoddi4+0x184>
 800077e:	0026      	movs	r6, r4
 8000780:	409e      	lsls	r6, r3
 8000782:	0033      	movs	r3, r6
 8000784:	0026      	movs	r6, r4
 8000786:	4647      	mov	r7, r8
 8000788:	40be      	lsls	r6, r7
 800078a:	0032      	movs	r2, r6
 800078c:	1a80      	subs	r0, r0, r2
 800078e:	4199      	sbcs	r1, r3
 8000790:	9000      	str	r0, [sp, #0]
 8000792:	9101      	str	r1, [sp, #4]
 8000794:	e79e      	b.n	80006d4 <__udivmoddi4+0x84>
 8000796:	42a3      	cmp	r3, r4
 8000798:	d8bc      	bhi.n	8000714 <__udivmoddi4+0xc4>
 800079a:	e782      	b.n	80006a2 <__udivmoddi4+0x52>
 800079c:	4642      	mov	r2, r8
 800079e:	2320      	movs	r3, #32
 80007a0:	2100      	movs	r1, #0
 80007a2:	1a9b      	subs	r3, r3, r2
 80007a4:	2200      	movs	r2, #0
 80007a6:	9100      	str	r1, [sp, #0]
 80007a8:	9201      	str	r2, [sp, #4]
 80007aa:	2201      	movs	r2, #1
 80007ac:	40da      	lsrs	r2, r3
 80007ae:	9201      	str	r2, [sp, #4]
 80007b0:	e785      	b.n	80006be <__udivmoddi4+0x6e>
 80007b2:	4642      	mov	r2, r8
 80007b4:	2320      	movs	r3, #32
 80007b6:	1a9b      	subs	r3, r3, r2
 80007b8:	002a      	movs	r2, r5
 80007ba:	4646      	mov	r6, r8
 80007bc:	409a      	lsls	r2, r3
 80007be:	0023      	movs	r3, r4
 80007c0:	40f3      	lsrs	r3, r6
 80007c2:	4644      	mov	r4, r8
 80007c4:	4313      	orrs	r3, r2
 80007c6:	002a      	movs	r2, r5
 80007c8:	40e2      	lsrs	r2, r4
 80007ca:	001c      	movs	r4, r3
 80007cc:	465b      	mov	r3, fp
 80007ce:	0015      	movs	r5, r2
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	dad4      	bge.n	800077e <__udivmoddi4+0x12e>
 80007d4:	4642      	mov	r2, r8
 80007d6:	002f      	movs	r7, r5
 80007d8:	2320      	movs	r3, #32
 80007da:	0026      	movs	r6, r4
 80007dc:	4097      	lsls	r7, r2
 80007de:	1a9b      	subs	r3, r3, r2
 80007e0:	40de      	lsrs	r6, r3
 80007e2:	003b      	movs	r3, r7
 80007e4:	4333      	orrs	r3, r6
 80007e6:	e7cd      	b.n	8000784 <__udivmoddi4+0x134>

080007e8 <__aeabi_fadd>:
 80007e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80007ea:	4647      	mov	r7, r8
 80007ec:	46ce      	mov	lr, r9
 80007ee:	024a      	lsls	r2, r1, #9
 80007f0:	0243      	lsls	r3, r0, #9
 80007f2:	0045      	lsls	r5, r0, #1
 80007f4:	0fc4      	lsrs	r4, r0, #31
 80007f6:	0a50      	lsrs	r0, r2, #9
 80007f8:	4680      	mov	r8, r0
 80007fa:	0048      	lsls	r0, r1, #1
 80007fc:	0a5b      	lsrs	r3, r3, #9
 80007fe:	0e00      	lsrs	r0, r0, #24
 8000800:	0992      	lsrs	r2, r2, #6
 8000802:	4694      	mov	ip, r2
 8000804:	b580      	push	{r7, lr}
 8000806:	001e      	movs	r6, r3
 8000808:	4681      	mov	r9, r0
 800080a:	0002      	movs	r2, r0
 800080c:	0e2d      	lsrs	r5, r5, #24
 800080e:	00df      	lsls	r7, r3, #3
 8000810:	0fc9      	lsrs	r1, r1, #31
 8000812:	428c      	cmp	r4, r1
 8000814:	d024      	beq.n	8000860 <__aeabi_fadd+0x78>
 8000816:	1a28      	subs	r0, r5, r0
 8000818:	2800      	cmp	r0, #0
 800081a:	dd0e      	ble.n	800083a <__aeabi_fadd+0x52>
 800081c:	2a00      	cmp	r2, #0
 800081e:	d13e      	bne.n	800089e <__aeabi_fadd+0xb6>
 8000820:	4662      	mov	r2, ip
 8000822:	2a00      	cmp	r2, #0
 8000824:	d100      	bne.n	8000828 <__aeabi_fadd+0x40>
 8000826:	e0fd      	b.n	8000a24 <__aeabi_fadd+0x23c>
 8000828:	1e42      	subs	r2, r0, #1
 800082a:	2801      	cmp	r0, #1
 800082c:	d100      	bne.n	8000830 <__aeabi_fadd+0x48>
 800082e:	e137      	b.n	8000aa0 <__aeabi_fadd+0x2b8>
 8000830:	28ff      	cmp	r0, #255	; 0xff
 8000832:	d100      	bne.n	8000836 <__aeabi_fadd+0x4e>
 8000834:	e0a9      	b.n	800098a <__aeabi_fadd+0x1a2>
 8000836:	0010      	movs	r0, r2
 8000838:	e039      	b.n	80008ae <__aeabi_fadd+0xc6>
 800083a:	2800      	cmp	r0, #0
 800083c:	d063      	beq.n	8000906 <__aeabi_fadd+0x11e>
 800083e:	464b      	mov	r3, r9
 8000840:	1b52      	subs	r2, r2, r5
 8000842:	2d00      	cmp	r5, #0
 8000844:	d000      	beq.n	8000848 <__aeabi_fadd+0x60>
 8000846:	e0e0      	b.n	8000a0a <__aeabi_fadd+0x222>
 8000848:	2f00      	cmp	r7, #0
 800084a:	d100      	bne.n	800084e <__aeabi_fadd+0x66>
 800084c:	e0ce      	b.n	80009ec <__aeabi_fadd+0x204>
 800084e:	1e53      	subs	r3, r2, #1
 8000850:	2a01      	cmp	r2, #1
 8000852:	d100      	bne.n	8000856 <__aeabi_fadd+0x6e>
 8000854:	e155      	b.n	8000b02 <__aeabi_fadd+0x31a>
 8000856:	2aff      	cmp	r2, #255	; 0xff
 8000858:	d100      	bne.n	800085c <__aeabi_fadd+0x74>
 800085a:	e094      	b.n	8000986 <__aeabi_fadd+0x19e>
 800085c:	001a      	movs	r2, r3
 800085e:	e0d9      	b.n	8000a14 <__aeabi_fadd+0x22c>
 8000860:	1a2a      	subs	r2, r5, r0
 8000862:	2a00      	cmp	r2, #0
 8000864:	dc00      	bgt.n	8000868 <__aeabi_fadd+0x80>
 8000866:	e099      	b.n	800099c <__aeabi_fadd+0x1b4>
 8000868:	2800      	cmp	r0, #0
 800086a:	d062      	beq.n	8000932 <__aeabi_fadd+0x14a>
 800086c:	2dff      	cmp	r5, #255	; 0xff
 800086e:	d100      	bne.n	8000872 <__aeabi_fadd+0x8a>
 8000870:	e08b      	b.n	800098a <__aeabi_fadd+0x1a2>
 8000872:	2380      	movs	r3, #128	; 0x80
 8000874:	4661      	mov	r1, ip
 8000876:	04db      	lsls	r3, r3, #19
 8000878:	4319      	orrs	r1, r3
 800087a:	468c      	mov	ip, r1
 800087c:	2a1b      	cmp	r2, #27
 800087e:	dc00      	bgt.n	8000882 <__aeabi_fadd+0x9a>
 8000880:	e0d2      	b.n	8000a28 <__aeabi_fadd+0x240>
 8000882:	2301      	movs	r3, #1
 8000884:	19db      	adds	r3, r3, r7
 8000886:	015a      	lsls	r2, r3, #5
 8000888:	d56a      	bpl.n	8000960 <__aeabi_fadd+0x178>
 800088a:	3501      	adds	r5, #1
 800088c:	2dff      	cmp	r5, #255	; 0xff
 800088e:	d05b      	beq.n	8000948 <__aeabi_fadd+0x160>
 8000890:	2201      	movs	r2, #1
 8000892:	49a3      	ldr	r1, [pc, #652]	; (8000b20 <__aeabi_fadd+0x338>)
 8000894:	401a      	ands	r2, r3
 8000896:	085b      	lsrs	r3, r3, #1
 8000898:	400b      	ands	r3, r1
 800089a:	4313      	orrs	r3, r2
 800089c:	e01c      	b.n	80008d8 <__aeabi_fadd+0xf0>
 800089e:	2dff      	cmp	r5, #255	; 0xff
 80008a0:	d100      	bne.n	80008a4 <__aeabi_fadd+0xbc>
 80008a2:	e072      	b.n	800098a <__aeabi_fadd+0x1a2>
 80008a4:	2380      	movs	r3, #128	; 0x80
 80008a6:	4662      	mov	r2, ip
 80008a8:	04db      	lsls	r3, r3, #19
 80008aa:	431a      	orrs	r2, r3
 80008ac:	4694      	mov	ip, r2
 80008ae:	281b      	cmp	r0, #27
 80008b0:	dc00      	bgt.n	80008b4 <__aeabi_fadd+0xcc>
 80008b2:	e090      	b.n	80009d6 <__aeabi_fadd+0x1ee>
 80008b4:	2301      	movs	r3, #1
 80008b6:	1afb      	subs	r3, r7, r3
 80008b8:	015a      	lsls	r2, r3, #5
 80008ba:	d551      	bpl.n	8000960 <__aeabi_fadd+0x178>
 80008bc:	019b      	lsls	r3, r3, #6
 80008be:	099e      	lsrs	r6, r3, #6
 80008c0:	0030      	movs	r0, r6
 80008c2:	f002 fb4b 	bl	8002f5c <__clzsi2>
 80008c6:	0033      	movs	r3, r6
 80008c8:	3805      	subs	r0, #5
 80008ca:	4083      	lsls	r3, r0
 80008cc:	4285      	cmp	r5, r0
 80008ce:	dc00      	bgt.n	80008d2 <__aeabi_fadd+0xea>
 80008d0:	e075      	b.n	80009be <__aeabi_fadd+0x1d6>
 80008d2:	4a94      	ldr	r2, [pc, #592]	; (8000b24 <__aeabi_fadd+0x33c>)
 80008d4:	1a2d      	subs	r5, r5, r0
 80008d6:	4013      	ands	r3, r2
 80008d8:	075a      	lsls	r2, r3, #29
 80008da:	d004      	beq.n	80008e6 <__aeabi_fadd+0xfe>
 80008dc:	220f      	movs	r2, #15
 80008de:	401a      	ands	r2, r3
 80008e0:	2a04      	cmp	r2, #4
 80008e2:	d000      	beq.n	80008e6 <__aeabi_fadd+0xfe>
 80008e4:	3304      	adds	r3, #4
 80008e6:	015a      	lsls	r2, r3, #5
 80008e8:	d53c      	bpl.n	8000964 <__aeabi_fadd+0x17c>
 80008ea:	1c68      	adds	r0, r5, #1
 80008ec:	2dfe      	cmp	r5, #254	; 0xfe
 80008ee:	d02b      	beq.n	8000948 <__aeabi_fadd+0x160>
 80008f0:	019b      	lsls	r3, r3, #6
 80008f2:	0a5e      	lsrs	r6, r3, #9
 80008f4:	b2c0      	uxtb	r0, r0
 80008f6:	05c0      	lsls	r0, r0, #23
 80008f8:	4330      	orrs	r0, r6
 80008fa:	07e4      	lsls	r4, r4, #31
 80008fc:	4320      	orrs	r0, r4
 80008fe:	bcc0      	pop	{r6, r7}
 8000900:	46b9      	mov	r9, r7
 8000902:	46b0      	mov	r8, r6
 8000904:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000906:	20fe      	movs	r0, #254	; 0xfe
 8000908:	1c6a      	adds	r2, r5, #1
 800090a:	4210      	tst	r0, r2
 800090c:	d172      	bne.n	80009f4 <__aeabi_fadd+0x20c>
 800090e:	2d00      	cmp	r5, #0
 8000910:	d000      	beq.n	8000914 <__aeabi_fadd+0x12c>
 8000912:	e0ae      	b.n	8000a72 <__aeabi_fadd+0x28a>
 8000914:	2f00      	cmp	r7, #0
 8000916:	d100      	bne.n	800091a <__aeabi_fadd+0x132>
 8000918:	e0ec      	b.n	8000af4 <__aeabi_fadd+0x30c>
 800091a:	4663      	mov	r3, ip
 800091c:	2000      	movs	r0, #0
 800091e:	2b00      	cmp	r3, #0
 8000920:	d0e9      	beq.n	80008f6 <__aeabi_fadd+0x10e>
 8000922:	1afb      	subs	r3, r7, r3
 8000924:	015a      	lsls	r2, r3, #5
 8000926:	d400      	bmi.n	800092a <__aeabi_fadd+0x142>
 8000928:	e0f3      	b.n	8000b12 <__aeabi_fadd+0x32a>
 800092a:	4663      	mov	r3, ip
 800092c:	000c      	movs	r4, r1
 800092e:	1bdb      	subs	r3, r3, r7
 8000930:	e7d2      	b.n	80008d8 <__aeabi_fadd+0xf0>
 8000932:	4661      	mov	r1, ip
 8000934:	2900      	cmp	r1, #0
 8000936:	d05b      	beq.n	80009f0 <__aeabi_fadd+0x208>
 8000938:	1e51      	subs	r1, r2, #1
 800093a:	2a01      	cmp	r2, #1
 800093c:	d100      	bne.n	8000940 <__aeabi_fadd+0x158>
 800093e:	e0a7      	b.n	8000a90 <__aeabi_fadd+0x2a8>
 8000940:	2aff      	cmp	r2, #255	; 0xff
 8000942:	d022      	beq.n	800098a <__aeabi_fadd+0x1a2>
 8000944:	000a      	movs	r2, r1
 8000946:	e799      	b.n	800087c <__aeabi_fadd+0x94>
 8000948:	20ff      	movs	r0, #255	; 0xff
 800094a:	2600      	movs	r6, #0
 800094c:	e7d3      	b.n	80008f6 <__aeabi_fadd+0x10e>
 800094e:	21fe      	movs	r1, #254	; 0xfe
 8000950:	1c6a      	adds	r2, r5, #1
 8000952:	4211      	tst	r1, r2
 8000954:	d073      	beq.n	8000a3e <__aeabi_fadd+0x256>
 8000956:	2aff      	cmp	r2, #255	; 0xff
 8000958:	d0f6      	beq.n	8000948 <__aeabi_fadd+0x160>
 800095a:	0015      	movs	r5, r2
 800095c:	4467      	add	r7, ip
 800095e:	087b      	lsrs	r3, r7, #1
 8000960:	075a      	lsls	r2, r3, #29
 8000962:	d1bb      	bne.n	80008dc <__aeabi_fadd+0xf4>
 8000964:	08db      	lsrs	r3, r3, #3
 8000966:	2dff      	cmp	r5, #255	; 0xff
 8000968:	d00f      	beq.n	800098a <__aeabi_fadd+0x1a2>
 800096a:	025b      	lsls	r3, r3, #9
 800096c:	0a5e      	lsrs	r6, r3, #9
 800096e:	b2e8      	uxtb	r0, r5
 8000970:	e7c1      	b.n	80008f6 <__aeabi_fadd+0x10e>
 8000972:	4662      	mov	r2, ip
 8000974:	2a00      	cmp	r2, #0
 8000976:	d008      	beq.n	800098a <__aeabi_fadd+0x1a2>
 8000978:	2280      	movs	r2, #128	; 0x80
 800097a:	03d2      	lsls	r2, r2, #15
 800097c:	4213      	tst	r3, r2
 800097e:	d004      	beq.n	800098a <__aeabi_fadd+0x1a2>
 8000980:	4640      	mov	r0, r8
 8000982:	4210      	tst	r0, r2
 8000984:	d101      	bne.n	800098a <__aeabi_fadd+0x1a2>
 8000986:	000c      	movs	r4, r1
 8000988:	4643      	mov	r3, r8
 800098a:	2b00      	cmp	r3, #0
 800098c:	d0dc      	beq.n	8000948 <__aeabi_fadd+0x160>
 800098e:	2680      	movs	r6, #128	; 0x80
 8000990:	03f6      	lsls	r6, r6, #15
 8000992:	431e      	orrs	r6, r3
 8000994:	0276      	lsls	r6, r6, #9
 8000996:	20ff      	movs	r0, #255	; 0xff
 8000998:	0a76      	lsrs	r6, r6, #9
 800099a:	e7ac      	b.n	80008f6 <__aeabi_fadd+0x10e>
 800099c:	2a00      	cmp	r2, #0
 800099e:	d0d6      	beq.n	800094e <__aeabi_fadd+0x166>
 80009a0:	1b42      	subs	r2, r0, r5
 80009a2:	2d00      	cmp	r5, #0
 80009a4:	d05c      	beq.n	8000a60 <__aeabi_fadd+0x278>
 80009a6:	28ff      	cmp	r0, #255	; 0xff
 80009a8:	d0ee      	beq.n	8000988 <__aeabi_fadd+0x1a0>
 80009aa:	2380      	movs	r3, #128	; 0x80
 80009ac:	04db      	lsls	r3, r3, #19
 80009ae:	431f      	orrs	r7, r3
 80009b0:	2a1b      	cmp	r2, #27
 80009b2:	dc00      	bgt.n	80009b6 <__aeabi_fadd+0x1ce>
 80009b4:	e082      	b.n	8000abc <__aeabi_fadd+0x2d4>
 80009b6:	2301      	movs	r3, #1
 80009b8:	464d      	mov	r5, r9
 80009ba:	4463      	add	r3, ip
 80009bc:	e763      	b.n	8000886 <__aeabi_fadd+0x9e>
 80009be:	2220      	movs	r2, #32
 80009c0:	1b40      	subs	r0, r0, r5
 80009c2:	3001      	adds	r0, #1
 80009c4:	1a12      	subs	r2, r2, r0
 80009c6:	0019      	movs	r1, r3
 80009c8:	4093      	lsls	r3, r2
 80009ca:	40c1      	lsrs	r1, r0
 80009cc:	1e5a      	subs	r2, r3, #1
 80009ce:	4193      	sbcs	r3, r2
 80009d0:	2500      	movs	r5, #0
 80009d2:	430b      	orrs	r3, r1
 80009d4:	e780      	b.n	80008d8 <__aeabi_fadd+0xf0>
 80009d6:	2320      	movs	r3, #32
 80009d8:	4661      	mov	r1, ip
 80009da:	1a1b      	subs	r3, r3, r0
 80009dc:	4099      	lsls	r1, r3
 80009de:	4662      	mov	r2, ip
 80009e0:	000b      	movs	r3, r1
 80009e2:	40c2      	lsrs	r2, r0
 80009e4:	1e59      	subs	r1, r3, #1
 80009e6:	418b      	sbcs	r3, r1
 80009e8:	4313      	orrs	r3, r2
 80009ea:	e764      	b.n	80008b6 <__aeabi_fadd+0xce>
 80009ec:	000c      	movs	r4, r1
 80009ee:	4643      	mov	r3, r8
 80009f0:	0015      	movs	r5, r2
 80009f2:	e7b8      	b.n	8000966 <__aeabi_fadd+0x17e>
 80009f4:	4663      	mov	r3, ip
 80009f6:	1afe      	subs	r6, r7, r3
 80009f8:	0173      	lsls	r3, r6, #5
 80009fa:	d445      	bmi.n	8000a88 <__aeabi_fadd+0x2a0>
 80009fc:	2e00      	cmp	r6, #0
 80009fe:	d000      	beq.n	8000a02 <__aeabi_fadd+0x21a>
 8000a00:	e75e      	b.n	80008c0 <__aeabi_fadd+0xd8>
 8000a02:	2400      	movs	r4, #0
 8000a04:	2000      	movs	r0, #0
 8000a06:	2600      	movs	r6, #0
 8000a08:	e775      	b.n	80008f6 <__aeabi_fadd+0x10e>
 8000a0a:	2bff      	cmp	r3, #255	; 0xff
 8000a0c:	d0bb      	beq.n	8000986 <__aeabi_fadd+0x19e>
 8000a0e:	2380      	movs	r3, #128	; 0x80
 8000a10:	04db      	lsls	r3, r3, #19
 8000a12:	431f      	orrs	r7, r3
 8000a14:	2a1b      	cmp	r2, #27
 8000a16:	dd47      	ble.n	8000aa8 <__aeabi_fadd+0x2c0>
 8000a18:	2301      	movs	r3, #1
 8000a1a:	4662      	mov	r2, ip
 8000a1c:	000c      	movs	r4, r1
 8000a1e:	464d      	mov	r5, r9
 8000a20:	1ad3      	subs	r3, r2, r3
 8000a22:	e749      	b.n	80008b8 <__aeabi_fadd+0xd0>
 8000a24:	0005      	movs	r5, r0
 8000a26:	e79e      	b.n	8000966 <__aeabi_fadd+0x17e>
 8000a28:	4661      	mov	r1, ip
 8000a2a:	2320      	movs	r3, #32
 8000a2c:	40d1      	lsrs	r1, r2
 8000a2e:	1a9b      	subs	r3, r3, r2
 8000a30:	4662      	mov	r2, ip
 8000a32:	409a      	lsls	r2, r3
 8000a34:	0013      	movs	r3, r2
 8000a36:	1e5a      	subs	r2, r3, #1
 8000a38:	4193      	sbcs	r3, r2
 8000a3a:	430b      	orrs	r3, r1
 8000a3c:	e722      	b.n	8000884 <__aeabi_fadd+0x9c>
 8000a3e:	2d00      	cmp	r5, #0
 8000a40:	d146      	bne.n	8000ad0 <__aeabi_fadd+0x2e8>
 8000a42:	2f00      	cmp	r7, #0
 8000a44:	d062      	beq.n	8000b0c <__aeabi_fadd+0x324>
 8000a46:	4663      	mov	r3, ip
 8000a48:	2000      	movs	r0, #0
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d100      	bne.n	8000a50 <__aeabi_fadd+0x268>
 8000a4e:	e752      	b.n	80008f6 <__aeabi_fadd+0x10e>
 8000a50:	003b      	movs	r3, r7
 8000a52:	4463      	add	r3, ip
 8000a54:	015a      	lsls	r2, r3, #5
 8000a56:	d583      	bpl.n	8000960 <__aeabi_fadd+0x178>
 8000a58:	4a32      	ldr	r2, [pc, #200]	; (8000b24 <__aeabi_fadd+0x33c>)
 8000a5a:	3501      	adds	r5, #1
 8000a5c:	4013      	ands	r3, r2
 8000a5e:	e77f      	b.n	8000960 <__aeabi_fadd+0x178>
 8000a60:	2f00      	cmp	r7, #0
 8000a62:	d0c4      	beq.n	80009ee <__aeabi_fadd+0x206>
 8000a64:	1e53      	subs	r3, r2, #1
 8000a66:	2a01      	cmp	r2, #1
 8000a68:	d012      	beq.n	8000a90 <__aeabi_fadd+0x2a8>
 8000a6a:	2aff      	cmp	r2, #255	; 0xff
 8000a6c:	d08c      	beq.n	8000988 <__aeabi_fadd+0x1a0>
 8000a6e:	001a      	movs	r2, r3
 8000a70:	e79e      	b.n	80009b0 <__aeabi_fadd+0x1c8>
 8000a72:	2f00      	cmp	r7, #0
 8000a74:	d000      	beq.n	8000a78 <__aeabi_fadd+0x290>
 8000a76:	e77c      	b.n	8000972 <__aeabi_fadd+0x18a>
 8000a78:	4663      	mov	r3, ip
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d183      	bne.n	8000986 <__aeabi_fadd+0x19e>
 8000a7e:	2680      	movs	r6, #128	; 0x80
 8000a80:	2400      	movs	r4, #0
 8000a82:	20ff      	movs	r0, #255	; 0xff
 8000a84:	03f6      	lsls	r6, r6, #15
 8000a86:	e736      	b.n	80008f6 <__aeabi_fadd+0x10e>
 8000a88:	4663      	mov	r3, ip
 8000a8a:	000c      	movs	r4, r1
 8000a8c:	1bde      	subs	r6, r3, r7
 8000a8e:	e717      	b.n	80008c0 <__aeabi_fadd+0xd8>
 8000a90:	003b      	movs	r3, r7
 8000a92:	4463      	add	r3, ip
 8000a94:	2501      	movs	r5, #1
 8000a96:	015a      	lsls	r2, r3, #5
 8000a98:	d400      	bmi.n	8000a9c <__aeabi_fadd+0x2b4>
 8000a9a:	e761      	b.n	8000960 <__aeabi_fadd+0x178>
 8000a9c:	2502      	movs	r5, #2
 8000a9e:	e6f7      	b.n	8000890 <__aeabi_fadd+0xa8>
 8000aa0:	4663      	mov	r3, ip
 8000aa2:	2501      	movs	r5, #1
 8000aa4:	1afb      	subs	r3, r7, r3
 8000aa6:	e707      	b.n	80008b8 <__aeabi_fadd+0xd0>
 8000aa8:	2320      	movs	r3, #32
 8000aaa:	1a9b      	subs	r3, r3, r2
 8000aac:	0038      	movs	r0, r7
 8000aae:	409f      	lsls	r7, r3
 8000ab0:	003b      	movs	r3, r7
 8000ab2:	40d0      	lsrs	r0, r2
 8000ab4:	1e5a      	subs	r2, r3, #1
 8000ab6:	4193      	sbcs	r3, r2
 8000ab8:	4303      	orrs	r3, r0
 8000aba:	e7ae      	b.n	8000a1a <__aeabi_fadd+0x232>
 8000abc:	2320      	movs	r3, #32
 8000abe:	1a9b      	subs	r3, r3, r2
 8000ac0:	0039      	movs	r1, r7
 8000ac2:	409f      	lsls	r7, r3
 8000ac4:	003b      	movs	r3, r7
 8000ac6:	40d1      	lsrs	r1, r2
 8000ac8:	1e5a      	subs	r2, r3, #1
 8000aca:	4193      	sbcs	r3, r2
 8000acc:	430b      	orrs	r3, r1
 8000ace:	e773      	b.n	80009b8 <__aeabi_fadd+0x1d0>
 8000ad0:	2f00      	cmp	r7, #0
 8000ad2:	d100      	bne.n	8000ad6 <__aeabi_fadd+0x2ee>
 8000ad4:	e758      	b.n	8000988 <__aeabi_fadd+0x1a0>
 8000ad6:	4662      	mov	r2, ip
 8000ad8:	2a00      	cmp	r2, #0
 8000ada:	d100      	bne.n	8000ade <__aeabi_fadd+0x2f6>
 8000adc:	e755      	b.n	800098a <__aeabi_fadd+0x1a2>
 8000ade:	2280      	movs	r2, #128	; 0x80
 8000ae0:	03d2      	lsls	r2, r2, #15
 8000ae2:	4213      	tst	r3, r2
 8000ae4:	d100      	bne.n	8000ae8 <__aeabi_fadd+0x300>
 8000ae6:	e750      	b.n	800098a <__aeabi_fadd+0x1a2>
 8000ae8:	4641      	mov	r1, r8
 8000aea:	4211      	tst	r1, r2
 8000aec:	d000      	beq.n	8000af0 <__aeabi_fadd+0x308>
 8000aee:	e74c      	b.n	800098a <__aeabi_fadd+0x1a2>
 8000af0:	4643      	mov	r3, r8
 8000af2:	e74a      	b.n	800098a <__aeabi_fadd+0x1a2>
 8000af4:	4663      	mov	r3, ip
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d083      	beq.n	8000a02 <__aeabi_fadd+0x21a>
 8000afa:	000c      	movs	r4, r1
 8000afc:	4646      	mov	r6, r8
 8000afe:	2000      	movs	r0, #0
 8000b00:	e6f9      	b.n	80008f6 <__aeabi_fadd+0x10e>
 8000b02:	4663      	mov	r3, ip
 8000b04:	000c      	movs	r4, r1
 8000b06:	1bdb      	subs	r3, r3, r7
 8000b08:	3501      	adds	r5, #1
 8000b0a:	e6d5      	b.n	80008b8 <__aeabi_fadd+0xd0>
 8000b0c:	4646      	mov	r6, r8
 8000b0e:	2000      	movs	r0, #0
 8000b10:	e6f1      	b.n	80008f6 <__aeabi_fadd+0x10e>
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d000      	beq.n	8000b18 <__aeabi_fadd+0x330>
 8000b16:	e723      	b.n	8000960 <__aeabi_fadd+0x178>
 8000b18:	2400      	movs	r4, #0
 8000b1a:	2600      	movs	r6, #0
 8000b1c:	e6eb      	b.n	80008f6 <__aeabi_fadd+0x10e>
 8000b1e:	46c0      	nop			; (mov r8, r8)
 8000b20:	7dffffff 	.word	0x7dffffff
 8000b24:	fbffffff 	.word	0xfbffffff

08000b28 <__aeabi_fdiv>:
 8000b28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b2a:	464f      	mov	r7, r9
 8000b2c:	4646      	mov	r6, r8
 8000b2e:	46d6      	mov	lr, sl
 8000b30:	0245      	lsls	r5, r0, #9
 8000b32:	b5c0      	push	{r6, r7, lr}
 8000b34:	0047      	lsls	r7, r0, #1
 8000b36:	1c0c      	adds	r4, r1, #0
 8000b38:	0a6d      	lsrs	r5, r5, #9
 8000b3a:	0e3f      	lsrs	r7, r7, #24
 8000b3c:	0fc6      	lsrs	r6, r0, #31
 8000b3e:	2f00      	cmp	r7, #0
 8000b40:	d100      	bne.n	8000b44 <__aeabi_fdiv+0x1c>
 8000b42:	e06f      	b.n	8000c24 <__aeabi_fdiv+0xfc>
 8000b44:	2fff      	cmp	r7, #255	; 0xff
 8000b46:	d100      	bne.n	8000b4a <__aeabi_fdiv+0x22>
 8000b48:	e074      	b.n	8000c34 <__aeabi_fdiv+0x10c>
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	2280      	movs	r2, #128	; 0x80
 8000b4e:	4699      	mov	r9, r3
 8000b50:	469a      	mov	sl, r3
 8000b52:	00ed      	lsls	r5, r5, #3
 8000b54:	04d2      	lsls	r2, r2, #19
 8000b56:	4315      	orrs	r5, r2
 8000b58:	3f7f      	subs	r7, #127	; 0x7f
 8000b5a:	0263      	lsls	r3, r4, #9
 8000b5c:	0a5b      	lsrs	r3, r3, #9
 8000b5e:	4698      	mov	r8, r3
 8000b60:	0063      	lsls	r3, r4, #1
 8000b62:	0e1b      	lsrs	r3, r3, #24
 8000b64:	0fe4      	lsrs	r4, r4, #31
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d04d      	beq.n	8000c06 <__aeabi_fdiv+0xde>
 8000b6a:	2bff      	cmp	r3, #255	; 0xff
 8000b6c:	d045      	beq.n	8000bfa <__aeabi_fdiv+0xd2>
 8000b6e:	4642      	mov	r2, r8
 8000b70:	2180      	movs	r1, #128	; 0x80
 8000b72:	00d2      	lsls	r2, r2, #3
 8000b74:	04c9      	lsls	r1, r1, #19
 8000b76:	4311      	orrs	r1, r2
 8000b78:	4688      	mov	r8, r1
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	3b7f      	subs	r3, #127	; 0x7f
 8000b7e:	0031      	movs	r1, r6
 8000b80:	1aff      	subs	r7, r7, r3
 8000b82:	464b      	mov	r3, r9
 8000b84:	4061      	eors	r1, r4
 8000b86:	b2c9      	uxtb	r1, r1
 8000b88:	2b0f      	cmp	r3, #15
 8000b8a:	d900      	bls.n	8000b8e <__aeabi_fdiv+0x66>
 8000b8c:	e0b8      	b.n	8000d00 <__aeabi_fdiv+0x1d8>
 8000b8e:	4870      	ldr	r0, [pc, #448]	; (8000d50 <__aeabi_fdiv+0x228>)
 8000b90:	009b      	lsls	r3, r3, #2
 8000b92:	58c3      	ldr	r3, [r0, r3]
 8000b94:	469f      	mov	pc, r3
 8000b96:	2300      	movs	r3, #0
 8000b98:	4698      	mov	r8, r3
 8000b9a:	0026      	movs	r6, r4
 8000b9c:	4645      	mov	r5, r8
 8000b9e:	4692      	mov	sl, r2
 8000ba0:	4653      	mov	r3, sl
 8000ba2:	2b02      	cmp	r3, #2
 8000ba4:	d100      	bne.n	8000ba8 <__aeabi_fdiv+0x80>
 8000ba6:	e08d      	b.n	8000cc4 <__aeabi_fdiv+0x19c>
 8000ba8:	2b03      	cmp	r3, #3
 8000baa:	d100      	bne.n	8000bae <__aeabi_fdiv+0x86>
 8000bac:	e0a1      	b.n	8000cf2 <__aeabi_fdiv+0x1ca>
 8000bae:	2b01      	cmp	r3, #1
 8000bb0:	d018      	beq.n	8000be4 <__aeabi_fdiv+0xbc>
 8000bb2:	003b      	movs	r3, r7
 8000bb4:	337f      	adds	r3, #127	; 0x7f
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	dd6d      	ble.n	8000c96 <__aeabi_fdiv+0x16e>
 8000bba:	076a      	lsls	r2, r5, #29
 8000bbc:	d004      	beq.n	8000bc8 <__aeabi_fdiv+0xa0>
 8000bbe:	220f      	movs	r2, #15
 8000bc0:	402a      	ands	r2, r5
 8000bc2:	2a04      	cmp	r2, #4
 8000bc4:	d000      	beq.n	8000bc8 <__aeabi_fdiv+0xa0>
 8000bc6:	3504      	adds	r5, #4
 8000bc8:	012a      	lsls	r2, r5, #4
 8000bca:	d503      	bpl.n	8000bd4 <__aeabi_fdiv+0xac>
 8000bcc:	4b61      	ldr	r3, [pc, #388]	; (8000d54 <__aeabi_fdiv+0x22c>)
 8000bce:	401d      	ands	r5, r3
 8000bd0:	003b      	movs	r3, r7
 8000bd2:	3380      	adds	r3, #128	; 0x80
 8000bd4:	2bfe      	cmp	r3, #254	; 0xfe
 8000bd6:	dd00      	ble.n	8000bda <__aeabi_fdiv+0xb2>
 8000bd8:	e074      	b.n	8000cc4 <__aeabi_fdiv+0x19c>
 8000bda:	01aa      	lsls	r2, r5, #6
 8000bdc:	0a52      	lsrs	r2, r2, #9
 8000bde:	b2d8      	uxtb	r0, r3
 8000be0:	e002      	b.n	8000be8 <__aeabi_fdiv+0xc0>
 8000be2:	000e      	movs	r6, r1
 8000be4:	2000      	movs	r0, #0
 8000be6:	2200      	movs	r2, #0
 8000be8:	05c0      	lsls	r0, r0, #23
 8000bea:	07f6      	lsls	r6, r6, #31
 8000bec:	4310      	orrs	r0, r2
 8000bee:	4330      	orrs	r0, r6
 8000bf0:	bce0      	pop	{r5, r6, r7}
 8000bf2:	46ba      	mov	sl, r7
 8000bf4:	46b1      	mov	r9, r6
 8000bf6:	46a8      	mov	r8, r5
 8000bf8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000bfa:	4643      	mov	r3, r8
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d13f      	bne.n	8000c80 <__aeabi_fdiv+0x158>
 8000c00:	2202      	movs	r2, #2
 8000c02:	3fff      	subs	r7, #255	; 0xff
 8000c04:	e003      	b.n	8000c0e <__aeabi_fdiv+0xe6>
 8000c06:	4643      	mov	r3, r8
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d12d      	bne.n	8000c68 <__aeabi_fdiv+0x140>
 8000c0c:	2201      	movs	r2, #1
 8000c0e:	0031      	movs	r1, r6
 8000c10:	464b      	mov	r3, r9
 8000c12:	4061      	eors	r1, r4
 8000c14:	b2c9      	uxtb	r1, r1
 8000c16:	4313      	orrs	r3, r2
 8000c18:	2b0f      	cmp	r3, #15
 8000c1a:	d838      	bhi.n	8000c8e <__aeabi_fdiv+0x166>
 8000c1c:	484e      	ldr	r0, [pc, #312]	; (8000d58 <__aeabi_fdiv+0x230>)
 8000c1e:	009b      	lsls	r3, r3, #2
 8000c20:	58c3      	ldr	r3, [r0, r3]
 8000c22:	469f      	mov	pc, r3
 8000c24:	2d00      	cmp	r5, #0
 8000c26:	d113      	bne.n	8000c50 <__aeabi_fdiv+0x128>
 8000c28:	2304      	movs	r3, #4
 8000c2a:	4699      	mov	r9, r3
 8000c2c:	3b03      	subs	r3, #3
 8000c2e:	2700      	movs	r7, #0
 8000c30:	469a      	mov	sl, r3
 8000c32:	e792      	b.n	8000b5a <__aeabi_fdiv+0x32>
 8000c34:	2d00      	cmp	r5, #0
 8000c36:	d105      	bne.n	8000c44 <__aeabi_fdiv+0x11c>
 8000c38:	2308      	movs	r3, #8
 8000c3a:	4699      	mov	r9, r3
 8000c3c:	3b06      	subs	r3, #6
 8000c3e:	27ff      	movs	r7, #255	; 0xff
 8000c40:	469a      	mov	sl, r3
 8000c42:	e78a      	b.n	8000b5a <__aeabi_fdiv+0x32>
 8000c44:	230c      	movs	r3, #12
 8000c46:	4699      	mov	r9, r3
 8000c48:	3b09      	subs	r3, #9
 8000c4a:	27ff      	movs	r7, #255	; 0xff
 8000c4c:	469a      	mov	sl, r3
 8000c4e:	e784      	b.n	8000b5a <__aeabi_fdiv+0x32>
 8000c50:	0028      	movs	r0, r5
 8000c52:	f002 f983 	bl	8002f5c <__clzsi2>
 8000c56:	2776      	movs	r7, #118	; 0x76
 8000c58:	1f43      	subs	r3, r0, #5
 8000c5a:	409d      	lsls	r5, r3
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	427f      	negs	r7, r7
 8000c60:	4699      	mov	r9, r3
 8000c62:	469a      	mov	sl, r3
 8000c64:	1a3f      	subs	r7, r7, r0
 8000c66:	e778      	b.n	8000b5a <__aeabi_fdiv+0x32>
 8000c68:	4640      	mov	r0, r8
 8000c6a:	f002 f977 	bl	8002f5c <__clzsi2>
 8000c6e:	4642      	mov	r2, r8
 8000c70:	1f43      	subs	r3, r0, #5
 8000c72:	409a      	lsls	r2, r3
 8000c74:	2376      	movs	r3, #118	; 0x76
 8000c76:	425b      	negs	r3, r3
 8000c78:	4690      	mov	r8, r2
 8000c7a:	1a1b      	subs	r3, r3, r0
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	e77e      	b.n	8000b7e <__aeabi_fdiv+0x56>
 8000c80:	2303      	movs	r3, #3
 8000c82:	464a      	mov	r2, r9
 8000c84:	431a      	orrs	r2, r3
 8000c86:	4691      	mov	r9, r2
 8000c88:	33fc      	adds	r3, #252	; 0xfc
 8000c8a:	2203      	movs	r2, #3
 8000c8c:	e777      	b.n	8000b7e <__aeabi_fdiv+0x56>
 8000c8e:	000e      	movs	r6, r1
 8000c90:	20ff      	movs	r0, #255	; 0xff
 8000c92:	2200      	movs	r2, #0
 8000c94:	e7a8      	b.n	8000be8 <__aeabi_fdiv+0xc0>
 8000c96:	2201      	movs	r2, #1
 8000c98:	1ad3      	subs	r3, r2, r3
 8000c9a:	2b1b      	cmp	r3, #27
 8000c9c:	dca2      	bgt.n	8000be4 <__aeabi_fdiv+0xbc>
 8000c9e:	379e      	adds	r7, #158	; 0x9e
 8000ca0:	002a      	movs	r2, r5
 8000ca2:	40bd      	lsls	r5, r7
 8000ca4:	40da      	lsrs	r2, r3
 8000ca6:	1e6b      	subs	r3, r5, #1
 8000ca8:	419d      	sbcs	r5, r3
 8000caa:	4315      	orrs	r5, r2
 8000cac:	076a      	lsls	r2, r5, #29
 8000cae:	d004      	beq.n	8000cba <__aeabi_fdiv+0x192>
 8000cb0:	220f      	movs	r2, #15
 8000cb2:	402a      	ands	r2, r5
 8000cb4:	2a04      	cmp	r2, #4
 8000cb6:	d000      	beq.n	8000cba <__aeabi_fdiv+0x192>
 8000cb8:	3504      	adds	r5, #4
 8000cba:	016a      	lsls	r2, r5, #5
 8000cbc:	d544      	bpl.n	8000d48 <__aeabi_fdiv+0x220>
 8000cbe:	2001      	movs	r0, #1
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	e791      	b.n	8000be8 <__aeabi_fdiv+0xc0>
 8000cc4:	20ff      	movs	r0, #255	; 0xff
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	e78e      	b.n	8000be8 <__aeabi_fdiv+0xc0>
 8000cca:	2280      	movs	r2, #128	; 0x80
 8000ccc:	2600      	movs	r6, #0
 8000cce:	20ff      	movs	r0, #255	; 0xff
 8000cd0:	03d2      	lsls	r2, r2, #15
 8000cd2:	e789      	b.n	8000be8 <__aeabi_fdiv+0xc0>
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	4698      	mov	r8, r3
 8000cd8:	2280      	movs	r2, #128	; 0x80
 8000cda:	03d2      	lsls	r2, r2, #15
 8000cdc:	4215      	tst	r5, r2
 8000cde:	d008      	beq.n	8000cf2 <__aeabi_fdiv+0x1ca>
 8000ce0:	4643      	mov	r3, r8
 8000ce2:	4213      	tst	r3, r2
 8000ce4:	d105      	bne.n	8000cf2 <__aeabi_fdiv+0x1ca>
 8000ce6:	431a      	orrs	r2, r3
 8000ce8:	0252      	lsls	r2, r2, #9
 8000cea:	0026      	movs	r6, r4
 8000cec:	20ff      	movs	r0, #255	; 0xff
 8000cee:	0a52      	lsrs	r2, r2, #9
 8000cf0:	e77a      	b.n	8000be8 <__aeabi_fdiv+0xc0>
 8000cf2:	2280      	movs	r2, #128	; 0x80
 8000cf4:	03d2      	lsls	r2, r2, #15
 8000cf6:	432a      	orrs	r2, r5
 8000cf8:	0252      	lsls	r2, r2, #9
 8000cfa:	20ff      	movs	r0, #255	; 0xff
 8000cfc:	0a52      	lsrs	r2, r2, #9
 8000cfe:	e773      	b.n	8000be8 <__aeabi_fdiv+0xc0>
 8000d00:	4642      	mov	r2, r8
 8000d02:	016b      	lsls	r3, r5, #5
 8000d04:	0155      	lsls	r5, r2, #5
 8000d06:	42ab      	cmp	r3, r5
 8000d08:	d21a      	bcs.n	8000d40 <__aeabi_fdiv+0x218>
 8000d0a:	201b      	movs	r0, #27
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	3f01      	subs	r7, #1
 8000d10:	2601      	movs	r6, #1
 8000d12:	001c      	movs	r4, r3
 8000d14:	0052      	lsls	r2, r2, #1
 8000d16:	005b      	lsls	r3, r3, #1
 8000d18:	2c00      	cmp	r4, #0
 8000d1a:	db01      	blt.n	8000d20 <__aeabi_fdiv+0x1f8>
 8000d1c:	429d      	cmp	r5, r3
 8000d1e:	d801      	bhi.n	8000d24 <__aeabi_fdiv+0x1fc>
 8000d20:	1b5b      	subs	r3, r3, r5
 8000d22:	4332      	orrs	r2, r6
 8000d24:	3801      	subs	r0, #1
 8000d26:	2800      	cmp	r0, #0
 8000d28:	d1f3      	bne.n	8000d12 <__aeabi_fdiv+0x1ea>
 8000d2a:	1e58      	subs	r0, r3, #1
 8000d2c:	4183      	sbcs	r3, r0
 8000d2e:	4313      	orrs	r3, r2
 8000d30:	001d      	movs	r5, r3
 8000d32:	003b      	movs	r3, r7
 8000d34:	337f      	adds	r3, #127	; 0x7f
 8000d36:	000e      	movs	r6, r1
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	dd00      	ble.n	8000d3e <__aeabi_fdiv+0x216>
 8000d3c:	e73d      	b.n	8000bba <__aeabi_fdiv+0x92>
 8000d3e:	e7aa      	b.n	8000c96 <__aeabi_fdiv+0x16e>
 8000d40:	201a      	movs	r0, #26
 8000d42:	2201      	movs	r2, #1
 8000d44:	1b5b      	subs	r3, r3, r5
 8000d46:	e7e3      	b.n	8000d10 <__aeabi_fdiv+0x1e8>
 8000d48:	01aa      	lsls	r2, r5, #6
 8000d4a:	2000      	movs	r0, #0
 8000d4c:	0a52      	lsrs	r2, r2, #9
 8000d4e:	e74b      	b.n	8000be8 <__aeabi_fdiv+0xc0>
 8000d50:	0800f3ac 	.word	0x0800f3ac
 8000d54:	f7ffffff 	.word	0xf7ffffff
 8000d58:	0800f3ec 	.word	0x0800f3ec

08000d5c <__eqsf2>:
 8000d5c:	b570      	push	{r4, r5, r6, lr}
 8000d5e:	0042      	lsls	r2, r0, #1
 8000d60:	0245      	lsls	r5, r0, #9
 8000d62:	024e      	lsls	r6, r1, #9
 8000d64:	004c      	lsls	r4, r1, #1
 8000d66:	0fc3      	lsrs	r3, r0, #31
 8000d68:	0a6d      	lsrs	r5, r5, #9
 8000d6a:	2001      	movs	r0, #1
 8000d6c:	0e12      	lsrs	r2, r2, #24
 8000d6e:	0a76      	lsrs	r6, r6, #9
 8000d70:	0e24      	lsrs	r4, r4, #24
 8000d72:	0fc9      	lsrs	r1, r1, #31
 8000d74:	2aff      	cmp	r2, #255	; 0xff
 8000d76:	d006      	beq.n	8000d86 <__eqsf2+0x2a>
 8000d78:	2cff      	cmp	r4, #255	; 0xff
 8000d7a:	d003      	beq.n	8000d84 <__eqsf2+0x28>
 8000d7c:	42a2      	cmp	r2, r4
 8000d7e:	d101      	bne.n	8000d84 <__eqsf2+0x28>
 8000d80:	42b5      	cmp	r5, r6
 8000d82:	d006      	beq.n	8000d92 <__eqsf2+0x36>
 8000d84:	bd70      	pop	{r4, r5, r6, pc}
 8000d86:	2d00      	cmp	r5, #0
 8000d88:	d1fc      	bne.n	8000d84 <__eqsf2+0x28>
 8000d8a:	2cff      	cmp	r4, #255	; 0xff
 8000d8c:	d1fa      	bne.n	8000d84 <__eqsf2+0x28>
 8000d8e:	2e00      	cmp	r6, #0
 8000d90:	d1f8      	bne.n	8000d84 <__eqsf2+0x28>
 8000d92:	428b      	cmp	r3, r1
 8000d94:	d006      	beq.n	8000da4 <__eqsf2+0x48>
 8000d96:	2001      	movs	r0, #1
 8000d98:	2a00      	cmp	r2, #0
 8000d9a:	d1f3      	bne.n	8000d84 <__eqsf2+0x28>
 8000d9c:	0028      	movs	r0, r5
 8000d9e:	1e43      	subs	r3, r0, #1
 8000da0:	4198      	sbcs	r0, r3
 8000da2:	e7ef      	b.n	8000d84 <__eqsf2+0x28>
 8000da4:	2000      	movs	r0, #0
 8000da6:	e7ed      	b.n	8000d84 <__eqsf2+0x28>

08000da8 <__gesf2>:
 8000da8:	b570      	push	{r4, r5, r6, lr}
 8000daa:	0042      	lsls	r2, r0, #1
 8000dac:	0245      	lsls	r5, r0, #9
 8000dae:	024e      	lsls	r6, r1, #9
 8000db0:	004c      	lsls	r4, r1, #1
 8000db2:	0fc3      	lsrs	r3, r0, #31
 8000db4:	0a6d      	lsrs	r5, r5, #9
 8000db6:	0e12      	lsrs	r2, r2, #24
 8000db8:	0a76      	lsrs	r6, r6, #9
 8000dba:	0e24      	lsrs	r4, r4, #24
 8000dbc:	0fc8      	lsrs	r0, r1, #31
 8000dbe:	2aff      	cmp	r2, #255	; 0xff
 8000dc0:	d01b      	beq.n	8000dfa <__gesf2+0x52>
 8000dc2:	2cff      	cmp	r4, #255	; 0xff
 8000dc4:	d00e      	beq.n	8000de4 <__gesf2+0x3c>
 8000dc6:	2a00      	cmp	r2, #0
 8000dc8:	d11b      	bne.n	8000e02 <__gesf2+0x5a>
 8000dca:	2c00      	cmp	r4, #0
 8000dcc:	d101      	bne.n	8000dd2 <__gesf2+0x2a>
 8000dce:	2e00      	cmp	r6, #0
 8000dd0:	d01c      	beq.n	8000e0c <__gesf2+0x64>
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	d00c      	beq.n	8000df0 <__gesf2+0x48>
 8000dd6:	4283      	cmp	r3, r0
 8000dd8:	d01c      	beq.n	8000e14 <__gesf2+0x6c>
 8000dda:	2102      	movs	r1, #2
 8000ddc:	1e58      	subs	r0, r3, #1
 8000dde:	4008      	ands	r0, r1
 8000de0:	3801      	subs	r0, #1
 8000de2:	bd70      	pop	{r4, r5, r6, pc}
 8000de4:	2e00      	cmp	r6, #0
 8000de6:	d122      	bne.n	8000e2e <__gesf2+0x86>
 8000de8:	2a00      	cmp	r2, #0
 8000dea:	d1f4      	bne.n	8000dd6 <__gesf2+0x2e>
 8000dec:	2d00      	cmp	r5, #0
 8000dee:	d1f2      	bne.n	8000dd6 <__gesf2+0x2e>
 8000df0:	2800      	cmp	r0, #0
 8000df2:	d1f6      	bne.n	8000de2 <__gesf2+0x3a>
 8000df4:	2001      	movs	r0, #1
 8000df6:	4240      	negs	r0, r0
 8000df8:	e7f3      	b.n	8000de2 <__gesf2+0x3a>
 8000dfa:	2d00      	cmp	r5, #0
 8000dfc:	d117      	bne.n	8000e2e <__gesf2+0x86>
 8000dfe:	2cff      	cmp	r4, #255	; 0xff
 8000e00:	d0f0      	beq.n	8000de4 <__gesf2+0x3c>
 8000e02:	2c00      	cmp	r4, #0
 8000e04:	d1e7      	bne.n	8000dd6 <__gesf2+0x2e>
 8000e06:	2e00      	cmp	r6, #0
 8000e08:	d1e5      	bne.n	8000dd6 <__gesf2+0x2e>
 8000e0a:	e7e6      	b.n	8000dda <__gesf2+0x32>
 8000e0c:	2000      	movs	r0, #0
 8000e0e:	2d00      	cmp	r5, #0
 8000e10:	d0e7      	beq.n	8000de2 <__gesf2+0x3a>
 8000e12:	e7e2      	b.n	8000dda <__gesf2+0x32>
 8000e14:	42a2      	cmp	r2, r4
 8000e16:	dc05      	bgt.n	8000e24 <__gesf2+0x7c>
 8000e18:	dbea      	blt.n	8000df0 <__gesf2+0x48>
 8000e1a:	42b5      	cmp	r5, r6
 8000e1c:	d802      	bhi.n	8000e24 <__gesf2+0x7c>
 8000e1e:	d3e7      	bcc.n	8000df0 <__gesf2+0x48>
 8000e20:	2000      	movs	r0, #0
 8000e22:	e7de      	b.n	8000de2 <__gesf2+0x3a>
 8000e24:	4243      	negs	r3, r0
 8000e26:	4158      	adcs	r0, r3
 8000e28:	0040      	lsls	r0, r0, #1
 8000e2a:	3801      	subs	r0, #1
 8000e2c:	e7d9      	b.n	8000de2 <__gesf2+0x3a>
 8000e2e:	2002      	movs	r0, #2
 8000e30:	4240      	negs	r0, r0
 8000e32:	e7d6      	b.n	8000de2 <__gesf2+0x3a>

08000e34 <__lesf2>:
 8000e34:	b570      	push	{r4, r5, r6, lr}
 8000e36:	0042      	lsls	r2, r0, #1
 8000e38:	0245      	lsls	r5, r0, #9
 8000e3a:	024e      	lsls	r6, r1, #9
 8000e3c:	004c      	lsls	r4, r1, #1
 8000e3e:	0fc3      	lsrs	r3, r0, #31
 8000e40:	0a6d      	lsrs	r5, r5, #9
 8000e42:	0e12      	lsrs	r2, r2, #24
 8000e44:	0a76      	lsrs	r6, r6, #9
 8000e46:	0e24      	lsrs	r4, r4, #24
 8000e48:	0fc8      	lsrs	r0, r1, #31
 8000e4a:	2aff      	cmp	r2, #255	; 0xff
 8000e4c:	d00b      	beq.n	8000e66 <__lesf2+0x32>
 8000e4e:	2cff      	cmp	r4, #255	; 0xff
 8000e50:	d00d      	beq.n	8000e6e <__lesf2+0x3a>
 8000e52:	2a00      	cmp	r2, #0
 8000e54:	d11f      	bne.n	8000e96 <__lesf2+0x62>
 8000e56:	2c00      	cmp	r4, #0
 8000e58:	d116      	bne.n	8000e88 <__lesf2+0x54>
 8000e5a:	2e00      	cmp	r6, #0
 8000e5c:	d114      	bne.n	8000e88 <__lesf2+0x54>
 8000e5e:	2000      	movs	r0, #0
 8000e60:	2d00      	cmp	r5, #0
 8000e62:	d010      	beq.n	8000e86 <__lesf2+0x52>
 8000e64:	e009      	b.n	8000e7a <__lesf2+0x46>
 8000e66:	2d00      	cmp	r5, #0
 8000e68:	d10c      	bne.n	8000e84 <__lesf2+0x50>
 8000e6a:	2cff      	cmp	r4, #255	; 0xff
 8000e6c:	d113      	bne.n	8000e96 <__lesf2+0x62>
 8000e6e:	2e00      	cmp	r6, #0
 8000e70:	d108      	bne.n	8000e84 <__lesf2+0x50>
 8000e72:	2a00      	cmp	r2, #0
 8000e74:	d008      	beq.n	8000e88 <__lesf2+0x54>
 8000e76:	4283      	cmp	r3, r0
 8000e78:	d012      	beq.n	8000ea0 <__lesf2+0x6c>
 8000e7a:	2102      	movs	r1, #2
 8000e7c:	1e58      	subs	r0, r3, #1
 8000e7e:	4008      	ands	r0, r1
 8000e80:	3801      	subs	r0, #1
 8000e82:	e000      	b.n	8000e86 <__lesf2+0x52>
 8000e84:	2002      	movs	r0, #2
 8000e86:	bd70      	pop	{r4, r5, r6, pc}
 8000e88:	2d00      	cmp	r5, #0
 8000e8a:	d1f4      	bne.n	8000e76 <__lesf2+0x42>
 8000e8c:	2800      	cmp	r0, #0
 8000e8e:	d1fa      	bne.n	8000e86 <__lesf2+0x52>
 8000e90:	2001      	movs	r0, #1
 8000e92:	4240      	negs	r0, r0
 8000e94:	e7f7      	b.n	8000e86 <__lesf2+0x52>
 8000e96:	2c00      	cmp	r4, #0
 8000e98:	d1ed      	bne.n	8000e76 <__lesf2+0x42>
 8000e9a:	2e00      	cmp	r6, #0
 8000e9c:	d1eb      	bne.n	8000e76 <__lesf2+0x42>
 8000e9e:	e7ec      	b.n	8000e7a <__lesf2+0x46>
 8000ea0:	42a2      	cmp	r2, r4
 8000ea2:	dc05      	bgt.n	8000eb0 <__lesf2+0x7c>
 8000ea4:	dbf2      	blt.n	8000e8c <__lesf2+0x58>
 8000ea6:	42b5      	cmp	r5, r6
 8000ea8:	d802      	bhi.n	8000eb0 <__lesf2+0x7c>
 8000eaa:	d3ef      	bcc.n	8000e8c <__lesf2+0x58>
 8000eac:	2000      	movs	r0, #0
 8000eae:	e7ea      	b.n	8000e86 <__lesf2+0x52>
 8000eb0:	4243      	negs	r3, r0
 8000eb2:	4158      	adcs	r0, r3
 8000eb4:	0040      	lsls	r0, r0, #1
 8000eb6:	3801      	subs	r0, #1
 8000eb8:	e7e5      	b.n	8000e86 <__lesf2+0x52>
 8000eba:	46c0      	nop			; (mov r8, r8)

08000ebc <__aeabi_fmul>:
 8000ebc:	0243      	lsls	r3, r0, #9
 8000ebe:	0a5b      	lsrs	r3, r3, #9
 8000ec0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ec2:	464f      	mov	r7, r9
 8000ec4:	4646      	mov	r6, r8
 8000ec6:	4699      	mov	r9, r3
 8000ec8:	46d6      	mov	lr, sl
 8000eca:	0fc3      	lsrs	r3, r0, #31
 8000ecc:	0045      	lsls	r5, r0, #1
 8000ece:	4698      	mov	r8, r3
 8000ed0:	b5c0      	push	{r6, r7, lr}
 8000ed2:	464b      	mov	r3, r9
 8000ed4:	1c0f      	adds	r7, r1, #0
 8000ed6:	0e2d      	lsrs	r5, r5, #24
 8000ed8:	d100      	bne.n	8000edc <__aeabi_fmul+0x20>
 8000eda:	e0cb      	b.n	8001074 <__aeabi_fmul+0x1b8>
 8000edc:	2dff      	cmp	r5, #255	; 0xff
 8000ede:	d100      	bne.n	8000ee2 <__aeabi_fmul+0x26>
 8000ee0:	e0cf      	b.n	8001082 <__aeabi_fmul+0x1c6>
 8000ee2:	2280      	movs	r2, #128	; 0x80
 8000ee4:	00db      	lsls	r3, r3, #3
 8000ee6:	04d2      	lsls	r2, r2, #19
 8000ee8:	431a      	orrs	r2, r3
 8000eea:	2300      	movs	r3, #0
 8000eec:	4691      	mov	r9, r2
 8000eee:	2600      	movs	r6, #0
 8000ef0:	469a      	mov	sl, r3
 8000ef2:	3d7f      	subs	r5, #127	; 0x7f
 8000ef4:	027c      	lsls	r4, r7, #9
 8000ef6:	007b      	lsls	r3, r7, #1
 8000ef8:	0a64      	lsrs	r4, r4, #9
 8000efa:	0e1b      	lsrs	r3, r3, #24
 8000efc:	0fff      	lsrs	r7, r7, #31
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d100      	bne.n	8000f04 <__aeabi_fmul+0x48>
 8000f02:	e0a9      	b.n	8001058 <__aeabi_fmul+0x19c>
 8000f04:	2bff      	cmp	r3, #255	; 0xff
 8000f06:	d011      	beq.n	8000f2c <__aeabi_fmul+0x70>
 8000f08:	2280      	movs	r2, #128	; 0x80
 8000f0a:	00e4      	lsls	r4, r4, #3
 8000f0c:	04d2      	lsls	r2, r2, #19
 8000f0e:	4314      	orrs	r4, r2
 8000f10:	4642      	mov	r2, r8
 8000f12:	3b7f      	subs	r3, #127	; 0x7f
 8000f14:	195b      	adds	r3, r3, r5
 8000f16:	407a      	eors	r2, r7
 8000f18:	2000      	movs	r0, #0
 8000f1a:	b2d2      	uxtb	r2, r2
 8000f1c:	1c5d      	adds	r5, r3, #1
 8000f1e:	2e0a      	cmp	r6, #10
 8000f20:	dd13      	ble.n	8000f4a <__aeabi_fmul+0x8e>
 8000f22:	003a      	movs	r2, r7
 8000f24:	2e0b      	cmp	r6, #11
 8000f26:	d047      	beq.n	8000fb8 <__aeabi_fmul+0xfc>
 8000f28:	4647      	mov	r7, r8
 8000f2a:	e03f      	b.n	8000fac <__aeabi_fmul+0xf0>
 8000f2c:	002b      	movs	r3, r5
 8000f2e:	33ff      	adds	r3, #255	; 0xff
 8000f30:	2c00      	cmp	r4, #0
 8000f32:	d11e      	bne.n	8000f72 <__aeabi_fmul+0xb6>
 8000f34:	2202      	movs	r2, #2
 8000f36:	4316      	orrs	r6, r2
 8000f38:	4642      	mov	r2, r8
 8000f3a:	3501      	adds	r5, #1
 8000f3c:	407a      	eors	r2, r7
 8000f3e:	b2d2      	uxtb	r2, r2
 8000f40:	35ff      	adds	r5, #255	; 0xff
 8000f42:	2e0a      	cmp	r6, #10
 8000f44:	dd00      	ble.n	8000f48 <__aeabi_fmul+0x8c>
 8000f46:	e0e4      	b.n	8001112 <__aeabi_fmul+0x256>
 8000f48:	2002      	movs	r0, #2
 8000f4a:	2e02      	cmp	r6, #2
 8000f4c:	dc1c      	bgt.n	8000f88 <__aeabi_fmul+0xcc>
 8000f4e:	3e01      	subs	r6, #1
 8000f50:	2e01      	cmp	r6, #1
 8000f52:	d842      	bhi.n	8000fda <__aeabi_fmul+0x11e>
 8000f54:	2802      	cmp	r0, #2
 8000f56:	d03d      	beq.n	8000fd4 <__aeabi_fmul+0x118>
 8000f58:	2801      	cmp	r0, #1
 8000f5a:	d166      	bne.n	800102a <__aeabi_fmul+0x16e>
 8000f5c:	2000      	movs	r0, #0
 8000f5e:	2100      	movs	r1, #0
 8000f60:	05c0      	lsls	r0, r0, #23
 8000f62:	4308      	orrs	r0, r1
 8000f64:	07d2      	lsls	r2, r2, #31
 8000f66:	4310      	orrs	r0, r2
 8000f68:	bce0      	pop	{r5, r6, r7}
 8000f6a:	46ba      	mov	sl, r7
 8000f6c:	46b1      	mov	r9, r6
 8000f6e:	46a8      	mov	r8, r5
 8000f70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f72:	2203      	movs	r2, #3
 8000f74:	4316      	orrs	r6, r2
 8000f76:	4642      	mov	r2, r8
 8000f78:	3501      	adds	r5, #1
 8000f7a:	407a      	eors	r2, r7
 8000f7c:	b2d2      	uxtb	r2, r2
 8000f7e:	35ff      	adds	r5, #255	; 0xff
 8000f80:	2e0a      	cmp	r6, #10
 8000f82:	dd00      	ble.n	8000f86 <__aeabi_fmul+0xca>
 8000f84:	e0e4      	b.n	8001150 <__aeabi_fmul+0x294>
 8000f86:	2003      	movs	r0, #3
 8000f88:	2101      	movs	r1, #1
 8000f8a:	40b1      	lsls	r1, r6
 8000f8c:	26a6      	movs	r6, #166	; 0xa6
 8000f8e:	00f6      	lsls	r6, r6, #3
 8000f90:	4231      	tst	r1, r6
 8000f92:	d10a      	bne.n	8000faa <__aeabi_fmul+0xee>
 8000f94:	2690      	movs	r6, #144	; 0x90
 8000f96:	00b6      	lsls	r6, r6, #2
 8000f98:	4231      	tst	r1, r6
 8000f9a:	d116      	bne.n	8000fca <__aeabi_fmul+0x10e>
 8000f9c:	3eb9      	subs	r6, #185	; 0xb9
 8000f9e:	3eff      	subs	r6, #255	; 0xff
 8000fa0:	420e      	tst	r6, r1
 8000fa2:	d01a      	beq.n	8000fda <__aeabi_fmul+0x11e>
 8000fa4:	46a1      	mov	r9, r4
 8000fa6:	4682      	mov	sl, r0
 8000fa8:	e000      	b.n	8000fac <__aeabi_fmul+0xf0>
 8000faa:	0017      	movs	r7, r2
 8000fac:	4653      	mov	r3, sl
 8000fae:	003a      	movs	r2, r7
 8000fb0:	2b02      	cmp	r3, #2
 8000fb2:	d00f      	beq.n	8000fd4 <__aeabi_fmul+0x118>
 8000fb4:	464c      	mov	r4, r9
 8000fb6:	4650      	mov	r0, sl
 8000fb8:	2803      	cmp	r0, #3
 8000fba:	d1cd      	bne.n	8000f58 <__aeabi_fmul+0x9c>
 8000fbc:	2180      	movs	r1, #128	; 0x80
 8000fbe:	03c9      	lsls	r1, r1, #15
 8000fc0:	4321      	orrs	r1, r4
 8000fc2:	0249      	lsls	r1, r1, #9
 8000fc4:	20ff      	movs	r0, #255	; 0xff
 8000fc6:	0a49      	lsrs	r1, r1, #9
 8000fc8:	e7ca      	b.n	8000f60 <__aeabi_fmul+0xa4>
 8000fca:	2180      	movs	r1, #128	; 0x80
 8000fcc:	2200      	movs	r2, #0
 8000fce:	20ff      	movs	r0, #255	; 0xff
 8000fd0:	03c9      	lsls	r1, r1, #15
 8000fd2:	e7c5      	b.n	8000f60 <__aeabi_fmul+0xa4>
 8000fd4:	20ff      	movs	r0, #255	; 0xff
 8000fd6:	2100      	movs	r1, #0
 8000fd8:	e7c2      	b.n	8000f60 <__aeabi_fmul+0xa4>
 8000fda:	0c20      	lsrs	r0, r4, #16
 8000fdc:	4649      	mov	r1, r9
 8000fde:	0424      	lsls	r4, r4, #16
 8000fe0:	0c24      	lsrs	r4, r4, #16
 8000fe2:	0027      	movs	r7, r4
 8000fe4:	0c0e      	lsrs	r6, r1, #16
 8000fe6:	0409      	lsls	r1, r1, #16
 8000fe8:	0c09      	lsrs	r1, r1, #16
 8000fea:	4374      	muls	r4, r6
 8000fec:	434f      	muls	r7, r1
 8000fee:	4346      	muls	r6, r0
 8000ff0:	4348      	muls	r0, r1
 8000ff2:	0c39      	lsrs	r1, r7, #16
 8000ff4:	1900      	adds	r0, r0, r4
 8000ff6:	1809      	adds	r1, r1, r0
 8000ff8:	428c      	cmp	r4, r1
 8000ffa:	d903      	bls.n	8001004 <__aeabi_fmul+0x148>
 8000ffc:	2080      	movs	r0, #128	; 0x80
 8000ffe:	0240      	lsls	r0, r0, #9
 8001000:	4684      	mov	ip, r0
 8001002:	4466      	add	r6, ip
 8001004:	043f      	lsls	r7, r7, #16
 8001006:	0408      	lsls	r0, r1, #16
 8001008:	0c3f      	lsrs	r7, r7, #16
 800100a:	19c0      	adds	r0, r0, r7
 800100c:	0184      	lsls	r4, r0, #6
 800100e:	1e67      	subs	r7, r4, #1
 8001010:	41bc      	sbcs	r4, r7
 8001012:	0c09      	lsrs	r1, r1, #16
 8001014:	0e80      	lsrs	r0, r0, #26
 8001016:	1989      	adds	r1, r1, r6
 8001018:	4304      	orrs	r4, r0
 800101a:	0189      	lsls	r1, r1, #6
 800101c:	430c      	orrs	r4, r1
 800101e:	0109      	lsls	r1, r1, #4
 8001020:	d571      	bpl.n	8001106 <__aeabi_fmul+0x24a>
 8001022:	2301      	movs	r3, #1
 8001024:	0861      	lsrs	r1, r4, #1
 8001026:	401c      	ands	r4, r3
 8001028:	430c      	orrs	r4, r1
 800102a:	002b      	movs	r3, r5
 800102c:	337f      	adds	r3, #127	; 0x7f
 800102e:	2b00      	cmp	r3, #0
 8001030:	dd51      	ble.n	80010d6 <__aeabi_fmul+0x21a>
 8001032:	0761      	lsls	r1, r4, #29
 8001034:	d004      	beq.n	8001040 <__aeabi_fmul+0x184>
 8001036:	210f      	movs	r1, #15
 8001038:	4021      	ands	r1, r4
 800103a:	2904      	cmp	r1, #4
 800103c:	d000      	beq.n	8001040 <__aeabi_fmul+0x184>
 800103e:	3404      	adds	r4, #4
 8001040:	0121      	lsls	r1, r4, #4
 8001042:	d503      	bpl.n	800104c <__aeabi_fmul+0x190>
 8001044:	4b43      	ldr	r3, [pc, #268]	; (8001154 <__aeabi_fmul+0x298>)
 8001046:	401c      	ands	r4, r3
 8001048:	002b      	movs	r3, r5
 800104a:	3380      	adds	r3, #128	; 0x80
 800104c:	2bfe      	cmp	r3, #254	; 0xfe
 800104e:	dcc1      	bgt.n	8000fd4 <__aeabi_fmul+0x118>
 8001050:	01a1      	lsls	r1, r4, #6
 8001052:	0a49      	lsrs	r1, r1, #9
 8001054:	b2d8      	uxtb	r0, r3
 8001056:	e783      	b.n	8000f60 <__aeabi_fmul+0xa4>
 8001058:	2c00      	cmp	r4, #0
 800105a:	d12c      	bne.n	80010b6 <__aeabi_fmul+0x1fa>
 800105c:	2301      	movs	r3, #1
 800105e:	4642      	mov	r2, r8
 8001060:	431e      	orrs	r6, r3
 8001062:	002b      	movs	r3, r5
 8001064:	407a      	eors	r2, r7
 8001066:	2001      	movs	r0, #1
 8001068:	b2d2      	uxtb	r2, r2
 800106a:	1c5d      	adds	r5, r3, #1
 800106c:	2e0a      	cmp	r6, #10
 800106e:	dd00      	ble.n	8001072 <__aeabi_fmul+0x1b6>
 8001070:	e757      	b.n	8000f22 <__aeabi_fmul+0x66>
 8001072:	e76a      	b.n	8000f4a <__aeabi_fmul+0x8e>
 8001074:	2b00      	cmp	r3, #0
 8001076:	d110      	bne.n	800109a <__aeabi_fmul+0x1de>
 8001078:	2301      	movs	r3, #1
 800107a:	2604      	movs	r6, #4
 800107c:	2500      	movs	r5, #0
 800107e:	469a      	mov	sl, r3
 8001080:	e738      	b.n	8000ef4 <__aeabi_fmul+0x38>
 8001082:	2b00      	cmp	r3, #0
 8001084:	d104      	bne.n	8001090 <__aeabi_fmul+0x1d4>
 8001086:	2302      	movs	r3, #2
 8001088:	2608      	movs	r6, #8
 800108a:	25ff      	movs	r5, #255	; 0xff
 800108c:	469a      	mov	sl, r3
 800108e:	e731      	b.n	8000ef4 <__aeabi_fmul+0x38>
 8001090:	2303      	movs	r3, #3
 8001092:	260c      	movs	r6, #12
 8001094:	25ff      	movs	r5, #255	; 0xff
 8001096:	469a      	mov	sl, r3
 8001098:	e72c      	b.n	8000ef4 <__aeabi_fmul+0x38>
 800109a:	4648      	mov	r0, r9
 800109c:	f001 ff5e 	bl	8002f5c <__clzsi2>
 80010a0:	464a      	mov	r2, r9
 80010a2:	1f43      	subs	r3, r0, #5
 80010a4:	2576      	movs	r5, #118	; 0x76
 80010a6:	409a      	lsls	r2, r3
 80010a8:	2300      	movs	r3, #0
 80010aa:	426d      	negs	r5, r5
 80010ac:	4691      	mov	r9, r2
 80010ae:	2600      	movs	r6, #0
 80010b0:	469a      	mov	sl, r3
 80010b2:	1a2d      	subs	r5, r5, r0
 80010b4:	e71e      	b.n	8000ef4 <__aeabi_fmul+0x38>
 80010b6:	0020      	movs	r0, r4
 80010b8:	f001 ff50 	bl	8002f5c <__clzsi2>
 80010bc:	4642      	mov	r2, r8
 80010be:	1f43      	subs	r3, r0, #5
 80010c0:	409c      	lsls	r4, r3
 80010c2:	1a2b      	subs	r3, r5, r0
 80010c4:	3b76      	subs	r3, #118	; 0x76
 80010c6:	407a      	eors	r2, r7
 80010c8:	2000      	movs	r0, #0
 80010ca:	b2d2      	uxtb	r2, r2
 80010cc:	1c5d      	adds	r5, r3, #1
 80010ce:	2e0a      	cmp	r6, #10
 80010d0:	dd00      	ble.n	80010d4 <__aeabi_fmul+0x218>
 80010d2:	e726      	b.n	8000f22 <__aeabi_fmul+0x66>
 80010d4:	e739      	b.n	8000f4a <__aeabi_fmul+0x8e>
 80010d6:	2101      	movs	r1, #1
 80010d8:	1acb      	subs	r3, r1, r3
 80010da:	2b1b      	cmp	r3, #27
 80010dc:	dd00      	ble.n	80010e0 <__aeabi_fmul+0x224>
 80010de:	e73d      	b.n	8000f5c <__aeabi_fmul+0xa0>
 80010e0:	359e      	adds	r5, #158	; 0x9e
 80010e2:	0021      	movs	r1, r4
 80010e4:	40ac      	lsls	r4, r5
 80010e6:	40d9      	lsrs	r1, r3
 80010e8:	1e63      	subs	r3, r4, #1
 80010ea:	419c      	sbcs	r4, r3
 80010ec:	4321      	orrs	r1, r4
 80010ee:	074b      	lsls	r3, r1, #29
 80010f0:	d004      	beq.n	80010fc <__aeabi_fmul+0x240>
 80010f2:	230f      	movs	r3, #15
 80010f4:	400b      	ands	r3, r1
 80010f6:	2b04      	cmp	r3, #4
 80010f8:	d000      	beq.n	80010fc <__aeabi_fmul+0x240>
 80010fa:	3104      	adds	r1, #4
 80010fc:	014b      	lsls	r3, r1, #5
 80010fe:	d504      	bpl.n	800110a <__aeabi_fmul+0x24e>
 8001100:	2001      	movs	r0, #1
 8001102:	2100      	movs	r1, #0
 8001104:	e72c      	b.n	8000f60 <__aeabi_fmul+0xa4>
 8001106:	001d      	movs	r5, r3
 8001108:	e78f      	b.n	800102a <__aeabi_fmul+0x16e>
 800110a:	0189      	lsls	r1, r1, #6
 800110c:	2000      	movs	r0, #0
 800110e:	0a49      	lsrs	r1, r1, #9
 8001110:	e726      	b.n	8000f60 <__aeabi_fmul+0xa4>
 8001112:	2302      	movs	r3, #2
 8001114:	2e0f      	cmp	r6, #15
 8001116:	d10c      	bne.n	8001132 <__aeabi_fmul+0x276>
 8001118:	2180      	movs	r1, #128	; 0x80
 800111a:	464b      	mov	r3, r9
 800111c:	03c9      	lsls	r1, r1, #15
 800111e:	420b      	tst	r3, r1
 8001120:	d00d      	beq.n	800113e <__aeabi_fmul+0x282>
 8001122:	420c      	tst	r4, r1
 8001124:	d10b      	bne.n	800113e <__aeabi_fmul+0x282>
 8001126:	4321      	orrs	r1, r4
 8001128:	0249      	lsls	r1, r1, #9
 800112a:	003a      	movs	r2, r7
 800112c:	20ff      	movs	r0, #255	; 0xff
 800112e:	0a49      	lsrs	r1, r1, #9
 8001130:	e716      	b.n	8000f60 <__aeabi_fmul+0xa4>
 8001132:	2e0b      	cmp	r6, #11
 8001134:	d000      	beq.n	8001138 <__aeabi_fmul+0x27c>
 8001136:	e6f7      	b.n	8000f28 <__aeabi_fmul+0x6c>
 8001138:	46a1      	mov	r9, r4
 800113a:	469a      	mov	sl, r3
 800113c:	e736      	b.n	8000fac <__aeabi_fmul+0xf0>
 800113e:	2180      	movs	r1, #128	; 0x80
 8001140:	464b      	mov	r3, r9
 8001142:	03c9      	lsls	r1, r1, #15
 8001144:	4319      	orrs	r1, r3
 8001146:	0249      	lsls	r1, r1, #9
 8001148:	4642      	mov	r2, r8
 800114a:	20ff      	movs	r0, #255	; 0xff
 800114c:	0a49      	lsrs	r1, r1, #9
 800114e:	e707      	b.n	8000f60 <__aeabi_fmul+0xa4>
 8001150:	2303      	movs	r3, #3
 8001152:	e7df      	b.n	8001114 <__aeabi_fmul+0x258>
 8001154:	f7ffffff 	.word	0xf7ffffff

08001158 <__aeabi_i2f>:
 8001158:	b570      	push	{r4, r5, r6, lr}
 800115a:	2800      	cmp	r0, #0
 800115c:	d013      	beq.n	8001186 <__aeabi_i2f+0x2e>
 800115e:	17c3      	asrs	r3, r0, #31
 8001160:	18c5      	adds	r5, r0, r3
 8001162:	405d      	eors	r5, r3
 8001164:	0fc4      	lsrs	r4, r0, #31
 8001166:	0028      	movs	r0, r5
 8001168:	f001 fef8 	bl	8002f5c <__clzsi2>
 800116c:	239e      	movs	r3, #158	; 0x9e
 800116e:	0001      	movs	r1, r0
 8001170:	1a1b      	subs	r3, r3, r0
 8001172:	2b96      	cmp	r3, #150	; 0x96
 8001174:	dc0f      	bgt.n	8001196 <__aeabi_i2f+0x3e>
 8001176:	2808      	cmp	r0, #8
 8001178:	d031      	beq.n	80011de <__aeabi_i2f+0x86>
 800117a:	3908      	subs	r1, #8
 800117c:	408d      	lsls	r5, r1
 800117e:	026d      	lsls	r5, r5, #9
 8001180:	0a6d      	lsrs	r5, r5, #9
 8001182:	b2d8      	uxtb	r0, r3
 8001184:	e002      	b.n	800118c <__aeabi_i2f+0x34>
 8001186:	2400      	movs	r4, #0
 8001188:	2000      	movs	r0, #0
 800118a:	2500      	movs	r5, #0
 800118c:	05c0      	lsls	r0, r0, #23
 800118e:	4328      	orrs	r0, r5
 8001190:	07e4      	lsls	r4, r4, #31
 8001192:	4320      	orrs	r0, r4
 8001194:	bd70      	pop	{r4, r5, r6, pc}
 8001196:	2b99      	cmp	r3, #153	; 0x99
 8001198:	dd0c      	ble.n	80011b4 <__aeabi_i2f+0x5c>
 800119a:	2205      	movs	r2, #5
 800119c:	1a12      	subs	r2, r2, r0
 800119e:	0028      	movs	r0, r5
 80011a0:	40d0      	lsrs	r0, r2
 80011a2:	0002      	movs	r2, r0
 80011a4:	0008      	movs	r0, r1
 80011a6:	301b      	adds	r0, #27
 80011a8:	4085      	lsls	r5, r0
 80011aa:	0028      	movs	r0, r5
 80011ac:	1e45      	subs	r5, r0, #1
 80011ae:	41a8      	sbcs	r0, r5
 80011b0:	4302      	orrs	r2, r0
 80011b2:	0015      	movs	r5, r2
 80011b4:	2905      	cmp	r1, #5
 80011b6:	dc16      	bgt.n	80011e6 <__aeabi_i2f+0x8e>
 80011b8:	002a      	movs	r2, r5
 80011ba:	480f      	ldr	r0, [pc, #60]	; (80011f8 <__aeabi_i2f+0xa0>)
 80011bc:	4002      	ands	r2, r0
 80011be:	076e      	lsls	r6, r5, #29
 80011c0:	d009      	beq.n	80011d6 <__aeabi_i2f+0x7e>
 80011c2:	260f      	movs	r6, #15
 80011c4:	4035      	ands	r5, r6
 80011c6:	2d04      	cmp	r5, #4
 80011c8:	d005      	beq.n	80011d6 <__aeabi_i2f+0x7e>
 80011ca:	3204      	adds	r2, #4
 80011cc:	0155      	lsls	r5, r2, #5
 80011ce:	d502      	bpl.n	80011d6 <__aeabi_i2f+0x7e>
 80011d0:	239f      	movs	r3, #159	; 0x9f
 80011d2:	4002      	ands	r2, r0
 80011d4:	1a5b      	subs	r3, r3, r1
 80011d6:	0192      	lsls	r2, r2, #6
 80011d8:	0a55      	lsrs	r5, r2, #9
 80011da:	b2d8      	uxtb	r0, r3
 80011dc:	e7d6      	b.n	800118c <__aeabi_i2f+0x34>
 80011de:	026d      	lsls	r5, r5, #9
 80011e0:	2096      	movs	r0, #150	; 0x96
 80011e2:	0a6d      	lsrs	r5, r5, #9
 80011e4:	e7d2      	b.n	800118c <__aeabi_i2f+0x34>
 80011e6:	1f4a      	subs	r2, r1, #5
 80011e8:	4095      	lsls	r5, r2
 80011ea:	002a      	movs	r2, r5
 80011ec:	4802      	ldr	r0, [pc, #8]	; (80011f8 <__aeabi_i2f+0xa0>)
 80011ee:	4002      	ands	r2, r0
 80011f0:	076e      	lsls	r6, r5, #29
 80011f2:	d0f0      	beq.n	80011d6 <__aeabi_i2f+0x7e>
 80011f4:	e7e5      	b.n	80011c2 <__aeabi_i2f+0x6a>
 80011f6:	46c0      	nop			; (mov r8, r8)
 80011f8:	fbffffff 	.word	0xfbffffff

080011fc <__aeabi_dadd>:
 80011fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011fe:	464f      	mov	r7, r9
 8001200:	4646      	mov	r6, r8
 8001202:	46d6      	mov	lr, sl
 8001204:	0004      	movs	r4, r0
 8001206:	b5c0      	push	{r6, r7, lr}
 8001208:	001f      	movs	r7, r3
 800120a:	030b      	lsls	r3, r1, #12
 800120c:	0010      	movs	r0, r2
 800120e:	004e      	lsls	r6, r1, #1
 8001210:	0a5b      	lsrs	r3, r3, #9
 8001212:	0fcd      	lsrs	r5, r1, #31
 8001214:	0f61      	lsrs	r1, r4, #29
 8001216:	007a      	lsls	r2, r7, #1
 8001218:	4319      	orrs	r1, r3
 800121a:	00e3      	lsls	r3, r4, #3
 800121c:	033c      	lsls	r4, r7, #12
 800121e:	0fff      	lsrs	r7, r7, #31
 8001220:	46bc      	mov	ip, r7
 8001222:	0a64      	lsrs	r4, r4, #9
 8001224:	0f47      	lsrs	r7, r0, #29
 8001226:	4327      	orrs	r7, r4
 8001228:	0d76      	lsrs	r6, r6, #21
 800122a:	0d52      	lsrs	r2, r2, #21
 800122c:	00c0      	lsls	r0, r0, #3
 800122e:	46b9      	mov	r9, r7
 8001230:	4680      	mov	r8, r0
 8001232:	1ab7      	subs	r7, r6, r2
 8001234:	4565      	cmp	r5, ip
 8001236:	d100      	bne.n	800123a <__aeabi_dadd+0x3e>
 8001238:	e09b      	b.n	8001372 <__aeabi_dadd+0x176>
 800123a:	2f00      	cmp	r7, #0
 800123c:	dc00      	bgt.n	8001240 <__aeabi_dadd+0x44>
 800123e:	e084      	b.n	800134a <__aeabi_dadd+0x14e>
 8001240:	2a00      	cmp	r2, #0
 8001242:	d100      	bne.n	8001246 <__aeabi_dadd+0x4a>
 8001244:	e0be      	b.n	80013c4 <__aeabi_dadd+0x1c8>
 8001246:	4ac8      	ldr	r2, [pc, #800]	; (8001568 <__aeabi_dadd+0x36c>)
 8001248:	4296      	cmp	r6, r2
 800124a:	d100      	bne.n	800124e <__aeabi_dadd+0x52>
 800124c:	e124      	b.n	8001498 <__aeabi_dadd+0x29c>
 800124e:	2280      	movs	r2, #128	; 0x80
 8001250:	464c      	mov	r4, r9
 8001252:	0412      	lsls	r2, r2, #16
 8001254:	4314      	orrs	r4, r2
 8001256:	46a1      	mov	r9, r4
 8001258:	2f38      	cmp	r7, #56	; 0x38
 800125a:	dd00      	ble.n	800125e <__aeabi_dadd+0x62>
 800125c:	e167      	b.n	800152e <__aeabi_dadd+0x332>
 800125e:	2f1f      	cmp	r7, #31
 8001260:	dd00      	ble.n	8001264 <__aeabi_dadd+0x68>
 8001262:	e1d6      	b.n	8001612 <__aeabi_dadd+0x416>
 8001264:	2220      	movs	r2, #32
 8001266:	464c      	mov	r4, r9
 8001268:	1bd2      	subs	r2, r2, r7
 800126a:	4094      	lsls	r4, r2
 800126c:	46a2      	mov	sl, r4
 800126e:	4644      	mov	r4, r8
 8001270:	40fc      	lsrs	r4, r7
 8001272:	0020      	movs	r0, r4
 8001274:	4654      	mov	r4, sl
 8001276:	4304      	orrs	r4, r0
 8001278:	4640      	mov	r0, r8
 800127a:	4090      	lsls	r0, r2
 800127c:	1e42      	subs	r2, r0, #1
 800127e:	4190      	sbcs	r0, r2
 8001280:	464a      	mov	r2, r9
 8001282:	40fa      	lsrs	r2, r7
 8001284:	4304      	orrs	r4, r0
 8001286:	1a89      	subs	r1, r1, r2
 8001288:	1b1c      	subs	r4, r3, r4
 800128a:	42a3      	cmp	r3, r4
 800128c:	4192      	sbcs	r2, r2
 800128e:	4252      	negs	r2, r2
 8001290:	1a8b      	subs	r3, r1, r2
 8001292:	469a      	mov	sl, r3
 8001294:	4653      	mov	r3, sl
 8001296:	021b      	lsls	r3, r3, #8
 8001298:	d400      	bmi.n	800129c <__aeabi_dadd+0xa0>
 800129a:	e0d4      	b.n	8001446 <__aeabi_dadd+0x24a>
 800129c:	4653      	mov	r3, sl
 800129e:	025a      	lsls	r2, r3, #9
 80012a0:	0a53      	lsrs	r3, r2, #9
 80012a2:	469a      	mov	sl, r3
 80012a4:	4653      	mov	r3, sl
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d100      	bne.n	80012ac <__aeabi_dadd+0xb0>
 80012aa:	e104      	b.n	80014b6 <__aeabi_dadd+0x2ba>
 80012ac:	4650      	mov	r0, sl
 80012ae:	f001 fe55 	bl	8002f5c <__clzsi2>
 80012b2:	0003      	movs	r3, r0
 80012b4:	3b08      	subs	r3, #8
 80012b6:	2220      	movs	r2, #32
 80012b8:	0020      	movs	r0, r4
 80012ba:	1ad2      	subs	r2, r2, r3
 80012bc:	4651      	mov	r1, sl
 80012be:	40d0      	lsrs	r0, r2
 80012c0:	4099      	lsls	r1, r3
 80012c2:	0002      	movs	r2, r0
 80012c4:	409c      	lsls	r4, r3
 80012c6:	430a      	orrs	r2, r1
 80012c8:	42b3      	cmp	r3, r6
 80012ca:	da00      	bge.n	80012ce <__aeabi_dadd+0xd2>
 80012cc:	e102      	b.n	80014d4 <__aeabi_dadd+0x2d8>
 80012ce:	1b9b      	subs	r3, r3, r6
 80012d0:	1c59      	adds	r1, r3, #1
 80012d2:	291f      	cmp	r1, #31
 80012d4:	dd00      	ble.n	80012d8 <__aeabi_dadd+0xdc>
 80012d6:	e0a7      	b.n	8001428 <__aeabi_dadd+0x22c>
 80012d8:	2320      	movs	r3, #32
 80012da:	0010      	movs	r0, r2
 80012dc:	0026      	movs	r6, r4
 80012de:	1a5b      	subs	r3, r3, r1
 80012e0:	409c      	lsls	r4, r3
 80012e2:	4098      	lsls	r0, r3
 80012e4:	40ce      	lsrs	r6, r1
 80012e6:	40ca      	lsrs	r2, r1
 80012e8:	1e63      	subs	r3, r4, #1
 80012ea:	419c      	sbcs	r4, r3
 80012ec:	4330      	orrs	r0, r6
 80012ee:	4692      	mov	sl, r2
 80012f0:	2600      	movs	r6, #0
 80012f2:	4304      	orrs	r4, r0
 80012f4:	0763      	lsls	r3, r4, #29
 80012f6:	d009      	beq.n	800130c <__aeabi_dadd+0x110>
 80012f8:	230f      	movs	r3, #15
 80012fa:	4023      	ands	r3, r4
 80012fc:	2b04      	cmp	r3, #4
 80012fe:	d005      	beq.n	800130c <__aeabi_dadd+0x110>
 8001300:	1d23      	adds	r3, r4, #4
 8001302:	42a3      	cmp	r3, r4
 8001304:	41a4      	sbcs	r4, r4
 8001306:	4264      	negs	r4, r4
 8001308:	44a2      	add	sl, r4
 800130a:	001c      	movs	r4, r3
 800130c:	4653      	mov	r3, sl
 800130e:	021b      	lsls	r3, r3, #8
 8001310:	d400      	bmi.n	8001314 <__aeabi_dadd+0x118>
 8001312:	e09b      	b.n	800144c <__aeabi_dadd+0x250>
 8001314:	4b94      	ldr	r3, [pc, #592]	; (8001568 <__aeabi_dadd+0x36c>)
 8001316:	3601      	adds	r6, #1
 8001318:	429e      	cmp	r6, r3
 800131a:	d100      	bne.n	800131e <__aeabi_dadd+0x122>
 800131c:	e0b8      	b.n	8001490 <__aeabi_dadd+0x294>
 800131e:	4653      	mov	r3, sl
 8001320:	4992      	ldr	r1, [pc, #584]	; (800156c <__aeabi_dadd+0x370>)
 8001322:	08e4      	lsrs	r4, r4, #3
 8001324:	400b      	ands	r3, r1
 8001326:	0019      	movs	r1, r3
 8001328:	075b      	lsls	r3, r3, #29
 800132a:	4323      	orrs	r3, r4
 800132c:	0572      	lsls	r2, r6, #21
 800132e:	024c      	lsls	r4, r1, #9
 8001330:	0b24      	lsrs	r4, r4, #12
 8001332:	0d52      	lsrs	r2, r2, #21
 8001334:	0512      	lsls	r2, r2, #20
 8001336:	07ed      	lsls	r5, r5, #31
 8001338:	4322      	orrs	r2, r4
 800133a:	432a      	orrs	r2, r5
 800133c:	0018      	movs	r0, r3
 800133e:	0011      	movs	r1, r2
 8001340:	bce0      	pop	{r5, r6, r7}
 8001342:	46ba      	mov	sl, r7
 8001344:	46b1      	mov	r9, r6
 8001346:	46a8      	mov	r8, r5
 8001348:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800134a:	2f00      	cmp	r7, #0
 800134c:	d048      	beq.n	80013e0 <__aeabi_dadd+0x1e4>
 800134e:	1b97      	subs	r7, r2, r6
 8001350:	2e00      	cmp	r6, #0
 8001352:	d000      	beq.n	8001356 <__aeabi_dadd+0x15a>
 8001354:	e10e      	b.n	8001574 <__aeabi_dadd+0x378>
 8001356:	000c      	movs	r4, r1
 8001358:	431c      	orrs	r4, r3
 800135a:	d100      	bne.n	800135e <__aeabi_dadd+0x162>
 800135c:	e1b7      	b.n	80016ce <__aeabi_dadd+0x4d2>
 800135e:	1e7c      	subs	r4, r7, #1
 8001360:	2f01      	cmp	r7, #1
 8001362:	d100      	bne.n	8001366 <__aeabi_dadd+0x16a>
 8001364:	e226      	b.n	80017b4 <__aeabi_dadd+0x5b8>
 8001366:	4d80      	ldr	r5, [pc, #512]	; (8001568 <__aeabi_dadd+0x36c>)
 8001368:	42af      	cmp	r7, r5
 800136a:	d100      	bne.n	800136e <__aeabi_dadd+0x172>
 800136c:	e1d5      	b.n	800171a <__aeabi_dadd+0x51e>
 800136e:	0027      	movs	r7, r4
 8001370:	e107      	b.n	8001582 <__aeabi_dadd+0x386>
 8001372:	2f00      	cmp	r7, #0
 8001374:	dc00      	bgt.n	8001378 <__aeabi_dadd+0x17c>
 8001376:	e0b2      	b.n	80014de <__aeabi_dadd+0x2e2>
 8001378:	2a00      	cmp	r2, #0
 800137a:	d047      	beq.n	800140c <__aeabi_dadd+0x210>
 800137c:	4a7a      	ldr	r2, [pc, #488]	; (8001568 <__aeabi_dadd+0x36c>)
 800137e:	4296      	cmp	r6, r2
 8001380:	d100      	bne.n	8001384 <__aeabi_dadd+0x188>
 8001382:	e089      	b.n	8001498 <__aeabi_dadd+0x29c>
 8001384:	2280      	movs	r2, #128	; 0x80
 8001386:	464c      	mov	r4, r9
 8001388:	0412      	lsls	r2, r2, #16
 800138a:	4314      	orrs	r4, r2
 800138c:	46a1      	mov	r9, r4
 800138e:	2f38      	cmp	r7, #56	; 0x38
 8001390:	dc6b      	bgt.n	800146a <__aeabi_dadd+0x26e>
 8001392:	2f1f      	cmp	r7, #31
 8001394:	dc00      	bgt.n	8001398 <__aeabi_dadd+0x19c>
 8001396:	e16e      	b.n	8001676 <__aeabi_dadd+0x47a>
 8001398:	003a      	movs	r2, r7
 800139a:	4648      	mov	r0, r9
 800139c:	3a20      	subs	r2, #32
 800139e:	40d0      	lsrs	r0, r2
 80013a0:	4684      	mov	ip, r0
 80013a2:	2f20      	cmp	r7, #32
 80013a4:	d007      	beq.n	80013b6 <__aeabi_dadd+0x1ba>
 80013a6:	2240      	movs	r2, #64	; 0x40
 80013a8:	4648      	mov	r0, r9
 80013aa:	1bd2      	subs	r2, r2, r7
 80013ac:	4090      	lsls	r0, r2
 80013ae:	0002      	movs	r2, r0
 80013b0:	4640      	mov	r0, r8
 80013b2:	4310      	orrs	r0, r2
 80013b4:	4680      	mov	r8, r0
 80013b6:	4640      	mov	r0, r8
 80013b8:	1e42      	subs	r2, r0, #1
 80013ba:	4190      	sbcs	r0, r2
 80013bc:	4662      	mov	r2, ip
 80013be:	0004      	movs	r4, r0
 80013c0:	4314      	orrs	r4, r2
 80013c2:	e057      	b.n	8001474 <__aeabi_dadd+0x278>
 80013c4:	464a      	mov	r2, r9
 80013c6:	4302      	orrs	r2, r0
 80013c8:	d100      	bne.n	80013cc <__aeabi_dadd+0x1d0>
 80013ca:	e103      	b.n	80015d4 <__aeabi_dadd+0x3d8>
 80013cc:	1e7a      	subs	r2, r7, #1
 80013ce:	2f01      	cmp	r7, #1
 80013d0:	d100      	bne.n	80013d4 <__aeabi_dadd+0x1d8>
 80013d2:	e193      	b.n	80016fc <__aeabi_dadd+0x500>
 80013d4:	4c64      	ldr	r4, [pc, #400]	; (8001568 <__aeabi_dadd+0x36c>)
 80013d6:	42a7      	cmp	r7, r4
 80013d8:	d100      	bne.n	80013dc <__aeabi_dadd+0x1e0>
 80013da:	e18a      	b.n	80016f2 <__aeabi_dadd+0x4f6>
 80013dc:	0017      	movs	r7, r2
 80013de:	e73b      	b.n	8001258 <__aeabi_dadd+0x5c>
 80013e0:	4c63      	ldr	r4, [pc, #396]	; (8001570 <__aeabi_dadd+0x374>)
 80013e2:	1c72      	adds	r2, r6, #1
 80013e4:	4222      	tst	r2, r4
 80013e6:	d000      	beq.n	80013ea <__aeabi_dadd+0x1ee>
 80013e8:	e0e0      	b.n	80015ac <__aeabi_dadd+0x3b0>
 80013ea:	000a      	movs	r2, r1
 80013ec:	431a      	orrs	r2, r3
 80013ee:	2e00      	cmp	r6, #0
 80013f0:	d000      	beq.n	80013f4 <__aeabi_dadd+0x1f8>
 80013f2:	e174      	b.n	80016de <__aeabi_dadd+0x4e2>
 80013f4:	2a00      	cmp	r2, #0
 80013f6:	d100      	bne.n	80013fa <__aeabi_dadd+0x1fe>
 80013f8:	e1d0      	b.n	800179c <__aeabi_dadd+0x5a0>
 80013fa:	464a      	mov	r2, r9
 80013fc:	4302      	orrs	r2, r0
 80013fe:	d000      	beq.n	8001402 <__aeabi_dadd+0x206>
 8001400:	e1e3      	b.n	80017ca <__aeabi_dadd+0x5ce>
 8001402:	074a      	lsls	r2, r1, #29
 8001404:	08db      	lsrs	r3, r3, #3
 8001406:	4313      	orrs	r3, r2
 8001408:	08c9      	lsrs	r1, r1, #3
 800140a:	e029      	b.n	8001460 <__aeabi_dadd+0x264>
 800140c:	464a      	mov	r2, r9
 800140e:	4302      	orrs	r2, r0
 8001410:	d100      	bne.n	8001414 <__aeabi_dadd+0x218>
 8001412:	e17d      	b.n	8001710 <__aeabi_dadd+0x514>
 8001414:	1e7a      	subs	r2, r7, #1
 8001416:	2f01      	cmp	r7, #1
 8001418:	d100      	bne.n	800141c <__aeabi_dadd+0x220>
 800141a:	e0e0      	b.n	80015de <__aeabi_dadd+0x3e2>
 800141c:	4c52      	ldr	r4, [pc, #328]	; (8001568 <__aeabi_dadd+0x36c>)
 800141e:	42a7      	cmp	r7, r4
 8001420:	d100      	bne.n	8001424 <__aeabi_dadd+0x228>
 8001422:	e166      	b.n	80016f2 <__aeabi_dadd+0x4f6>
 8001424:	0017      	movs	r7, r2
 8001426:	e7b2      	b.n	800138e <__aeabi_dadd+0x192>
 8001428:	0010      	movs	r0, r2
 800142a:	3b1f      	subs	r3, #31
 800142c:	40d8      	lsrs	r0, r3
 800142e:	2920      	cmp	r1, #32
 8001430:	d003      	beq.n	800143a <__aeabi_dadd+0x23e>
 8001432:	2340      	movs	r3, #64	; 0x40
 8001434:	1a5b      	subs	r3, r3, r1
 8001436:	409a      	lsls	r2, r3
 8001438:	4314      	orrs	r4, r2
 800143a:	1e63      	subs	r3, r4, #1
 800143c:	419c      	sbcs	r4, r3
 800143e:	2300      	movs	r3, #0
 8001440:	2600      	movs	r6, #0
 8001442:	469a      	mov	sl, r3
 8001444:	4304      	orrs	r4, r0
 8001446:	0763      	lsls	r3, r4, #29
 8001448:	d000      	beq.n	800144c <__aeabi_dadd+0x250>
 800144a:	e755      	b.n	80012f8 <__aeabi_dadd+0xfc>
 800144c:	4652      	mov	r2, sl
 800144e:	08e3      	lsrs	r3, r4, #3
 8001450:	0752      	lsls	r2, r2, #29
 8001452:	4313      	orrs	r3, r2
 8001454:	4652      	mov	r2, sl
 8001456:	0037      	movs	r7, r6
 8001458:	08d1      	lsrs	r1, r2, #3
 800145a:	4a43      	ldr	r2, [pc, #268]	; (8001568 <__aeabi_dadd+0x36c>)
 800145c:	4297      	cmp	r7, r2
 800145e:	d01f      	beq.n	80014a0 <__aeabi_dadd+0x2a4>
 8001460:	0309      	lsls	r1, r1, #12
 8001462:	057a      	lsls	r2, r7, #21
 8001464:	0b0c      	lsrs	r4, r1, #12
 8001466:	0d52      	lsrs	r2, r2, #21
 8001468:	e764      	b.n	8001334 <__aeabi_dadd+0x138>
 800146a:	4642      	mov	r2, r8
 800146c:	464c      	mov	r4, r9
 800146e:	4314      	orrs	r4, r2
 8001470:	1e62      	subs	r2, r4, #1
 8001472:	4194      	sbcs	r4, r2
 8001474:	18e4      	adds	r4, r4, r3
 8001476:	429c      	cmp	r4, r3
 8001478:	4192      	sbcs	r2, r2
 800147a:	4252      	negs	r2, r2
 800147c:	4692      	mov	sl, r2
 800147e:	448a      	add	sl, r1
 8001480:	4653      	mov	r3, sl
 8001482:	021b      	lsls	r3, r3, #8
 8001484:	d5df      	bpl.n	8001446 <__aeabi_dadd+0x24a>
 8001486:	4b38      	ldr	r3, [pc, #224]	; (8001568 <__aeabi_dadd+0x36c>)
 8001488:	3601      	adds	r6, #1
 800148a:	429e      	cmp	r6, r3
 800148c:	d000      	beq.n	8001490 <__aeabi_dadd+0x294>
 800148e:	e0b3      	b.n	80015f8 <__aeabi_dadd+0x3fc>
 8001490:	0032      	movs	r2, r6
 8001492:	2400      	movs	r4, #0
 8001494:	2300      	movs	r3, #0
 8001496:	e74d      	b.n	8001334 <__aeabi_dadd+0x138>
 8001498:	074a      	lsls	r2, r1, #29
 800149a:	08db      	lsrs	r3, r3, #3
 800149c:	4313      	orrs	r3, r2
 800149e:	08c9      	lsrs	r1, r1, #3
 80014a0:	001a      	movs	r2, r3
 80014a2:	430a      	orrs	r2, r1
 80014a4:	d100      	bne.n	80014a8 <__aeabi_dadd+0x2ac>
 80014a6:	e200      	b.n	80018aa <__aeabi_dadd+0x6ae>
 80014a8:	2480      	movs	r4, #128	; 0x80
 80014aa:	0324      	lsls	r4, r4, #12
 80014ac:	430c      	orrs	r4, r1
 80014ae:	0324      	lsls	r4, r4, #12
 80014b0:	4a2d      	ldr	r2, [pc, #180]	; (8001568 <__aeabi_dadd+0x36c>)
 80014b2:	0b24      	lsrs	r4, r4, #12
 80014b4:	e73e      	b.n	8001334 <__aeabi_dadd+0x138>
 80014b6:	0020      	movs	r0, r4
 80014b8:	f001 fd50 	bl	8002f5c <__clzsi2>
 80014bc:	0003      	movs	r3, r0
 80014be:	3318      	adds	r3, #24
 80014c0:	2b1f      	cmp	r3, #31
 80014c2:	dc00      	bgt.n	80014c6 <__aeabi_dadd+0x2ca>
 80014c4:	e6f7      	b.n	80012b6 <__aeabi_dadd+0xba>
 80014c6:	0022      	movs	r2, r4
 80014c8:	3808      	subs	r0, #8
 80014ca:	4082      	lsls	r2, r0
 80014cc:	2400      	movs	r4, #0
 80014ce:	42b3      	cmp	r3, r6
 80014d0:	db00      	blt.n	80014d4 <__aeabi_dadd+0x2d8>
 80014d2:	e6fc      	b.n	80012ce <__aeabi_dadd+0xd2>
 80014d4:	1af6      	subs	r6, r6, r3
 80014d6:	4b25      	ldr	r3, [pc, #148]	; (800156c <__aeabi_dadd+0x370>)
 80014d8:	401a      	ands	r2, r3
 80014da:	4692      	mov	sl, r2
 80014dc:	e70a      	b.n	80012f4 <__aeabi_dadd+0xf8>
 80014de:	2f00      	cmp	r7, #0
 80014e0:	d02b      	beq.n	800153a <__aeabi_dadd+0x33e>
 80014e2:	1b97      	subs	r7, r2, r6
 80014e4:	2e00      	cmp	r6, #0
 80014e6:	d100      	bne.n	80014ea <__aeabi_dadd+0x2ee>
 80014e8:	e0b8      	b.n	800165c <__aeabi_dadd+0x460>
 80014ea:	4c1f      	ldr	r4, [pc, #124]	; (8001568 <__aeabi_dadd+0x36c>)
 80014ec:	42a2      	cmp	r2, r4
 80014ee:	d100      	bne.n	80014f2 <__aeabi_dadd+0x2f6>
 80014f0:	e11c      	b.n	800172c <__aeabi_dadd+0x530>
 80014f2:	2480      	movs	r4, #128	; 0x80
 80014f4:	0424      	lsls	r4, r4, #16
 80014f6:	4321      	orrs	r1, r4
 80014f8:	2f38      	cmp	r7, #56	; 0x38
 80014fa:	dd00      	ble.n	80014fe <__aeabi_dadd+0x302>
 80014fc:	e11e      	b.n	800173c <__aeabi_dadd+0x540>
 80014fe:	2f1f      	cmp	r7, #31
 8001500:	dd00      	ble.n	8001504 <__aeabi_dadd+0x308>
 8001502:	e19e      	b.n	8001842 <__aeabi_dadd+0x646>
 8001504:	2620      	movs	r6, #32
 8001506:	000c      	movs	r4, r1
 8001508:	1bf6      	subs	r6, r6, r7
 800150a:	0018      	movs	r0, r3
 800150c:	40b3      	lsls	r3, r6
 800150e:	40b4      	lsls	r4, r6
 8001510:	40f8      	lsrs	r0, r7
 8001512:	1e5e      	subs	r6, r3, #1
 8001514:	41b3      	sbcs	r3, r6
 8001516:	40f9      	lsrs	r1, r7
 8001518:	4304      	orrs	r4, r0
 800151a:	431c      	orrs	r4, r3
 800151c:	4489      	add	r9, r1
 800151e:	4444      	add	r4, r8
 8001520:	4544      	cmp	r4, r8
 8001522:	419b      	sbcs	r3, r3
 8001524:	425b      	negs	r3, r3
 8001526:	444b      	add	r3, r9
 8001528:	469a      	mov	sl, r3
 800152a:	0016      	movs	r6, r2
 800152c:	e7a8      	b.n	8001480 <__aeabi_dadd+0x284>
 800152e:	4642      	mov	r2, r8
 8001530:	464c      	mov	r4, r9
 8001532:	4314      	orrs	r4, r2
 8001534:	1e62      	subs	r2, r4, #1
 8001536:	4194      	sbcs	r4, r2
 8001538:	e6a6      	b.n	8001288 <__aeabi_dadd+0x8c>
 800153a:	4c0d      	ldr	r4, [pc, #52]	; (8001570 <__aeabi_dadd+0x374>)
 800153c:	1c72      	adds	r2, r6, #1
 800153e:	4222      	tst	r2, r4
 8001540:	d000      	beq.n	8001544 <__aeabi_dadd+0x348>
 8001542:	e0a8      	b.n	8001696 <__aeabi_dadd+0x49a>
 8001544:	000a      	movs	r2, r1
 8001546:	431a      	orrs	r2, r3
 8001548:	2e00      	cmp	r6, #0
 800154a:	d000      	beq.n	800154e <__aeabi_dadd+0x352>
 800154c:	e10a      	b.n	8001764 <__aeabi_dadd+0x568>
 800154e:	2a00      	cmp	r2, #0
 8001550:	d100      	bne.n	8001554 <__aeabi_dadd+0x358>
 8001552:	e15e      	b.n	8001812 <__aeabi_dadd+0x616>
 8001554:	464a      	mov	r2, r9
 8001556:	4302      	orrs	r2, r0
 8001558:	d000      	beq.n	800155c <__aeabi_dadd+0x360>
 800155a:	e161      	b.n	8001820 <__aeabi_dadd+0x624>
 800155c:	074a      	lsls	r2, r1, #29
 800155e:	08db      	lsrs	r3, r3, #3
 8001560:	4313      	orrs	r3, r2
 8001562:	08c9      	lsrs	r1, r1, #3
 8001564:	e77c      	b.n	8001460 <__aeabi_dadd+0x264>
 8001566:	46c0      	nop			; (mov r8, r8)
 8001568:	000007ff 	.word	0x000007ff
 800156c:	ff7fffff 	.word	0xff7fffff
 8001570:	000007fe 	.word	0x000007fe
 8001574:	4ccf      	ldr	r4, [pc, #828]	; (80018b4 <__aeabi_dadd+0x6b8>)
 8001576:	42a2      	cmp	r2, r4
 8001578:	d100      	bne.n	800157c <__aeabi_dadd+0x380>
 800157a:	e0ce      	b.n	800171a <__aeabi_dadd+0x51e>
 800157c:	2480      	movs	r4, #128	; 0x80
 800157e:	0424      	lsls	r4, r4, #16
 8001580:	4321      	orrs	r1, r4
 8001582:	2f38      	cmp	r7, #56	; 0x38
 8001584:	dc5b      	bgt.n	800163e <__aeabi_dadd+0x442>
 8001586:	2f1f      	cmp	r7, #31
 8001588:	dd00      	ble.n	800158c <__aeabi_dadd+0x390>
 800158a:	e0dc      	b.n	8001746 <__aeabi_dadd+0x54a>
 800158c:	2520      	movs	r5, #32
 800158e:	000c      	movs	r4, r1
 8001590:	1bed      	subs	r5, r5, r7
 8001592:	001e      	movs	r6, r3
 8001594:	40ab      	lsls	r3, r5
 8001596:	40ac      	lsls	r4, r5
 8001598:	40fe      	lsrs	r6, r7
 800159a:	1e5d      	subs	r5, r3, #1
 800159c:	41ab      	sbcs	r3, r5
 800159e:	4334      	orrs	r4, r6
 80015a0:	40f9      	lsrs	r1, r7
 80015a2:	431c      	orrs	r4, r3
 80015a4:	464b      	mov	r3, r9
 80015a6:	1a5b      	subs	r3, r3, r1
 80015a8:	4699      	mov	r9, r3
 80015aa:	e04c      	b.n	8001646 <__aeabi_dadd+0x44a>
 80015ac:	464a      	mov	r2, r9
 80015ae:	1a1c      	subs	r4, r3, r0
 80015b0:	1a88      	subs	r0, r1, r2
 80015b2:	42a3      	cmp	r3, r4
 80015b4:	4192      	sbcs	r2, r2
 80015b6:	4252      	negs	r2, r2
 80015b8:	4692      	mov	sl, r2
 80015ba:	0002      	movs	r2, r0
 80015bc:	4650      	mov	r0, sl
 80015be:	1a12      	subs	r2, r2, r0
 80015c0:	4692      	mov	sl, r2
 80015c2:	0212      	lsls	r2, r2, #8
 80015c4:	d478      	bmi.n	80016b8 <__aeabi_dadd+0x4bc>
 80015c6:	4653      	mov	r3, sl
 80015c8:	4323      	orrs	r3, r4
 80015ca:	d000      	beq.n	80015ce <__aeabi_dadd+0x3d2>
 80015cc:	e66a      	b.n	80012a4 <__aeabi_dadd+0xa8>
 80015ce:	2100      	movs	r1, #0
 80015d0:	2500      	movs	r5, #0
 80015d2:	e745      	b.n	8001460 <__aeabi_dadd+0x264>
 80015d4:	074a      	lsls	r2, r1, #29
 80015d6:	08db      	lsrs	r3, r3, #3
 80015d8:	4313      	orrs	r3, r2
 80015da:	08c9      	lsrs	r1, r1, #3
 80015dc:	e73d      	b.n	800145a <__aeabi_dadd+0x25e>
 80015de:	181c      	adds	r4, r3, r0
 80015e0:	429c      	cmp	r4, r3
 80015e2:	419b      	sbcs	r3, r3
 80015e4:	4449      	add	r1, r9
 80015e6:	468a      	mov	sl, r1
 80015e8:	425b      	negs	r3, r3
 80015ea:	449a      	add	sl, r3
 80015ec:	4653      	mov	r3, sl
 80015ee:	2601      	movs	r6, #1
 80015f0:	021b      	lsls	r3, r3, #8
 80015f2:	d400      	bmi.n	80015f6 <__aeabi_dadd+0x3fa>
 80015f4:	e727      	b.n	8001446 <__aeabi_dadd+0x24a>
 80015f6:	2602      	movs	r6, #2
 80015f8:	4652      	mov	r2, sl
 80015fa:	4baf      	ldr	r3, [pc, #700]	; (80018b8 <__aeabi_dadd+0x6bc>)
 80015fc:	2101      	movs	r1, #1
 80015fe:	401a      	ands	r2, r3
 8001600:	0013      	movs	r3, r2
 8001602:	4021      	ands	r1, r4
 8001604:	0862      	lsrs	r2, r4, #1
 8001606:	430a      	orrs	r2, r1
 8001608:	07dc      	lsls	r4, r3, #31
 800160a:	085b      	lsrs	r3, r3, #1
 800160c:	469a      	mov	sl, r3
 800160e:	4314      	orrs	r4, r2
 8001610:	e670      	b.n	80012f4 <__aeabi_dadd+0xf8>
 8001612:	003a      	movs	r2, r7
 8001614:	464c      	mov	r4, r9
 8001616:	3a20      	subs	r2, #32
 8001618:	40d4      	lsrs	r4, r2
 800161a:	46a4      	mov	ip, r4
 800161c:	2f20      	cmp	r7, #32
 800161e:	d007      	beq.n	8001630 <__aeabi_dadd+0x434>
 8001620:	2240      	movs	r2, #64	; 0x40
 8001622:	4648      	mov	r0, r9
 8001624:	1bd2      	subs	r2, r2, r7
 8001626:	4090      	lsls	r0, r2
 8001628:	0002      	movs	r2, r0
 800162a:	4640      	mov	r0, r8
 800162c:	4310      	orrs	r0, r2
 800162e:	4680      	mov	r8, r0
 8001630:	4640      	mov	r0, r8
 8001632:	1e42      	subs	r2, r0, #1
 8001634:	4190      	sbcs	r0, r2
 8001636:	4662      	mov	r2, ip
 8001638:	0004      	movs	r4, r0
 800163a:	4314      	orrs	r4, r2
 800163c:	e624      	b.n	8001288 <__aeabi_dadd+0x8c>
 800163e:	4319      	orrs	r1, r3
 8001640:	000c      	movs	r4, r1
 8001642:	1e63      	subs	r3, r4, #1
 8001644:	419c      	sbcs	r4, r3
 8001646:	4643      	mov	r3, r8
 8001648:	1b1c      	subs	r4, r3, r4
 800164a:	45a0      	cmp	r8, r4
 800164c:	419b      	sbcs	r3, r3
 800164e:	4649      	mov	r1, r9
 8001650:	425b      	negs	r3, r3
 8001652:	1acb      	subs	r3, r1, r3
 8001654:	469a      	mov	sl, r3
 8001656:	4665      	mov	r5, ip
 8001658:	0016      	movs	r6, r2
 800165a:	e61b      	b.n	8001294 <__aeabi_dadd+0x98>
 800165c:	000c      	movs	r4, r1
 800165e:	431c      	orrs	r4, r3
 8001660:	d100      	bne.n	8001664 <__aeabi_dadd+0x468>
 8001662:	e0c7      	b.n	80017f4 <__aeabi_dadd+0x5f8>
 8001664:	1e7c      	subs	r4, r7, #1
 8001666:	2f01      	cmp	r7, #1
 8001668:	d100      	bne.n	800166c <__aeabi_dadd+0x470>
 800166a:	e0f9      	b.n	8001860 <__aeabi_dadd+0x664>
 800166c:	4e91      	ldr	r6, [pc, #580]	; (80018b4 <__aeabi_dadd+0x6b8>)
 800166e:	42b7      	cmp	r7, r6
 8001670:	d05c      	beq.n	800172c <__aeabi_dadd+0x530>
 8001672:	0027      	movs	r7, r4
 8001674:	e740      	b.n	80014f8 <__aeabi_dadd+0x2fc>
 8001676:	2220      	movs	r2, #32
 8001678:	464c      	mov	r4, r9
 800167a:	4640      	mov	r0, r8
 800167c:	1bd2      	subs	r2, r2, r7
 800167e:	4094      	lsls	r4, r2
 8001680:	40f8      	lsrs	r0, r7
 8001682:	4304      	orrs	r4, r0
 8001684:	4640      	mov	r0, r8
 8001686:	4090      	lsls	r0, r2
 8001688:	1e42      	subs	r2, r0, #1
 800168a:	4190      	sbcs	r0, r2
 800168c:	464a      	mov	r2, r9
 800168e:	40fa      	lsrs	r2, r7
 8001690:	4304      	orrs	r4, r0
 8001692:	1889      	adds	r1, r1, r2
 8001694:	e6ee      	b.n	8001474 <__aeabi_dadd+0x278>
 8001696:	4c87      	ldr	r4, [pc, #540]	; (80018b4 <__aeabi_dadd+0x6b8>)
 8001698:	42a2      	cmp	r2, r4
 800169a:	d100      	bne.n	800169e <__aeabi_dadd+0x4a2>
 800169c:	e6f9      	b.n	8001492 <__aeabi_dadd+0x296>
 800169e:	1818      	adds	r0, r3, r0
 80016a0:	4298      	cmp	r0, r3
 80016a2:	419b      	sbcs	r3, r3
 80016a4:	4449      	add	r1, r9
 80016a6:	425b      	negs	r3, r3
 80016a8:	18cb      	adds	r3, r1, r3
 80016aa:	07dc      	lsls	r4, r3, #31
 80016ac:	0840      	lsrs	r0, r0, #1
 80016ae:	085b      	lsrs	r3, r3, #1
 80016b0:	469a      	mov	sl, r3
 80016b2:	0016      	movs	r6, r2
 80016b4:	4304      	orrs	r4, r0
 80016b6:	e6c6      	b.n	8001446 <__aeabi_dadd+0x24a>
 80016b8:	4642      	mov	r2, r8
 80016ba:	1ad4      	subs	r4, r2, r3
 80016bc:	45a0      	cmp	r8, r4
 80016be:	4180      	sbcs	r0, r0
 80016c0:	464b      	mov	r3, r9
 80016c2:	4240      	negs	r0, r0
 80016c4:	1a59      	subs	r1, r3, r1
 80016c6:	1a0b      	subs	r3, r1, r0
 80016c8:	469a      	mov	sl, r3
 80016ca:	4665      	mov	r5, ip
 80016cc:	e5ea      	b.n	80012a4 <__aeabi_dadd+0xa8>
 80016ce:	464b      	mov	r3, r9
 80016d0:	464a      	mov	r2, r9
 80016d2:	08c0      	lsrs	r0, r0, #3
 80016d4:	075b      	lsls	r3, r3, #29
 80016d6:	4665      	mov	r5, ip
 80016d8:	4303      	orrs	r3, r0
 80016da:	08d1      	lsrs	r1, r2, #3
 80016dc:	e6bd      	b.n	800145a <__aeabi_dadd+0x25e>
 80016de:	2a00      	cmp	r2, #0
 80016e0:	d000      	beq.n	80016e4 <__aeabi_dadd+0x4e8>
 80016e2:	e08e      	b.n	8001802 <__aeabi_dadd+0x606>
 80016e4:	464b      	mov	r3, r9
 80016e6:	4303      	orrs	r3, r0
 80016e8:	d117      	bne.n	800171a <__aeabi_dadd+0x51e>
 80016ea:	2180      	movs	r1, #128	; 0x80
 80016ec:	2500      	movs	r5, #0
 80016ee:	0309      	lsls	r1, r1, #12
 80016f0:	e6da      	b.n	80014a8 <__aeabi_dadd+0x2ac>
 80016f2:	074a      	lsls	r2, r1, #29
 80016f4:	08db      	lsrs	r3, r3, #3
 80016f6:	4313      	orrs	r3, r2
 80016f8:	08c9      	lsrs	r1, r1, #3
 80016fa:	e6d1      	b.n	80014a0 <__aeabi_dadd+0x2a4>
 80016fc:	1a1c      	subs	r4, r3, r0
 80016fe:	464a      	mov	r2, r9
 8001700:	42a3      	cmp	r3, r4
 8001702:	419b      	sbcs	r3, r3
 8001704:	1a89      	subs	r1, r1, r2
 8001706:	425b      	negs	r3, r3
 8001708:	1acb      	subs	r3, r1, r3
 800170a:	469a      	mov	sl, r3
 800170c:	2601      	movs	r6, #1
 800170e:	e5c1      	b.n	8001294 <__aeabi_dadd+0x98>
 8001710:	074a      	lsls	r2, r1, #29
 8001712:	08db      	lsrs	r3, r3, #3
 8001714:	4313      	orrs	r3, r2
 8001716:	08c9      	lsrs	r1, r1, #3
 8001718:	e69f      	b.n	800145a <__aeabi_dadd+0x25e>
 800171a:	4643      	mov	r3, r8
 800171c:	08d8      	lsrs	r0, r3, #3
 800171e:	464b      	mov	r3, r9
 8001720:	464a      	mov	r2, r9
 8001722:	075b      	lsls	r3, r3, #29
 8001724:	4665      	mov	r5, ip
 8001726:	4303      	orrs	r3, r0
 8001728:	08d1      	lsrs	r1, r2, #3
 800172a:	e6b9      	b.n	80014a0 <__aeabi_dadd+0x2a4>
 800172c:	4643      	mov	r3, r8
 800172e:	08d8      	lsrs	r0, r3, #3
 8001730:	464b      	mov	r3, r9
 8001732:	464a      	mov	r2, r9
 8001734:	075b      	lsls	r3, r3, #29
 8001736:	4303      	orrs	r3, r0
 8001738:	08d1      	lsrs	r1, r2, #3
 800173a:	e6b1      	b.n	80014a0 <__aeabi_dadd+0x2a4>
 800173c:	4319      	orrs	r1, r3
 800173e:	000c      	movs	r4, r1
 8001740:	1e63      	subs	r3, r4, #1
 8001742:	419c      	sbcs	r4, r3
 8001744:	e6eb      	b.n	800151e <__aeabi_dadd+0x322>
 8001746:	003c      	movs	r4, r7
 8001748:	000d      	movs	r5, r1
 800174a:	3c20      	subs	r4, #32
 800174c:	40e5      	lsrs	r5, r4
 800174e:	2f20      	cmp	r7, #32
 8001750:	d003      	beq.n	800175a <__aeabi_dadd+0x55e>
 8001752:	2440      	movs	r4, #64	; 0x40
 8001754:	1be4      	subs	r4, r4, r7
 8001756:	40a1      	lsls	r1, r4
 8001758:	430b      	orrs	r3, r1
 800175a:	001c      	movs	r4, r3
 800175c:	1e63      	subs	r3, r4, #1
 800175e:	419c      	sbcs	r4, r3
 8001760:	432c      	orrs	r4, r5
 8001762:	e770      	b.n	8001646 <__aeabi_dadd+0x44a>
 8001764:	2a00      	cmp	r2, #0
 8001766:	d0e1      	beq.n	800172c <__aeabi_dadd+0x530>
 8001768:	464a      	mov	r2, r9
 800176a:	4302      	orrs	r2, r0
 800176c:	d0c1      	beq.n	80016f2 <__aeabi_dadd+0x4f6>
 800176e:	074a      	lsls	r2, r1, #29
 8001770:	08db      	lsrs	r3, r3, #3
 8001772:	4313      	orrs	r3, r2
 8001774:	2280      	movs	r2, #128	; 0x80
 8001776:	08c9      	lsrs	r1, r1, #3
 8001778:	0312      	lsls	r2, r2, #12
 800177a:	4211      	tst	r1, r2
 800177c:	d008      	beq.n	8001790 <__aeabi_dadd+0x594>
 800177e:	4648      	mov	r0, r9
 8001780:	08c4      	lsrs	r4, r0, #3
 8001782:	4214      	tst	r4, r2
 8001784:	d104      	bne.n	8001790 <__aeabi_dadd+0x594>
 8001786:	4643      	mov	r3, r8
 8001788:	0021      	movs	r1, r4
 800178a:	08db      	lsrs	r3, r3, #3
 800178c:	0742      	lsls	r2, r0, #29
 800178e:	4313      	orrs	r3, r2
 8001790:	0f5a      	lsrs	r2, r3, #29
 8001792:	00db      	lsls	r3, r3, #3
 8001794:	0752      	lsls	r2, r2, #29
 8001796:	08db      	lsrs	r3, r3, #3
 8001798:	4313      	orrs	r3, r2
 800179a:	e681      	b.n	80014a0 <__aeabi_dadd+0x2a4>
 800179c:	464b      	mov	r3, r9
 800179e:	4303      	orrs	r3, r0
 80017a0:	d100      	bne.n	80017a4 <__aeabi_dadd+0x5a8>
 80017a2:	e714      	b.n	80015ce <__aeabi_dadd+0x3d2>
 80017a4:	464b      	mov	r3, r9
 80017a6:	464a      	mov	r2, r9
 80017a8:	08c0      	lsrs	r0, r0, #3
 80017aa:	075b      	lsls	r3, r3, #29
 80017ac:	4665      	mov	r5, ip
 80017ae:	4303      	orrs	r3, r0
 80017b0:	08d1      	lsrs	r1, r2, #3
 80017b2:	e655      	b.n	8001460 <__aeabi_dadd+0x264>
 80017b4:	1ac4      	subs	r4, r0, r3
 80017b6:	45a0      	cmp	r8, r4
 80017b8:	4180      	sbcs	r0, r0
 80017ba:	464b      	mov	r3, r9
 80017bc:	4240      	negs	r0, r0
 80017be:	1a59      	subs	r1, r3, r1
 80017c0:	1a0b      	subs	r3, r1, r0
 80017c2:	469a      	mov	sl, r3
 80017c4:	4665      	mov	r5, ip
 80017c6:	2601      	movs	r6, #1
 80017c8:	e564      	b.n	8001294 <__aeabi_dadd+0x98>
 80017ca:	1a1c      	subs	r4, r3, r0
 80017cc:	464a      	mov	r2, r9
 80017ce:	42a3      	cmp	r3, r4
 80017d0:	4180      	sbcs	r0, r0
 80017d2:	1a8a      	subs	r2, r1, r2
 80017d4:	4240      	negs	r0, r0
 80017d6:	1a12      	subs	r2, r2, r0
 80017d8:	4692      	mov	sl, r2
 80017da:	0212      	lsls	r2, r2, #8
 80017dc:	d549      	bpl.n	8001872 <__aeabi_dadd+0x676>
 80017de:	4642      	mov	r2, r8
 80017e0:	1ad4      	subs	r4, r2, r3
 80017e2:	45a0      	cmp	r8, r4
 80017e4:	4180      	sbcs	r0, r0
 80017e6:	464b      	mov	r3, r9
 80017e8:	4240      	negs	r0, r0
 80017ea:	1a59      	subs	r1, r3, r1
 80017ec:	1a0b      	subs	r3, r1, r0
 80017ee:	469a      	mov	sl, r3
 80017f0:	4665      	mov	r5, ip
 80017f2:	e57f      	b.n	80012f4 <__aeabi_dadd+0xf8>
 80017f4:	464b      	mov	r3, r9
 80017f6:	464a      	mov	r2, r9
 80017f8:	08c0      	lsrs	r0, r0, #3
 80017fa:	075b      	lsls	r3, r3, #29
 80017fc:	4303      	orrs	r3, r0
 80017fe:	08d1      	lsrs	r1, r2, #3
 8001800:	e62b      	b.n	800145a <__aeabi_dadd+0x25e>
 8001802:	464a      	mov	r2, r9
 8001804:	08db      	lsrs	r3, r3, #3
 8001806:	4302      	orrs	r2, r0
 8001808:	d138      	bne.n	800187c <__aeabi_dadd+0x680>
 800180a:	074a      	lsls	r2, r1, #29
 800180c:	4313      	orrs	r3, r2
 800180e:	08c9      	lsrs	r1, r1, #3
 8001810:	e646      	b.n	80014a0 <__aeabi_dadd+0x2a4>
 8001812:	464b      	mov	r3, r9
 8001814:	464a      	mov	r2, r9
 8001816:	08c0      	lsrs	r0, r0, #3
 8001818:	075b      	lsls	r3, r3, #29
 800181a:	4303      	orrs	r3, r0
 800181c:	08d1      	lsrs	r1, r2, #3
 800181e:	e61f      	b.n	8001460 <__aeabi_dadd+0x264>
 8001820:	181c      	adds	r4, r3, r0
 8001822:	429c      	cmp	r4, r3
 8001824:	419b      	sbcs	r3, r3
 8001826:	4449      	add	r1, r9
 8001828:	468a      	mov	sl, r1
 800182a:	425b      	negs	r3, r3
 800182c:	449a      	add	sl, r3
 800182e:	4653      	mov	r3, sl
 8001830:	021b      	lsls	r3, r3, #8
 8001832:	d400      	bmi.n	8001836 <__aeabi_dadd+0x63a>
 8001834:	e607      	b.n	8001446 <__aeabi_dadd+0x24a>
 8001836:	4652      	mov	r2, sl
 8001838:	4b1f      	ldr	r3, [pc, #124]	; (80018b8 <__aeabi_dadd+0x6bc>)
 800183a:	2601      	movs	r6, #1
 800183c:	401a      	ands	r2, r3
 800183e:	4692      	mov	sl, r2
 8001840:	e601      	b.n	8001446 <__aeabi_dadd+0x24a>
 8001842:	003c      	movs	r4, r7
 8001844:	000e      	movs	r6, r1
 8001846:	3c20      	subs	r4, #32
 8001848:	40e6      	lsrs	r6, r4
 800184a:	2f20      	cmp	r7, #32
 800184c:	d003      	beq.n	8001856 <__aeabi_dadd+0x65a>
 800184e:	2440      	movs	r4, #64	; 0x40
 8001850:	1be4      	subs	r4, r4, r7
 8001852:	40a1      	lsls	r1, r4
 8001854:	430b      	orrs	r3, r1
 8001856:	001c      	movs	r4, r3
 8001858:	1e63      	subs	r3, r4, #1
 800185a:	419c      	sbcs	r4, r3
 800185c:	4334      	orrs	r4, r6
 800185e:	e65e      	b.n	800151e <__aeabi_dadd+0x322>
 8001860:	4443      	add	r3, r8
 8001862:	4283      	cmp	r3, r0
 8001864:	4180      	sbcs	r0, r0
 8001866:	4449      	add	r1, r9
 8001868:	468a      	mov	sl, r1
 800186a:	4240      	negs	r0, r0
 800186c:	001c      	movs	r4, r3
 800186e:	4482      	add	sl, r0
 8001870:	e6bc      	b.n	80015ec <__aeabi_dadd+0x3f0>
 8001872:	4653      	mov	r3, sl
 8001874:	4323      	orrs	r3, r4
 8001876:	d100      	bne.n	800187a <__aeabi_dadd+0x67e>
 8001878:	e6a9      	b.n	80015ce <__aeabi_dadd+0x3d2>
 800187a:	e5e4      	b.n	8001446 <__aeabi_dadd+0x24a>
 800187c:	074a      	lsls	r2, r1, #29
 800187e:	4313      	orrs	r3, r2
 8001880:	2280      	movs	r2, #128	; 0x80
 8001882:	08c9      	lsrs	r1, r1, #3
 8001884:	0312      	lsls	r2, r2, #12
 8001886:	4211      	tst	r1, r2
 8001888:	d009      	beq.n	800189e <__aeabi_dadd+0x6a2>
 800188a:	4648      	mov	r0, r9
 800188c:	08c4      	lsrs	r4, r0, #3
 800188e:	4214      	tst	r4, r2
 8001890:	d105      	bne.n	800189e <__aeabi_dadd+0x6a2>
 8001892:	4643      	mov	r3, r8
 8001894:	4665      	mov	r5, ip
 8001896:	0021      	movs	r1, r4
 8001898:	08db      	lsrs	r3, r3, #3
 800189a:	0742      	lsls	r2, r0, #29
 800189c:	4313      	orrs	r3, r2
 800189e:	0f5a      	lsrs	r2, r3, #29
 80018a0:	00db      	lsls	r3, r3, #3
 80018a2:	08db      	lsrs	r3, r3, #3
 80018a4:	0752      	lsls	r2, r2, #29
 80018a6:	4313      	orrs	r3, r2
 80018a8:	e5fa      	b.n	80014a0 <__aeabi_dadd+0x2a4>
 80018aa:	2300      	movs	r3, #0
 80018ac:	4a01      	ldr	r2, [pc, #4]	; (80018b4 <__aeabi_dadd+0x6b8>)
 80018ae:	001c      	movs	r4, r3
 80018b0:	e540      	b.n	8001334 <__aeabi_dadd+0x138>
 80018b2:	46c0      	nop			; (mov r8, r8)
 80018b4:	000007ff 	.word	0x000007ff
 80018b8:	ff7fffff 	.word	0xff7fffff

080018bc <__aeabi_ddiv>:
 80018bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018be:	4657      	mov	r7, sl
 80018c0:	464e      	mov	r6, r9
 80018c2:	4645      	mov	r5, r8
 80018c4:	46de      	mov	lr, fp
 80018c6:	b5e0      	push	{r5, r6, r7, lr}
 80018c8:	030c      	lsls	r4, r1, #12
 80018ca:	001f      	movs	r7, r3
 80018cc:	004b      	lsls	r3, r1, #1
 80018ce:	4681      	mov	r9, r0
 80018d0:	4692      	mov	sl, r2
 80018d2:	0005      	movs	r5, r0
 80018d4:	b085      	sub	sp, #20
 80018d6:	0b24      	lsrs	r4, r4, #12
 80018d8:	0d5b      	lsrs	r3, r3, #21
 80018da:	0fce      	lsrs	r6, r1, #31
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d100      	bne.n	80018e2 <__aeabi_ddiv+0x26>
 80018e0:	e152      	b.n	8001b88 <__aeabi_ddiv+0x2cc>
 80018e2:	4ad2      	ldr	r2, [pc, #840]	; (8001c2c <__aeabi_ddiv+0x370>)
 80018e4:	4293      	cmp	r3, r2
 80018e6:	d100      	bne.n	80018ea <__aeabi_ddiv+0x2e>
 80018e8:	e16e      	b.n	8001bc8 <__aeabi_ddiv+0x30c>
 80018ea:	0f42      	lsrs	r2, r0, #29
 80018ec:	00e4      	lsls	r4, r4, #3
 80018ee:	4314      	orrs	r4, r2
 80018f0:	2280      	movs	r2, #128	; 0x80
 80018f2:	0412      	lsls	r2, r2, #16
 80018f4:	4322      	orrs	r2, r4
 80018f6:	4690      	mov	r8, r2
 80018f8:	4acd      	ldr	r2, [pc, #820]	; (8001c30 <__aeabi_ddiv+0x374>)
 80018fa:	00c5      	lsls	r5, r0, #3
 80018fc:	4693      	mov	fp, r2
 80018fe:	449b      	add	fp, r3
 8001900:	2300      	movs	r3, #0
 8001902:	4699      	mov	r9, r3
 8001904:	9300      	str	r3, [sp, #0]
 8001906:	033c      	lsls	r4, r7, #12
 8001908:	007b      	lsls	r3, r7, #1
 800190a:	4650      	mov	r0, sl
 800190c:	0b24      	lsrs	r4, r4, #12
 800190e:	0d5b      	lsrs	r3, r3, #21
 8001910:	0fff      	lsrs	r7, r7, #31
 8001912:	2b00      	cmp	r3, #0
 8001914:	d100      	bne.n	8001918 <__aeabi_ddiv+0x5c>
 8001916:	e11a      	b.n	8001b4e <__aeabi_ddiv+0x292>
 8001918:	4ac4      	ldr	r2, [pc, #784]	; (8001c2c <__aeabi_ddiv+0x370>)
 800191a:	4293      	cmp	r3, r2
 800191c:	d100      	bne.n	8001920 <__aeabi_ddiv+0x64>
 800191e:	e15e      	b.n	8001bde <__aeabi_ddiv+0x322>
 8001920:	0f42      	lsrs	r2, r0, #29
 8001922:	00e4      	lsls	r4, r4, #3
 8001924:	4322      	orrs	r2, r4
 8001926:	2480      	movs	r4, #128	; 0x80
 8001928:	0424      	lsls	r4, r4, #16
 800192a:	4314      	orrs	r4, r2
 800192c:	4ac0      	ldr	r2, [pc, #768]	; (8001c30 <__aeabi_ddiv+0x374>)
 800192e:	00c1      	lsls	r1, r0, #3
 8001930:	4694      	mov	ip, r2
 8001932:	465a      	mov	r2, fp
 8001934:	4463      	add	r3, ip
 8001936:	1ad3      	subs	r3, r2, r3
 8001938:	469b      	mov	fp, r3
 800193a:	2000      	movs	r0, #0
 800193c:	0033      	movs	r3, r6
 800193e:	407b      	eors	r3, r7
 8001940:	469a      	mov	sl, r3
 8001942:	464b      	mov	r3, r9
 8001944:	2b0f      	cmp	r3, #15
 8001946:	d827      	bhi.n	8001998 <__aeabi_ddiv+0xdc>
 8001948:	4aba      	ldr	r2, [pc, #744]	; (8001c34 <__aeabi_ddiv+0x378>)
 800194a:	009b      	lsls	r3, r3, #2
 800194c:	58d3      	ldr	r3, [r2, r3]
 800194e:	469f      	mov	pc, r3
 8001950:	46b2      	mov	sl, r6
 8001952:	9b00      	ldr	r3, [sp, #0]
 8001954:	2b02      	cmp	r3, #2
 8001956:	d016      	beq.n	8001986 <__aeabi_ddiv+0xca>
 8001958:	2b03      	cmp	r3, #3
 800195a:	d100      	bne.n	800195e <__aeabi_ddiv+0xa2>
 800195c:	e287      	b.n	8001e6e <__aeabi_ddiv+0x5b2>
 800195e:	2b01      	cmp	r3, #1
 8001960:	d000      	beq.n	8001964 <__aeabi_ddiv+0xa8>
 8001962:	e0d5      	b.n	8001b10 <__aeabi_ddiv+0x254>
 8001964:	2300      	movs	r3, #0
 8001966:	2200      	movs	r2, #0
 8001968:	2500      	movs	r5, #0
 800196a:	051b      	lsls	r3, r3, #20
 800196c:	4313      	orrs	r3, r2
 800196e:	4652      	mov	r2, sl
 8001970:	07d2      	lsls	r2, r2, #31
 8001972:	4313      	orrs	r3, r2
 8001974:	0028      	movs	r0, r5
 8001976:	0019      	movs	r1, r3
 8001978:	b005      	add	sp, #20
 800197a:	bcf0      	pop	{r4, r5, r6, r7}
 800197c:	46bb      	mov	fp, r7
 800197e:	46b2      	mov	sl, r6
 8001980:	46a9      	mov	r9, r5
 8001982:	46a0      	mov	r8, r4
 8001984:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001986:	2200      	movs	r2, #0
 8001988:	2500      	movs	r5, #0
 800198a:	4ba8      	ldr	r3, [pc, #672]	; (8001c2c <__aeabi_ddiv+0x370>)
 800198c:	e7ed      	b.n	800196a <__aeabi_ddiv+0xae>
 800198e:	46ba      	mov	sl, r7
 8001990:	46a0      	mov	r8, r4
 8001992:	000d      	movs	r5, r1
 8001994:	9000      	str	r0, [sp, #0]
 8001996:	e7dc      	b.n	8001952 <__aeabi_ddiv+0x96>
 8001998:	4544      	cmp	r4, r8
 800199a:	d200      	bcs.n	800199e <__aeabi_ddiv+0xe2>
 800199c:	e1c4      	b.n	8001d28 <__aeabi_ddiv+0x46c>
 800199e:	d100      	bne.n	80019a2 <__aeabi_ddiv+0xe6>
 80019a0:	e1bf      	b.n	8001d22 <__aeabi_ddiv+0x466>
 80019a2:	2301      	movs	r3, #1
 80019a4:	425b      	negs	r3, r3
 80019a6:	469c      	mov	ip, r3
 80019a8:	002e      	movs	r6, r5
 80019aa:	4640      	mov	r0, r8
 80019ac:	2500      	movs	r5, #0
 80019ae:	44e3      	add	fp, ip
 80019b0:	0223      	lsls	r3, r4, #8
 80019b2:	0e0c      	lsrs	r4, r1, #24
 80019b4:	431c      	orrs	r4, r3
 80019b6:	0c1b      	lsrs	r3, r3, #16
 80019b8:	4699      	mov	r9, r3
 80019ba:	0423      	lsls	r3, r4, #16
 80019bc:	020a      	lsls	r2, r1, #8
 80019be:	0c1f      	lsrs	r7, r3, #16
 80019c0:	4649      	mov	r1, r9
 80019c2:	9200      	str	r2, [sp, #0]
 80019c4:	9701      	str	r7, [sp, #4]
 80019c6:	f7fe fc4b 	bl	8000260 <__aeabi_uidivmod>
 80019ca:	0002      	movs	r2, r0
 80019cc:	437a      	muls	r2, r7
 80019ce:	040b      	lsls	r3, r1, #16
 80019d0:	0c31      	lsrs	r1, r6, #16
 80019d2:	4680      	mov	r8, r0
 80019d4:	4319      	orrs	r1, r3
 80019d6:	428a      	cmp	r2, r1
 80019d8:	d907      	bls.n	80019ea <__aeabi_ddiv+0x12e>
 80019da:	2301      	movs	r3, #1
 80019dc:	425b      	negs	r3, r3
 80019de:	469c      	mov	ip, r3
 80019e0:	1909      	adds	r1, r1, r4
 80019e2:	44e0      	add	r8, ip
 80019e4:	428c      	cmp	r4, r1
 80019e6:	d800      	bhi.n	80019ea <__aeabi_ddiv+0x12e>
 80019e8:	e201      	b.n	8001dee <__aeabi_ddiv+0x532>
 80019ea:	1a88      	subs	r0, r1, r2
 80019ec:	4649      	mov	r1, r9
 80019ee:	f7fe fc37 	bl	8000260 <__aeabi_uidivmod>
 80019f2:	9a01      	ldr	r2, [sp, #4]
 80019f4:	0436      	lsls	r6, r6, #16
 80019f6:	4342      	muls	r2, r0
 80019f8:	0409      	lsls	r1, r1, #16
 80019fa:	0c36      	lsrs	r6, r6, #16
 80019fc:	0003      	movs	r3, r0
 80019fe:	430e      	orrs	r6, r1
 8001a00:	42b2      	cmp	r2, r6
 8001a02:	d904      	bls.n	8001a0e <__aeabi_ddiv+0x152>
 8001a04:	1936      	adds	r6, r6, r4
 8001a06:	3b01      	subs	r3, #1
 8001a08:	42b4      	cmp	r4, r6
 8001a0a:	d800      	bhi.n	8001a0e <__aeabi_ddiv+0x152>
 8001a0c:	e1e9      	b.n	8001de2 <__aeabi_ddiv+0x526>
 8001a0e:	1ab0      	subs	r0, r6, r2
 8001a10:	4642      	mov	r2, r8
 8001a12:	9e00      	ldr	r6, [sp, #0]
 8001a14:	0412      	lsls	r2, r2, #16
 8001a16:	431a      	orrs	r2, r3
 8001a18:	0c33      	lsrs	r3, r6, #16
 8001a1a:	001f      	movs	r7, r3
 8001a1c:	0c11      	lsrs	r1, r2, #16
 8001a1e:	4690      	mov	r8, r2
 8001a20:	9302      	str	r3, [sp, #8]
 8001a22:	0413      	lsls	r3, r2, #16
 8001a24:	0432      	lsls	r2, r6, #16
 8001a26:	0c16      	lsrs	r6, r2, #16
 8001a28:	0032      	movs	r2, r6
 8001a2a:	0c1b      	lsrs	r3, r3, #16
 8001a2c:	435a      	muls	r2, r3
 8001a2e:	9603      	str	r6, [sp, #12]
 8001a30:	437b      	muls	r3, r7
 8001a32:	434e      	muls	r6, r1
 8001a34:	4379      	muls	r1, r7
 8001a36:	0c17      	lsrs	r7, r2, #16
 8001a38:	46bc      	mov	ip, r7
 8001a3a:	199b      	adds	r3, r3, r6
 8001a3c:	4463      	add	r3, ip
 8001a3e:	429e      	cmp	r6, r3
 8001a40:	d903      	bls.n	8001a4a <__aeabi_ddiv+0x18e>
 8001a42:	2680      	movs	r6, #128	; 0x80
 8001a44:	0276      	lsls	r6, r6, #9
 8001a46:	46b4      	mov	ip, r6
 8001a48:	4461      	add	r1, ip
 8001a4a:	0c1e      	lsrs	r6, r3, #16
 8001a4c:	1871      	adds	r1, r6, r1
 8001a4e:	0416      	lsls	r6, r2, #16
 8001a50:	041b      	lsls	r3, r3, #16
 8001a52:	0c36      	lsrs	r6, r6, #16
 8001a54:	199e      	adds	r6, r3, r6
 8001a56:	4288      	cmp	r0, r1
 8001a58:	d302      	bcc.n	8001a60 <__aeabi_ddiv+0x1a4>
 8001a5a:	d112      	bne.n	8001a82 <__aeabi_ddiv+0x1c6>
 8001a5c:	42b5      	cmp	r5, r6
 8001a5e:	d210      	bcs.n	8001a82 <__aeabi_ddiv+0x1c6>
 8001a60:	4643      	mov	r3, r8
 8001a62:	1e5a      	subs	r2, r3, #1
 8001a64:	9b00      	ldr	r3, [sp, #0]
 8001a66:	469c      	mov	ip, r3
 8001a68:	4465      	add	r5, ip
 8001a6a:	001f      	movs	r7, r3
 8001a6c:	429d      	cmp	r5, r3
 8001a6e:	419b      	sbcs	r3, r3
 8001a70:	425b      	negs	r3, r3
 8001a72:	191b      	adds	r3, r3, r4
 8001a74:	18c0      	adds	r0, r0, r3
 8001a76:	4284      	cmp	r4, r0
 8001a78:	d200      	bcs.n	8001a7c <__aeabi_ddiv+0x1c0>
 8001a7a:	e19e      	b.n	8001dba <__aeabi_ddiv+0x4fe>
 8001a7c:	d100      	bne.n	8001a80 <__aeabi_ddiv+0x1c4>
 8001a7e:	e199      	b.n	8001db4 <__aeabi_ddiv+0x4f8>
 8001a80:	4690      	mov	r8, r2
 8001a82:	1bae      	subs	r6, r5, r6
 8001a84:	42b5      	cmp	r5, r6
 8001a86:	41ad      	sbcs	r5, r5
 8001a88:	1a40      	subs	r0, r0, r1
 8001a8a:	426d      	negs	r5, r5
 8001a8c:	1b40      	subs	r0, r0, r5
 8001a8e:	4284      	cmp	r4, r0
 8001a90:	d100      	bne.n	8001a94 <__aeabi_ddiv+0x1d8>
 8001a92:	e1d2      	b.n	8001e3a <__aeabi_ddiv+0x57e>
 8001a94:	4649      	mov	r1, r9
 8001a96:	f7fe fbe3 	bl	8000260 <__aeabi_uidivmod>
 8001a9a:	9a01      	ldr	r2, [sp, #4]
 8001a9c:	040b      	lsls	r3, r1, #16
 8001a9e:	4342      	muls	r2, r0
 8001aa0:	0c31      	lsrs	r1, r6, #16
 8001aa2:	0005      	movs	r5, r0
 8001aa4:	4319      	orrs	r1, r3
 8001aa6:	428a      	cmp	r2, r1
 8001aa8:	d900      	bls.n	8001aac <__aeabi_ddiv+0x1f0>
 8001aaa:	e16c      	b.n	8001d86 <__aeabi_ddiv+0x4ca>
 8001aac:	1a88      	subs	r0, r1, r2
 8001aae:	4649      	mov	r1, r9
 8001ab0:	f7fe fbd6 	bl	8000260 <__aeabi_uidivmod>
 8001ab4:	9a01      	ldr	r2, [sp, #4]
 8001ab6:	0436      	lsls	r6, r6, #16
 8001ab8:	4342      	muls	r2, r0
 8001aba:	0409      	lsls	r1, r1, #16
 8001abc:	0c36      	lsrs	r6, r6, #16
 8001abe:	0003      	movs	r3, r0
 8001ac0:	430e      	orrs	r6, r1
 8001ac2:	42b2      	cmp	r2, r6
 8001ac4:	d900      	bls.n	8001ac8 <__aeabi_ddiv+0x20c>
 8001ac6:	e153      	b.n	8001d70 <__aeabi_ddiv+0x4b4>
 8001ac8:	9803      	ldr	r0, [sp, #12]
 8001aca:	1ab6      	subs	r6, r6, r2
 8001acc:	0002      	movs	r2, r0
 8001ace:	042d      	lsls	r5, r5, #16
 8001ad0:	431d      	orrs	r5, r3
 8001ad2:	9f02      	ldr	r7, [sp, #8]
 8001ad4:	042b      	lsls	r3, r5, #16
 8001ad6:	0c1b      	lsrs	r3, r3, #16
 8001ad8:	435a      	muls	r2, r3
 8001ada:	437b      	muls	r3, r7
 8001adc:	469c      	mov	ip, r3
 8001ade:	0c29      	lsrs	r1, r5, #16
 8001ae0:	4348      	muls	r0, r1
 8001ae2:	0c13      	lsrs	r3, r2, #16
 8001ae4:	4484      	add	ip, r0
 8001ae6:	4463      	add	r3, ip
 8001ae8:	4379      	muls	r1, r7
 8001aea:	4298      	cmp	r0, r3
 8001aec:	d903      	bls.n	8001af6 <__aeabi_ddiv+0x23a>
 8001aee:	2080      	movs	r0, #128	; 0x80
 8001af0:	0240      	lsls	r0, r0, #9
 8001af2:	4684      	mov	ip, r0
 8001af4:	4461      	add	r1, ip
 8001af6:	0c18      	lsrs	r0, r3, #16
 8001af8:	0412      	lsls	r2, r2, #16
 8001afa:	041b      	lsls	r3, r3, #16
 8001afc:	0c12      	lsrs	r2, r2, #16
 8001afe:	1840      	adds	r0, r0, r1
 8001b00:	189b      	adds	r3, r3, r2
 8001b02:	4286      	cmp	r6, r0
 8001b04:	d200      	bcs.n	8001b08 <__aeabi_ddiv+0x24c>
 8001b06:	e100      	b.n	8001d0a <__aeabi_ddiv+0x44e>
 8001b08:	d100      	bne.n	8001b0c <__aeabi_ddiv+0x250>
 8001b0a:	e0fb      	b.n	8001d04 <__aeabi_ddiv+0x448>
 8001b0c:	2301      	movs	r3, #1
 8001b0e:	431d      	orrs	r5, r3
 8001b10:	4b49      	ldr	r3, [pc, #292]	; (8001c38 <__aeabi_ddiv+0x37c>)
 8001b12:	445b      	add	r3, fp
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	dc00      	bgt.n	8001b1a <__aeabi_ddiv+0x25e>
 8001b18:	e0aa      	b.n	8001c70 <__aeabi_ddiv+0x3b4>
 8001b1a:	076a      	lsls	r2, r5, #29
 8001b1c:	d000      	beq.n	8001b20 <__aeabi_ddiv+0x264>
 8001b1e:	e13d      	b.n	8001d9c <__aeabi_ddiv+0x4e0>
 8001b20:	08e9      	lsrs	r1, r5, #3
 8001b22:	4642      	mov	r2, r8
 8001b24:	01d2      	lsls	r2, r2, #7
 8001b26:	d506      	bpl.n	8001b36 <__aeabi_ddiv+0x27a>
 8001b28:	4642      	mov	r2, r8
 8001b2a:	4b44      	ldr	r3, [pc, #272]	; (8001c3c <__aeabi_ddiv+0x380>)
 8001b2c:	401a      	ands	r2, r3
 8001b2e:	2380      	movs	r3, #128	; 0x80
 8001b30:	4690      	mov	r8, r2
 8001b32:	00db      	lsls	r3, r3, #3
 8001b34:	445b      	add	r3, fp
 8001b36:	4a42      	ldr	r2, [pc, #264]	; (8001c40 <__aeabi_ddiv+0x384>)
 8001b38:	4293      	cmp	r3, r2
 8001b3a:	dd00      	ble.n	8001b3e <__aeabi_ddiv+0x282>
 8001b3c:	e723      	b.n	8001986 <__aeabi_ddiv+0xca>
 8001b3e:	4642      	mov	r2, r8
 8001b40:	055b      	lsls	r3, r3, #21
 8001b42:	0755      	lsls	r5, r2, #29
 8001b44:	0252      	lsls	r2, r2, #9
 8001b46:	430d      	orrs	r5, r1
 8001b48:	0b12      	lsrs	r2, r2, #12
 8001b4a:	0d5b      	lsrs	r3, r3, #21
 8001b4c:	e70d      	b.n	800196a <__aeabi_ddiv+0xae>
 8001b4e:	4651      	mov	r1, sl
 8001b50:	4321      	orrs	r1, r4
 8001b52:	d100      	bne.n	8001b56 <__aeabi_ddiv+0x29a>
 8001b54:	e07c      	b.n	8001c50 <__aeabi_ddiv+0x394>
 8001b56:	2c00      	cmp	r4, #0
 8001b58:	d100      	bne.n	8001b5c <__aeabi_ddiv+0x2a0>
 8001b5a:	e0fb      	b.n	8001d54 <__aeabi_ddiv+0x498>
 8001b5c:	0020      	movs	r0, r4
 8001b5e:	f001 f9fd 	bl	8002f5c <__clzsi2>
 8001b62:	0002      	movs	r2, r0
 8001b64:	3a0b      	subs	r2, #11
 8001b66:	231d      	movs	r3, #29
 8001b68:	1a9b      	subs	r3, r3, r2
 8001b6a:	4652      	mov	r2, sl
 8001b6c:	0001      	movs	r1, r0
 8001b6e:	40da      	lsrs	r2, r3
 8001b70:	4653      	mov	r3, sl
 8001b72:	3908      	subs	r1, #8
 8001b74:	408b      	lsls	r3, r1
 8001b76:	408c      	lsls	r4, r1
 8001b78:	0019      	movs	r1, r3
 8001b7a:	4314      	orrs	r4, r2
 8001b7c:	4b31      	ldr	r3, [pc, #196]	; (8001c44 <__aeabi_ddiv+0x388>)
 8001b7e:	4458      	add	r0, fp
 8001b80:	469b      	mov	fp, r3
 8001b82:	4483      	add	fp, r0
 8001b84:	2000      	movs	r0, #0
 8001b86:	e6d9      	b.n	800193c <__aeabi_ddiv+0x80>
 8001b88:	0003      	movs	r3, r0
 8001b8a:	4323      	orrs	r3, r4
 8001b8c:	4698      	mov	r8, r3
 8001b8e:	d044      	beq.n	8001c1a <__aeabi_ddiv+0x35e>
 8001b90:	2c00      	cmp	r4, #0
 8001b92:	d100      	bne.n	8001b96 <__aeabi_ddiv+0x2da>
 8001b94:	e0cf      	b.n	8001d36 <__aeabi_ddiv+0x47a>
 8001b96:	0020      	movs	r0, r4
 8001b98:	f001 f9e0 	bl	8002f5c <__clzsi2>
 8001b9c:	0001      	movs	r1, r0
 8001b9e:	0002      	movs	r2, r0
 8001ba0:	390b      	subs	r1, #11
 8001ba2:	231d      	movs	r3, #29
 8001ba4:	1a5b      	subs	r3, r3, r1
 8001ba6:	4649      	mov	r1, r9
 8001ba8:	0010      	movs	r0, r2
 8001baa:	40d9      	lsrs	r1, r3
 8001bac:	3808      	subs	r0, #8
 8001bae:	4084      	lsls	r4, r0
 8001bb0:	000b      	movs	r3, r1
 8001bb2:	464d      	mov	r5, r9
 8001bb4:	4323      	orrs	r3, r4
 8001bb6:	4698      	mov	r8, r3
 8001bb8:	4085      	lsls	r5, r0
 8001bba:	4b23      	ldr	r3, [pc, #140]	; (8001c48 <__aeabi_ddiv+0x38c>)
 8001bbc:	1a9b      	subs	r3, r3, r2
 8001bbe:	469b      	mov	fp, r3
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	4699      	mov	r9, r3
 8001bc4:	9300      	str	r3, [sp, #0]
 8001bc6:	e69e      	b.n	8001906 <__aeabi_ddiv+0x4a>
 8001bc8:	0002      	movs	r2, r0
 8001bca:	4322      	orrs	r2, r4
 8001bcc:	4690      	mov	r8, r2
 8001bce:	d11d      	bne.n	8001c0c <__aeabi_ddiv+0x350>
 8001bd0:	2208      	movs	r2, #8
 8001bd2:	469b      	mov	fp, r3
 8001bd4:	2302      	movs	r3, #2
 8001bd6:	2500      	movs	r5, #0
 8001bd8:	4691      	mov	r9, r2
 8001bda:	9300      	str	r3, [sp, #0]
 8001bdc:	e693      	b.n	8001906 <__aeabi_ddiv+0x4a>
 8001bde:	4651      	mov	r1, sl
 8001be0:	4321      	orrs	r1, r4
 8001be2:	d109      	bne.n	8001bf8 <__aeabi_ddiv+0x33c>
 8001be4:	2302      	movs	r3, #2
 8001be6:	464a      	mov	r2, r9
 8001be8:	431a      	orrs	r2, r3
 8001bea:	4b18      	ldr	r3, [pc, #96]	; (8001c4c <__aeabi_ddiv+0x390>)
 8001bec:	4691      	mov	r9, r2
 8001bee:	469c      	mov	ip, r3
 8001bf0:	2400      	movs	r4, #0
 8001bf2:	2002      	movs	r0, #2
 8001bf4:	44e3      	add	fp, ip
 8001bf6:	e6a1      	b.n	800193c <__aeabi_ddiv+0x80>
 8001bf8:	2303      	movs	r3, #3
 8001bfa:	464a      	mov	r2, r9
 8001bfc:	431a      	orrs	r2, r3
 8001bfe:	4b13      	ldr	r3, [pc, #76]	; (8001c4c <__aeabi_ddiv+0x390>)
 8001c00:	4691      	mov	r9, r2
 8001c02:	469c      	mov	ip, r3
 8001c04:	4651      	mov	r1, sl
 8001c06:	2003      	movs	r0, #3
 8001c08:	44e3      	add	fp, ip
 8001c0a:	e697      	b.n	800193c <__aeabi_ddiv+0x80>
 8001c0c:	220c      	movs	r2, #12
 8001c0e:	469b      	mov	fp, r3
 8001c10:	2303      	movs	r3, #3
 8001c12:	46a0      	mov	r8, r4
 8001c14:	4691      	mov	r9, r2
 8001c16:	9300      	str	r3, [sp, #0]
 8001c18:	e675      	b.n	8001906 <__aeabi_ddiv+0x4a>
 8001c1a:	2304      	movs	r3, #4
 8001c1c:	4699      	mov	r9, r3
 8001c1e:	2300      	movs	r3, #0
 8001c20:	469b      	mov	fp, r3
 8001c22:	3301      	adds	r3, #1
 8001c24:	2500      	movs	r5, #0
 8001c26:	9300      	str	r3, [sp, #0]
 8001c28:	e66d      	b.n	8001906 <__aeabi_ddiv+0x4a>
 8001c2a:	46c0      	nop			; (mov r8, r8)
 8001c2c:	000007ff 	.word	0x000007ff
 8001c30:	fffffc01 	.word	0xfffffc01
 8001c34:	0800f42c 	.word	0x0800f42c
 8001c38:	000003ff 	.word	0x000003ff
 8001c3c:	feffffff 	.word	0xfeffffff
 8001c40:	000007fe 	.word	0x000007fe
 8001c44:	000003f3 	.word	0x000003f3
 8001c48:	fffffc0d 	.word	0xfffffc0d
 8001c4c:	fffff801 	.word	0xfffff801
 8001c50:	464a      	mov	r2, r9
 8001c52:	2301      	movs	r3, #1
 8001c54:	431a      	orrs	r2, r3
 8001c56:	4691      	mov	r9, r2
 8001c58:	2400      	movs	r4, #0
 8001c5a:	2001      	movs	r0, #1
 8001c5c:	e66e      	b.n	800193c <__aeabi_ddiv+0x80>
 8001c5e:	2300      	movs	r3, #0
 8001c60:	2280      	movs	r2, #128	; 0x80
 8001c62:	469a      	mov	sl, r3
 8001c64:	2500      	movs	r5, #0
 8001c66:	4b88      	ldr	r3, [pc, #544]	; (8001e88 <__aeabi_ddiv+0x5cc>)
 8001c68:	0312      	lsls	r2, r2, #12
 8001c6a:	e67e      	b.n	800196a <__aeabi_ddiv+0xae>
 8001c6c:	2501      	movs	r5, #1
 8001c6e:	426d      	negs	r5, r5
 8001c70:	2201      	movs	r2, #1
 8001c72:	1ad2      	subs	r2, r2, r3
 8001c74:	2a38      	cmp	r2, #56	; 0x38
 8001c76:	dd00      	ble.n	8001c7a <__aeabi_ddiv+0x3be>
 8001c78:	e674      	b.n	8001964 <__aeabi_ddiv+0xa8>
 8001c7a:	2a1f      	cmp	r2, #31
 8001c7c:	dc00      	bgt.n	8001c80 <__aeabi_ddiv+0x3c4>
 8001c7e:	e0bd      	b.n	8001dfc <__aeabi_ddiv+0x540>
 8001c80:	211f      	movs	r1, #31
 8001c82:	4249      	negs	r1, r1
 8001c84:	1acb      	subs	r3, r1, r3
 8001c86:	4641      	mov	r1, r8
 8001c88:	40d9      	lsrs	r1, r3
 8001c8a:	000b      	movs	r3, r1
 8001c8c:	2a20      	cmp	r2, #32
 8001c8e:	d004      	beq.n	8001c9a <__aeabi_ddiv+0x3de>
 8001c90:	4641      	mov	r1, r8
 8001c92:	4a7e      	ldr	r2, [pc, #504]	; (8001e8c <__aeabi_ddiv+0x5d0>)
 8001c94:	445a      	add	r2, fp
 8001c96:	4091      	lsls	r1, r2
 8001c98:	430d      	orrs	r5, r1
 8001c9a:	0029      	movs	r1, r5
 8001c9c:	1e4a      	subs	r2, r1, #1
 8001c9e:	4191      	sbcs	r1, r2
 8001ca0:	4319      	orrs	r1, r3
 8001ca2:	2307      	movs	r3, #7
 8001ca4:	001d      	movs	r5, r3
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	400d      	ands	r5, r1
 8001caa:	420b      	tst	r3, r1
 8001cac:	d100      	bne.n	8001cb0 <__aeabi_ddiv+0x3f4>
 8001cae:	e0d0      	b.n	8001e52 <__aeabi_ddiv+0x596>
 8001cb0:	220f      	movs	r2, #15
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	400a      	ands	r2, r1
 8001cb6:	2a04      	cmp	r2, #4
 8001cb8:	d100      	bne.n	8001cbc <__aeabi_ddiv+0x400>
 8001cba:	e0c7      	b.n	8001e4c <__aeabi_ddiv+0x590>
 8001cbc:	1d0a      	adds	r2, r1, #4
 8001cbe:	428a      	cmp	r2, r1
 8001cc0:	4189      	sbcs	r1, r1
 8001cc2:	4249      	negs	r1, r1
 8001cc4:	185b      	adds	r3, r3, r1
 8001cc6:	0011      	movs	r1, r2
 8001cc8:	021a      	lsls	r2, r3, #8
 8001cca:	d400      	bmi.n	8001cce <__aeabi_ddiv+0x412>
 8001ccc:	e0be      	b.n	8001e4c <__aeabi_ddiv+0x590>
 8001cce:	2301      	movs	r3, #1
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	2500      	movs	r5, #0
 8001cd4:	e649      	b.n	800196a <__aeabi_ddiv+0xae>
 8001cd6:	2280      	movs	r2, #128	; 0x80
 8001cd8:	4643      	mov	r3, r8
 8001cda:	0312      	lsls	r2, r2, #12
 8001cdc:	4213      	tst	r3, r2
 8001cde:	d008      	beq.n	8001cf2 <__aeabi_ddiv+0x436>
 8001ce0:	4214      	tst	r4, r2
 8001ce2:	d106      	bne.n	8001cf2 <__aeabi_ddiv+0x436>
 8001ce4:	4322      	orrs	r2, r4
 8001ce6:	0312      	lsls	r2, r2, #12
 8001ce8:	46ba      	mov	sl, r7
 8001cea:	000d      	movs	r5, r1
 8001cec:	4b66      	ldr	r3, [pc, #408]	; (8001e88 <__aeabi_ddiv+0x5cc>)
 8001cee:	0b12      	lsrs	r2, r2, #12
 8001cf0:	e63b      	b.n	800196a <__aeabi_ddiv+0xae>
 8001cf2:	2280      	movs	r2, #128	; 0x80
 8001cf4:	4643      	mov	r3, r8
 8001cf6:	0312      	lsls	r2, r2, #12
 8001cf8:	431a      	orrs	r2, r3
 8001cfa:	0312      	lsls	r2, r2, #12
 8001cfc:	46b2      	mov	sl, r6
 8001cfe:	4b62      	ldr	r3, [pc, #392]	; (8001e88 <__aeabi_ddiv+0x5cc>)
 8001d00:	0b12      	lsrs	r2, r2, #12
 8001d02:	e632      	b.n	800196a <__aeabi_ddiv+0xae>
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d100      	bne.n	8001d0a <__aeabi_ddiv+0x44e>
 8001d08:	e702      	b.n	8001b10 <__aeabi_ddiv+0x254>
 8001d0a:	19a6      	adds	r6, r4, r6
 8001d0c:	1e6a      	subs	r2, r5, #1
 8001d0e:	42a6      	cmp	r6, r4
 8001d10:	d200      	bcs.n	8001d14 <__aeabi_ddiv+0x458>
 8001d12:	e089      	b.n	8001e28 <__aeabi_ddiv+0x56c>
 8001d14:	4286      	cmp	r6, r0
 8001d16:	d200      	bcs.n	8001d1a <__aeabi_ddiv+0x45e>
 8001d18:	e09f      	b.n	8001e5a <__aeabi_ddiv+0x59e>
 8001d1a:	d100      	bne.n	8001d1e <__aeabi_ddiv+0x462>
 8001d1c:	e0af      	b.n	8001e7e <__aeabi_ddiv+0x5c2>
 8001d1e:	0015      	movs	r5, r2
 8001d20:	e6f4      	b.n	8001b0c <__aeabi_ddiv+0x250>
 8001d22:	42a9      	cmp	r1, r5
 8001d24:	d900      	bls.n	8001d28 <__aeabi_ddiv+0x46c>
 8001d26:	e63c      	b.n	80019a2 <__aeabi_ddiv+0xe6>
 8001d28:	4643      	mov	r3, r8
 8001d2a:	07de      	lsls	r6, r3, #31
 8001d2c:	0858      	lsrs	r0, r3, #1
 8001d2e:	086b      	lsrs	r3, r5, #1
 8001d30:	431e      	orrs	r6, r3
 8001d32:	07ed      	lsls	r5, r5, #31
 8001d34:	e63c      	b.n	80019b0 <__aeabi_ddiv+0xf4>
 8001d36:	f001 f911 	bl	8002f5c <__clzsi2>
 8001d3a:	0001      	movs	r1, r0
 8001d3c:	0002      	movs	r2, r0
 8001d3e:	3115      	adds	r1, #21
 8001d40:	3220      	adds	r2, #32
 8001d42:	291c      	cmp	r1, #28
 8001d44:	dc00      	bgt.n	8001d48 <__aeabi_ddiv+0x48c>
 8001d46:	e72c      	b.n	8001ba2 <__aeabi_ddiv+0x2e6>
 8001d48:	464b      	mov	r3, r9
 8001d4a:	3808      	subs	r0, #8
 8001d4c:	4083      	lsls	r3, r0
 8001d4e:	2500      	movs	r5, #0
 8001d50:	4698      	mov	r8, r3
 8001d52:	e732      	b.n	8001bba <__aeabi_ddiv+0x2fe>
 8001d54:	f001 f902 	bl	8002f5c <__clzsi2>
 8001d58:	0003      	movs	r3, r0
 8001d5a:	001a      	movs	r2, r3
 8001d5c:	3215      	adds	r2, #21
 8001d5e:	3020      	adds	r0, #32
 8001d60:	2a1c      	cmp	r2, #28
 8001d62:	dc00      	bgt.n	8001d66 <__aeabi_ddiv+0x4aa>
 8001d64:	e6ff      	b.n	8001b66 <__aeabi_ddiv+0x2aa>
 8001d66:	4654      	mov	r4, sl
 8001d68:	3b08      	subs	r3, #8
 8001d6a:	2100      	movs	r1, #0
 8001d6c:	409c      	lsls	r4, r3
 8001d6e:	e705      	b.n	8001b7c <__aeabi_ddiv+0x2c0>
 8001d70:	1936      	adds	r6, r6, r4
 8001d72:	3b01      	subs	r3, #1
 8001d74:	42b4      	cmp	r4, r6
 8001d76:	d900      	bls.n	8001d7a <__aeabi_ddiv+0x4be>
 8001d78:	e6a6      	b.n	8001ac8 <__aeabi_ddiv+0x20c>
 8001d7a:	42b2      	cmp	r2, r6
 8001d7c:	d800      	bhi.n	8001d80 <__aeabi_ddiv+0x4c4>
 8001d7e:	e6a3      	b.n	8001ac8 <__aeabi_ddiv+0x20c>
 8001d80:	1e83      	subs	r3, r0, #2
 8001d82:	1936      	adds	r6, r6, r4
 8001d84:	e6a0      	b.n	8001ac8 <__aeabi_ddiv+0x20c>
 8001d86:	1909      	adds	r1, r1, r4
 8001d88:	3d01      	subs	r5, #1
 8001d8a:	428c      	cmp	r4, r1
 8001d8c:	d900      	bls.n	8001d90 <__aeabi_ddiv+0x4d4>
 8001d8e:	e68d      	b.n	8001aac <__aeabi_ddiv+0x1f0>
 8001d90:	428a      	cmp	r2, r1
 8001d92:	d800      	bhi.n	8001d96 <__aeabi_ddiv+0x4da>
 8001d94:	e68a      	b.n	8001aac <__aeabi_ddiv+0x1f0>
 8001d96:	1e85      	subs	r5, r0, #2
 8001d98:	1909      	adds	r1, r1, r4
 8001d9a:	e687      	b.n	8001aac <__aeabi_ddiv+0x1f0>
 8001d9c:	220f      	movs	r2, #15
 8001d9e:	402a      	ands	r2, r5
 8001da0:	2a04      	cmp	r2, #4
 8001da2:	d100      	bne.n	8001da6 <__aeabi_ddiv+0x4ea>
 8001da4:	e6bc      	b.n	8001b20 <__aeabi_ddiv+0x264>
 8001da6:	1d29      	adds	r1, r5, #4
 8001da8:	42a9      	cmp	r1, r5
 8001daa:	41ad      	sbcs	r5, r5
 8001dac:	426d      	negs	r5, r5
 8001dae:	08c9      	lsrs	r1, r1, #3
 8001db0:	44a8      	add	r8, r5
 8001db2:	e6b6      	b.n	8001b22 <__aeabi_ddiv+0x266>
 8001db4:	42af      	cmp	r7, r5
 8001db6:	d900      	bls.n	8001dba <__aeabi_ddiv+0x4fe>
 8001db8:	e662      	b.n	8001a80 <__aeabi_ddiv+0x1c4>
 8001dba:	4281      	cmp	r1, r0
 8001dbc:	d804      	bhi.n	8001dc8 <__aeabi_ddiv+0x50c>
 8001dbe:	d000      	beq.n	8001dc2 <__aeabi_ddiv+0x506>
 8001dc0:	e65e      	b.n	8001a80 <__aeabi_ddiv+0x1c4>
 8001dc2:	42ae      	cmp	r6, r5
 8001dc4:	d800      	bhi.n	8001dc8 <__aeabi_ddiv+0x50c>
 8001dc6:	e65b      	b.n	8001a80 <__aeabi_ddiv+0x1c4>
 8001dc8:	2302      	movs	r3, #2
 8001dca:	425b      	negs	r3, r3
 8001dcc:	469c      	mov	ip, r3
 8001dce:	9b00      	ldr	r3, [sp, #0]
 8001dd0:	44e0      	add	r8, ip
 8001dd2:	469c      	mov	ip, r3
 8001dd4:	4465      	add	r5, ip
 8001dd6:	429d      	cmp	r5, r3
 8001dd8:	419b      	sbcs	r3, r3
 8001dda:	425b      	negs	r3, r3
 8001ddc:	191b      	adds	r3, r3, r4
 8001dde:	18c0      	adds	r0, r0, r3
 8001de0:	e64f      	b.n	8001a82 <__aeabi_ddiv+0x1c6>
 8001de2:	42b2      	cmp	r2, r6
 8001de4:	d800      	bhi.n	8001de8 <__aeabi_ddiv+0x52c>
 8001de6:	e612      	b.n	8001a0e <__aeabi_ddiv+0x152>
 8001de8:	1e83      	subs	r3, r0, #2
 8001dea:	1936      	adds	r6, r6, r4
 8001dec:	e60f      	b.n	8001a0e <__aeabi_ddiv+0x152>
 8001dee:	428a      	cmp	r2, r1
 8001df0:	d800      	bhi.n	8001df4 <__aeabi_ddiv+0x538>
 8001df2:	e5fa      	b.n	80019ea <__aeabi_ddiv+0x12e>
 8001df4:	1e83      	subs	r3, r0, #2
 8001df6:	4698      	mov	r8, r3
 8001df8:	1909      	adds	r1, r1, r4
 8001dfa:	e5f6      	b.n	80019ea <__aeabi_ddiv+0x12e>
 8001dfc:	4b24      	ldr	r3, [pc, #144]	; (8001e90 <__aeabi_ddiv+0x5d4>)
 8001dfe:	0028      	movs	r0, r5
 8001e00:	445b      	add	r3, fp
 8001e02:	4641      	mov	r1, r8
 8001e04:	409d      	lsls	r5, r3
 8001e06:	4099      	lsls	r1, r3
 8001e08:	40d0      	lsrs	r0, r2
 8001e0a:	1e6b      	subs	r3, r5, #1
 8001e0c:	419d      	sbcs	r5, r3
 8001e0e:	4643      	mov	r3, r8
 8001e10:	4301      	orrs	r1, r0
 8001e12:	4329      	orrs	r1, r5
 8001e14:	40d3      	lsrs	r3, r2
 8001e16:	074a      	lsls	r2, r1, #29
 8001e18:	d100      	bne.n	8001e1c <__aeabi_ddiv+0x560>
 8001e1a:	e755      	b.n	8001cc8 <__aeabi_ddiv+0x40c>
 8001e1c:	220f      	movs	r2, #15
 8001e1e:	400a      	ands	r2, r1
 8001e20:	2a04      	cmp	r2, #4
 8001e22:	d000      	beq.n	8001e26 <__aeabi_ddiv+0x56a>
 8001e24:	e74a      	b.n	8001cbc <__aeabi_ddiv+0x400>
 8001e26:	e74f      	b.n	8001cc8 <__aeabi_ddiv+0x40c>
 8001e28:	0015      	movs	r5, r2
 8001e2a:	4286      	cmp	r6, r0
 8001e2c:	d000      	beq.n	8001e30 <__aeabi_ddiv+0x574>
 8001e2e:	e66d      	b.n	8001b0c <__aeabi_ddiv+0x250>
 8001e30:	9a00      	ldr	r2, [sp, #0]
 8001e32:	429a      	cmp	r2, r3
 8001e34:	d000      	beq.n	8001e38 <__aeabi_ddiv+0x57c>
 8001e36:	e669      	b.n	8001b0c <__aeabi_ddiv+0x250>
 8001e38:	e66a      	b.n	8001b10 <__aeabi_ddiv+0x254>
 8001e3a:	4b16      	ldr	r3, [pc, #88]	; (8001e94 <__aeabi_ddiv+0x5d8>)
 8001e3c:	445b      	add	r3, fp
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	dc00      	bgt.n	8001e44 <__aeabi_ddiv+0x588>
 8001e42:	e713      	b.n	8001c6c <__aeabi_ddiv+0x3b0>
 8001e44:	2501      	movs	r5, #1
 8001e46:	2100      	movs	r1, #0
 8001e48:	44a8      	add	r8, r5
 8001e4a:	e66a      	b.n	8001b22 <__aeabi_ddiv+0x266>
 8001e4c:	075d      	lsls	r5, r3, #29
 8001e4e:	025b      	lsls	r3, r3, #9
 8001e50:	0b1a      	lsrs	r2, r3, #12
 8001e52:	08c9      	lsrs	r1, r1, #3
 8001e54:	2300      	movs	r3, #0
 8001e56:	430d      	orrs	r5, r1
 8001e58:	e587      	b.n	800196a <__aeabi_ddiv+0xae>
 8001e5a:	9900      	ldr	r1, [sp, #0]
 8001e5c:	3d02      	subs	r5, #2
 8001e5e:	004a      	lsls	r2, r1, #1
 8001e60:	428a      	cmp	r2, r1
 8001e62:	41bf      	sbcs	r7, r7
 8001e64:	427f      	negs	r7, r7
 8001e66:	193f      	adds	r7, r7, r4
 8001e68:	19f6      	adds	r6, r6, r7
 8001e6a:	9200      	str	r2, [sp, #0]
 8001e6c:	e7dd      	b.n	8001e2a <__aeabi_ddiv+0x56e>
 8001e6e:	2280      	movs	r2, #128	; 0x80
 8001e70:	4643      	mov	r3, r8
 8001e72:	0312      	lsls	r2, r2, #12
 8001e74:	431a      	orrs	r2, r3
 8001e76:	0312      	lsls	r2, r2, #12
 8001e78:	4b03      	ldr	r3, [pc, #12]	; (8001e88 <__aeabi_ddiv+0x5cc>)
 8001e7a:	0b12      	lsrs	r2, r2, #12
 8001e7c:	e575      	b.n	800196a <__aeabi_ddiv+0xae>
 8001e7e:	9900      	ldr	r1, [sp, #0]
 8001e80:	4299      	cmp	r1, r3
 8001e82:	d3ea      	bcc.n	8001e5a <__aeabi_ddiv+0x59e>
 8001e84:	0015      	movs	r5, r2
 8001e86:	e7d3      	b.n	8001e30 <__aeabi_ddiv+0x574>
 8001e88:	000007ff 	.word	0x000007ff
 8001e8c:	0000043e 	.word	0x0000043e
 8001e90:	0000041e 	.word	0x0000041e
 8001e94:	000003ff 	.word	0x000003ff

08001e98 <__eqdf2>:
 8001e98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e9a:	464e      	mov	r6, r9
 8001e9c:	4645      	mov	r5, r8
 8001e9e:	46de      	mov	lr, fp
 8001ea0:	4657      	mov	r7, sl
 8001ea2:	4690      	mov	r8, r2
 8001ea4:	b5e0      	push	{r5, r6, r7, lr}
 8001ea6:	0017      	movs	r7, r2
 8001ea8:	031a      	lsls	r2, r3, #12
 8001eaa:	0b12      	lsrs	r2, r2, #12
 8001eac:	0005      	movs	r5, r0
 8001eae:	4684      	mov	ip, r0
 8001eb0:	4819      	ldr	r0, [pc, #100]	; (8001f18 <__eqdf2+0x80>)
 8001eb2:	030e      	lsls	r6, r1, #12
 8001eb4:	004c      	lsls	r4, r1, #1
 8001eb6:	4691      	mov	r9, r2
 8001eb8:	005a      	lsls	r2, r3, #1
 8001eba:	0fdb      	lsrs	r3, r3, #31
 8001ebc:	469b      	mov	fp, r3
 8001ebe:	0b36      	lsrs	r6, r6, #12
 8001ec0:	0d64      	lsrs	r4, r4, #21
 8001ec2:	0fc9      	lsrs	r1, r1, #31
 8001ec4:	0d52      	lsrs	r2, r2, #21
 8001ec6:	4284      	cmp	r4, r0
 8001ec8:	d019      	beq.n	8001efe <__eqdf2+0x66>
 8001eca:	4282      	cmp	r2, r0
 8001ecc:	d010      	beq.n	8001ef0 <__eqdf2+0x58>
 8001ece:	2001      	movs	r0, #1
 8001ed0:	4294      	cmp	r4, r2
 8001ed2:	d10e      	bne.n	8001ef2 <__eqdf2+0x5a>
 8001ed4:	454e      	cmp	r6, r9
 8001ed6:	d10c      	bne.n	8001ef2 <__eqdf2+0x5a>
 8001ed8:	2001      	movs	r0, #1
 8001eda:	45c4      	cmp	ip, r8
 8001edc:	d109      	bne.n	8001ef2 <__eqdf2+0x5a>
 8001ede:	4559      	cmp	r1, fp
 8001ee0:	d017      	beq.n	8001f12 <__eqdf2+0x7a>
 8001ee2:	2c00      	cmp	r4, #0
 8001ee4:	d105      	bne.n	8001ef2 <__eqdf2+0x5a>
 8001ee6:	0030      	movs	r0, r6
 8001ee8:	4328      	orrs	r0, r5
 8001eea:	1e43      	subs	r3, r0, #1
 8001eec:	4198      	sbcs	r0, r3
 8001eee:	e000      	b.n	8001ef2 <__eqdf2+0x5a>
 8001ef0:	2001      	movs	r0, #1
 8001ef2:	bcf0      	pop	{r4, r5, r6, r7}
 8001ef4:	46bb      	mov	fp, r7
 8001ef6:	46b2      	mov	sl, r6
 8001ef8:	46a9      	mov	r9, r5
 8001efa:	46a0      	mov	r8, r4
 8001efc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001efe:	0033      	movs	r3, r6
 8001f00:	2001      	movs	r0, #1
 8001f02:	432b      	orrs	r3, r5
 8001f04:	d1f5      	bne.n	8001ef2 <__eqdf2+0x5a>
 8001f06:	42a2      	cmp	r2, r4
 8001f08:	d1f3      	bne.n	8001ef2 <__eqdf2+0x5a>
 8001f0a:	464b      	mov	r3, r9
 8001f0c:	433b      	orrs	r3, r7
 8001f0e:	d1f0      	bne.n	8001ef2 <__eqdf2+0x5a>
 8001f10:	e7e2      	b.n	8001ed8 <__eqdf2+0x40>
 8001f12:	2000      	movs	r0, #0
 8001f14:	e7ed      	b.n	8001ef2 <__eqdf2+0x5a>
 8001f16:	46c0      	nop			; (mov r8, r8)
 8001f18:	000007ff 	.word	0x000007ff

08001f1c <__gedf2>:
 8001f1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f1e:	4647      	mov	r7, r8
 8001f20:	46ce      	mov	lr, r9
 8001f22:	0004      	movs	r4, r0
 8001f24:	0018      	movs	r0, r3
 8001f26:	0016      	movs	r6, r2
 8001f28:	031b      	lsls	r3, r3, #12
 8001f2a:	0b1b      	lsrs	r3, r3, #12
 8001f2c:	4d2d      	ldr	r5, [pc, #180]	; (8001fe4 <__gedf2+0xc8>)
 8001f2e:	004a      	lsls	r2, r1, #1
 8001f30:	4699      	mov	r9, r3
 8001f32:	b580      	push	{r7, lr}
 8001f34:	0043      	lsls	r3, r0, #1
 8001f36:	030f      	lsls	r7, r1, #12
 8001f38:	46a4      	mov	ip, r4
 8001f3a:	46b0      	mov	r8, r6
 8001f3c:	0b3f      	lsrs	r7, r7, #12
 8001f3e:	0d52      	lsrs	r2, r2, #21
 8001f40:	0fc9      	lsrs	r1, r1, #31
 8001f42:	0d5b      	lsrs	r3, r3, #21
 8001f44:	0fc0      	lsrs	r0, r0, #31
 8001f46:	42aa      	cmp	r2, r5
 8001f48:	d021      	beq.n	8001f8e <__gedf2+0x72>
 8001f4a:	42ab      	cmp	r3, r5
 8001f4c:	d013      	beq.n	8001f76 <__gedf2+0x5a>
 8001f4e:	2a00      	cmp	r2, #0
 8001f50:	d122      	bne.n	8001f98 <__gedf2+0x7c>
 8001f52:	433c      	orrs	r4, r7
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d102      	bne.n	8001f5e <__gedf2+0x42>
 8001f58:	464d      	mov	r5, r9
 8001f5a:	432e      	orrs	r6, r5
 8001f5c:	d022      	beq.n	8001fa4 <__gedf2+0x88>
 8001f5e:	2c00      	cmp	r4, #0
 8001f60:	d010      	beq.n	8001f84 <__gedf2+0x68>
 8001f62:	4281      	cmp	r1, r0
 8001f64:	d022      	beq.n	8001fac <__gedf2+0x90>
 8001f66:	2002      	movs	r0, #2
 8001f68:	3901      	subs	r1, #1
 8001f6a:	4008      	ands	r0, r1
 8001f6c:	3801      	subs	r0, #1
 8001f6e:	bcc0      	pop	{r6, r7}
 8001f70:	46b9      	mov	r9, r7
 8001f72:	46b0      	mov	r8, r6
 8001f74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f76:	464d      	mov	r5, r9
 8001f78:	432e      	orrs	r6, r5
 8001f7a:	d129      	bne.n	8001fd0 <__gedf2+0xb4>
 8001f7c:	2a00      	cmp	r2, #0
 8001f7e:	d1f0      	bne.n	8001f62 <__gedf2+0x46>
 8001f80:	433c      	orrs	r4, r7
 8001f82:	d1ee      	bne.n	8001f62 <__gedf2+0x46>
 8001f84:	2800      	cmp	r0, #0
 8001f86:	d1f2      	bne.n	8001f6e <__gedf2+0x52>
 8001f88:	2001      	movs	r0, #1
 8001f8a:	4240      	negs	r0, r0
 8001f8c:	e7ef      	b.n	8001f6e <__gedf2+0x52>
 8001f8e:	003d      	movs	r5, r7
 8001f90:	4325      	orrs	r5, r4
 8001f92:	d11d      	bne.n	8001fd0 <__gedf2+0xb4>
 8001f94:	4293      	cmp	r3, r2
 8001f96:	d0ee      	beq.n	8001f76 <__gedf2+0x5a>
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d1e2      	bne.n	8001f62 <__gedf2+0x46>
 8001f9c:	464c      	mov	r4, r9
 8001f9e:	4326      	orrs	r6, r4
 8001fa0:	d1df      	bne.n	8001f62 <__gedf2+0x46>
 8001fa2:	e7e0      	b.n	8001f66 <__gedf2+0x4a>
 8001fa4:	2000      	movs	r0, #0
 8001fa6:	2c00      	cmp	r4, #0
 8001fa8:	d0e1      	beq.n	8001f6e <__gedf2+0x52>
 8001faa:	e7dc      	b.n	8001f66 <__gedf2+0x4a>
 8001fac:	429a      	cmp	r2, r3
 8001fae:	dc0a      	bgt.n	8001fc6 <__gedf2+0xaa>
 8001fb0:	dbe8      	blt.n	8001f84 <__gedf2+0x68>
 8001fb2:	454f      	cmp	r7, r9
 8001fb4:	d8d7      	bhi.n	8001f66 <__gedf2+0x4a>
 8001fb6:	d00e      	beq.n	8001fd6 <__gedf2+0xba>
 8001fb8:	2000      	movs	r0, #0
 8001fba:	454f      	cmp	r7, r9
 8001fbc:	d2d7      	bcs.n	8001f6e <__gedf2+0x52>
 8001fbe:	2900      	cmp	r1, #0
 8001fc0:	d0e2      	beq.n	8001f88 <__gedf2+0x6c>
 8001fc2:	0008      	movs	r0, r1
 8001fc4:	e7d3      	b.n	8001f6e <__gedf2+0x52>
 8001fc6:	4243      	negs	r3, r0
 8001fc8:	4158      	adcs	r0, r3
 8001fca:	0040      	lsls	r0, r0, #1
 8001fcc:	3801      	subs	r0, #1
 8001fce:	e7ce      	b.n	8001f6e <__gedf2+0x52>
 8001fd0:	2002      	movs	r0, #2
 8001fd2:	4240      	negs	r0, r0
 8001fd4:	e7cb      	b.n	8001f6e <__gedf2+0x52>
 8001fd6:	45c4      	cmp	ip, r8
 8001fd8:	d8c5      	bhi.n	8001f66 <__gedf2+0x4a>
 8001fda:	2000      	movs	r0, #0
 8001fdc:	45c4      	cmp	ip, r8
 8001fde:	d2c6      	bcs.n	8001f6e <__gedf2+0x52>
 8001fe0:	e7ed      	b.n	8001fbe <__gedf2+0xa2>
 8001fe2:	46c0      	nop			; (mov r8, r8)
 8001fe4:	000007ff 	.word	0x000007ff

08001fe8 <__ledf2>:
 8001fe8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001fea:	4647      	mov	r7, r8
 8001fec:	46ce      	mov	lr, r9
 8001fee:	0004      	movs	r4, r0
 8001ff0:	0018      	movs	r0, r3
 8001ff2:	0016      	movs	r6, r2
 8001ff4:	031b      	lsls	r3, r3, #12
 8001ff6:	0b1b      	lsrs	r3, r3, #12
 8001ff8:	4d2c      	ldr	r5, [pc, #176]	; (80020ac <__ledf2+0xc4>)
 8001ffa:	004a      	lsls	r2, r1, #1
 8001ffc:	4699      	mov	r9, r3
 8001ffe:	b580      	push	{r7, lr}
 8002000:	0043      	lsls	r3, r0, #1
 8002002:	030f      	lsls	r7, r1, #12
 8002004:	46a4      	mov	ip, r4
 8002006:	46b0      	mov	r8, r6
 8002008:	0b3f      	lsrs	r7, r7, #12
 800200a:	0d52      	lsrs	r2, r2, #21
 800200c:	0fc9      	lsrs	r1, r1, #31
 800200e:	0d5b      	lsrs	r3, r3, #21
 8002010:	0fc0      	lsrs	r0, r0, #31
 8002012:	42aa      	cmp	r2, r5
 8002014:	d00d      	beq.n	8002032 <__ledf2+0x4a>
 8002016:	42ab      	cmp	r3, r5
 8002018:	d010      	beq.n	800203c <__ledf2+0x54>
 800201a:	2a00      	cmp	r2, #0
 800201c:	d127      	bne.n	800206e <__ledf2+0x86>
 800201e:	433c      	orrs	r4, r7
 8002020:	2b00      	cmp	r3, #0
 8002022:	d111      	bne.n	8002048 <__ledf2+0x60>
 8002024:	464d      	mov	r5, r9
 8002026:	432e      	orrs	r6, r5
 8002028:	d10e      	bne.n	8002048 <__ledf2+0x60>
 800202a:	2000      	movs	r0, #0
 800202c:	2c00      	cmp	r4, #0
 800202e:	d015      	beq.n	800205c <__ledf2+0x74>
 8002030:	e00e      	b.n	8002050 <__ledf2+0x68>
 8002032:	003d      	movs	r5, r7
 8002034:	4325      	orrs	r5, r4
 8002036:	d110      	bne.n	800205a <__ledf2+0x72>
 8002038:	4293      	cmp	r3, r2
 800203a:	d118      	bne.n	800206e <__ledf2+0x86>
 800203c:	464d      	mov	r5, r9
 800203e:	432e      	orrs	r6, r5
 8002040:	d10b      	bne.n	800205a <__ledf2+0x72>
 8002042:	2a00      	cmp	r2, #0
 8002044:	d102      	bne.n	800204c <__ledf2+0x64>
 8002046:	433c      	orrs	r4, r7
 8002048:	2c00      	cmp	r4, #0
 800204a:	d00b      	beq.n	8002064 <__ledf2+0x7c>
 800204c:	4281      	cmp	r1, r0
 800204e:	d014      	beq.n	800207a <__ledf2+0x92>
 8002050:	2002      	movs	r0, #2
 8002052:	3901      	subs	r1, #1
 8002054:	4008      	ands	r0, r1
 8002056:	3801      	subs	r0, #1
 8002058:	e000      	b.n	800205c <__ledf2+0x74>
 800205a:	2002      	movs	r0, #2
 800205c:	bcc0      	pop	{r6, r7}
 800205e:	46b9      	mov	r9, r7
 8002060:	46b0      	mov	r8, r6
 8002062:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002064:	2800      	cmp	r0, #0
 8002066:	d1f9      	bne.n	800205c <__ledf2+0x74>
 8002068:	2001      	movs	r0, #1
 800206a:	4240      	negs	r0, r0
 800206c:	e7f6      	b.n	800205c <__ledf2+0x74>
 800206e:	2b00      	cmp	r3, #0
 8002070:	d1ec      	bne.n	800204c <__ledf2+0x64>
 8002072:	464c      	mov	r4, r9
 8002074:	4326      	orrs	r6, r4
 8002076:	d1e9      	bne.n	800204c <__ledf2+0x64>
 8002078:	e7ea      	b.n	8002050 <__ledf2+0x68>
 800207a:	429a      	cmp	r2, r3
 800207c:	dd04      	ble.n	8002088 <__ledf2+0xa0>
 800207e:	4243      	negs	r3, r0
 8002080:	4158      	adcs	r0, r3
 8002082:	0040      	lsls	r0, r0, #1
 8002084:	3801      	subs	r0, #1
 8002086:	e7e9      	b.n	800205c <__ledf2+0x74>
 8002088:	429a      	cmp	r2, r3
 800208a:	dbeb      	blt.n	8002064 <__ledf2+0x7c>
 800208c:	454f      	cmp	r7, r9
 800208e:	d8df      	bhi.n	8002050 <__ledf2+0x68>
 8002090:	d006      	beq.n	80020a0 <__ledf2+0xb8>
 8002092:	2000      	movs	r0, #0
 8002094:	454f      	cmp	r7, r9
 8002096:	d2e1      	bcs.n	800205c <__ledf2+0x74>
 8002098:	2900      	cmp	r1, #0
 800209a:	d0e5      	beq.n	8002068 <__ledf2+0x80>
 800209c:	0008      	movs	r0, r1
 800209e:	e7dd      	b.n	800205c <__ledf2+0x74>
 80020a0:	45c4      	cmp	ip, r8
 80020a2:	d8d5      	bhi.n	8002050 <__ledf2+0x68>
 80020a4:	2000      	movs	r0, #0
 80020a6:	45c4      	cmp	ip, r8
 80020a8:	d2d8      	bcs.n	800205c <__ledf2+0x74>
 80020aa:	e7f5      	b.n	8002098 <__ledf2+0xb0>
 80020ac:	000007ff 	.word	0x000007ff

080020b0 <__aeabi_dmul>:
 80020b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020b2:	4645      	mov	r5, r8
 80020b4:	46de      	mov	lr, fp
 80020b6:	4657      	mov	r7, sl
 80020b8:	464e      	mov	r6, r9
 80020ba:	b5e0      	push	{r5, r6, r7, lr}
 80020bc:	001f      	movs	r7, r3
 80020be:	030b      	lsls	r3, r1, #12
 80020c0:	0b1b      	lsrs	r3, r3, #12
 80020c2:	469b      	mov	fp, r3
 80020c4:	004d      	lsls	r5, r1, #1
 80020c6:	0fcb      	lsrs	r3, r1, #31
 80020c8:	0004      	movs	r4, r0
 80020ca:	4691      	mov	r9, r2
 80020cc:	4698      	mov	r8, r3
 80020ce:	b087      	sub	sp, #28
 80020d0:	0d6d      	lsrs	r5, r5, #21
 80020d2:	d100      	bne.n	80020d6 <__aeabi_dmul+0x26>
 80020d4:	e1cd      	b.n	8002472 <__aeabi_dmul+0x3c2>
 80020d6:	4bce      	ldr	r3, [pc, #824]	; (8002410 <__aeabi_dmul+0x360>)
 80020d8:	429d      	cmp	r5, r3
 80020da:	d100      	bne.n	80020de <__aeabi_dmul+0x2e>
 80020dc:	e1e9      	b.n	80024b2 <__aeabi_dmul+0x402>
 80020de:	465a      	mov	r2, fp
 80020e0:	0f43      	lsrs	r3, r0, #29
 80020e2:	00d2      	lsls	r2, r2, #3
 80020e4:	4313      	orrs	r3, r2
 80020e6:	2280      	movs	r2, #128	; 0x80
 80020e8:	0412      	lsls	r2, r2, #16
 80020ea:	431a      	orrs	r2, r3
 80020ec:	00c3      	lsls	r3, r0, #3
 80020ee:	469a      	mov	sl, r3
 80020f0:	4bc8      	ldr	r3, [pc, #800]	; (8002414 <__aeabi_dmul+0x364>)
 80020f2:	4693      	mov	fp, r2
 80020f4:	469c      	mov	ip, r3
 80020f6:	2300      	movs	r3, #0
 80020f8:	2600      	movs	r6, #0
 80020fa:	4465      	add	r5, ip
 80020fc:	9300      	str	r3, [sp, #0]
 80020fe:	033c      	lsls	r4, r7, #12
 8002100:	007b      	lsls	r3, r7, #1
 8002102:	4648      	mov	r0, r9
 8002104:	0b24      	lsrs	r4, r4, #12
 8002106:	0d5b      	lsrs	r3, r3, #21
 8002108:	0fff      	lsrs	r7, r7, #31
 800210a:	2b00      	cmp	r3, #0
 800210c:	d100      	bne.n	8002110 <__aeabi_dmul+0x60>
 800210e:	e189      	b.n	8002424 <__aeabi_dmul+0x374>
 8002110:	4abf      	ldr	r2, [pc, #764]	; (8002410 <__aeabi_dmul+0x360>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d019      	beq.n	800214a <__aeabi_dmul+0x9a>
 8002116:	0f42      	lsrs	r2, r0, #29
 8002118:	00e4      	lsls	r4, r4, #3
 800211a:	4322      	orrs	r2, r4
 800211c:	2480      	movs	r4, #128	; 0x80
 800211e:	0424      	lsls	r4, r4, #16
 8002120:	4314      	orrs	r4, r2
 8002122:	4abc      	ldr	r2, [pc, #752]	; (8002414 <__aeabi_dmul+0x364>)
 8002124:	2100      	movs	r1, #0
 8002126:	4694      	mov	ip, r2
 8002128:	4642      	mov	r2, r8
 800212a:	4463      	add	r3, ip
 800212c:	195b      	adds	r3, r3, r5
 800212e:	9301      	str	r3, [sp, #4]
 8002130:	9b01      	ldr	r3, [sp, #4]
 8002132:	407a      	eors	r2, r7
 8002134:	3301      	adds	r3, #1
 8002136:	00c0      	lsls	r0, r0, #3
 8002138:	b2d2      	uxtb	r2, r2
 800213a:	9302      	str	r3, [sp, #8]
 800213c:	2e0a      	cmp	r6, #10
 800213e:	dd1c      	ble.n	800217a <__aeabi_dmul+0xca>
 8002140:	003a      	movs	r2, r7
 8002142:	2e0b      	cmp	r6, #11
 8002144:	d05e      	beq.n	8002204 <__aeabi_dmul+0x154>
 8002146:	4647      	mov	r7, r8
 8002148:	e056      	b.n	80021f8 <__aeabi_dmul+0x148>
 800214a:	4649      	mov	r1, r9
 800214c:	4bb0      	ldr	r3, [pc, #704]	; (8002410 <__aeabi_dmul+0x360>)
 800214e:	4321      	orrs	r1, r4
 8002150:	18eb      	adds	r3, r5, r3
 8002152:	9301      	str	r3, [sp, #4]
 8002154:	2900      	cmp	r1, #0
 8002156:	d12a      	bne.n	80021ae <__aeabi_dmul+0xfe>
 8002158:	2080      	movs	r0, #128	; 0x80
 800215a:	2202      	movs	r2, #2
 800215c:	0100      	lsls	r0, r0, #4
 800215e:	002b      	movs	r3, r5
 8002160:	4684      	mov	ip, r0
 8002162:	4316      	orrs	r6, r2
 8002164:	4642      	mov	r2, r8
 8002166:	4463      	add	r3, ip
 8002168:	407a      	eors	r2, r7
 800216a:	b2d2      	uxtb	r2, r2
 800216c:	9302      	str	r3, [sp, #8]
 800216e:	2e0a      	cmp	r6, #10
 8002170:	dd00      	ble.n	8002174 <__aeabi_dmul+0xc4>
 8002172:	e231      	b.n	80025d8 <__aeabi_dmul+0x528>
 8002174:	2000      	movs	r0, #0
 8002176:	2400      	movs	r4, #0
 8002178:	2102      	movs	r1, #2
 800217a:	2e02      	cmp	r6, #2
 800217c:	dc26      	bgt.n	80021cc <__aeabi_dmul+0x11c>
 800217e:	3e01      	subs	r6, #1
 8002180:	2e01      	cmp	r6, #1
 8002182:	d852      	bhi.n	800222a <__aeabi_dmul+0x17a>
 8002184:	2902      	cmp	r1, #2
 8002186:	d04c      	beq.n	8002222 <__aeabi_dmul+0x172>
 8002188:	2901      	cmp	r1, #1
 800218a:	d000      	beq.n	800218e <__aeabi_dmul+0xde>
 800218c:	e118      	b.n	80023c0 <__aeabi_dmul+0x310>
 800218e:	2300      	movs	r3, #0
 8002190:	2400      	movs	r4, #0
 8002192:	2500      	movs	r5, #0
 8002194:	051b      	lsls	r3, r3, #20
 8002196:	4323      	orrs	r3, r4
 8002198:	07d2      	lsls	r2, r2, #31
 800219a:	4313      	orrs	r3, r2
 800219c:	0028      	movs	r0, r5
 800219e:	0019      	movs	r1, r3
 80021a0:	b007      	add	sp, #28
 80021a2:	bcf0      	pop	{r4, r5, r6, r7}
 80021a4:	46bb      	mov	fp, r7
 80021a6:	46b2      	mov	sl, r6
 80021a8:	46a9      	mov	r9, r5
 80021aa:	46a0      	mov	r8, r4
 80021ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80021ae:	2180      	movs	r1, #128	; 0x80
 80021b0:	2203      	movs	r2, #3
 80021b2:	0109      	lsls	r1, r1, #4
 80021b4:	002b      	movs	r3, r5
 80021b6:	468c      	mov	ip, r1
 80021b8:	4316      	orrs	r6, r2
 80021ba:	4642      	mov	r2, r8
 80021bc:	4463      	add	r3, ip
 80021be:	407a      	eors	r2, r7
 80021c0:	b2d2      	uxtb	r2, r2
 80021c2:	9302      	str	r3, [sp, #8]
 80021c4:	2e0a      	cmp	r6, #10
 80021c6:	dd00      	ble.n	80021ca <__aeabi_dmul+0x11a>
 80021c8:	e228      	b.n	800261c <__aeabi_dmul+0x56c>
 80021ca:	2103      	movs	r1, #3
 80021cc:	2501      	movs	r5, #1
 80021ce:	40b5      	lsls	r5, r6
 80021d0:	46ac      	mov	ip, r5
 80021d2:	26a6      	movs	r6, #166	; 0xa6
 80021d4:	4663      	mov	r3, ip
 80021d6:	00f6      	lsls	r6, r6, #3
 80021d8:	4035      	ands	r5, r6
 80021da:	4233      	tst	r3, r6
 80021dc:	d10b      	bne.n	80021f6 <__aeabi_dmul+0x146>
 80021de:	2690      	movs	r6, #144	; 0x90
 80021e0:	00b6      	lsls	r6, r6, #2
 80021e2:	4233      	tst	r3, r6
 80021e4:	d118      	bne.n	8002218 <__aeabi_dmul+0x168>
 80021e6:	3eb9      	subs	r6, #185	; 0xb9
 80021e8:	3eff      	subs	r6, #255	; 0xff
 80021ea:	421e      	tst	r6, r3
 80021ec:	d01d      	beq.n	800222a <__aeabi_dmul+0x17a>
 80021ee:	46a3      	mov	fp, r4
 80021f0:	4682      	mov	sl, r0
 80021f2:	9100      	str	r1, [sp, #0]
 80021f4:	e000      	b.n	80021f8 <__aeabi_dmul+0x148>
 80021f6:	0017      	movs	r7, r2
 80021f8:	9900      	ldr	r1, [sp, #0]
 80021fa:	003a      	movs	r2, r7
 80021fc:	2902      	cmp	r1, #2
 80021fe:	d010      	beq.n	8002222 <__aeabi_dmul+0x172>
 8002200:	465c      	mov	r4, fp
 8002202:	4650      	mov	r0, sl
 8002204:	2903      	cmp	r1, #3
 8002206:	d1bf      	bne.n	8002188 <__aeabi_dmul+0xd8>
 8002208:	2380      	movs	r3, #128	; 0x80
 800220a:	031b      	lsls	r3, r3, #12
 800220c:	431c      	orrs	r4, r3
 800220e:	0324      	lsls	r4, r4, #12
 8002210:	0005      	movs	r5, r0
 8002212:	4b7f      	ldr	r3, [pc, #508]	; (8002410 <__aeabi_dmul+0x360>)
 8002214:	0b24      	lsrs	r4, r4, #12
 8002216:	e7bd      	b.n	8002194 <__aeabi_dmul+0xe4>
 8002218:	2480      	movs	r4, #128	; 0x80
 800221a:	2200      	movs	r2, #0
 800221c:	4b7c      	ldr	r3, [pc, #496]	; (8002410 <__aeabi_dmul+0x360>)
 800221e:	0324      	lsls	r4, r4, #12
 8002220:	e7b8      	b.n	8002194 <__aeabi_dmul+0xe4>
 8002222:	2400      	movs	r4, #0
 8002224:	2500      	movs	r5, #0
 8002226:	4b7a      	ldr	r3, [pc, #488]	; (8002410 <__aeabi_dmul+0x360>)
 8002228:	e7b4      	b.n	8002194 <__aeabi_dmul+0xe4>
 800222a:	4653      	mov	r3, sl
 800222c:	041e      	lsls	r6, r3, #16
 800222e:	0c36      	lsrs	r6, r6, #16
 8002230:	0c1f      	lsrs	r7, r3, #16
 8002232:	0033      	movs	r3, r6
 8002234:	0c01      	lsrs	r1, r0, #16
 8002236:	0400      	lsls	r0, r0, #16
 8002238:	0c00      	lsrs	r0, r0, #16
 800223a:	4343      	muls	r3, r0
 800223c:	4698      	mov	r8, r3
 800223e:	0003      	movs	r3, r0
 8002240:	437b      	muls	r3, r7
 8002242:	4699      	mov	r9, r3
 8002244:	0033      	movs	r3, r6
 8002246:	434b      	muls	r3, r1
 8002248:	469c      	mov	ip, r3
 800224a:	4643      	mov	r3, r8
 800224c:	000d      	movs	r5, r1
 800224e:	0c1b      	lsrs	r3, r3, #16
 8002250:	469a      	mov	sl, r3
 8002252:	437d      	muls	r5, r7
 8002254:	44cc      	add	ip, r9
 8002256:	44d4      	add	ip, sl
 8002258:	9500      	str	r5, [sp, #0]
 800225a:	45e1      	cmp	r9, ip
 800225c:	d904      	bls.n	8002268 <__aeabi_dmul+0x1b8>
 800225e:	2380      	movs	r3, #128	; 0x80
 8002260:	025b      	lsls	r3, r3, #9
 8002262:	4699      	mov	r9, r3
 8002264:	444d      	add	r5, r9
 8002266:	9500      	str	r5, [sp, #0]
 8002268:	4663      	mov	r3, ip
 800226a:	0c1b      	lsrs	r3, r3, #16
 800226c:	001d      	movs	r5, r3
 800226e:	4663      	mov	r3, ip
 8002270:	041b      	lsls	r3, r3, #16
 8002272:	469c      	mov	ip, r3
 8002274:	4643      	mov	r3, r8
 8002276:	041b      	lsls	r3, r3, #16
 8002278:	0c1b      	lsrs	r3, r3, #16
 800227a:	4698      	mov	r8, r3
 800227c:	4663      	mov	r3, ip
 800227e:	4443      	add	r3, r8
 8002280:	9303      	str	r3, [sp, #12]
 8002282:	0c23      	lsrs	r3, r4, #16
 8002284:	4698      	mov	r8, r3
 8002286:	0033      	movs	r3, r6
 8002288:	0424      	lsls	r4, r4, #16
 800228a:	0c24      	lsrs	r4, r4, #16
 800228c:	4363      	muls	r3, r4
 800228e:	469c      	mov	ip, r3
 8002290:	0023      	movs	r3, r4
 8002292:	437b      	muls	r3, r7
 8002294:	4699      	mov	r9, r3
 8002296:	4643      	mov	r3, r8
 8002298:	435e      	muls	r6, r3
 800229a:	435f      	muls	r7, r3
 800229c:	444e      	add	r6, r9
 800229e:	4663      	mov	r3, ip
 80022a0:	46b2      	mov	sl, r6
 80022a2:	0c1e      	lsrs	r6, r3, #16
 80022a4:	4456      	add	r6, sl
 80022a6:	45b1      	cmp	r9, r6
 80022a8:	d903      	bls.n	80022b2 <__aeabi_dmul+0x202>
 80022aa:	2380      	movs	r3, #128	; 0x80
 80022ac:	025b      	lsls	r3, r3, #9
 80022ae:	4699      	mov	r9, r3
 80022b0:	444f      	add	r7, r9
 80022b2:	0c33      	lsrs	r3, r6, #16
 80022b4:	4699      	mov	r9, r3
 80022b6:	003b      	movs	r3, r7
 80022b8:	444b      	add	r3, r9
 80022ba:	9305      	str	r3, [sp, #20]
 80022bc:	4663      	mov	r3, ip
 80022be:	46ac      	mov	ip, r5
 80022c0:	041f      	lsls	r7, r3, #16
 80022c2:	0c3f      	lsrs	r7, r7, #16
 80022c4:	0436      	lsls	r6, r6, #16
 80022c6:	19f6      	adds	r6, r6, r7
 80022c8:	44b4      	add	ip, r6
 80022ca:	4663      	mov	r3, ip
 80022cc:	9304      	str	r3, [sp, #16]
 80022ce:	465b      	mov	r3, fp
 80022d0:	0c1b      	lsrs	r3, r3, #16
 80022d2:	469c      	mov	ip, r3
 80022d4:	465b      	mov	r3, fp
 80022d6:	041f      	lsls	r7, r3, #16
 80022d8:	0c3f      	lsrs	r7, r7, #16
 80022da:	003b      	movs	r3, r7
 80022dc:	4343      	muls	r3, r0
 80022de:	4699      	mov	r9, r3
 80022e0:	4663      	mov	r3, ip
 80022e2:	4343      	muls	r3, r0
 80022e4:	469a      	mov	sl, r3
 80022e6:	464b      	mov	r3, r9
 80022e8:	4660      	mov	r0, ip
 80022ea:	0c1b      	lsrs	r3, r3, #16
 80022ec:	469b      	mov	fp, r3
 80022ee:	4348      	muls	r0, r1
 80022f0:	4379      	muls	r1, r7
 80022f2:	4451      	add	r1, sl
 80022f4:	4459      	add	r1, fp
 80022f6:	458a      	cmp	sl, r1
 80022f8:	d903      	bls.n	8002302 <__aeabi_dmul+0x252>
 80022fa:	2380      	movs	r3, #128	; 0x80
 80022fc:	025b      	lsls	r3, r3, #9
 80022fe:	469a      	mov	sl, r3
 8002300:	4450      	add	r0, sl
 8002302:	0c0b      	lsrs	r3, r1, #16
 8002304:	469a      	mov	sl, r3
 8002306:	464b      	mov	r3, r9
 8002308:	041b      	lsls	r3, r3, #16
 800230a:	0c1b      	lsrs	r3, r3, #16
 800230c:	4699      	mov	r9, r3
 800230e:	003b      	movs	r3, r7
 8002310:	4363      	muls	r3, r4
 8002312:	0409      	lsls	r1, r1, #16
 8002314:	4645      	mov	r5, r8
 8002316:	4449      	add	r1, r9
 8002318:	4699      	mov	r9, r3
 800231a:	4663      	mov	r3, ip
 800231c:	435c      	muls	r4, r3
 800231e:	436b      	muls	r3, r5
 8002320:	469c      	mov	ip, r3
 8002322:	464b      	mov	r3, r9
 8002324:	0c1b      	lsrs	r3, r3, #16
 8002326:	4698      	mov	r8, r3
 8002328:	436f      	muls	r7, r5
 800232a:	193f      	adds	r7, r7, r4
 800232c:	4447      	add	r7, r8
 800232e:	4450      	add	r0, sl
 8002330:	42bc      	cmp	r4, r7
 8002332:	d903      	bls.n	800233c <__aeabi_dmul+0x28c>
 8002334:	2380      	movs	r3, #128	; 0x80
 8002336:	025b      	lsls	r3, r3, #9
 8002338:	4698      	mov	r8, r3
 800233a:	44c4      	add	ip, r8
 800233c:	9b04      	ldr	r3, [sp, #16]
 800233e:	9d00      	ldr	r5, [sp, #0]
 8002340:	4698      	mov	r8, r3
 8002342:	4445      	add	r5, r8
 8002344:	42b5      	cmp	r5, r6
 8002346:	41b6      	sbcs	r6, r6
 8002348:	4273      	negs	r3, r6
 800234a:	4698      	mov	r8, r3
 800234c:	464b      	mov	r3, r9
 800234e:	041e      	lsls	r6, r3, #16
 8002350:	9b05      	ldr	r3, [sp, #20]
 8002352:	043c      	lsls	r4, r7, #16
 8002354:	4699      	mov	r9, r3
 8002356:	0c36      	lsrs	r6, r6, #16
 8002358:	19a4      	adds	r4, r4, r6
 800235a:	444c      	add	r4, r9
 800235c:	46a1      	mov	r9, r4
 800235e:	4683      	mov	fp, r0
 8002360:	186e      	adds	r6, r5, r1
 8002362:	44c1      	add	r9, r8
 8002364:	428e      	cmp	r6, r1
 8002366:	4189      	sbcs	r1, r1
 8002368:	44cb      	add	fp, r9
 800236a:	465d      	mov	r5, fp
 800236c:	4249      	negs	r1, r1
 800236e:	186d      	adds	r5, r5, r1
 8002370:	429c      	cmp	r4, r3
 8002372:	41a4      	sbcs	r4, r4
 8002374:	45c1      	cmp	r9, r8
 8002376:	419b      	sbcs	r3, r3
 8002378:	4583      	cmp	fp, r0
 800237a:	4180      	sbcs	r0, r0
 800237c:	428d      	cmp	r5, r1
 800237e:	4189      	sbcs	r1, r1
 8002380:	425b      	negs	r3, r3
 8002382:	4264      	negs	r4, r4
 8002384:	431c      	orrs	r4, r3
 8002386:	4240      	negs	r0, r0
 8002388:	9b03      	ldr	r3, [sp, #12]
 800238a:	4249      	negs	r1, r1
 800238c:	4301      	orrs	r1, r0
 800238e:	0270      	lsls	r0, r6, #9
 8002390:	0c3f      	lsrs	r7, r7, #16
 8002392:	4318      	orrs	r0, r3
 8002394:	19e4      	adds	r4, r4, r7
 8002396:	1e47      	subs	r7, r0, #1
 8002398:	41b8      	sbcs	r0, r7
 800239a:	1864      	adds	r4, r4, r1
 800239c:	4464      	add	r4, ip
 800239e:	0df6      	lsrs	r6, r6, #23
 80023a0:	0261      	lsls	r1, r4, #9
 80023a2:	4330      	orrs	r0, r6
 80023a4:	0dec      	lsrs	r4, r5, #23
 80023a6:	026e      	lsls	r6, r5, #9
 80023a8:	430c      	orrs	r4, r1
 80023aa:	4330      	orrs	r0, r6
 80023ac:	01c9      	lsls	r1, r1, #7
 80023ae:	d400      	bmi.n	80023b2 <__aeabi_dmul+0x302>
 80023b0:	e0f1      	b.n	8002596 <__aeabi_dmul+0x4e6>
 80023b2:	2101      	movs	r1, #1
 80023b4:	0843      	lsrs	r3, r0, #1
 80023b6:	4001      	ands	r1, r0
 80023b8:	430b      	orrs	r3, r1
 80023ba:	07e0      	lsls	r0, r4, #31
 80023bc:	4318      	orrs	r0, r3
 80023be:	0864      	lsrs	r4, r4, #1
 80023c0:	4915      	ldr	r1, [pc, #84]	; (8002418 <__aeabi_dmul+0x368>)
 80023c2:	9b02      	ldr	r3, [sp, #8]
 80023c4:	468c      	mov	ip, r1
 80023c6:	4463      	add	r3, ip
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	dc00      	bgt.n	80023ce <__aeabi_dmul+0x31e>
 80023cc:	e097      	b.n	80024fe <__aeabi_dmul+0x44e>
 80023ce:	0741      	lsls	r1, r0, #29
 80023d0:	d009      	beq.n	80023e6 <__aeabi_dmul+0x336>
 80023d2:	210f      	movs	r1, #15
 80023d4:	4001      	ands	r1, r0
 80023d6:	2904      	cmp	r1, #4
 80023d8:	d005      	beq.n	80023e6 <__aeabi_dmul+0x336>
 80023da:	1d01      	adds	r1, r0, #4
 80023dc:	4281      	cmp	r1, r0
 80023de:	4180      	sbcs	r0, r0
 80023e0:	4240      	negs	r0, r0
 80023e2:	1824      	adds	r4, r4, r0
 80023e4:	0008      	movs	r0, r1
 80023e6:	01e1      	lsls	r1, r4, #7
 80023e8:	d506      	bpl.n	80023f8 <__aeabi_dmul+0x348>
 80023ea:	2180      	movs	r1, #128	; 0x80
 80023ec:	00c9      	lsls	r1, r1, #3
 80023ee:	468c      	mov	ip, r1
 80023f0:	4b0a      	ldr	r3, [pc, #40]	; (800241c <__aeabi_dmul+0x36c>)
 80023f2:	401c      	ands	r4, r3
 80023f4:	9b02      	ldr	r3, [sp, #8]
 80023f6:	4463      	add	r3, ip
 80023f8:	4909      	ldr	r1, [pc, #36]	; (8002420 <__aeabi_dmul+0x370>)
 80023fa:	428b      	cmp	r3, r1
 80023fc:	dd00      	ble.n	8002400 <__aeabi_dmul+0x350>
 80023fe:	e710      	b.n	8002222 <__aeabi_dmul+0x172>
 8002400:	0761      	lsls	r1, r4, #29
 8002402:	08c5      	lsrs	r5, r0, #3
 8002404:	0264      	lsls	r4, r4, #9
 8002406:	055b      	lsls	r3, r3, #21
 8002408:	430d      	orrs	r5, r1
 800240a:	0b24      	lsrs	r4, r4, #12
 800240c:	0d5b      	lsrs	r3, r3, #21
 800240e:	e6c1      	b.n	8002194 <__aeabi_dmul+0xe4>
 8002410:	000007ff 	.word	0x000007ff
 8002414:	fffffc01 	.word	0xfffffc01
 8002418:	000003ff 	.word	0x000003ff
 800241c:	feffffff 	.word	0xfeffffff
 8002420:	000007fe 	.word	0x000007fe
 8002424:	464b      	mov	r3, r9
 8002426:	4323      	orrs	r3, r4
 8002428:	d059      	beq.n	80024de <__aeabi_dmul+0x42e>
 800242a:	2c00      	cmp	r4, #0
 800242c:	d100      	bne.n	8002430 <__aeabi_dmul+0x380>
 800242e:	e0a3      	b.n	8002578 <__aeabi_dmul+0x4c8>
 8002430:	0020      	movs	r0, r4
 8002432:	f000 fd93 	bl	8002f5c <__clzsi2>
 8002436:	0001      	movs	r1, r0
 8002438:	0003      	movs	r3, r0
 800243a:	390b      	subs	r1, #11
 800243c:	221d      	movs	r2, #29
 800243e:	1a52      	subs	r2, r2, r1
 8002440:	4649      	mov	r1, r9
 8002442:	0018      	movs	r0, r3
 8002444:	40d1      	lsrs	r1, r2
 8002446:	464a      	mov	r2, r9
 8002448:	3808      	subs	r0, #8
 800244a:	4082      	lsls	r2, r0
 800244c:	4084      	lsls	r4, r0
 800244e:	0010      	movs	r0, r2
 8002450:	430c      	orrs	r4, r1
 8002452:	4a74      	ldr	r2, [pc, #464]	; (8002624 <__aeabi_dmul+0x574>)
 8002454:	1aeb      	subs	r3, r5, r3
 8002456:	4694      	mov	ip, r2
 8002458:	4642      	mov	r2, r8
 800245a:	4463      	add	r3, ip
 800245c:	9301      	str	r3, [sp, #4]
 800245e:	9b01      	ldr	r3, [sp, #4]
 8002460:	407a      	eors	r2, r7
 8002462:	3301      	adds	r3, #1
 8002464:	2100      	movs	r1, #0
 8002466:	b2d2      	uxtb	r2, r2
 8002468:	9302      	str	r3, [sp, #8]
 800246a:	2e0a      	cmp	r6, #10
 800246c:	dd00      	ble.n	8002470 <__aeabi_dmul+0x3c0>
 800246e:	e667      	b.n	8002140 <__aeabi_dmul+0x90>
 8002470:	e683      	b.n	800217a <__aeabi_dmul+0xca>
 8002472:	465b      	mov	r3, fp
 8002474:	4303      	orrs	r3, r0
 8002476:	469a      	mov	sl, r3
 8002478:	d02a      	beq.n	80024d0 <__aeabi_dmul+0x420>
 800247a:	465b      	mov	r3, fp
 800247c:	2b00      	cmp	r3, #0
 800247e:	d06d      	beq.n	800255c <__aeabi_dmul+0x4ac>
 8002480:	4658      	mov	r0, fp
 8002482:	f000 fd6b 	bl	8002f5c <__clzsi2>
 8002486:	0001      	movs	r1, r0
 8002488:	0003      	movs	r3, r0
 800248a:	390b      	subs	r1, #11
 800248c:	221d      	movs	r2, #29
 800248e:	1a52      	subs	r2, r2, r1
 8002490:	0021      	movs	r1, r4
 8002492:	0018      	movs	r0, r3
 8002494:	465d      	mov	r5, fp
 8002496:	40d1      	lsrs	r1, r2
 8002498:	3808      	subs	r0, #8
 800249a:	4085      	lsls	r5, r0
 800249c:	000a      	movs	r2, r1
 800249e:	4084      	lsls	r4, r0
 80024a0:	432a      	orrs	r2, r5
 80024a2:	4693      	mov	fp, r2
 80024a4:	46a2      	mov	sl, r4
 80024a6:	4d5f      	ldr	r5, [pc, #380]	; (8002624 <__aeabi_dmul+0x574>)
 80024a8:	2600      	movs	r6, #0
 80024aa:	1aed      	subs	r5, r5, r3
 80024ac:	2300      	movs	r3, #0
 80024ae:	9300      	str	r3, [sp, #0]
 80024b0:	e625      	b.n	80020fe <__aeabi_dmul+0x4e>
 80024b2:	465b      	mov	r3, fp
 80024b4:	4303      	orrs	r3, r0
 80024b6:	469a      	mov	sl, r3
 80024b8:	d105      	bne.n	80024c6 <__aeabi_dmul+0x416>
 80024ba:	2300      	movs	r3, #0
 80024bc:	469b      	mov	fp, r3
 80024be:	3302      	adds	r3, #2
 80024c0:	2608      	movs	r6, #8
 80024c2:	9300      	str	r3, [sp, #0]
 80024c4:	e61b      	b.n	80020fe <__aeabi_dmul+0x4e>
 80024c6:	2303      	movs	r3, #3
 80024c8:	4682      	mov	sl, r0
 80024ca:	260c      	movs	r6, #12
 80024cc:	9300      	str	r3, [sp, #0]
 80024ce:	e616      	b.n	80020fe <__aeabi_dmul+0x4e>
 80024d0:	2300      	movs	r3, #0
 80024d2:	469b      	mov	fp, r3
 80024d4:	3301      	adds	r3, #1
 80024d6:	2604      	movs	r6, #4
 80024d8:	2500      	movs	r5, #0
 80024da:	9300      	str	r3, [sp, #0]
 80024dc:	e60f      	b.n	80020fe <__aeabi_dmul+0x4e>
 80024de:	4642      	mov	r2, r8
 80024e0:	3301      	adds	r3, #1
 80024e2:	9501      	str	r5, [sp, #4]
 80024e4:	431e      	orrs	r6, r3
 80024e6:	9b01      	ldr	r3, [sp, #4]
 80024e8:	407a      	eors	r2, r7
 80024ea:	3301      	adds	r3, #1
 80024ec:	2400      	movs	r4, #0
 80024ee:	2000      	movs	r0, #0
 80024f0:	2101      	movs	r1, #1
 80024f2:	b2d2      	uxtb	r2, r2
 80024f4:	9302      	str	r3, [sp, #8]
 80024f6:	2e0a      	cmp	r6, #10
 80024f8:	dd00      	ble.n	80024fc <__aeabi_dmul+0x44c>
 80024fa:	e621      	b.n	8002140 <__aeabi_dmul+0x90>
 80024fc:	e63d      	b.n	800217a <__aeabi_dmul+0xca>
 80024fe:	2101      	movs	r1, #1
 8002500:	1ac9      	subs	r1, r1, r3
 8002502:	2938      	cmp	r1, #56	; 0x38
 8002504:	dd00      	ble.n	8002508 <__aeabi_dmul+0x458>
 8002506:	e642      	b.n	800218e <__aeabi_dmul+0xde>
 8002508:	291f      	cmp	r1, #31
 800250a:	dd47      	ble.n	800259c <__aeabi_dmul+0x4ec>
 800250c:	261f      	movs	r6, #31
 800250e:	0025      	movs	r5, r4
 8002510:	4276      	negs	r6, r6
 8002512:	1af3      	subs	r3, r6, r3
 8002514:	40dd      	lsrs	r5, r3
 8002516:	002b      	movs	r3, r5
 8002518:	2920      	cmp	r1, #32
 800251a:	d005      	beq.n	8002528 <__aeabi_dmul+0x478>
 800251c:	4942      	ldr	r1, [pc, #264]	; (8002628 <__aeabi_dmul+0x578>)
 800251e:	9d02      	ldr	r5, [sp, #8]
 8002520:	468c      	mov	ip, r1
 8002522:	4465      	add	r5, ip
 8002524:	40ac      	lsls	r4, r5
 8002526:	4320      	orrs	r0, r4
 8002528:	1e41      	subs	r1, r0, #1
 800252a:	4188      	sbcs	r0, r1
 800252c:	4318      	orrs	r0, r3
 800252e:	2307      	movs	r3, #7
 8002530:	001d      	movs	r5, r3
 8002532:	2400      	movs	r4, #0
 8002534:	4005      	ands	r5, r0
 8002536:	4203      	tst	r3, r0
 8002538:	d04a      	beq.n	80025d0 <__aeabi_dmul+0x520>
 800253a:	230f      	movs	r3, #15
 800253c:	2400      	movs	r4, #0
 800253e:	4003      	ands	r3, r0
 8002540:	2b04      	cmp	r3, #4
 8002542:	d042      	beq.n	80025ca <__aeabi_dmul+0x51a>
 8002544:	1d03      	adds	r3, r0, #4
 8002546:	4283      	cmp	r3, r0
 8002548:	4180      	sbcs	r0, r0
 800254a:	4240      	negs	r0, r0
 800254c:	1824      	adds	r4, r4, r0
 800254e:	0018      	movs	r0, r3
 8002550:	0223      	lsls	r3, r4, #8
 8002552:	d53a      	bpl.n	80025ca <__aeabi_dmul+0x51a>
 8002554:	2301      	movs	r3, #1
 8002556:	2400      	movs	r4, #0
 8002558:	2500      	movs	r5, #0
 800255a:	e61b      	b.n	8002194 <__aeabi_dmul+0xe4>
 800255c:	f000 fcfe 	bl	8002f5c <__clzsi2>
 8002560:	0001      	movs	r1, r0
 8002562:	0003      	movs	r3, r0
 8002564:	3115      	adds	r1, #21
 8002566:	3320      	adds	r3, #32
 8002568:	291c      	cmp	r1, #28
 800256a:	dd8f      	ble.n	800248c <__aeabi_dmul+0x3dc>
 800256c:	3808      	subs	r0, #8
 800256e:	2200      	movs	r2, #0
 8002570:	4084      	lsls	r4, r0
 8002572:	4692      	mov	sl, r2
 8002574:	46a3      	mov	fp, r4
 8002576:	e796      	b.n	80024a6 <__aeabi_dmul+0x3f6>
 8002578:	f000 fcf0 	bl	8002f5c <__clzsi2>
 800257c:	0001      	movs	r1, r0
 800257e:	0003      	movs	r3, r0
 8002580:	3115      	adds	r1, #21
 8002582:	3320      	adds	r3, #32
 8002584:	291c      	cmp	r1, #28
 8002586:	dc00      	bgt.n	800258a <__aeabi_dmul+0x4da>
 8002588:	e758      	b.n	800243c <__aeabi_dmul+0x38c>
 800258a:	0002      	movs	r2, r0
 800258c:	464c      	mov	r4, r9
 800258e:	3a08      	subs	r2, #8
 8002590:	2000      	movs	r0, #0
 8002592:	4094      	lsls	r4, r2
 8002594:	e75d      	b.n	8002452 <__aeabi_dmul+0x3a2>
 8002596:	9b01      	ldr	r3, [sp, #4]
 8002598:	9302      	str	r3, [sp, #8]
 800259a:	e711      	b.n	80023c0 <__aeabi_dmul+0x310>
 800259c:	4b23      	ldr	r3, [pc, #140]	; (800262c <__aeabi_dmul+0x57c>)
 800259e:	0026      	movs	r6, r4
 80025a0:	469c      	mov	ip, r3
 80025a2:	0003      	movs	r3, r0
 80025a4:	9d02      	ldr	r5, [sp, #8]
 80025a6:	40cb      	lsrs	r3, r1
 80025a8:	4465      	add	r5, ip
 80025aa:	40ae      	lsls	r6, r5
 80025ac:	431e      	orrs	r6, r3
 80025ae:	0003      	movs	r3, r0
 80025b0:	40ab      	lsls	r3, r5
 80025b2:	1e58      	subs	r0, r3, #1
 80025b4:	4183      	sbcs	r3, r0
 80025b6:	0030      	movs	r0, r6
 80025b8:	4318      	orrs	r0, r3
 80025ba:	40cc      	lsrs	r4, r1
 80025bc:	0743      	lsls	r3, r0, #29
 80025be:	d0c7      	beq.n	8002550 <__aeabi_dmul+0x4a0>
 80025c0:	230f      	movs	r3, #15
 80025c2:	4003      	ands	r3, r0
 80025c4:	2b04      	cmp	r3, #4
 80025c6:	d1bd      	bne.n	8002544 <__aeabi_dmul+0x494>
 80025c8:	e7c2      	b.n	8002550 <__aeabi_dmul+0x4a0>
 80025ca:	0765      	lsls	r5, r4, #29
 80025cc:	0264      	lsls	r4, r4, #9
 80025ce:	0b24      	lsrs	r4, r4, #12
 80025d0:	08c0      	lsrs	r0, r0, #3
 80025d2:	2300      	movs	r3, #0
 80025d4:	4305      	orrs	r5, r0
 80025d6:	e5dd      	b.n	8002194 <__aeabi_dmul+0xe4>
 80025d8:	2500      	movs	r5, #0
 80025da:	2302      	movs	r3, #2
 80025dc:	2e0f      	cmp	r6, #15
 80025de:	d10c      	bne.n	80025fa <__aeabi_dmul+0x54a>
 80025e0:	2480      	movs	r4, #128	; 0x80
 80025e2:	465b      	mov	r3, fp
 80025e4:	0324      	lsls	r4, r4, #12
 80025e6:	4223      	tst	r3, r4
 80025e8:	d00e      	beq.n	8002608 <__aeabi_dmul+0x558>
 80025ea:	4221      	tst	r1, r4
 80025ec:	d10c      	bne.n	8002608 <__aeabi_dmul+0x558>
 80025ee:	430c      	orrs	r4, r1
 80025f0:	0324      	lsls	r4, r4, #12
 80025f2:	003a      	movs	r2, r7
 80025f4:	4b0e      	ldr	r3, [pc, #56]	; (8002630 <__aeabi_dmul+0x580>)
 80025f6:	0b24      	lsrs	r4, r4, #12
 80025f8:	e5cc      	b.n	8002194 <__aeabi_dmul+0xe4>
 80025fa:	2e0b      	cmp	r6, #11
 80025fc:	d000      	beq.n	8002600 <__aeabi_dmul+0x550>
 80025fe:	e5a2      	b.n	8002146 <__aeabi_dmul+0x96>
 8002600:	468b      	mov	fp, r1
 8002602:	46aa      	mov	sl, r5
 8002604:	9300      	str	r3, [sp, #0]
 8002606:	e5f7      	b.n	80021f8 <__aeabi_dmul+0x148>
 8002608:	2480      	movs	r4, #128	; 0x80
 800260a:	465b      	mov	r3, fp
 800260c:	0324      	lsls	r4, r4, #12
 800260e:	431c      	orrs	r4, r3
 8002610:	0324      	lsls	r4, r4, #12
 8002612:	4642      	mov	r2, r8
 8002614:	4655      	mov	r5, sl
 8002616:	4b06      	ldr	r3, [pc, #24]	; (8002630 <__aeabi_dmul+0x580>)
 8002618:	0b24      	lsrs	r4, r4, #12
 800261a:	e5bb      	b.n	8002194 <__aeabi_dmul+0xe4>
 800261c:	464d      	mov	r5, r9
 800261e:	0021      	movs	r1, r4
 8002620:	2303      	movs	r3, #3
 8002622:	e7db      	b.n	80025dc <__aeabi_dmul+0x52c>
 8002624:	fffffc0d 	.word	0xfffffc0d
 8002628:	0000043e 	.word	0x0000043e
 800262c:	0000041e 	.word	0x0000041e
 8002630:	000007ff 	.word	0x000007ff

08002634 <__aeabi_dsub>:
 8002634:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002636:	4657      	mov	r7, sl
 8002638:	464e      	mov	r6, r9
 800263a:	4645      	mov	r5, r8
 800263c:	46de      	mov	lr, fp
 800263e:	b5e0      	push	{r5, r6, r7, lr}
 8002640:	000d      	movs	r5, r1
 8002642:	0004      	movs	r4, r0
 8002644:	0019      	movs	r1, r3
 8002646:	0010      	movs	r0, r2
 8002648:	032b      	lsls	r3, r5, #12
 800264a:	0a5b      	lsrs	r3, r3, #9
 800264c:	0f62      	lsrs	r2, r4, #29
 800264e:	431a      	orrs	r2, r3
 8002650:	00e3      	lsls	r3, r4, #3
 8002652:	030c      	lsls	r4, r1, #12
 8002654:	0a64      	lsrs	r4, r4, #9
 8002656:	0f47      	lsrs	r7, r0, #29
 8002658:	4327      	orrs	r7, r4
 800265a:	4cd0      	ldr	r4, [pc, #832]	; (800299c <__aeabi_dsub+0x368>)
 800265c:	006e      	lsls	r6, r5, #1
 800265e:	4691      	mov	r9, r2
 8002660:	b083      	sub	sp, #12
 8002662:	004a      	lsls	r2, r1, #1
 8002664:	00c0      	lsls	r0, r0, #3
 8002666:	4698      	mov	r8, r3
 8002668:	46a2      	mov	sl, r4
 800266a:	0d76      	lsrs	r6, r6, #21
 800266c:	0fed      	lsrs	r5, r5, #31
 800266e:	0d52      	lsrs	r2, r2, #21
 8002670:	0fc9      	lsrs	r1, r1, #31
 8002672:	9001      	str	r0, [sp, #4]
 8002674:	42a2      	cmp	r2, r4
 8002676:	d100      	bne.n	800267a <__aeabi_dsub+0x46>
 8002678:	e0b9      	b.n	80027ee <__aeabi_dsub+0x1ba>
 800267a:	2401      	movs	r4, #1
 800267c:	4061      	eors	r1, r4
 800267e:	468b      	mov	fp, r1
 8002680:	428d      	cmp	r5, r1
 8002682:	d100      	bne.n	8002686 <__aeabi_dsub+0x52>
 8002684:	e08d      	b.n	80027a2 <__aeabi_dsub+0x16e>
 8002686:	1ab4      	subs	r4, r6, r2
 8002688:	46a4      	mov	ip, r4
 800268a:	2c00      	cmp	r4, #0
 800268c:	dc00      	bgt.n	8002690 <__aeabi_dsub+0x5c>
 800268e:	e0b7      	b.n	8002800 <__aeabi_dsub+0x1cc>
 8002690:	2a00      	cmp	r2, #0
 8002692:	d100      	bne.n	8002696 <__aeabi_dsub+0x62>
 8002694:	e0cb      	b.n	800282e <__aeabi_dsub+0x1fa>
 8002696:	4ac1      	ldr	r2, [pc, #772]	; (800299c <__aeabi_dsub+0x368>)
 8002698:	4296      	cmp	r6, r2
 800269a:	d100      	bne.n	800269e <__aeabi_dsub+0x6a>
 800269c:	e186      	b.n	80029ac <__aeabi_dsub+0x378>
 800269e:	2280      	movs	r2, #128	; 0x80
 80026a0:	0412      	lsls	r2, r2, #16
 80026a2:	4317      	orrs	r7, r2
 80026a4:	4662      	mov	r2, ip
 80026a6:	2a38      	cmp	r2, #56	; 0x38
 80026a8:	dd00      	ble.n	80026ac <__aeabi_dsub+0x78>
 80026aa:	e1a4      	b.n	80029f6 <__aeabi_dsub+0x3c2>
 80026ac:	2a1f      	cmp	r2, #31
 80026ae:	dd00      	ble.n	80026b2 <__aeabi_dsub+0x7e>
 80026b0:	e21d      	b.n	8002aee <__aeabi_dsub+0x4ba>
 80026b2:	4661      	mov	r1, ip
 80026b4:	2220      	movs	r2, #32
 80026b6:	003c      	movs	r4, r7
 80026b8:	1a52      	subs	r2, r2, r1
 80026ba:	0001      	movs	r1, r0
 80026bc:	4090      	lsls	r0, r2
 80026be:	4094      	lsls	r4, r2
 80026c0:	1e42      	subs	r2, r0, #1
 80026c2:	4190      	sbcs	r0, r2
 80026c4:	4662      	mov	r2, ip
 80026c6:	46a0      	mov	r8, r4
 80026c8:	4664      	mov	r4, ip
 80026ca:	40d7      	lsrs	r7, r2
 80026cc:	464a      	mov	r2, r9
 80026ce:	40e1      	lsrs	r1, r4
 80026d0:	4644      	mov	r4, r8
 80026d2:	1bd2      	subs	r2, r2, r7
 80026d4:	4691      	mov	r9, r2
 80026d6:	430c      	orrs	r4, r1
 80026d8:	4304      	orrs	r4, r0
 80026da:	1b1c      	subs	r4, r3, r4
 80026dc:	42a3      	cmp	r3, r4
 80026de:	4192      	sbcs	r2, r2
 80026e0:	464b      	mov	r3, r9
 80026e2:	4252      	negs	r2, r2
 80026e4:	1a9b      	subs	r3, r3, r2
 80026e6:	469a      	mov	sl, r3
 80026e8:	4653      	mov	r3, sl
 80026ea:	021b      	lsls	r3, r3, #8
 80026ec:	d400      	bmi.n	80026f0 <__aeabi_dsub+0xbc>
 80026ee:	e12b      	b.n	8002948 <__aeabi_dsub+0x314>
 80026f0:	4653      	mov	r3, sl
 80026f2:	025a      	lsls	r2, r3, #9
 80026f4:	0a53      	lsrs	r3, r2, #9
 80026f6:	469a      	mov	sl, r3
 80026f8:	4653      	mov	r3, sl
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d100      	bne.n	8002700 <__aeabi_dsub+0xcc>
 80026fe:	e166      	b.n	80029ce <__aeabi_dsub+0x39a>
 8002700:	4650      	mov	r0, sl
 8002702:	f000 fc2b 	bl	8002f5c <__clzsi2>
 8002706:	0003      	movs	r3, r0
 8002708:	3b08      	subs	r3, #8
 800270a:	2220      	movs	r2, #32
 800270c:	0020      	movs	r0, r4
 800270e:	1ad2      	subs	r2, r2, r3
 8002710:	4651      	mov	r1, sl
 8002712:	40d0      	lsrs	r0, r2
 8002714:	4099      	lsls	r1, r3
 8002716:	0002      	movs	r2, r0
 8002718:	409c      	lsls	r4, r3
 800271a:	430a      	orrs	r2, r1
 800271c:	429e      	cmp	r6, r3
 800271e:	dd00      	ble.n	8002722 <__aeabi_dsub+0xee>
 8002720:	e164      	b.n	80029ec <__aeabi_dsub+0x3b8>
 8002722:	1b9b      	subs	r3, r3, r6
 8002724:	1c59      	adds	r1, r3, #1
 8002726:	291f      	cmp	r1, #31
 8002728:	dd00      	ble.n	800272c <__aeabi_dsub+0xf8>
 800272a:	e0fe      	b.n	800292a <__aeabi_dsub+0x2f6>
 800272c:	2320      	movs	r3, #32
 800272e:	0010      	movs	r0, r2
 8002730:	0026      	movs	r6, r4
 8002732:	1a5b      	subs	r3, r3, r1
 8002734:	409c      	lsls	r4, r3
 8002736:	4098      	lsls	r0, r3
 8002738:	40ce      	lsrs	r6, r1
 800273a:	40ca      	lsrs	r2, r1
 800273c:	1e63      	subs	r3, r4, #1
 800273e:	419c      	sbcs	r4, r3
 8002740:	4330      	orrs	r0, r6
 8002742:	4692      	mov	sl, r2
 8002744:	2600      	movs	r6, #0
 8002746:	4304      	orrs	r4, r0
 8002748:	0763      	lsls	r3, r4, #29
 800274a:	d009      	beq.n	8002760 <__aeabi_dsub+0x12c>
 800274c:	230f      	movs	r3, #15
 800274e:	4023      	ands	r3, r4
 8002750:	2b04      	cmp	r3, #4
 8002752:	d005      	beq.n	8002760 <__aeabi_dsub+0x12c>
 8002754:	1d23      	adds	r3, r4, #4
 8002756:	42a3      	cmp	r3, r4
 8002758:	41a4      	sbcs	r4, r4
 800275a:	4264      	negs	r4, r4
 800275c:	44a2      	add	sl, r4
 800275e:	001c      	movs	r4, r3
 8002760:	4653      	mov	r3, sl
 8002762:	021b      	lsls	r3, r3, #8
 8002764:	d400      	bmi.n	8002768 <__aeabi_dsub+0x134>
 8002766:	e0f2      	b.n	800294e <__aeabi_dsub+0x31a>
 8002768:	4b8c      	ldr	r3, [pc, #560]	; (800299c <__aeabi_dsub+0x368>)
 800276a:	3601      	adds	r6, #1
 800276c:	429e      	cmp	r6, r3
 800276e:	d100      	bne.n	8002772 <__aeabi_dsub+0x13e>
 8002770:	e10f      	b.n	8002992 <__aeabi_dsub+0x35e>
 8002772:	4653      	mov	r3, sl
 8002774:	498a      	ldr	r1, [pc, #552]	; (80029a0 <__aeabi_dsub+0x36c>)
 8002776:	08e4      	lsrs	r4, r4, #3
 8002778:	400b      	ands	r3, r1
 800277a:	0019      	movs	r1, r3
 800277c:	075b      	lsls	r3, r3, #29
 800277e:	4323      	orrs	r3, r4
 8002780:	0572      	lsls	r2, r6, #21
 8002782:	024c      	lsls	r4, r1, #9
 8002784:	0b24      	lsrs	r4, r4, #12
 8002786:	0d52      	lsrs	r2, r2, #21
 8002788:	0512      	lsls	r2, r2, #20
 800278a:	4322      	orrs	r2, r4
 800278c:	07ed      	lsls	r5, r5, #31
 800278e:	432a      	orrs	r2, r5
 8002790:	0018      	movs	r0, r3
 8002792:	0011      	movs	r1, r2
 8002794:	b003      	add	sp, #12
 8002796:	bcf0      	pop	{r4, r5, r6, r7}
 8002798:	46bb      	mov	fp, r7
 800279a:	46b2      	mov	sl, r6
 800279c:	46a9      	mov	r9, r5
 800279e:	46a0      	mov	r8, r4
 80027a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80027a2:	1ab4      	subs	r4, r6, r2
 80027a4:	46a4      	mov	ip, r4
 80027a6:	2c00      	cmp	r4, #0
 80027a8:	dd59      	ble.n	800285e <__aeabi_dsub+0x22a>
 80027aa:	2a00      	cmp	r2, #0
 80027ac:	d100      	bne.n	80027b0 <__aeabi_dsub+0x17c>
 80027ae:	e0b0      	b.n	8002912 <__aeabi_dsub+0x2de>
 80027b0:	4556      	cmp	r6, sl
 80027b2:	d100      	bne.n	80027b6 <__aeabi_dsub+0x182>
 80027b4:	e0fa      	b.n	80029ac <__aeabi_dsub+0x378>
 80027b6:	2280      	movs	r2, #128	; 0x80
 80027b8:	0412      	lsls	r2, r2, #16
 80027ba:	4317      	orrs	r7, r2
 80027bc:	4662      	mov	r2, ip
 80027be:	2a38      	cmp	r2, #56	; 0x38
 80027c0:	dd00      	ble.n	80027c4 <__aeabi_dsub+0x190>
 80027c2:	e0d4      	b.n	800296e <__aeabi_dsub+0x33a>
 80027c4:	2a1f      	cmp	r2, #31
 80027c6:	dc00      	bgt.n	80027ca <__aeabi_dsub+0x196>
 80027c8:	e1c0      	b.n	8002b4c <__aeabi_dsub+0x518>
 80027ca:	0039      	movs	r1, r7
 80027cc:	3a20      	subs	r2, #32
 80027ce:	40d1      	lsrs	r1, r2
 80027d0:	4662      	mov	r2, ip
 80027d2:	2a20      	cmp	r2, #32
 80027d4:	d006      	beq.n	80027e4 <__aeabi_dsub+0x1b0>
 80027d6:	4664      	mov	r4, ip
 80027d8:	2240      	movs	r2, #64	; 0x40
 80027da:	1b12      	subs	r2, r2, r4
 80027dc:	003c      	movs	r4, r7
 80027de:	4094      	lsls	r4, r2
 80027e0:	4304      	orrs	r4, r0
 80027e2:	9401      	str	r4, [sp, #4]
 80027e4:	9c01      	ldr	r4, [sp, #4]
 80027e6:	1e62      	subs	r2, r4, #1
 80027e8:	4194      	sbcs	r4, r2
 80027ea:	430c      	orrs	r4, r1
 80027ec:	e0c3      	b.n	8002976 <__aeabi_dsub+0x342>
 80027ee:	003c      	movs	r4, r7
 80027f0:	4304      	orrs	r4, r0
 80027f2:	d02b      	beq.n	800284c <__aeabi_dsub+0x218>
 80027f4:	468b      	mov	fp, r1
 80027f6:	428d      	cmp	r5, r1
 80027f8:	d02e      	beq.n	8002858 <__aeabi_dsub+0x224>
 80027fa:	4c6a      	ldr	r4, [pc, #424]	; (80029a4 <__aeabi_dsub+0x370>)
 80027fc:	46a4      	mov	ip, r4
 80027fe:	44b4      	add	ip, r6
 8002800:	4664      	mov	r4, ip
 8002802:	2c00      	cmp	r4, #0
 8002804:	d05f      	beq.n	80028c6 <__aeabi_dsub+0x292>
 8002806:	1b94      	subs	r4, r2, r6
 8002808:	46a4      	mov	ip, r4
 800280a:	2e00      	cmp	r6, #0
 800280c:	d000      	beq.n	8002810 <__aeabi_dsub+0x1dc>
 800280e:	e120      	b.n	8002a52 <__aeabi_dsub+0x41e>
 8002810:	464c      	mov	r4, r9
 8002812:	431c      	orrs	r4, r3
 8002814:	d100      	bne.n	8002818 <__aeabi_dsub+0x1e4>
 8002816:	e1c7      	b.n	8002ba8 <__aeabi_dsub+0x574>
 8002818:	4661      	mov	r1, ip
 800281a:	1e4c      	subs	r4, r1, #1
 800281c:	2901      	cmp	r1, #1
 800281e:	d100      	bne.n	8002822 <__aeabi_dsub+0x1ee>
 8002820:	e223      	b.n	8002c6a <__aeabi_dsub+0x636>
 8002822:	4d5e      	ldr	r5, [pc, #376]	; (800299c <__aeabi_dsub+0x368>)
 8002824:	45ac      	cmp	ip, r5
 8002826:	d100      	bne.n	800282a <__aeabi_dsub+0x1f6>
 8002828:	e1d8      	b.n	8002bdc <__aeabi_dsub+0x5a8>
 800282a:	46a4      	mov	ip, r4
 800282c:	e11a      	b.n	8002a64 <__aeabi_dsub+0x430>
 800282e:	003a      	movs	r2, r7
 8002830:	4302      	orrs	r2, r0
 8002832:	d100      	bne.n	8002836 <__aeabi_dsub+0x202>
 8002834:	e0e4      	b.n	8002a00 <__aeabi_dsub+0x3cc>
 8002836:	0022      	movs	r2, r4
 8002838:	3a01      	subs	r2, #1
 800283a:	2c01      	cmp	r4, #1
 800283c:	d100      	bne.n	8002840 <__aeabi_dsub+0x20c>
 800283e:	e1c3      	b.n	8002bc8 <__aeabi_dsub+0x594>
 8002840:	4956      	ldr	r1, [pc, #344]	; (800299c <__aeabi_dsub+0x368>)
 8002842:	428c      	cmp	r4, r1
 8002844:	d100      	bne.n	8002848 <__aeabi_dsub+0x214>
 8002846:	e0b1      	b.n	80029ac <__aeabi_dsub+0x378>
 8002848:	4694      	mov	ip, r2
 800284a:	e72b      	b.n	80026a4 <__aeabi_dsub+0x70>
 800284c:	2401      	movs	r4, #1
 800284e:	4061      	eors	r1, r4
 8002850:	468b      	mov	fp, r1
 8002852:	428d      	cmp	r5, r1
 8002854:	d000      	beq.n	8002858 <__aeabi_dsub+0x224>
 8002856:	e716      	b.n	8002686 <__aeabi_dsub+0x52>
 8002858:	4952      	ldr	r1, [pc, #328]	; (80029a4 <__aeabi_dsub+0x370>)
 800285a:	468c      	mov	ip, r1
 800285c:	44b4      	add	ip, r6
 800285e:	4664      	mov	r4, ip
 8002860:	2c00      	cmp	r4, #0
 8002862:	d100      	bne.n	8002866 <__aeabi_dsub+0x232>
 8002864:	e0d3      	b.n	8002a0e <__aeabi_dsub+0x3da>
 8002866:	1b91      	subs	r1, r2, r6
 8002868:	468c      	mov	ip, r1
 800286a:	2e00      	cmp	r6, #0
 800286c:	d100      	bne.n	8002870 <__aeabi_dsub+0x23c>
 800286e:	e15e      	b.n	8002b2e <__aeabi_dsub+0x4fa>
 8002870:	494a      	ldr	r1, [pc, #296]	; (800299c <__aeabi_dsub+0x368>)
 8002872:	428a      	cmp	r2, r1
 8002874:	d100      	bne.n	8002878 <__aeabi_dsub+0x244>
 8002876:	e1be      	b.n	8002bf6 <__aeabi_dsub+0x5c2>
 8002878:	2180      	movs	r1, #128	; 0x80
 800287a:	464c      	mov	r4, r9
 800287c:	0409      	lsls	r1, r1, #16
 800287e:	430c      	orrs	r4, r1
 8002880:	46a1      	mov	r9, r4
 8002882:	4661      	mov	r1, ip
 8002884:	2938      	cmp	r1, #56	; 0x38
 8002886:	dd00      	ble.n	800288a <__aeabi_dsub+0x256>
 8002888:	e1ba      	b.n	8002c00 <__aeabi_dsub+0x5cc>
 800288a:	291f      	cmp	r1, #31
 800288c:	dd00      	ble.n	8002890 <__aeabi_dsub+0x25c>
 800288e:	e227      	b.n	8002ce0 <__aeabi_dsub+0x6ac>
 8002890:	2420      	movs	r4, #32
 8002892:	1a64      	subs	r4, r4, r1
 8002894:	4649      	mov	r1, r9
 8002896:	40a1      	lsls	r1, r4
 8002898:	001e      	movs	r6, r3
 800289a:	4688      	mov	r8, r1
 800289c:	4661      	mov	r1, ip
 800289e:	40a3      	lsls	r3, r4
 80028a0:	40ce      	lsrs	r6, r1
 80028a2:	4641      	mov	r1, r8
 80028a4:	1e5c      	subs	r4, r3, #1
 80028a6:	41a3      	sbcs	r3, r4
 80028a8:	4331      	orrs	r1, r6
 80028aa:	4319      	orrs	r1, r3
 80028ac:	000c      	movs	r4, r1
 80028ae:	4663      	mov	r3, ip
 80028b0:	4649      	mov	r1, r9
 80028b2:	40d9      	lsrs	r1, r3
 80028b4:	187f      	adds	r7, r7, r1
 80028b6:	1824      	adds	r4, r4, r0
 80028b8:	4284      	cmp	r4, r0
 80028ba:	419b      	sbcs	r3, r3
 80028bc:	425b      	negs	r3, r3
 80028be:	469a      	mov	sl, r3
 80028c0:	0016      	movs	r6, r2
 80028c2:	44ba      	add	sl, r7
 80028c4:	e05d      	b.n	8002982 <__aeabi_dsub+0x34e>
 80028c6:	4c38      	ldr	r4, [pc, #224]	; (80029a8 <__aeabi_dsub+0x374>)
 80028c8:	1c72      	adds	r2, r6, #1
 80028ca:	4222      	tst	r2, r4
 80028cc:	d000      	beq.n	80028d0 <__aeabi_dsub+0x29c>
 80028ce:	e0df      	b.n	8002a90 <__aeabi_dsub+0x45c>
 80028d0:	464a      	mov	r2, r9
 80028d2:	431a      	orrs	r2, r3
 80028d4:	2e00      	cmp	r6, #0
 80028d6:	d000      	beq.n	80028da <__aeabi_dsub+0x2a6>
 80028d8:	e15c      	b.n	8002b94 <__aeabi_dsub+0x560>
 80028da:	2a00      	cmp	r2, #0
 80028dc:	d100      	bne.n	80028e0 <__aeabi_dsub+0x2ac>
 80028de:	e1cf      	b.n	8002c80 <__aeabi_dsub+0x64c>
 80028e0:	003a      	movs	r2, r7
 80028e2:	4302      	orrs	r2, r0
 80028e4:	d100      	bne.n	80028e8 <__aeabi_dsub+0x2b4>
 80028e6:	e17f      	b.n	8002be8 <__aeabi_dsub+0x5b4>
 80028e8:	1a1c      	subs	r4, r3, r0
 80028ea:	464a      	mov	r2, r9
 80028ec:	42a3      	cmp	r3, r4
 80028ee:	4189      	sbcs	r1, r1
 80028f0:	1bd2      	subs	r2, r2, r7
 80028f2:	4249      	negs	r1, r1
 80028f4:	1a52      	subs	r2, r2, r1
 80028f6:	4692      	mov	sl, r2
 80028f8:	0212      	lsls	r2, r2, #8
 80028fa:	d400      	bmi.n	80028fe <__aeabi_dsub+0x2ca>
 80028fc:	e20a      	b.n	8002d14 <__aeabi_dsub+0x6e0>
 80028fe:	1ac4      	subs	r4, r0, r3
 8002900:	42a0      	cmp	r0, r4
 8002902:	4180      	sbcs	r0, r0
 8002904:	464b      	mov	r3, r9
 8002906:	4240      	negs	r0, r0
 8002908:	1aff      	subs	r7, r7, r3
 800290a:	1a3b      	subs	r3, r7, r0
 800290c:	469a      	mov	sl, r3
 800290e:	465d      	mov	r5, fp
 8002910:	e71a      	b.n	8002748 <__aeabi_dsub+0x114>
 8002912:	003a      	movs	r2, r7
 8002914:	4302      	orrs	r2, r0
 8002916:	d073      	beq.n	8002a00 <__aeabi_dsub+0x3cc>
 8002918:	0022      	movs	r2, r4
 800291a:	3a01      	subs	r2, #1
 800291c:	2c01      	cmp	r4, #1
 800291e:	d100      	bne.n	8002922 <__aeabi_dsub+0x2ee>
 8002920:	e0cb      	b.n	8002aba <__aeabi_dsub+0x486>
 8002922:	4554      	cmp	r4, sl
 8002924:	d042      	beq.n	80029ac <__aeabi_dsub+0x378>
 8002926:	4694      	mov	ip, r2
 8002928:	e748      	b.n	80027bc <__aeabi_dsub+0x188>
 800292a:	0010      	movs	r0, r2
 800292c:	3b1f      	subs	r3, #31
 800292e:	40d8      	lsrs	r0, r3
 8002930:	2920      	cmp	r1, #32
 8002932:	d003      	beq.n	800293c <__aeabi_dsub+0x308>
 8002934:	2340      	movs	r3, #64	; 0x40
 8002936:	1a5b      	subs	r3, r3, r1
 8002938:	409a      	lsls	r2, r3
 800293a:	4314      	orrs	r4, r2
 800293c:	1e63      	subs	r3, r4, #1
 800293e:	419c      	sbcs	r4, r3
 8002940:	2300      	movs	r3, #0
 8002942:	2600      	movs	r6, #0
 8002944:	469a      	mov	sl, r3
 8002946:	4304      	orrs	r4, r0
 8002948:	0763      	lsls	r3, r4, #29
 800294a:	d000      	beq.n	800294e <__aeabi_dsub+0x31a>
 800294c:	e6fe      	b.n	800274c <__aeabi_dsub+0x118>
 800294e:	4652      	mov	r2, sl
 8002950:	08e3      	lsrs	r3, r4, #3
 8002952:	0752      	lsls	r2, r2, #29
 8002954:	4313      	orrs	r3, r2
 8002956:	4652      	mov	r2, sl
 8002958:	46b4      	mov	ip, r6
 800295a:	08d2      	lsrs	r2, r2, #3
 800295c:	490f      	ldr	r1, [pc, #60]	; (800299c <__aeabi_dsub+0x368>)
 800295e:	458c      	cmp	ip, r1
 8002960:	d02a      	beq.n	80029b8 <__aeabi_dsub+0x384>
 8002962:	0312      	lsls	r2, r2, #12
 8002964:	0b14      	lsrs	r4, r2, #12
 8002966:	4662      	mov	r2, ip
 8002968:	0552      	lsls	r2, r2, #21
 800296a:	0d52      	lsrs	r2, r2, #21
 800296c:	e70c      	b.n	8002788 <__aeabi_dsub+0x154>
 800296e:	003c      	movs	r4, r7
 8002970:	4304      	orrs	r4, r0
 8002972:	1e62      	subs	r2, r4, #1
 8002974:	4194      	sbcs	r4, r2
 8002976:	18e4      	adds	r4, r4, r3
 8002978:	429c      	cmp	r4, r3
 800297a:	4192      	sbcs	r2, r2
 800297c:	4252      	negs	r2, r2
 800297e:	444a      	add	r2, r9
 8002980:	4692      	mov	sl, r2
 8002982:	4653      	mov	r3, sl
 8002984:	021b      	lsls	r3, r3, #8
 8002986:	d5df      	bpl.n	8002948 <__aeabi_dsub+0x314>
 8002988:	4b04      	ldr	r3, [pc, #16]	; (800299c <__aeabi_dsub+0x368>)
 800298a:	3601      	adds	r6, #1
 800298c:	429e      	cmp	r6, r3
 800298e:	d000      	beq.n	8002992 <__aeabi_dsub+0x35e>
 8002990:	e0a0      	b.n	8002ad4 <__aeabi_dsub+0x4a0>
 8002992:	0032      	movs	r2, r6
 8002994:	2400      	movs	r4, #0
 8002996:	2300      	movs	r3, #0
 8002998:	e6f6      	b.n	8002788 <__aeabi_dsub+0x154>
 800299a:	46c0      	nop			; (mov r8, r8)
 800299c:	000007ff 	.word	0x000007ff
 80029a0:	ff7fffff 	.word	0xff7fffff
 80029a4:	fffff801 	.word	0xfffff801
 80029a8:	000007fe 	.word	0x000007fe
 80029ac:	08db      	lsrs	r3, r3, #3
 80029ae:	464a      	mov	r2, r9
 80029b0:	0752      	lsls	r2, r2, #29
 80029b2:	4313      	orrs	r3, r2
 80029b4:	464a      	mov	r2, r9
 80029b6:	08d2      	lsrs	r2, r2, #3
 80029b8:	0019      	movs	r1, r3
 80029ba:	4311      	orrs	r1, r2
 80029bc:	d100      	bne.n	80029c0 <__aeabi_dsub+0x38c>
 80029be:	e1b5      	b.n	8002d2c <__aeabi_dsub+0x6f8>
 80029c0:	2480      	movs	r4, #128	; 0x80
 80029c2:	0324      	lsls	r4, r4, #12
 80029c4:	4314      	orrs	r4, r2
 80029c6:	0324      	lsls	r4, r4, #12
 80029c8:	4ad5      	ldr	r2, [pc, #852]	; (8002d20 <__aeabi_dsub+0x6ec>)
 80029ca:	0b24      	lsrs	r4, r4, #12
 80029cc:	e6dc      	b.n	8002788 <__aeabi_dsub+0x154>
 80029ce:	0020      	movs	r0, r4
 80029d0:	f000 fac4 	bl	8002f5c <__clzsi2>
 80029d4:	0003      	movs	r3, r0
 80029d6:	3318      	adds	r3, #24
 80029d8:	2b1f      	cmp	r3, #31
 80029da:	dc00      	bgt.n	80029de <__aeabi_dsub+0x3aa>
 80029dc:	e695      	b.n	800270a <__aeabi_dsub+0xd6>
 80029de:	0022      	movs	r2, r4
 80029e0:	3808      	subs	r0, #8
 80029e2:	4082      	lsls	r2, r0
 80029e4:	2400      	movs	r4, #0
 80029e6:	429e      	cmp	r6, r3
 80029e8:	dc00      	bgt.n	80029ec <__aeabi_dsub+0x3b8>
 80029ea:	e69a      	b.n	8002722 <__aeabi_dsub+0xee>
 80029ec:	1af6      	subs	r6, r6, r3
 80029ee:	4bcd      	ldr	r3, [pc, #820]	; (8002d24 <__aeabi_dsub+0x6f0>)
 80029f0:	401a      	ands	r2, r3
 80029f2:	4692      	mov	sl, r2
 80029f4:	e6a8      	b.n	8002748 <__aeabi_dsub+0x114>
 80029f6:	003c      	movs	r4, r7
 80029f8:	4304      	orrs	r4, r0
 80029fa:	1e62      	subs	r2, r4, #1
 80029fc:	4194      	sbcs	r4, r2
 80029fe:	e66c      	b.n	80026da <__aeabi_dsub+0xa6>
 8002a00:	464a      	mov	r2, r9
 8002a02:	08db      	lsrs	r3, r3, #3
 8002a04:	0752      	lsls	r2, r2, #29
 8002a06:	4313      	orrs	r3, r2
 8002a08:	464a      	mov	r2, r9
 8002a0a:	08d2      	lsrs	r2, r2, #3
 8002a0c:	e7a6      	b.n	800295c <__aeabi_dsub+0x328>
 8002a0e:	4cc6      	ldr	r4, [pc, #792]	; (8002d28 <__aeabi_dsub+0x6f4>)
 8002a10:	1c72      	adds	r2, r6, #1
 8002a12:	4222      	tst	r2, r4
 8002a14:	d000      	beq.n	8002a18 <__aeabi_dsub+0x3e4>
 8002a16:	e0ac      	b.n	8002b72 <__aeabi_dsub+0x53e>
 8002a18:	464a      	mov	r2, r9
 8002a1a:	431a      	orrs	r2, r3
 8002a1c:	2e00      	cmp	r6, #0
 8002a1e:	d000      	beq.n	8002a22 <__aeabi_dsub+0x3ee>
 8002a20:	e105      	b.n	8002c2e <__aeabi_dsub+0x5fa>
 8002a22:	2a00      	cmp	r2, #0
 8002a24:	d100      	bne.n	8002a28 <__aeabi_dsub+0x3f4>
 8002a26:	e156      	b.n	8002cd6 <__aeabi_dsub+0x6a2>
 8002a28:	003a      	movs	r2, r7
 8002a2a:	4302      	orrs	r2, r0
 8002a2c:	d100      	bne.n	8002a30 <__aeabi_dsub+0x3fc>
 8002a2e:	e0db      	b.n	8002be8 <__aeabi_dsub+0x5b4>
 8002a30:	181c      	adds	r4, r3, r0
 8002a32:	429c      	cmp	r4, r3
 8002a34:	419b      	sbcs	r3, r3
 8002a36:	444f      	add	r7, r9
 8002a38:	46ba      	mov	sl, r7
 8002a3a:	425b      	negs	r3, r3
 8002a3c:	449a      	add	sl, r3
 8002a3e:	4653      	mov	r3, sl
 8002a40:	021b      	lsls	r3, r3, #8
 8002a42:	d400      	bmi.n	8002a46 <__aeabi_dsub+0x412>
 8002a44:	e780      	b.n	8002948 <__aeabi_dsub+0x314>
 8002a46:	4652      	mov	r2, sl
 8002a48:	4bb6      	ldr	r3, [pc, #728]	; (8002d24 <__aeabi_dsub+0x6f0>)
 8002a4a:	2601      	movs	r6, #1
 8002a4c:	401a      	ands	r2, r3
 8002a4e:	4692      	mov	sl, r2
 8002a50:	e77a      	b.n	8002948 <__aeabi_dsub+0x314>
 8002a52:	4cb3      	ldr	r4, [pc, #716]	; (8002d20 <__aeabi_dsub+0x6ec>)
 8002a54:	42a2      	cmp	r2, r4
 8002a56:	d100      	bne.n	8002a5a <__aeabi_dsub+0x426>
 8002a58:	e0c0      	b.n	8002bdc <__aeabi_dsub+0x5a8>
 8002a5a:	2480      	movs	r4, #128	; 0x80
 8002a5c:	464d      	mov	r5, r9
 8002a5e:	0424      	lsls	r4, r4, #16
 8002a60:	4325      	orrs	r5, r4
 8002a62:	46a9      	mov	r9, r5
 8002a64:	4664      	mov	r4, ip
 8002a66:	2c38      	cmp	r4, #56	; 0x38
 8002a68:	dc53      	bgt.n	8002b12 <__aeabi_dsub+0x4de>
 8002a6a:	4661      	mov	r1, ip
 8002a6c:	2c1f      	cmp	r4, #31
 8002a6e:	dd00      	ble.n	8002a72 <__aeabi_dsub+0x43e>
 8002a70:	e0cd      	b.n	8002c0e <__aeabi_dsub+0x5da>
 8002a72:	2520      	movs	r5, #32
 8002a74:	001e      	movs	r6, r3
 8002a76:	1b2d      	subs	r5, r5, r4
 8002a78:	464c      	mov	r4, r9
 8002a7a:	40ab      	lsls	r3, r5
 8002a7c:	40ac      	lsls	r4, r5
 8002a7e:	40ce      	lsrs	r6, r1
 8002a80:	1e5d      	subs	r5, r3, #1
 8002a82:	41ab      	sbcs	r3, r5
 8002a84:	4334      	orrs	r4, r6
 8002a86:	4323      	orrs	r3, r4
 8002a88:	464c      	mov	r4, r9
 8002a8a:	40cc      	lsrs	r4, r1
 8002a8c:	1b3f      	subs	r7, r7, r4
 8002a8e:	e045      	b.n	8002b1c <__aeabi_dsub+0x4e8>
 8002a90:	464a      	mov	r2, r9
 8002a92:	1a1c      	subs	r4, r3, r0
 8002a94:	1bd1      	subs	r1, r2, r7
 8002a96:	42a3      	cmp	r3, r4
 8002a98:	4192      	sbcs	r2, r2
 8002a9a:	4252      	negs	r2, r2
 8002a9c:	4692      	mov	sl, r2
 8002a9e:	000a      	movs	r2, r1
 8002aa0:	4651      	mov	r1, sl
 8002aa2:	1a52      	subs	r2, r2, r1
 8002aa4:	4692      	mov	sl, r2
 8002aa6:	0212      	lsls	r2, r2, #8
 8002aa8:	d500      	bpl.n	8002aac <__aeabi_dsub+0x478>
 8002aaa:	e083      	b.n	8002bb4 <__aeabi_dsub+0x580>
 8002aac:	4653      	mov	r3, sl
 8002aae:	4323      	orrs	r3, r4
 8002ab0:	d000      	beq.n	8002ab4 <__aeabi_dsub+0x480>
 8002ab2:	e621      	b.n	80026f8 <__aeabi_dsub+0xc4>
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	2500      	movs	r5, #0
 8002ab8:	e753      	b.n	8002962 <__aeabi_dsub+0x32e>
 8002aba:	181c      	adds	r4, r3, r0
 8002abc:	429c      	cmp	r4, r3
 8002abe:	419b      	sbcs	r3, r3
 8002ac0:	444f      	add	r7, r9
 8002ac2:	46ba      	mov	sl, r7
 8002ac4:	425b      	negs	r3, r3
 8002ac6:	449a      	add	sl, r3
 8002ac8:	4653      	mov	r3, sl
 8002aca:	2601      	movs	r6, #1
 8002acc:	021b      	lsls	r3, r3, #8
 8002ace:	d400      	bmi.n	8002ad2 <__aeabi_dsub+0x49e>
 8002ad0:	e73a      	b.n	8002948 <__aeabi_dsub+0x314>
 8002ad2:	2602      	movs	r6, #2
 8002ad4:	4652      	mov	r2, sl
 8002ad6:	4b93      	ldr	r3, [pc, #588]	; (8002d24 <__aeabi_dsub+0x6f0>)
 8002ad8:	2101      	movs	r1, #1
 8002ada:	401a      	ands	r2, r3
 8002adc:	0013      	movs	r3, r2
 8002ade:	4021      	ands	r1, r4
 8002ae0:	0862      	lsrs	r2, r4, #1
 8002ae2:	430a      	orrs	r2, r1
 8002ae4:	07dc      	lsls	r4, r3, #31
 8002ae6:	085b      	lsrs	r3, r3, #1
 8002ae8:	469a      	mov	sl, r3
 8002aea:	4314      	orrs	r4, r2
 8002aec:	e62c      	b.n	8002748 <__aeabi_dsub+0x114>
 8002aee:	0039      	movs	r1, r7
 8002af0:	3a20      	subs	r2, #32
 8002af2:	40d1      	lsrs	r1, r2
 8002af4:	4662      	mov	r2, ip
 8002af6:	2a20      	cmp	r2, #32
 8002af8:	d006      	beq.n	8002b08 <__aeabi_dsub+0x4d4>
 8002afa:	4664      	mov	r4, ip
 8002afc:	2240      	movs	r2, #64	; 0x40
 8002afe:	1b12      	subs	r2, r2, r4
 8002b00:	003c      	movs	r4, r7
 8002b02:	4094      	lsls	r4, r2
 8002b04:	4304      	orrs	r4, r0
 8002b06:	9401      	str	r4, [sp, #4]
 8002b08:	9c01      	ldr	r4, [sp, #4]
 8002b0a:	1e62      	subs	r2, r4, #1
 8002b0c:	4194      	sbcs	r4, r2
 8002b0e:	430c      	orrs	r4, r1
 8002b10:	e5e3      	b.n	80026da <__aeabi_dsub+0xa6>
 8002b12:	4649      	mov	r1, r9
 8002b14:	4319      	orrs	r1, r3
 8002b16:	000b      	movs	r3, r1
 8002b18:	1e5c      	subs	r4, r3, #1
 8002b1a:	41a3      	sbcs	r3, r4
 8002b1c:	1ac4      	subs	r4, r0, r3
 8002b1e:	42a0      	cmp	r0, r4
 8002b20:	419b      	sbcs	r3, r3
 8002b22:	425b      	negs	r3, r3
 8002b24:	1afb      	subs	r3, r7, r3
 8002b26:	469a      	mov	sl, r3
 8002b28:	465d      	mov	r5, fp
 8002b2a:	0016      	movs	r6, r2
 8002b2c:	e5dc      	b.n	80026e8 <__aeabi_dsub+0xb4>
 8002b2e:	4649      	mov	r1, r9
 8002b30:	4319      	orrs	r1, r3
 8002b32:	d100      	bne.n	8002b36 <__aeabi_dsub+0x502>
 8002b34:	e0ae      	b.n	8002c94 <__aeabi_dsub+0x660>
 8002b36:	4661      	mov	r1, ip
 8002b38:	4664      	mov	r4, ip
 8002b3a:	3901      	subs	r1, #1
 8002b3c:	2c01      	cmp	r4, #1
 8002b3e:	d100      	bne.n	8002b42 <__aeabi_dsub+0x50e>
 8002b40:	e0e0      	b.n	8002d04 <__aeabi_dsub+0x6d0>
 8002b42:	4c77      	ldr	r4, [pc, #476]	; (8002d20 <__aeabi_dsub+0x6ec>)
 8002b44:	45a4      	cmp	ip, r4
 8002b46:	d056      	beq.n	8002bf6 <__aeabi_dsub+0x5c2>
 8002b48:	468c      	mov	ip, r1
 8002b4a:	e69a      	b.n	8002882 <__aeabi_dsub+0x24e>
 8002b4c:	4661      	mov	r1, ip
 8002b4e:	2220      	movs	r2, #32
 8002b50:	003c      	movs	r4, r7
 8002b52:	1a52      	subs	r2, r2, r1
 8002b54:	4094      	lsls	r4, r2
 8002b56:	0001      	movs	r1, r0
 8002b58:	4090      	lsls	r0, r2
 8002b5a:	46a0      	mov	r8, r4
 8002b5c:	4664      	mov	r4, ip
 8002b5e:	1e42      	subs	r2, r0, #1
 8002b60:	4190      	sbcs	r0, r2
 8002b62:	4662      	mov	r2, ip
 8002b64:	40e1      	lsrs	r1, r4
 8002b66:	4644      	mov	r4, r8
 8002b68:	40d7      	lsrs	r7, r2
 8002b6a:	430c      	orrs	r4, r1
 8002b6c:	4304      	orrs	r4, r0
 8002b6e:	44b9      	add	r9, r7
 8002b70:	e701      	b.n	8002976 <__aeabi_dsub+0x342>
 8002b72:	496b      	ldr	r1, [pc, #428]	; (8002d20 <__aeabi_dsub+0x6ec>)
 8002b74:	428a      	cmp	r2, r1
 8002b76:	d100      	bne.n	8002b7a <__aeabi_dsub+0x546>
 8002b78:	e70c      	b.n	8002994 <__aeabi_dsub+0x360>
 8002b7a:	1818      	adds	r0, r3, r0
 8002b7c:	4298      	cmp	r0, r3
 8002b7e:	419b      	sbcs	r3, r3
 8002b80:	444f      	add	r7, r9
 8002b82:	425b      	negs	r3, r3
 8002b84:	18fb      	adds	r3, r7, r3
 8002b86:	07dc      	lsls	r4, r3, #31
 8002b88:	0840      	lsrs	r0, r0, #1
 8002b8a:	085b      	lsrs	r3, r3, #1
 8002b8c:	469a      	mov	sl, r3
 8002b8e:	0016      	movs	r6, r2
 8002b90:	4304      	orrs	r4, r0
 8002b92:	e6d9      	b.n	8002948 <__aeabi_dsub+0x314>
 8002b94:	2a00      	cmp	r2, #0
 8002b96:	d000      	beq.n	8002b9a <__aeabi_dsub+0x566>
 8002b98:	e081      	b.n	8002c9e <__aeabi_dsub+0x66a>
 8002b9a:	003b      	movs	r3, r7
 8002b9c:	4303      	orrs	r3, r0
 8002b9e:	d11d      	bne.n	8002bdc <__aeabi_dsub+0x5a8>
 8002ba0:	2280      	movs	r2, #128	; 0x80
 8002ba2:	2500      	movs	r5, #0
 8002ba4:	0312      	lsls	r2, r2, #12
 8002ba6:	e70b      	b.n	80029c0 <__aeabi_dsub+0x38c>
 8002ba8:	08c0      	lsrs	r0, r0, #3
 8002baa:	077b      	lsls	r3, r7, #29
 8002bac:	465d      	mov	r5, fp
 8002bae:	4303      	orrs	r3, r0
 8002bb0:	08fa      	lsrs	r2, r7, #3
 8002bb2:	e6d3      	b.n	800295c <__aeabi_dsub+0x328>
 8002bb4:	1ac4      	subs	r4, r0, r3
 8002bb6:	42a0      	cmp	r0, r4
 8002bb8:	4180      	sbcs	r0, r0
 8002bba:	464b      	mov	r3, r9
 8002bbc:	4240      	negs	r0, r0
 8002bbe:	1aff      	subs	r7, r7, r3
 8002bc0:	1a3b      	subs	r3, r7, r0
 8002bc2:	469a      	mov	sl, r3
 8002bc4:	465d      	mov	r5, fp
 8002bc6:	e597      	b.n	80026f8 <__aeabi_dsub+0xc4>
 8002bc8:	1a1c      	subs	r4, r3, r0
 8002bca:	464a      	mov	r2, r9
 8002bcc:	42a3      	cmp	r3, r4
 8002bce:	419b      	sbcs	r3, r3
 8002bd0:	1bd7      	subs	r7, r2, r7
 8002bd2:	425b      	negs	r3, r3
 8002bd4:	1afb      	subs	r3, r7, r3
 8002bd6:	469a      	mov	sl, r3
 8002bd8:	2601      	movs	r6, #1
 8002bda:	e585      	b.n	80026e8 <__aeabi_dsub+0xb4>
 8002bdc:	08c0      	lsrs	r0, r0, #3
 8002bde:	077b      	lsls	r3, r7, #29
 8002be0:	465d      	mov	r5, fp
 8002be2:	4303      	orrs	r3, r0
 8002be4:	08fa      	lsrs	r2, r7, #3
 8002be6:	e6e7      	b.n	80029b8 <__aeabi_dsub+0x384>
 8002be8:	464a      	mov	r2, r9
 8002bea:	08db      	lsrs	r3, r3, #3
 8002bec:	0752      	lsls	r2, r2, #29
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	464a      	mov	r2, r9
 8002bf2:	08d2      	lsrs	r2, r2, #3
 8002bf4:	e6b5      	b.n	8002962 <__aeabi_dsub+0x32e>
 8002bf6:	08c0      	lsrs	r0, r0, #3
 8002bf8:	077b      	lsls	r3, r7, #29
 8002bfa:	4303      	orrs	r3, r0
 8002bfc:	08fa      	lsrs	r2, r7, #3
 8002bfe:	e6db      	b.n	80029b8 <__aeabi_dsub+0x384>
 8002c00:	4649      	mov	r1, r9
 8002c02:	4319      	orrs	r1, r3
 8002c04:	000b      	movs	r3, r1
 8002c06:	1e59      	subs	r1, r3, #1
 8002c08:	418b      	sbcs	r3, r1
 8002c0a:	001c      	movs	r4, r3
 8002c0c:	e653      	b.n	80028b6 <__aeabi_dsub+0x282>
 8002c0e:	464d      	mov	r5, r9
 8002c10:	3c20      	subs	r4, #32
 8002c12:	40e5      	lsrs	r5, r4
 8002c14:	2920      	cmp	r1, #32
 8002c16:	d005      	beq.n	8002c24 <__aeabi_dsub+0x5f0>
 8002c18:	2440      	movs	r4, #64	; 0x40
 8002c1a:	1a64      	subs	r4, r4, r1
 8002c1c:	4649      	mov	r1, r9
 8002c1e:	40a1      	lsls	r1, r4
 8002c20:	430b      	orrs	r3, r1
 8002c22:	4698      	mov	r8, r3
 8002c24:	4643      	mov	r3, r8
 8002c26:	1e5c      	subs	r4, r3, #1
 8002c28:	41a3      	sbcs	r3, r4
 8002c2a:	432b      	orrs	r3, r5
 8002c2c:	e776      	b.n	8002b1c <__aeabi_dsub+0x4e8>
 8002c2e:	2a00      	cmp	r2, #0
 8002c30:	d0e1      	beq.n	8002bf6 <__aeabi_dsub+0x5c2>
 8002c32:	003a      	movs	r2, r7
 8002c34:	08db      	lsrs	r3, r3, #3
 8002c36:	4302      	orrs	r2, r0
 8002c38:	d100      	bne.n	8002c3c <__aeabi_dsub+0x608>
 8002c3a:	e6b8      	b.n	80029ae <__aeabi_dsub+0x37a>
 8002c3c:	464a      	mov	r2, r9
 8002c3e:	0752      	lsls	r2, r2, #29
 8002c40:	2480      	movs	r4, #128	; 0x80
 8002c42:	4313      	orrs	r3, r2
 8002c44:	464a      	mov	r2, r9
 8002c46:	0324      	lsls	r4, r4, #12
 8002c48:	08d2      	lsrs	r2, r2, #3
 8002c4a:	4222      	tst	r2, r4
 8002c4c:	d007      	beq.n	8002c5e <__aeabi_dsub+0x62a>
 8002c4e:	08fe      	lsrs	r6, r7, #3
 8002c50:	4226      	tst	r6, r4
 8002c52:	d104      	bne.n	8002c5e <__aeabi_dsub+0x62a>
 8002c54:	465d      	mov	r5, fp
 8002c56:	0032      	movs	r2, r6
 8002c58:	08c3      	lsrs	r3, r0, #3
 8002c5a:	077f      	lsls	r7, r7, #29
 8002c5c:	433b      	orrs	r3, r7
 8002c5e:	0f59      	lsrs	r1, r3, #29
 8002c60:	00db      	lsls	r3, r3, #3
 8002c62:	0749      	lsls	r1, r1, #29
 8002c64:	08db      	lsrs	r3, r3, #3
 8002c66:	430b      	orrs	r3, r1
 8002c68:	e6a6      	b.n	80029b8 <__aeabi_dsub+0x384>
 8002c6a:	1ac4      	subs	r4, r0, r3
 8002c6c:	42a0      	cmp	r0, r4
 8002c6e:	4180      	sbcs	r0, r0
 8002c70:	464b      	mov	r3, r9
 8002c72:	4240      	negs	r0, r0
 8002c74:	1aff      	subs	r7, r7, r3
 8002c76:	1a3b      	subs	r3, r7, r0
 8002c78:	469a      	mov	sl, r3
 8002c7a:	465d      	mov	r5, fp
 8002c7c:	2601      	movs	r6, #1
 8002c7e:	e533      	b.n	80026e8 <__aeabi_dsub+0xb4>
 8002c80:	003b      	movs	r3, r7
 8002c82:	4303      	orrs	r3, r0
 8002c84:	d100      	bne.n	8002c88 <__aeabi_dsub+0x654>
 8002c86:	e715      	b.n	8002ab4 <__aeabi_dsub+0x480>
 8002c88:	08c0      	lsrs	r0, r0, #3
 8002c8a:	077b      	lsls	r3, r7, #29
 8002c8c:	465d      	mov	r5, fp
 8002c8e:	4303      	orrs	r3, r0
 8002c90:	08fa      	lsrs	r2, r7, #3
 8002c92:	e666      	b.n	8002962 <__aeabi_dsub+0x32e>
 8002c94:	08c0      	lsrs	r0, r0, #3
 8002c96:	077b      	lsls	r3, r7, #29
 8002c98:	4303      	orrs	r3, r0
 8002c9a:	08fa      	lsrs	r2, r7, #3
 8002c9c:	e65e      	b.n	800295c <__aeabi_dsub+0x328>
 8002c9e:	003a      	movs	r2, r7
 8002ca0:	08db      	lsrs	r3, r3, #3
 8002ca2:	4302      	orrs	r2, r0
 8002ca4:	d100      	bne.n	8002ca8 <__aeabi_dsub+0x674>
 8002ca6:	e682      	b.n	80029ae <__aeabi_dsub+0x37a>
 8002ca8:	464a      	mov	r2, r9
 8002caa:	0752      	lsls	r2, r2, #29
 8002cac:	2480      	movs	r4, #128	; 0x80
 8002cae:	4313      	orrs	r3, r2
 8002cb0:	464a      	mov	r2, r9
 8002cb2:	0324      	lsls	r4, r4, #12
 8002cb4:	08d2      	lsrs	r2, r2, #3
 8002cb6:	4222      	tst	r2, r4
 8002cb8:	d007      	beq.n	8002cca <__aeabi_dsub+0x696>
 8002cba:	08fe      	lsrs	r6, r7, #3
 8002cbc:	4226      	tst	r6, r4
 8002cbe:	d104      	bne.n	8002cca <__aeabi_dsub+0x696>
 8002cc0:	465d      	mov	r5, fp
 8002cc2:	0032      	movs	r2, r6
 8002cc4:	08c3      	lsrs	r3, r0, #3
 8002cc6:	077f      	lsls	r7, r7, #29
 8002cc8:	433b      	orrs	r3, r7
 8002cca:	0f59      	lsrs	r1, r3, #29
 8002ccc:	00db      	lsls	r3, r3, #3
 8002cce:	08db      	lsrs	r3, r3, #3
 8002cd0:	0749      	lsls	r1, r1, #29
 8002cd2:	430b      	orrs	r3, r1
 8002cd4:	e670      	b.n	80029b8 <__aeabi_dsub+0x384>
 8002cd6:	08c0      	lsrs	r0, r0, #3
 8002cd8:	077b      	lsls	r3, r7, #29
 8002cda:	4303      	orrs	r3, r0
 8002cdc:	08fa      	lsrs	r2, r7, #3
 8002cde:	e640      	b.n	8002962 <__aeabi_dsub+0x32e>
 8002ce0:	464c      	mov	r4, r9
 8002ce2:	3920      	subs	r1, #32
 8002ce4:	40cc      	lsrs	r4, r1
 8002ce6:	4661      	mov	r1, ip
 8002ce8:	2920      	cmp	r1, #32
 8002cea:	d006      	beq.n	8002cfa <__aeabi_dsub+0x6c6>
 8002cec:	4666      	mov	r6, ip
 8002cee:	2140      	movs	r1, #64	; 0x40
 8002cf0:	1b89      	subs	r1, r1, r6
 8002cf2:	464e      	mov	r6, r9
 8002cf4:	408e      	lsls	r6, r1
 8002cf6:	4333      	orrs	r3, r6
 8002cf8:	4698      	mov	r8, r3
 8002cfa:	4643      	mov	r3, r8
 8002cfc:	1e59      	subs	r1, r3, #1
 8002cfe:	418b      	sbcs	r3, r1
 8002d00:	431c      	orrs	r4, r3
 8002d02:	e5d8      	b.n	80028b6 <__aeabi_dsub+0x282>
 8002d04:	181c      	adds	r4, r3, r0
 8002d06:	4284      	cmp	r4, r0
 8002d08:	4180      	sbcs	r0, r0
 8002d0a:	444f      	add	r7, r9
 8002d0c:	46ba      	mov	sl, r7
 8002d0e:	4240      	negs	r0, r0
 8002d10:	4482      	add	sl, r0
 8002d12:	e6d9      	b.n	8002ac8 <__aeabi_dsub+0x494>
 8002d14:	4653      	mov	r3, sl
 8002d16:	4323      	orrs	r3, r4
 8002d18:	d100      	bne.n	8002d1c <__aeabi_dsub+0x6e8>
 8002d1a:	e6cb      	b.n	8002ab4 <__aeabi_dsub+0x480>
 8002d1c:	e614      	b.n	8002948 <__aeabi_dsub+0x314>
 8002d1e:	46c0      	nop			; (mov r8, r8)
 8002d20:	000007ff 	.word	0x000007ff
 8002d24:	ff7fffff 	.word	0xff7fffff
 8002d28:	000007fe 	.word	0x000007fe
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	4a01      	ldr	r2, [pc, #4]	; (8002d34 <__aeabi_dsub+0x700>)
 8002d30:	001c      	movs	r4, r3
 8002d32:	e529      	b.n	8002788 <__aeabi_dsub+0x154>
 8002d34:	000007ff 	.word	0x000007ff

08002d38 <__aeabi_d2iz>:
 8002d38:	000a      	movs	r2, r1
 8002d3a:	b530      	push	{r4, r5, lr}
 8002d3c:	4c13      	ldr	r4, [pc, #76]	; (8002d8c <__aeabi_d2iz+0x54>)
 8002d3e:	0053      	lsls	r3, r2, #1
 8002d40:	0309      	lsls	r1, r1, #12
 8002d42:	0005      	movs	r5, r0
 8002d44:	0b09      	lsrs	r1, r1, #12
 8002d46:	2000      	movs	r0, #0
 8002d48:	0d5b      	lsrs	r3, r3, #21
 8002d4a:	0fd2      	lsrs	r2, r2, #31
 8002d4c:	42a3      	cmp	r3, r4
 8002d4e:	dd04      	ble.n	8002d5a <__aeabi_d2iz+0x22>
 8002d50:	480f      	ldr	r0, [pc, #60]	; (8002d90 <__aeabi_d2iz+0x58>)
 8002d52:	4283      	cmp	r3, r0
 8002d54:	dd02      	ble.n	8002d5c <__aeabi_d2iz+0x24>
 8002d56:	4b0f      	ldr	r3, [pc, #60]	; (8002d94 <__aeabi_d2iz+0x5c>)
 8002d58:	18d0      	adds	r0, r2, r3
 8002d5a:	bd30      	pop	{r4, r5, pc}
 8002d5c:	2080      	movs	r0, #128	; 0x80
 8002d5e:	0340      	lsls	r0, r0, #13
 8002d60:	4301      	orrs	r1, r0
 8002d62:	480d      	ldr	r0, [pc, #52]	; (8002d98 <__aeabi_d2iz+0x60>)
 8002d64:	1ac0      	subs	r0, r0, r3
 8002d66:	281f      	cmp	r0, #31
 8002d68:	dd08      	ble.n	8002d7c <__aeabi_d2iz+0x44>
 8002d6a:	480c      	ldr	r0, [pc, #48]	; (8002d9c <__aeabi_d2iz+0x64>)
 8002d6c:	1ac3      	subs	r3, r0, r3
 8002d6e:	40d9      	lsrs	r1, r3
 8002d70:	000b      	movs	r3, r1
 8002d72:	4258      	negs	r0, r3
 8002d74:	2a00      	cmp	r2, #0
 8002d76:	d1f0      	bne.n	8002d5a <__aeabi_d2iz+0x22>
 8002d78:	0018      	movs	r0, r3
 8002d7a:	e7ee      	b.n	8002d5a <__aeabi_d2iz+0x22>
 8002d7c:	4c08      	ldr	r4, [pc, #32]	; (8002da0 <__aeabi_d2iz+0x68>)
 8002d7e:	40c5      	lsrs	r5, r0
 8002d80:	46a4      	mov	ip, r4
 8002d82:	4463      	add	r3, ip
 8002d84:	4099      	lsls	r1, r3
 8002d86:	000b      	movs	r3, r1
 8002d88:	432b      	orrs	r3, r5
 8002d8a:	e7f2      	b.n	8002d72 <__aeabi_d2iz+0x3a>
 8002d8c:	000003fe 	.word	0x000003fe
 8002d90:	0000041d 	.word	0x0000041d
 8002d94:	7fffffff 	.word	0x7fffffff
 8002d98:	00000433 	.word	0x00000433
 8002d9c:	00000413 	.word	0x00000413
 8002da0:	fffffbed 	.word	0xfffffbed

08002da4 <__aeabi_i2d>:
 8002da4:	b570      	push	{r4, r5, r6, lr}
 8002da6:	2800      	cmp	r0, #0
 8002da8:	d016      	beq.n	8002dd8 <__aeabi_i2d+0x34>
 8002daa:	17c3      	asrs	r3, r0, #31
 8002dac:	18c5      	adds	r5, r0, r3
 8002dae:	405d      	eors	r5, r3
 8002db0:	0fc4      	lsrs	r4, r0, #31
 8002db2:	0028      	movs	r0, r5
 8002db4:	f000 f8d2 	bl	8002f5c <__clzsi2>
 8002db8:	4b11      	ldr	r3, [pc, #68]	; (8002e00 <__aeabi_i2d+0x5c>)
 8002dba:	1a1b      	subs	r3, r3, r0
 8002dbc:	280a      	cmp	r0, #10
 8002dbe:	dc16      	bgt.n	8002dee <__aeabi_i2d+0x4a>
 8002dc0:	0002      	movs	r2, r0
 8002dc2:	002e      	movs	r6, r5
 8002dc4:	3215      	adds	r2, #21
 8002dc6:	4096      	lsls	r6, r2
 8002dc8:	220b      	movs	r2, #11
 8002dca:	1a12      	subs	r2, r2, r0
 8002dcc:	40d5      	lsrs	r5, r2
 8002dce:	055b      	lsls	r3, r3, #21
 8002dd0:	032d      	lsls	r5, r5, #12
 8002dd2:	0b2d      	lsrs	r5, r5, #12
 8002dd4:	0d5b      	lsrs	r3, r3, #21
 8002dd6:	e003      	b.n	8002de0 <__aeabi_i2d+0x3c>
 8002dd8:	2400      	movs	r4, #0
 8002dda:	2300      	movs	r3, #0
 8002ddc:	2500      	movs	r5, #0
 8002dde:	2600      	movs	r6, #0
 8002de0:	051b      	lsls	r3, r3, #20
 8002de2:	432b      	orrs	r3, r5
 8002de4:	07e4      	lsls	r4, r4, #31
 8002de6:	4323      	orrs	r3, r4
 8002de8:	0030      	movs	r0, r6
 8002dea:	0019      	movs	r1, r3
 8002dec:	bd70      	pop	{r4, r5, r6, pc}
 8002dee:	380b      	subs	r0, #11
 8002df0:	4085      	lsls	r5, r0
 8002df2:	055b      	lsls	r3, r3, #21
 8002df4:	032d      	lsls	r5, r5, #12
 8002df6:	2600      	movs	r6, #0
 8002df8:	0b2d      	lsrs	r5, r5, #12
 8002dfa:	0d5b      	lsrs	r3, r3, #21
 8002dfc:	e7f0      	b.n	8002de0 <__aeabi_i2d+0x3c>
 8002dfe:	46c0      	nop			; (mov r8, r8)
 8002e00:	0000041e 	.word	0x0000041e

08002e04 <__aeabi_ui2d>:
 8002e04:	b510      	push	{r4, lr}
 8002e06:	1e04      	subs	r4, r0, #0
 8002e08:	d010      	beq.n	8002e2c <__aeabi_ui2d+0x28>
 8002e0a:	f000 f8a7 	bl	8002f5c <__clzsi2>
 8002e0e:	4b0f      	ldr	r3, [pc, #60]	; (8002e4c <__aeabi_ui2d+0x48>)
 8002e10:	1a1b      	subs	r3, r3, r0
 8002e12:	280a      	cmp	r0, #10
 8002e14:	dc11      	bgt.n	8002e3a <__aeabi_ui2d+0x36>
 8002e16:	220b      	movs	r2, #11
 8002e18:	0021      	movs	r1, r4
 8002e1a:	1a12      	subs	r2, r2, r0
 8002e1c:	40d1      	lsrs	r1, r2
 8002e1e:	3015      	adds	r0, #21
 8002e20:	030a      	lsls	r2, r1, #12
 8002e22:	055b      	lsls	r3, r3, #21
 8002e24:	4084      	lsls	r4, r0
 8002e26:	0b12      	lsrs	r2, r2, #12
 8002e28:	0d5b      	lsrs	r3, r3, #21
 8002e2a:	e001      	b.n	8002e30 <__aeabi_ui2d+0x2c>
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	2200      	movs	r2, #0
 8002e30:	051b      	lsls	r3, r3, #20
 8002e32:	4313      	orrs	r3, r2
 8002e34:	0020      	movs	r0, r4
 8002e36:	0019      	movs	r1, r3
 8002e38:	bd10      	pop	{r4, pc}
 8002e3a:	0022      	movs	r2, r4
 8002e3c:	380b      	subs	r0, #11
 8002e3e:	4082      	lsls	r2, r0
 8002e40:	055b      	lsls	r3, r3, #21
 8002e42:	0312      	lsls	r2, r2, #12
 8002e44:	2400      	movs	r4, #0
 8002e46:	0b12      	lsrs	r2, r2, #12
 8002e48:	0d5b      	lsrs	r3, r3, #21
 8002e4a:	e7f1      	b.n	8002e30 <__aeabi_ui2d+0x2c>
 8002e4c:	0000041e 	.word	0x0000041e

08002e50 <__aeabi_d2f>:
 8002e50:	0002      	movs	r2, r0
 8002e52:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e54:	004b      	lsls	r3, r1, #1
 8002e56:	030d      	lsls	r5, r1, #12
 8002e58:	0f40      	lsrs	r0, r0, #29
 8002e5a:	0d5b      	lsrs	r3, r3, #21
 8002e5c:	0fcc      	lsrs	r4, r1, #31
 8002e5e:	0a6d      	lsrs	r5, r5, #9
 8002e60:	493a      	ldr	r1, [pc, #232]	; (8002f4c <__aeabi_d2f+0xfc>)
 8002e62:	4305      	orrs	r5, r0
 8002e64:	1c58      	adds	r0, r3, #1
 8002e66:	00d7      	lsls	r7, r2, #3
 8002e68:	4208      	tst	r0, r1
 8002e6a:	d00a      	beq.n	8002e82 <__aeabi_d2f+0x32>
 8002e6c:	4938      	ldr	r1, [pc, #224]	; (8002f50 <__aeabi_d2f+0x100>)
 8002e6e:	1859      	adds	r1, r3, r1
 8002e70:	29fe      	cmp	r1, #254	; 0xfe
 8002e72:	dd16      	ble.n	8002ea2 <__aeabi_d2f+0x52>
 8002e74:	20ff      	movs	r0, #255	; 0xff
 8002e76:	2200      	movs	r2, #0
 8002e78:	05c0      	lsls	r0, r0, #23
 8002e7a:	4310      	orrs	r0, r2
 8002e7c:	07e4      	lsls	r4, r4, #31
 8002e7e:	4320      	orrs	r0, r4
 8002e80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d106      	bne.n	8002e94 <__aeabi_d2f+0x44>
 8002e86:	433d      	orrs	r5, r7
 8002e88:	d026      	beq.n	8002ed8 <__aeabi_d2f+0x88>
 8002e8a:	2205      	movs	r2, #5
 8002e8c:	0192      	lsls	r2, r2, #6
 8002e8e:	0a52      	lsrs	r2, r2, #9
 8002e90:	b2d8      	uxtb	r0, r3
 8002e92:	e7f1      	b.n	8002e78 <__aeabi_d2f+0x28>
 8002e94:	432f      	orrs	r7, r5
 8002e96:	d0ed      	beq.n	8002e74 <__aeabi_d2f+0x24>
 8002e98:	2280      	movs	r2, #128	; 0x80
 8002e9a:	03d2      	lsls	r2, r2, #15
 8002e9c:	20ff      	movs	r0, #255	; 0xff
 8002e9e:	432a      	orrs	r2, r5
 8002ea0:	e7ea      	b.n	8002e78 <__aeabi_d2f+0x28>
 8002ea2:	2900      	cmp	r1, #0
 8002ea4:	dd1b      	ble.n	8002ede <__aeabi_d2f+0x8e>
 8002ea6:	0192      	lsls	r2, r2, #6
 8002ea8:	1e50      	subs	r0, r2, #1
 8002eaa:	4182      	sbcs	r2, r0
 8002eac:	00ed      	lsls	r5, r5, #3
 8002eae:	0f7f      	lsrs	r7, r7, #29
 8002eb0:	432a      	orrs	r2, r5
 8002eb2:	433a      	orrs	r2, r7
 8002eb4:	0753      	lsls	r3, r2, #29
 8002eb6:	d047      	beq.n	8002f48 <__aeabi_d2f+0xf8>
 8002eb8:	230f      	movs	r3, #15
 8002eba:	4013      	ands	r3, r2
 8002ebc:	2b04      	cmp	r3, #4
 8002ebe:	d000      	beq.n	8002ec2 <__aeabi_d2f+0x72>
 8002ec0:	3204      	adds	r2, #4
 8002ec2:	2380      	movs	r3, #128	; 0x80
 8002ec4:	04db      	lsls	r3, r3, #19
 8002ec6:	4013      	ands	r3, r2
 8002ec8:	d03e      	beq.n	8002f48 <__aeabi_d2f+0xf8>
 8002eca:	1c48      	adds	r0, r1, #1
 8002ecc:	29fe      	cmp	r1, #254	; 0xfe
 8002ece:	d0d1      	beq.n	8002e74 <__aeabi_d2f+0x24>
 8002ed0:	0192      	lsls	r2, r2, #6
 8002ed2:	0a52      	lsrs	r2, r2, #9
 8002ed4:	b2c0      	uxtb	r0, r0
 8002ed6:	e7cf      	b.n	8002e78 <__aeabi_d2f+0x28>
 8002ed8:	2000      	movs	r0, #0
 8002eda:	2200      	movs	r2, #0
 8002edc:	e7cc      	b.n	8002e78 <__aeabi_d2f+0x28>
 8002ede:	000a      	movs	r2, r1
 8002ee0:	3217      	adds	r2, #23
 8002ee2:	db2f      	blt.n	8002f44 <__aeabi_d2f+0xf4>
 8002ee4:	2680      	movs	r6, #128	; 0x80
 8002ee6:	0436      	lsls	r6, r6, #16
 8002ee8:	432e      	orrs	r6, r5
 8002eea:	251e      	movs	r5, #30
 8002eec:	1a6d      	subs	r5, r5, r1
 8002eee:	2d1f      	cmp	r5, #31
 8002ef0:	dd11      	ble.n	8002f16 <__aeabi_d2f+0xc6>
 8002ef2:	2202      	movs	r2, #2
 8002ef4:	4252      	negs	r2, r2
 8002ef6:	1a52      	subs	r2, r2, r1
 8002ef8:	0031      	movs	r1, r6
 8002efa:	40d1      	lsrs	r1, r2
 8002efc:	2d20      	cmp	r5, #32
 8002efe:	d004      	beq.n	8002f0a <__aeabi_d2f+0xba>
 8002f00:	4a14      	ldr	r2, [pc, #80]	; (8002f54 <__aeabi_d2f+0x104>)
 8002f02:	4694      	mov	ip, r2
 8002f04:	4463      	add	r3, ip
 8002f06:	409e      	lsls	r6, r3
 8002f08:	4337      	orrs	r7, r6
 8002f0a:	003a      	movs	r2, r7
 8002f0c:	1e53      	subs	r3, r2, #1
 8002f0e:	419a      	sbcs	r2, r3
 8002f10:	430a      	orrs	r2, r1
 8002f12:	2100      	movs	r1, #0
 8002f14:	e7ce      	b.n	8002eb4 <__aeabi_d2f+0x64>
 8002f16:	4a10      	ldr	r2, [pc, #64]	; (8002f58 <__aeabi_d2f+0x108>)
 8002f18:	0038      	movs	r0, r7
 8002f1a:	4694      	mov	ip, r2
 8002f1c:	4463      	add	r3, ip
 8002f1e:	4098      	lsls	r0, r3
 8002f20:	003a      	movs	r2, r7
 8002f22:	1e41      	subs	r1, r0, #1
 8002f24:	4188      	sbcs	r0, r1
 8002f26:	409e      	lsls	r6, r3
 8002f28:	40ea      	lsrs	r2, r5
 8002f2a:	4330      	orrs	r0, r6
 8002f2c:	4302      	orrs	r2, r0
 8002f2e:	2100      	movs	r1, #0
 8002f30:	0753      	lsls	r3, r2, #29
 8002f32:	d1c1      	bne.n	8002eb8 <__aeabi_d2f+0x68>
 8002f34:	2180      	movs	r1, #128	; 0x80
 8002f36:	0013      	movs	r3, r2
 8002f38:	04c9      	lsls	r1, r1, #19
 8002f3a:	2001      	movs	r0, #1
 8002f3c:	400b      	ands	r3, r1
 8002f3e:	420a      	tst	r2, r1
 8002f40:	d1c6      	bne.n	8002ed0 <__aeabi_d2f+0x80>
 8002f42:	e7a3      	b.n	8002e8c <__aeabi_d2f+0x3c>
 8002f44:	2300      	movs	r3, #0
 8002f46:	e7a0      	b.n	8002e8a <__aeabi_d2f+0x3a>
 8002f48:	000b      	movs	r3, r1
 8002f4a:	e79f      	b.n	8002e8c <__aeabi_d2f+0x3c>
 8002f4c:	000007fe 	.word	0x000007fe
 8002f50:	fffffc80 	.word	0xfffffc80
 8002f54:	fffffca2 	.word	0xfffffca2
 8002f58:	fffffc82 	.word	0xfffffc82

08002f5c <__clzsi2>:
 8002f5c:	211c      	movs	r1, #28
 8002f5e:	2301      	movs	r3, #1
 8002f60:	041b      	lsls	r3, r3, #16
 8002f62:	4298      	cmp	r0, r3
 8002f64:	d301      	bcc.n	8002f6a <__clzsi2+0xe>
 8002f66:	0c00      	lsrs	r0, r0, #16
 8002f68:	3910      	subs	r1, #16
 8002f6a:	0a1b      	lsrs	r3, r3, #8
 8002f6c:	4298      	cmp	r0, r3
 8002f6e:	d301      	bcc.n	8002f74 <__clzsi2+0x18>
 8002f70:	0a00      	lsrs	r0, r0, #8
 8002f72:	3908      	subs	r1, #8
 8002f74:	091b      	lsrs	r3, r3, #4
 8002f76:	4298      	cmp	r0, r3
 8002f78:	d301      	bcc.n	8002f7e <__clzsi2+0x22>
 8002f7a:	0900      	lsrs	r0, r0, #4
 8002f7c:	3904      	subs	r1, #4
 8002f7e:	a202      	add	r2, pc, #8	; (adr r2, 8002f88 <__clzsi2+0x2c>)
 8002f80:	5c10      	ldrb	r0, [r2, r0]
 8002f82:	1840      	adds	r0, r0, r1
 8002f84:	4770      	bx	lr
 8002f86:	46c0      	nop			; (mov r8, r8)
 8002f88:	02020304 	.word	0x02020304
 8002f8c:	01010101 	.word	0x01010101
	...

08002f98 <__clzdi2>:
 8002f98:	b510      	push	{r4, lr}
 8002f9a:	2900      	cmp	r1, #0
 8002f9c:	d103      	bne.n	8002fa6 <__clzdi2+0xe>
 8002f9e:	f7ff ffdd 	bl	8002f5c <__clzsi2>
 8002fa2:	3020      	adds	r0, #32
 8002fa4:	e002      	b.n	8002fac <__clzdi2+0x14>
 8002fa6:	0008      	movs	r0, r1
 8002fa8:	f7ff ffd8 	bl	8002f5c <__clzsi2>
 8002fac:	bd10      	pop	{r4, pc}
 8002fae:	46c0      	nop			; (mov r8, r8)

08002fb0 <Check_GPS_Pack>:

static bool GetField(uint8_t *pData, uint8_t *pField, uint8_t nFieldNum, uint8_t nMaxFieldLen);


void Check_GPS_Pack(void)
{
 8002fb0:	b5b0      	push	{r4, r5, r7, lr}
 8002fb2:	b082      	sub	sp, #8
 8002fb4:	af00      	add	r7, sp, #0
	uint8_t crc=0;
 8002fb6:	1dfb      	adds	r3, r7, #7
 8002fb8:	2200      	movs	r2, #0
 8002fba:	701a      	strb	r2, [r3, #0]
	uint8_t i=1;
 8002fbc:	1dbb      	adds	r3, r7, #6
 8002fbe:	2201      	movs	r2, #1
 8002fc0:	701a      	strb	r2, [r3, #0]

	while(gps_pack[i]!='*')
 8002fc2:	e017      	b.n	8002ff4 <Check_GPS_Pack+0x44>
	{
		crc^=gps_pack[i++];
 8002fc4:	1dbb      	adds	r3, r7, #6
 8002fc6:	781b      	ldrb	r3, [r3, #0]
 8002fc8:	1dba      	adds	r2, r7, #6
 8002fca:	1c59      	adds	r1, r3, #1
 8002fcc:	7011      	strb	r1, [r2, #0]
 8002fce:	001a      	movs	r2, r3
 8002fd0:	4b21      	ldr	r3, [pc, #132]	; (8003058 <Check_GPS_Pack+0xa8>)
 8002fd2:	5c99      	ldrb	r1, [r3, r2]
 8002fd4:	1dfb      	adds	r3, r7, #7
 8002fd6:	1dfa      	adds	r2, r7, #7
 8002fd8:	7812      	ldrb	r2, [r2, #0]
 8002fda:	404a      	eors	r2, r1
 8002fdc:	701a      	strb	r2, [r3, #0]
		if (i>=sizeof(gps_pack)/sizeof(gps_pack[0]))
 8002fde:	1dbb      	adds	r3, r7, #6
 8002fe0:	781b      	ldrb	r3, [r3, #0]
 8002fe2:	2bc7      	cmp	r3, #199	; 0xc7
 8002fe4:	d906      	bls.n	8002ff4 <Check_GPS_Pack+0x44>
		{
			gps_info.error_crc++;
 8002fe6:	4b1d      	ldr	r3, [pc, #116]	; (800305c <Check_GPS_Pack+0xac>)
 8002fe8:	7f1b      	ldrb	r3, [r3, #28]
 8002fea:	3301      	adds	r3, #1
 8002fec:	b2da      	uxtb	r2, r3
 8002fee:	4b1b      	ldr	r3, [pc, #108]	; (800305c <Check_GPS_Pack+0xac>)
 8002ff0:	771a      	strb	r2, [r3, #28]
			return;
 8002ff2:	e02e      	b.n	8003052 <Check_GPS_Pack+0xa2>
	while(gps_pack[i]!='*')
 8002ff4:	1dbb      	adds	r3, r7, #6
 8002ff6:	781b      	ldrb	r3, [r3, #0]
 8002ff8:	4a17      	ldr	r2, [pc, #92]	; (8003058 <Check_GPS_Pack+0xa8>)
 8002ffa:	5cd3      	ldrb	r3, [r2, r3]
 8002ffc:	2b2a      	cmp	r3, #42	; 0x2a
 8002ffe:	d1e1      	bne.n	8002fc4 <Check_GPS_Pack+0x14>
		}
	}

	if (crc == (HexASCII_to_Hex(gps_pack[i+1])<<4 | HexASCII_to_Hex(gps_pack[i+2])))
 8003000:	1dfb      	adds	r3, r7, #7
 8003002:	781c      	ldrb	r4, [r3, #0]
 8003004:	1dbb      	adds	r3, r7, #6
 8003006:	781b      	ldrb	r3, [r3, #0]
 8003008:	3301      	adds	r3, #1
 800300a:	4a13      	ldr	r2, [pc, #76]	; (8003058 <Check_GPS_Pack+0xa8>)
 800300c:	5cd3      	ldrb	r3, [r2, r3]
 800300e:	0018      	movs	r0, r3
 8003010:	f000 f82a 	bl	8003068 <HexASCII_to_Hex>
 8003014:	0003      	movs	r3, r0
 8003016:	011d      	lsls	r5, r3, #4
 8003018:	1dbb      	adds	r3, r7, #6
 800301a:	781b      	ldrb	r3, [r3, #0]
 800301c:	3302      	adds	r3, #2
 800301e:	4a0e      	ldr	r2, [pc, #56]	; (8003058 <Check_GPS_Pack+0xa8>)
 8003020:	5cd3      	ldrb	r3, [r2, r3]
 8003022:	0018      	movs	r0, r3
 8003024:	f000 f820 	bl	8003068 <HexASCII_to_Hex>
 8003028:	0003      	movs	r3, r0
 800302a:	432b      	orrs	r3, r5
 800302c:	429c      	cmp	r4, r3
 800302e:	d10a      	bne.n	8003046 <Check_GPS_Pack+0x96>
	{
		if(!memcmp((const char*)&gps_pack[1],"GNRMC",5))
 8003030:	490b      	ldr	r1, [pc, #44]	; (8003060 <Check_GPS_Pack+0xb0>)
 8003032:	4b0c      	ldr	r3, [pc, #48]	; (8003064 <Check_GPS_Pack+0xb4>)
 8003034:	2205      	movs	r2, #5
 8003036:	0018      	movs	r0, r3
 8003038:	f00a f972 	bl	800d320 <memcmp>
 800303c:	1e03      	subs	r3, r0, #0
 800303e:	d108      	bne.n	8003052 <Check_GPS_Pack+0xa2>
			GPS_Parse_GNGGA();
 8003040:	f000 f846 	bl	80030d0 <GPS_Parse_GNGGA>
 8003044:	e005      	b.n	8003052 <Check_GPS_Pack+0xa2>
	}else
	  gps_info.error_crc++;
 8003046:	4b05      	ldr	r3, [pc, #20]	; (800305c <Check_GPS_Pack+0xac>)
 8003048:	7f1b      	ldrb	r3, [r3, #28]
 800304a:	3301      	adds	r3, #1
 800304c:	b2da      	uxtb	r2, r3
 800304e:	4b03      	ldr	r3, [pc, #12]	; (800305c <Check_GPS_Pack+0xac>)
 8003050:	771a      	strb	r2, [r3, #28]
}
 8003052:	46bd      	mov	sp, r7
 8003054:	b002      	add	sp, #8
 8003056:	bdb0      	pop	{r4, r5, r7, pc}
 8003058:	200002bc 	.word	0x200002bc
 800305c:	20000384 	.word	0x20000384
 8003060:	0800f2c0 	.word	0x0800f2c0
 8003064:	200002bd 	.word	0x200002bd

08003068 <HexASCII_to_Hex>:


//Преобразование 'F' в 0x0F
uint8_t HexASCII_to_Hex(const uint8_t HA)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b082      	sub	sp, #8
 800306c:	af00      	add	r7, sp, #0
 800306e:	0002      	movs	r2, r0
 8003070:	1dfb      	adds	r3, r7, #7
 8003072:	701a      	strb	r2, [r3, #0]
    if (HA>='0' && HA<='9') return HA&0x0F;
 8003074:	1dfb      	adds	r3, r7, #7
 8003076:	781b      	ldrb	r3, [r3, #0]
 8003078:	2b2f      	cmp	r3, #47	; 0x2f
 800307a:	d909      	bls.n	8003090 <HexASCII_to_Hex+0x28>
 800307c:	1dfb      	adds	r3, r7, #7
 800307e:	781b      	ldrb	r3, [r3, #0]
 8003080:	2b39      	cmp	r3, #57	; 0x39
 8003082:	d805      	bhi.n	8003090 <HexASCII_to_Hex+0x28>
 8003084:	1dfb      	adds	r3, r7, #7
 8003086:	781b      	ldrb	r3, [r3, #0]
 8003088:	220f      	movs	r2, #15
 800308a:	4013      	ands	r3, r2
 800308c:	b2db      	uxtb	r3, r3
 800308e:	e01a      	b.n	80030c6 <HexASCII_to_Hex+0x5e>
    if (HA>='A' && HA<='F') return HA-0x37;
 8003090:	1dfb      	adds	r3, r7, #7
 8003092:	781b      	ldrb	r3, [r3, #0]
 8003094:	2b40      	cmp	r3, #64	; 0x40
 8003096:	d908      	bls.n	80030aa <HexASCII_to_Hex+0x42>
 8003098:	1dfb      	adds	r3, r7, #7
 800309a:	781b      	ldrb	r3, [r3, #0]
 800309c:	2b46      	cmp	r3, #70	; 0x46
 800309e:	d804      	bhi.n	80030aa <HexASCII_to_Hex+0x42>
 80030a0:	1dfb      	adds	r3, r7, #7
 80030a2:	781b      	ldrb	r3, [r3, #0]
 80030a4:	3b37      	subs	r3, #55	; 0x37
 80030a6:	b2db      	uxtb	r3, r3
 80030a8:	e00d      	b.n	80030c6 <HexASCII_to_Hex+0x5e>
    if (HA>='a' && HA<='f') return HA-0x57;
 80030aa:	1dfb      	adds	r3, r7, #7
 80030ac:	781b      	ldrb	r3, [r3, #0]
 80030ae:	2b60      	cmp	r3, #96	; 0x60
 80030b0:	d908      	bls.n	80030c4 <HexASCII_to_Hex+0x5c>
 80030b2:	1dfb      	adds	r3, r7, #7
 80030b4:	781b      	ldrb	r3, [r3, #0]
 80030b6:	2b66      	cmp	r3, #102	; 0x66
 80030b8:	d804      	bhi.n	80030c4 <HexASCII_to_Hex+0x5c>
 80030ba:	1dfb      	adds	r3, r7, #7
 80030bc:	781b      	ldrb	r3, [r3, #0]
 80030be:	3b57      	subs	r3, #87	; 0x57
 80030c0:	b2db      	uxtb	r3, r3
 80030c2:	e000      	b.n	80030c6 <HexASCII_to_Hex+0x5e>
    return 0xF0;
 80030c4:	23f0      	movs	r3, #240	; 0xf0
}
 80030c6:	0018      	movs	r0, r3
 80030c8:	46bd      	mov	sp, r7
 80030ca:	b002      	add	sp, #8
 80030cc:	bd80      	pop	{r7, pc}
	...

080030d0 <GPS_Parse_GNGGA>:

void GPS_Parse_GNGGA(void)
{
 80030d0:	b590      	push	{r4, r7, lr}
 80030d2:	b085      	sub	sp, #20
 80030d4:	af00      	add	r7, sp, #0
	#define MAXFIELD 16
    unsigned char pField[MAXFIELD];


    if (GetField(&gps_pack[7], pField, 0, MAXFIELD))
 80030d6:	0039      	movs	r1, r7
 80030d8:	48b5      	ldr	r0, [pc, #724]	; (80033b0 <GPS_Parse_GNGGA+0x2e0>)
 80030da:	2310      	movs	r3, #16
 80030dc:	2200      	movs	r2, #0
 80030de:	f000 f971 	bl	80033c4 <GetField>
 80030e2:	1e03      	subs	r3, r0, #0
 80030e4:	d038      	beq.n	8003158 <GPS_Parse_GNGGA+0x88>
    {
        // Hours
        gps_info.time_pack.hour = (pField[0]&0x0F)*10 + (pField[1]&0x0F);
 80030e6:	003b      	movs	r3, r7
 80030e8:	781b      	ldrb	r3, [r3, #0]
 80030ea:	220f      	movs	r2, #15
 80030ec:	4013      	ands	r3, r2
 80030ee:	b2db      	uxtb	r3, r3
 80030f0:	1c1a      	adds	r2, r3, #0
 80030f2:	0092      	lsls	r2, r2, #2
 80030f4:	18d3      	adds	r3, r2, r3
 80030f6:	18db      	adds	r3, r3, r3
 80030f8:	b2da      	uxtb	r2, r3
 80030fa:	003b      	movs	r3, r7
 80030fc:	785b      	ldrb	r3, [r3, #1]
 80030fe:	210f      	movs	r1, #15
 8003100:	400b      	ands	r3, r1
 8003102:	b2db      	uxtb	r3, r3
 8003104:	18d3      	adds	r3, r2, r3
 8003106:	b2da      	uxtb	r2, r3
 8003108:	4baa      	ldr	r3, [pc, #680]	; (80033b4 <GPS_Parse_GNGGA+0x2e4>)
 800310a:	709a      	strb	r2, [r3, #2]
        // Minutes
        gps_info.time_pack.min = (pField[2]&0x0F)*10 + (pField[3]&0x0F);
 800310c:	003b      	movs	r3, r7
 800310e:	789b      	ldrb	r3, [r3, #2]
 8003110:	220f      	movs	r2, #15
 8003112:	4013      	ands	r3, r2
 8003114:	b2db      	uxtb	r3, r3
 8003116:	1c1a      	adds	r2, r3, #0
 8003118:	0092      	lsls	r2, r2, #2
 800311a:	18d3      	adds	r3, r2, r3
 800311c:	18db      	adds	r3, r3, r3
 800311e:	b2da      	uxtb	r2, r3
 8003120:	003b      	movs	r3, r7
 8003122:	78db      	ldrb	r3, [r3, #3]
 8003124:	210f      	movs	r1, #15
 8003126:	400b      	ands	r3, r1
 8003128:	b2db      	uxtb	r3, r3
 800312a:	18d3      	adds	r3, r2, r3
 800312c:	b2da      	uxtb	r2, r3
 800312e:	4ba1      	ldr	r3, [pc, #644]	; (80033b4 <GPS_Parse_GNGGA+0x2e4>)
 8003130:	705a      	strb	r2, [r3, #1]
        // Seconds
        gps_info.time_pack.sec = (pField[4]&0x0F)*10 + (pField[5]&0x0F);
 8003132:	003b      	movs	r3, r7
 8003134:	791b      	ldrb	r3, [r3, #4]
 8003136:	220f      	movs	r2, #15
 8003138:	4013      	ands	r3, r2
 800313a:	b2db      	uxtb	r3, r3
 800313c:	1c1a      	adds	r2, r3, #0
 800313e:	0092      	lsls	r2, r2, #2
 8003140:	18d3      	adds	r3, r2, r3
 8003142:	18db      	adds	r3, r3, r3
 8003144:	b2da      	uxtb	r2, r3
 8003146:	003b      	movs	r3, r7
 8003148:	795b      	ldrb	r3, [r3, #5]
 800314a:	210f      	movs	r1, #15
 800314c:	400b      	ands	r3, r1
 800314e:	b2db      	uxtb	r3, r3
 8003150:	18d3      	adds	r3, r2, r3
 8003152:	b2da      	uxtb	r2, r3
 8003154:	4b97      	ldr	r3, [pc, #604]	; (80033b4 <GPS_Parse_GNGGA+0x2e4>)
 8003156:	701a      	strb	r2, [r3, #0]
    }

    // Data valid
    gps_info.fix_valid = GetField(&gps_pack[7], pField, 1, MAXFIELD) && pField[0] == 'A';
 8003158:	0039      	movs	r1, r7
 800315a:	4895      	ldr	r0, [pc, #596]	; (80033b0 <GPS_Parse_GNGGA+0x2e0>)
 800315c:	2310      	movs	r3, #16
 800315e:	2201      	movs	r2, #1
 8003160:	f000 f930 	bl	80033c4 <GetField>
 8003164:	1e03      	subs	r3, r0, #0
 8003166:	d005      	beq.n	8003174 <GPS_Parse_GNGGA+0xa4>
 8003168:	003b      	movs	r3, r7
 800316a:	781b      	ldrb	r3, [r3, #0]
 800316c:	2b41      	cmp	r3, #65	; 0x41
 800316e:	d101      	bne.n	8003174 <GPS_Parse_GNGGA+0xa4>
 8003170:	2301      	movs	r3, #1
 8003172:	e000      	b.n	8003176 <GPS_Parse_GNGGA+0xa6>
 8003174:	2300      	movs	r3, #0
 8003176:	b2da      	uxtb	r2, r3
 8003178:	4b8e      	ldr	r3, [pc, #568]	; (80033b4 <GPS_Parse_GNGGA+0x2e4>)
 800317a:	719a      	strb	r2, [r3, #6]

    // Latitude
    if (GetField(&gps_pack[7], pField, 2, MAXFIELD))
 800317c:	0039      	movs	r1, r7
 800317e:	488c      	ldr	r0, [pc, #560]	; (80033b0 <GPS_Parse_GNGGA+0x2e0>)
 8003180:	2310      	movs	r3, #16
 8003182:	2202      	movs	r2, #2
 8003184:	f000 f91e 	bl	80033c4 <GetField>
 8003188:	1e03      	subs	r3, r0, #0
 800318a:	d02f      	beq.n	80031ec <GPS_Parse_GNGGA+0x11c>
    {
        gps_info.Position.Latitude = atof((char *)pField+2)/60.0;
 800318c:	003b      	movs	r3, r7
 800318e:	3302      	adds	r3, #2
 8003190:	0018      	movs	r0, r3
 8003192:	f009 f97f 	bl	800c494 <atof>
 8003196:	2200      	movs	r2, #0
 8003198:	4b87      	ldr	r3, [pc, #540]	; (80033b8 <GPS_Parse_GNGGA+0x2e8>)
 800319a:	f7fe fb8f 	bl	80018bc <__aeabi_ddiv>
 800319e:	0002      	movs	r2, r0
 80031a0:	000b      	movs	r3, r1
 80031a2:	0010      	movs	r0, r2
 80031a4:	0019      	movs	r1, r3
 80031a6:	f7ff fe53 	bl	8002e50 <__aeabi_d2f>
 80031aa:	1c02      	adds	r2, r0, #0
 80031ac:	4b81      	ldr	r3, [pc, #516]	; (80033b4 <GPS_Parse_GNGGA+0x2e4>)
 80031ae:	609a      	str	r2, [r3, #8]
        gps_info.Position.Latitude += (float)((pField[0]&0x0F)*10+(pField[1]&0x0F));
 80031b0:	4b80      	ldr	r3, [pc, #512]	; (80033b4 <GPS_Parse_GNGGA+0x2e4>)
 80031b2:	689c      	ldr	r4, [r3, #8]
 80031b4:	003b      	movs	r3, r7
 80031b6:	781b      	ldrb	r3, [r3, #0]
 80031b8:	001a      	movs	r2, r3
 80031ba:	230f      	movs	r3, #15
 80031bc:	401a      	ands	r2, r3
 80031be:	0013      	movs	r3, r2
 80031c0:	009b      	lsls	r3, r3, #2
 80031c2:	189b      	adds	r3, r3, r2
 80031c4:	005b      	lsls	r3, r3, #1
 80031c6:	001a      	movs	r2, r3
 80031c8:	003b      	movs	r3, r7
 80031ca:	785b      	ldrb	r3, [r3, #1]
 80031cc:	0019      	movs	r1, r3
 80031ce:	230f      	movs	r3, #15
 80031d0:	400b      	ands	r3, r1
 80031d2:	18d3      	adds	r3, r2, r3
 80031d4:	0018      	movs	r0, r3
 80031d6:	f7fd ffbf 	bl	8001158 <__aeabi_i2f>
 80031da:	1c03      	adds	r3, r0, #0
 80031dc:	1c19      	adds	r1, r3, #0
 80031de:	1c20      	adds	r0, r4, #0
 80031e0:	f7fd fb02 	bl	80007e8 <__aeabi_fadd>
 80031e4:	1c03      	adds	r3, r0, #0
 80031e6:	1c1a      	adds	r2, r3, #0
 80031e8:	4b72      	ldr	r3, [pc, #456]	; (80033b4 <GPS_Parse_GNGGA+0x2e4>)
 80031ea:	609a      	str	r2, [r3, #8]
    }
    if (GetField(&gps_pack[7], pField, 3, MAXFIELD))
 80031ec:	0039      	movs	r1, r7
 80031ee:	4870      	ldr	r0, [pc, #448]	; (80033b0 <GPS_Parse_GNGGA+0x2e0>)
 80031f0:	2310      	movs	r3, #16
 80031f2:	2203      	movs	r2, #3
 80031f4:	f000 f8e6 	bl	80033c4 <GetField>
 80031f8:	1e03      	subs	r3, r0, #0
 80031fa:	d00a      	beq.n	8003212 <GPS_Parse_GNGGA+0x142>
    {
        if (pField[0] == 'S')
 80031fc:	003b      	movs	r3, r7
 80031fe:	781b      	ldrb	r3, [r3, #0]
 8003200:	2b53      	cmp	r3, #83	; 0x53
 8003202:	d106      	bne.n	8003212 <GPS_Parse_GNGGA+0x142>
        gps_info.Position.Latitude = -gps_info.Position.Latitude;
 8003204:	4b6b      	ldr	r3, [pc, #428]	; (80033b4 <GPS_Parse_GNGGA+0x2e4>)
 8003206:	689b      	ldr	r3, [r3, #8]
 8003208:	2280      	movs	r2, #128	; 0x80
 800320a:	0612      	lsls	r2, r2, #24
 800320c:	405a      	eors	r2, r3
 800320e:	4b69      	ldr	r3, [pc, #420]	; (80033b4 <GPS_Parse_GNGGA+0x2e4>)
 8003210:	609a      	str	r2, [r3, #8]
    }

    // Longitude
    if (GetField(&gps_pack[7], pField, 4, MAXFIELD))
 8003212:	0039      	movs	r1, r7
 8003214:	4866      	ldr	r0, [pc, #408]	; (80033b0 <GPS_Parse_GNGGA+0x2e0>)
 8003216:	2310      	movs	r3, #16
 8003218:	2204      	movs	r2, #4
 800321a:	f000 f8d3 	bl	80033c4 <GetField>
 800321e:	1e03      	subs	r3, r0, #0
 8003220:	d037      	beq.n	8003292 <GPS_Parse_GNGGA+0x1c2>
    {
        gps_info.Position.Longitude = atof((char *)pField+3)/60.0;
 8003222:	003b      	movs	r3, r7
 8003224:	3303      	adds	r3, #3
 8003226:	0018      	movs	r0, r3
 8003228:	f009 f934 	bl	800c494 <atof>
 800322c:	2200      	movs	r2, #0
 800322e:	4b62      	ldr	r3, [pc, #392]	; (80033b8 <GPS_Parse_GNGGA+0x2e8>)
 8003230:	f7fe fb44 	bl	80018bc <__aeabi_ddiv>
 8003234:	0002      	movs	r2, r0
 8003236:	000b      	movs	r3, r1
 8003238:	0010      	movs	r0, r2
 800323a:	0019      	movs	r1, r3
 800323c:	f7ff fe08 	bl	8002e50 <__aeabi_d2f>
 8003240:	1c02      	adds	r2, r0, #0
 8003242:	4b5c      	ldr	r3, [pc, #368]	; (80033b4 <GPS_Parse_GNGGA+0x2e4>)
 8003244:	60da      	str	r2, [r3, #12]
        gps_info.Position.Longitude += (float)((pField[0]&0x0F)*100 + (pField[1]&0x0F)*10 + (pField[2]&0x0F));
 8003246:	4b5b      	ldr	r3, [pc, #364]	; (80033b4 <GPS_Parse_GNGGA+0x2e4>)
 8003248:	68dc      	ldr	r4, [r3, #12]
 800324a:	003b      	movs	r3, r7
 800324c:	781b      	ldrb	r3, [r3, #0]
 800324e:	001a      	movs	r2, r3
 8003250:	230f      	movs	r3, #15
 8003252:	4013      	ands	r3, r2
 8003254:	2264      	movs	r2, #100	; 0x64
 8003256:	435a      	muls	r2, r3
 8003258:	0011      	movs	r1, r2
 800325a:	003b      	movs	r3, r7
 800325c:	785b      	ldrb	r3, [r3, #1]
 800325e:	001a      	movs	r2, r3
 8003260:	230f      	movs	r3, #15
 8003262:	401a      	ands	r2, r3
 8003264:	0013      	movs	r3, r2
 8003266:	009b      	lsls	r3, r3, #2
 8003268:	189b      	adds	r3, r3, r2
 800326a:	005b      	lsls	r3, r3, #1
 800326c:	18ca      	adds	r2, r1, r3
 800326e:	003b      	movs	r3, r7
 8003270:	789b      	ldrb	r3, [r3, #2]
 8003272:	0019      	movs	r1, r3
 8003274:	230f      	movs	r3, #15
 8003276:	400b      	ands	r3, r1
 8003278:	18d3      	adds	r3, r2, r3
 800327a:	0018      	movs	r0, r3
 800327c:	f7fd ff6c 	bl	8001158 <__aeabi_i2f>
 8003280:	1c03      	adds	r3, r0, #0
 8003282:	1c19      	adds	r1, r3, #0
 8003284:	1c20      	adds	r0, r4, #0
 8003286:	f7fd faaf 	bl	80007e8 <__aeabi_fadd>
 800328a:	1c03      	adds	r3, r0, #0
 800328c:	1c1a      	adds	r2, r3, #0
 800328e:	4b49      	ldr	r3, [pc, #292]	; (80033b4 <GPS_Parse_GNGGA+0x2e4>)
 8003290:	60da      	str	r2, [r3, #12]
    }
    if (GetField(&gps_pack[7], pField, 5, MAXFIELD))
 8003292:	0039      	movs	r1, r7
 8003294:	4846      	ldr	r0, [pc, #280]	; (80033b0 <GPS_Parse_GNGGA+0x2e0>)
 8003296:	2310      	movs	r3, #16
 8003298:	2205      	movs	r2, #5
 800329a:	f000 f893 	bl	80033c4 <GetField>
 800329e:	1e03      	subs	r3, r0, #0
 80032a0:	d00a      	beq.n	80032b8 <GPS_Parse_GNGGA+0x1e8>
    {
        if (pField[0] == 'W')
 80032a2:	003b      	movs	r3, r7
 80032a4:	781b      	ldrb	r3, [r3, #0]
 80032a6:	2b57      	cmp	r3, #87	; 0x57
 80032a8:	d106      	bne.n	80032b8 <GPS_Parse_GNGGA+0x1e8>
        gps_info.Position.Longitude = -gps_info.Position.Longitude;
 80032aa:	4b42      	ldr	r3, [pc, #264]	; (80033b4 <GPS_Parse_GNGGA+0x2e4>)
 80032ac:	68db      	ldr	r3, [r3, #12]
 80032ae:	2280      	movs	r2, #128	; 0x80
 80032b0:	0612      	lsls	r2, r2, #24
 80032b2:	405a      	eors	r2, r3
 80032b4:	4b3f      	ldr	r3, [pc, #252]	; (80033b4 <GPS_Parse_GNGGA+0x2e4>)
 80032b6:	60da      	str	r2, [r3, #12]
    }

    // Ground speed
    if (GetField(&gps_pack[7], pField, 6, MAXFIELD))
 80032b8:	0039      	movs	r1, r7
 80032ba:	483d      	ldr	r0, [pc, #244]	; (80033b0 <GPS_Parse_GNGGA+0x2e0>)
 80032bc:	2310      	movs	r3, #16
 80032be:	2206      	movs	r2, #6
 80032c0:	f000 f880 	bl	80033c4 <GetField>
 80032c4:	1e03      	subs	r3, r0, #0
 80032c6:	d011      	beq.n	80032ec <GPS_Parse_GNGGA+0x21c>
    {
        gps_info.Velocity.Velocity = atof((char *)pField)*0.5144444;
 80032c8:	003b      	movs	r3, r7
 80032ca:	0018      	movs	r0, r3
 80032cc:	f009 f8e2 	bl	800c494 <atof>
 80032d0:	4a3a      	ldr	r2, [pc, #232]	; (80033bc <GPS_Parse_GNGGA+0x2ec>)
 80032d2:	4b3b      	ldr	r3, [pc, #236]	; (80033c0 <GPS_Parse_GNGGA+0x2f0>)
 80032d4:	f7fe feec 	bl	80020b0 <__aeabi_dmul>
 80032d8:	0002      	movs	r2, r0
 80032da:	000b      	movs	r3, r1
 80032dc:	0010      	movs	r0, r2
 80032de:	0019      	movs	r1, r3
 80032e0:	f7ff fdb6 	bl	8002e50 <__aeabi_d2f>
 80032e4:	1c02      	adds	r2, r0, #0
 80032e6:	4b33      	ldr	r3, [pc, #204]	; (80033b4 <GPS_Parse_GNGGA+0x2e4>)
 80032e8:	615a      	str	r2, [r3, #20]
 80032ea:	e002      	b.n	80032f2 <GPS_Parse_GNGGA+0x222>
    }
    else
    {
        gps_info.Velocity.Velocity = 0.0;
 80032ec:	4b31      	ldr	r3, [pc, #196]	; (80033b4 <GPS_Parse_GNGGA+0x2e4>)
 80032ee:	2200      	movs	r2, #0
 80032f0:	615a      	str	r2, [r3, #20]
    }

    // Course over ground, degrees true
    if (GetField(&gps_pack[7], pField, 7, MAXFIELD))
 80032f2:	0039      	movs	r1, r7
 80032f4:	482e      	ldr	r0, [pc, #184]	; (80033b0 <GPS_Parse_GNGGA+0x2e0>)
 80032f6:	2310      	movs	r3, #16
 80032f8:	2207      	movs	r2, #7
 80032fa:	f000 f863 	bl	80033c4 <GetField>
 80032fe:	1e03      	subs	r3, r0, #0
 8003300:	d00d      	beq.n	800331e <GPS_Parse_GNGGA+0x24e>
    {
        gps_info.Velocity.Course = atof((char *)pField);
 8003302:	003b      	movs	r3, r7
 8003304:	0018      	movs	r0, r3
 8003306:	f009 f8c5 	bl	800c494 <atof>
 800330a:	0002      	movs	r2, r0
 800330c:	000b      	movs	r3, r1
 800330e:	0010      	movs	r0, r2
 8003310:	0019      	movs	r1, r3
 8003312:	f7ff fd9d 	bl	8002e50 <__aeabi_d2f>
 8003316:	1c02      	adds	r2, r0, #0
 8003318:	4b26      	ldr	r3, [pc, #152]	; (80033b4 <GPS_Parse_GNGGA+0x2e4>)
 800331a:	619a      	str	r2, [r3, #24]
 800331c:	e002      	b.n	8003324 <GPS_Parse_GNGGA+0x254>
    }
    else
    {
        gps_info.Velocity.Course = 0.0;
 800331e:	4b25      	ldr	r3, [pc, #148]	; (80033b4 <GPS_Parse_GNGGA+0x2e4>)
 8003320:	2200      	movs	r2, #0
 8003322:	619a      	str	r2, [r3, #24]
    }

    // Date
    if (GetField(&gps_pack[7], pField, 8, MAXFIELD))
 8003324:	0039      	movs	r1, r7
 8003326:	4822      	ldr	r0, [pc, #136]	; (80033b0 <GPS_Parse_GNGGA+0x2e0>)
 8003328:	2310      	movs	r3, #16
 800332a:	2208      	movs	r2, #8
 800332c:	f000 f84a 	bl	80033c4 <GetField>
 8003330:	1e03      	subs	r3, r0, #0
 8003332:	d038      	beq.n	80033a6 <GPS_Parse_GNGGA+0x2d6>
    {
        // Day
        gps_info.time_pack.date = (pField[0]&0x0F)*10 + (pField[1]&0x0F);
 8003334:	003b      	movs	r3, r7
 8003336:	781b      	ldrb	r3, [r3, #0]
 8003338:	220f      	movs	r2, #15
 800333a:	4013      	ands	r3, r2
 800333c:	b2db      	uxtb	r3, r3
 800333e:	1c1a      	adds	r2, r3, #0
 8003340:	0092      	lsls	r2, r2, #2
 8003342:	18d3      	adds	r3, r2, r3
 8003344:	18db      	adds	r3, r3, r3
 8003346:	b2da      	uxtb	r2, r3
 8003348:	003b      	movs	r3, r7
 800334a:	785b      	ldrb	r3, [r3, #1]
 800334c:	210f      	movs	r1, #15
 800334e:	400b      	ands	r3, r1
 8003350:	b2db      	uxtb	r3, r3
 8003352:	18d3      	adds	r3, r2, r3
 8003354:	b2da      	uxtb	r2, r3
 8003356:	4b17      	ldr	r3, [pc, #92]	; (80033b4 <GPS_Parse_GNGGA+0x2e4>)
 8003358:	70da      	strb	r2, [r3, #3]
        // Month
        gps_info.time_pack.month = (pField[2]&0x0F)*10 + (pField[3]&0x0F);
 800335a:	003b      	movs	r3, r7
 800335c:	789b      	ldrb	r3, [r3, #2]
 800335e:	220f      	movs	r2, #15
 8003360:	4013      	ands	r3, r2
 8003362:	b2db      	uxtb	r3, r3
 8003364:	1c1a      	adds	r2, r3, #0
 8003366:	0092      	lsls	r2, r2, #2
 8003368:	18d3      	adds	r3, r2, r3
 800336a:	18db      	adds	r3, r3, r3
 800336c:	b2da      	uxtb	r2, r3
 800336e:	003b      	movs	r3, r7
 8003370:	78db      	ldrb	r3, [r3, #3]
 8003372:	210f      	movs	r1, #15
 8003374:	400b      	ands	r3, r1
 8003376:	b2db      	uxtb	r3, r3
 8003378:	18d3      	adds	r3, r2, r3
 800337a:	b2da      	uxtb	r2, r3
 800337c:	4b0d      	ldr	r3, [pc, #52]	; (80033b4 <GPS_Parse_GNGGA+0x2e4>)
 800337e:	711a      	strb	r2, [r3, #4]
        // Year
        gps_info.time_pack.year = (pField[4]&0x0F)*10 + (pField[5]&0x0F);
 8003380:	003b      	movs	r3, r7
 8003382:	791b      	ldrb	r3, [r3, #4]
 8003384:	220f      	movs	r2, #15
 8003386:	4013      	ands	r3, r2
 8003388:	b2db      	uxtb	r3, r3
 800338a:	1c1a      	adds	r2, r3, #0
 800338c:	0092      	lsls	r2, r2, #2
 800338e:	18d3      	adds	r3, r2, r3
 8003390:	18db      	adds	r3, r3, r3
 8003392:	b2da      	uxtb	r2, r3
 8003394:	003b      	movs	r3, r7
 8003396:	795b      	ldrb	r3, [r3, #5]
 8003398:	210f      	movs	r1, #15
 800339a:	400b      	ands	r3, r1
 800339c:	b2db      	uxtb	r3, r3
 800339e:	18d3      	adds	r3, r2, r3
 80033a0:	b2da      	uxtb	r2, r3
 80033a2:	4b04      	ldr	r3, [pc, #16]	; (80033b4 <GPS_Parse_GNGGA+0x2e4>)
 80033a4:	715a      	strb	r2, [r3, #5]
    }


}
 80033a6:	46c0      	nop			; (mov r8, r8)
 80033a8:	46bd      	mov	sp, r7
 80033aa:	b005      	add	sp, #20
 80033ac:	bd90      	pop	{r4, r7, pc}
 80033ae:	46c0      	nop			; (mov r8, r8)
 80033b0:	200002c3 	.word	0x200002c3
 80033b4:	20000384 	.word	0x20000384
 80033b8:	404e0000 	.word	0x404e0000
 80033bc:	1a3387ed 	.word	0x1a3387ed
 80033c0:	3fe07654 	.word	0x3fe07654

080033c4 <GetField>:

static bool GetField(uint8_t *pData, uint8_t *pField, uint8_t nFieldNum, uint8_t nMaxFieldLen)
{
 80033c4:	b590      	push	{r4, r7, lr}
 80033c6:	b087      	sub	sp, #28
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	60f8      	str	r0, [r7, #12]
 80033cc:	60b9      	str	r1, [r7, #8]
 80033ce:	0019      	movs	r1, r3
 80033d0:	1dfb      	adds	r3, r7, #7
 80033d2:	701a      	strb	r2, [r3, #0]
 80033d4:	1dbb      	adds	r3, r7, #6
 80033d6:	1c0a      	adds	r2, r1, #0
 80033d8:	701a      	strb	r2, [r3, #0]
    if(pData == NULL || pField == NULL || nMaxFieldLen == 0)
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d006      	beq.n	80033ee <GetField+0x2a>
 80033e0:	68bb      	ldr	r3, [r7, #8]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d003      	beq.n	80033ee <GetField+0x2a>
 80033e6:	1dbb      	adds	r3, r7, #6
 80033e8:	781b      	ldrb	r3, [r3, #0]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d101      	bne.n	80033f2 <GetField+0x2e>
    {
        return false;
 80033ee:	2300      	movs	r3, #0
 80033f0:	e091      	b.n	8003516 <GetField+0x152>
    }

    uint8_t i = 0;
 80033f2:	2317      	movs	r3, #23
 80033f4:	18fb      	adds	r3, r7, r3
 80033f6:	2200      	movs	r2, #0
 80033f8:	701a      	strb	r2, [r3, #0]
    uint8_t nField = 0;
 80033fa:	2316      	movs	r3, #22
 80033fc:	18fb      	adds	r3, r7, r3
 80033fe:	2200      	movs	r2, #0
 8003400:	701a      	strb	r2, [r3, #0]
    while (nField != nFieldNum && pData[i])
 8003402:	e01f      	b.n	8003444 <GetField+0x80>
    {
        if (pData[i] == ',')
 8003404:	2317      	movs	r3, #23
 8003406:	18fb      	adds	r3, r7, r3
 8003408:	781b      	ldrb	r3, [r3, #0]
 800340a:	68fa      	ldr	r2, [r7, #12]
 800340c:	18d3      	adds	r3, r2, r3
 800340e:	781b      	ldrb	r3, [r3, #0]
 8003410:	2b2c      	cmp	r3, #44	; 0x2c
 8003412:	d105      	bne.n	8003420 <GetField+0x5c>
        {
    	      nField++;
 8003414:	2116      	movs	r1, #22
 8003416:	187b      	adds	r3, r7, r1
 8003418:	781a      	ldrb	r2, [r3, #0]
 800341a:	187b      	adds	r3, r7, r1
 800341c:	3201      	adds	r2, #1
 800341e:	701a      	strb	r2, [r3, #0]
        }

        i++;
 8003420:	2117      	movs	r1, #23
 8003422:	187b      	adds	r3, r7, r1
 8003424:	781a      	ldrb	r2, [r3, #0]
 8003426:	187b      	adds	r3, r7, r1
 8003428:	3201      	adds	r2, #1
 800342a:	701a      	strb	r2, [r3, #0]

        if (pData[i] == 0)
 800342c:	187b      	adds	r3, r7, r1
 800342e:	781b      	ldrb	r3, [r3, #0]
 8003430:	68fa      	ldr	r2, [r7, #12]
 8003432:	18d3      	adds	r3, r2, r3
 8003434:	781b      	ldrb	r3, [r3, #0]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d104      	bne.n	8003444 <GetField+0x80>
        {
            pField[0] = '\0';
 800343a:	68bb      	ldr	r3, [r7, #8]
 800343c:	2200      	movs	r2, #0
 800343e:	701a      	strb	r2, [r3, #0]
            return false;
 8003440:	2300      	movs	r3, #0
 8003442:	e068      	b.n	8003516 <GetField+0x152>
    while (nField != nFieldNum && pData[i])
 8003444:	2316      	movs	r3, #22
 8003446:	18fa      	adds	r2, r7, r3
 8003448:	1dfb      	adds	r3, r7, #7
 800344a:	7812      	ldrb	r2, [r2, #0]
 800344c:	781b      	ldrb	r3, [r3, #0]
 800344e:	429a      	cmp	r2, r3
 8003450:	d007      	beq.n	8003462 <GetField+0x9e>
 8003452:	2317      	movs	r3, #23
 8003454:	18fb      	adds	r3, r7, r3
 8003456:	781b      	ldrb	r3, [r3, #0]
 8003458:	68fa      	ldr	r2, [r7, #12]
 800345a:	18d3      	adds	r3, r2, r3
 800345c:	781b      	ldrb	r3, [r3, #0]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d1d0      	bne.n	8003404 <GetField+0x40>
        }
    }

    if (pData[i] == ',' || pData[i] == '*')
 8003462:	2117      	movs	r1, #23
 8003464:	187b      	adds	r3, r7, r1
 8003466:	781b      	ldrb	r3, [r3, #0]
 8003468:	68fa      	ldr	r2, [r7, #12]
 800346a:	18d3      	adds	r3, r2, r3
 800346c:	781b      	ldrb	r3, [r3, #0]
 800346e:	2b2c      	cmp	r3, #44	; 0x2c
 8003470:	d006      	beq.n	8003480 <GetField+0xbc>
 8003472:	187b      	adds	r3, r7, r1
 8003474:	781b      	ldrb	r3, [r3, #0]
 8003476:	68fa      	ldr	r2, [r7, #12]
 8003478:	18d3      	adds	r3, r2, r3
 800347a:	781b      	ldrb	r3, [r3, #0]
 800347c:	2b2a      	cmp	r3, #42	; 0x2a
 800347e:	d104      	bne.n	800348a <GetField+0xc6>
    {
        pField[0] = '\0';
 8003480:	68bb      	ldr	r3, [r7, #8]
 8003482:	2200      	movs	r2, #0
 8003484:	701a      	strb	r2, [r3, #0]
        return false;
 8003486:	2300      	movs	r3, #0
 8003488:	e045      	b.n	8003516 <GetField+0x152>
    }

    unsigned char i2 = 0;
 800348a:	2315      	movs	r3, #21
 800348c:	18fb      	adds	r3, r7, r3
 800348e:	2200      	movs	r2, #0
 8003490:	701a      	strb	r2, [r3, #0]
    while (pData[i] != ',' && pData[i] != '*' && pData[i])
 8003492:	e022      	b.n	80034da <GetField+0x116>
    {
        pField[i2] = pData[i];
 8003494:	2417      	movs	r4, #23
 8003496:	193b      	adds	r3, r7, r4
 8003498:	781b      	ldrb	r3, [r3, #0]
 800349a:	68fa      	ldr	r2, [r7, #12]
 800349c:	18d2      	adds	r2, r2, r3
 800349e:	2015      	movs	r0, #21
 80034a0:	183b      	adds	r3, r7, r0
 80034a2:	781b      	ldrb	r3, [r3, #0]
 80034a4:	68b9      	ldr	r1, [r7, #8]
 80034a6:	18cb      	adds	r3, r1, r3
 80034a8:	7812      	ldrb	r2, [r2, #0]
 80034aa:	701a      	strb	r2, [r3, #0]
        i2++;
 80034ac:	0001      	movs	r1, r0
 80034ae:	187b      	adds	r3, r7, r1
 80034b0:	781a      	ldrb	r2, [r3, #0]
 80034b2:	187b      	adds	r3, r7, r1
 80034b4:	3201      	adds	r2, #1
 80034b6:	701a      	strb	r2, [r3, #0]
        i++;
 80034b8:	193b      	adds	r3, r7, r4
 80034ba:	781a      	ldrb	r2, [r3, #0]
 80034bc:	193b      	adds	r3, r7, r4
 80034be:	3201      	adds	r2, #1
 80034c0:	701a      	strb	r2, [r3, #0]

        if (i2 >= nMaxFieldLen)
 80034c2:	187a      	adds	r2, r7, r1
 80034c4:	1dbb      	adds	r3, r7, #6
 80034c6:	7812      	ldrb	r2, [r2, #0]
 80034c8:	781b      	ldrb	r3, [r3, #0]
 80034ca:	429a      	cmp	r2, r3
 80034cc:	d305      	bcc.n	80034da <GetField+0x116>
        {
            i2 = nMaxFieldLen-1;
 80034ce:	187b      	adds	r3, r7, r1
 80034d0:	1dba      	adds	r2, r7, #6
 80034d2:	7812      	ldrb	r2, [r2, #0]
 80034d4:	3a01      	subs	r2, #1
 80034d6:	701a      	strb	r2, [r3, #0]
            break;
 80034d8:	e015      	b.n	8003506 <GetField+0x142>
    while (pData[i] != ',' && pData[i] != '*' && pData[i])
 80034da:	2117      	movs	r1, #23
 80034dc:	187b      	adds	r3, r7, r1
 80034de:	781b      	ldrb	r3, [r3, #0]
 80034e0:	68fa      	ldr	r2, [r7, #12]
 80034e2:	18d3      	adds	r3, r2, r3
 80034e4:	781b      	ldrb	r3, [r3, #0]
 80034e6:	2b2c      	cmp	r3, #44	; 0x2c
 80034e8:	d00d      	beq.n	8003506 <GetField+0x142>
 80034ea:	187b      	adds	r3, r7, r1
 80034ec:	781b      	ldrb	r3, [r3, #0]
 80034ee:	68fa      	ldr	r2, [r7, #12]
 80034f0:	18d3      	adds	r3, r2, r3
 80034f2:	781b      	ldrb	r3, [r3, #0]
 80034f4:	2b2a      	cmp	r3, #42	; 0x2a
 80034f6:	d006      	beq.n	8003506 <GetField+0x142>
 80034f8:	187b      	adds	r3, r7, r1
 80034fa:	781b      	ldrb	r3, [r3, #0]
 80034fc:	68fa      	ldr	r2, [r7, #12]
 80034fe:	18d3      	adds	r3, r2, r3
 8003500:	781b      	ldrb	r3, [r3, #0]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d1c6      	bne.n	8003494 <GetField+0xd0>
        }
    }

    pField[i2] = '\0';
 8003506:	2315      	movs	r3, #21
 8003508:	18fb      	adds	r3, r7, r3
 800350a:	781b      	ldrb	r3, [r3, #0]
 800350c:	68ba      	ldr	r2, [r7, #8]
 800350e:	18d3      	adds	r3, r2, r3
 8003510:	2200      	movs	r2, #0
 8003512:	701a      	strb	r2, [r3, #0]
    return true;
 8003514:	2301      	movs	r3, #1
}
 8003516:	0018      	movs	r0, r3
 8003518:	46bd      	mov	sp, r7
 800351a:	b007      	add	sp, #28
 800351c:	bd90      	pop	{r4, r7, pc}
	...

08003520 <get_gsm_string>:
uint8_t mc60_registration;
uint8_t signal_level;


uint8_t get_gsm_string()
{
 8003520:	b580      	push	{r7, lr}
 8003522:	af00      	add	r7, sp, #0
  static uint8_t p =0;
  while (p_w != p_r)
 8003524:	e03f      	b.n	80035a6 <get_gsm_string+0x86>
  {
    gsm_pack[p] = gsm_data[p_r++];
 8003526:	4b25      	ldr	r3, [pc, #148]	; (80035bc <get_gsm_string+0x9c>)
 8003528:	781b      	ldrb	r3, [r3, #0]
 800352a:	1c5a      	adds	r2, r3, #1
 800352c:	b2d1      	uxtb	r1, r2
 800352e:	4a23      	ldr	r2, [pc, #140]	; (80035bc <get_gsm_string+0x9c>)
 8003530:	7011      	strb	r1, [r2, #0]
 8003532:	0019      	movs	r1, r3
 8003534:	4b22      	ldr	r3, [pc, #136]	; (80035c0 <get_gsm_string+0xa0>)
 8003536:	781b      	ldrb	r3, [r3, #0]
 8003538:	001a      	movs	r2, r3
 800353a:	4b22      	ldr	r3, [pc, #136]	; (80035c4 <get_gsm_string+0xa4>)
 800353c:	5c59      	ldrb	r1, [r3, r1]
 800353e:	4b22      	ldr	r3, [pc, #136]	; (80035c8 <get_gsm_string+0xa8>)
 8003540:	5499      	strb	r1, [r3, r2]
    if (p_r >= sizeof(gsm_data)/sizeof(gsm_data[0]))
 8003542:	4b1e      	ldr	r3, [pc, #120]	; (80035bc <get_gsm_string+0x9c>)
 8003544:	781b      	ldrb	r3, [r3, #0]
 8003546:	2bc7      	cmp	r3, #199	; 0xc7
 8003548:	d902      	bls.n	8003550 <get_gsm_string+0x30>
      p_r = 0;
 800354a:	4b1c      	ldr	r3, [pc, #112]	; (80035bc <get_gsm_string+0x9c>)
 800354c:	2200      	movs	r2, #0
 800354e:	701a      	strb	r2, [r3, #0]

    if (gsm_pack[p] == '\n')
 8003550:	4b1b      	ldr	r3, [pc, #108]	; (80035c0 <get_gsm_string+0xa0>)
 8003552:	781b      	ldrb	r3, [r3, #0]
 8003554:	001a      	movs	r2, r3
 8003556:	4b1c      	ldr	r3, [pc, #112]	; (80035c8 <get_gsm_string+0xa8>)
 8003558:	5c9b      	ldrb	r3, [r3, r2]
 800355a:	2b0a      	cmp	r3, #10
 800355c:	d100      	bne.n	8003560 <get_gsm_string+0x40>
      continue;
 800355e:	e022      	b.n	80035a6 <get_gsm_string+0x86>

    if (gsm_pack[p] == '\r')
 8003560:	4b17      	ldr	r3, [pc, #92]	; (80035c0 <get_gsm_string+0xa0>)
 8003562:	781b      	ldrb	r3, [r3, #0]
 8003564:	001a      	movs	r2, r3
 8003566:	4b18      	ldr	r3, [pc, #96]	; (80035c8 <get_gsm_string+0xa8>)
 8003568:	5c9b      	ldrb	r3, [r3, r2]
 800356a:	2b0d      	cmp	r3, #13
 800356c:	d10e      	bne.n	800358c <get_gsm_string+0x6c>
    {
      if (p)
 800356e:	4b14      	ldr	r3, [pc, #80]	; (80035c0 <get_gsm_string+0xa0>)
 8003570:	781b      	ldrb	r3, [r3, #0]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d017      	beq.n	80035a6 <get_gsm_string+0x86>
      {
       gsm_pack[p] = 0;
 8003576:	4b12      	ldr	r3, [pc, #72]	; (80035c0 <get_gsm_string+0xa0>)
 8003578:	781b      	ldrb	r3, [r3, #0]
 800357a:	001a      	movs	r2, r3
 800357c:	4b12      	ldr	r3, [pc, #72]	; (80035c8 <get_gsm_string+0xa8>)
 800357e:	2100      	movs	r1, #0
 8003580:	5499      	strb	r1, [r3, r2]
        p = 0;
 8003582:	4b0f      	ldr	r3, [pc, #60]	; (80035c0 <get_gsm_string+0xa0>)
 8003584:	2200      	movs	r2, #0
 8003586:	701a      	strb	r2, [r3, #0]
        return 1;
 8003588:	2301      	movs	r3, #1
 800358a:	e013      	b.n	80035b4 <get_gsm_string+0x94>
      }
    }else
    {
    	if (++p >= sizeof(gsm_pack)/sizeof(gsm_pack[0]))
 800358c:	4b0c      	ldr	r3, [pc, #48]	; (80035c0 <get_gsm_string+0xa0>)
 800358e:	781b      	ldrb	r3, [r3, #0]
 8003590:	3301      	adds	r3, #1
 8003592:	b2da      	uxtb	r2, r3
 8003594:	4b0a      	ldr	r3, [pc, #40]	; (80035c0 <get_gsm_string+0xa0>)
 8003596:	701a      	strb	r2, [r3, #0]
 8003598:	4b09      	ldr	r3, [pc, #36]	; (80035c0 <get_gsm_string+0xa0>)
 800359a:	781b      	ldrb	r3, [r3, #0]
 800359c:	2b63      	cmp	r3, #99	; 0x63
 800359e:	d902      	bls.n	80035a6 <get_gsm_string+0x86>
    		p =0;
 80035a0:	4b07      	ldr	r3, [pc, #28]	; (80035c0 <get_gsm_string+0xa0>)
 80035a2:	2200      	movs	r2, #0
 80035a4:	701a      	strb	r2, [r3, #0]
  while (p_w != p_r)
 80035a6:	4b09      	ldr	r3, [pc, #36]	; (80035cc <get_gsm_string+0xac>)
 80035a8:	781a      	ldrb	r2, [r3, #0]
 80035aa:	4b04      	ldr	r3, [pc, #16]	; (80035bc <get_gsm_string+0x9c>)
 80035ac:	781b      	ldrb	r3, [r3, #0]
 80035ae:	429a      	cmp	r2, r3
 80035b0:	d1b9      	bne.n	8003526 <get_gsm_string+0x6>
    }

  }
  return 0;
 80035b2:	2300      	movs	r3, #0
}
 80035b4:	0018      	movs	r0, r3
 80035b6:	46bd      	mov	sp, r7
 80035b8:	bd80      	pop	{r7, pc}
 80035ba:	46c0      	nop			; (mov r8, r8)
 80035bc:	200004d1 	.word	0x200004d1
 80035c0:	20000502 	.word	0x20000502
 80035c4:	200003a4 	.word	0x200003a4
 80035c8:	2000046c 	.word	0x2000046c
 80035cc:	200004d0 	.word	0x200004d0

080035d0 <timeout>:

uint8_t timeout(uint32_t t, uint32_t tm)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b082      	sub	sp, #8
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
 80035d8:	6039      	str	r1, [r7, #0]
  return (HAL_GetTick() - t > tm);
 80035da:	f001 fd91 	bl	8005100 <HAL_GetTick>
 80035de:	0002      	movs	r2, r0
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	1ad3      	subs	r3, r2, r3
 80035e4:	683a      	ldr	r2, [r7, #0]
 80035e6:	429a      	cmp	r2, r3
 80035e8:	419b      	sbcs	r3, r3
 80035ea:	425b      	negs	r3, r3
 80035ec:	b2db      	uxtb	r3, r3
}
 80035ee:	0018      	movs	r0, r3
 80035f0:	46bd      	mov	sp, r7
 80035f2:	b002      	add	sp, #8
 80035f4:	bd80      	pop	{r7, pc}
	...

080035f8 <gsm_write>:

void gsm_write(char* data)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b084      	sub	sp, #16
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
	uint8_t len= strlen((const char*)data);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	0018      	movs	r0, r3
 8003604:	f7fc fd8a 	bl	800011c <strlen>
 8003608:	0002      	movs	r2, r0
 800360a:	210f      	movs	r1, #15
 800360c:	187b      	adds	r3, r7, r1
 800360e:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_IT(&huart3, (uint8_t*)data, len);
 8003610:	187b      	adds	r3, r7, r1
 8003612:	781b      	ldrb	r3, [r3, #0]
 8003614:	b29a      	uxth	r2, r3
 8003616:	6879      	ldr	r1, [r7, #4]
 8003618:	4b06      	ldr	r3, [pc, #24]	; (8003634 <gsm_write+0x3c>)
 800361a:	0018      	movs	r0, r3
 800361c:	f004 f9c4 	bl	80079a8 <HAL_UART_Transmit_IT>
	gsm_timeout = HAL_GetTick();
 8003620:	f001 fd6e 	bl	8005100 <HAL_GetTick>
 8003624:	0002      	movs	r2, r0
 8003626:	4b04      	ldr	r3, [pc, #16]	; (8003638 <gsm_write+0x40>)
 8003628:	601a      	str	r2, [r3, #0]
}
 800362a:	46c0      	nop			; (mov r8, r8)
 800362c:	46bd      	mov	sp, r7
 800362e:	b004      	add	sp, #16
 8003630:	bd80      	pop	{r7, pc}
 8003632:	46c0      	nop			; (mov r8, r8)
 8003634:	200005ec 	.word	0x200005ec
 8003638:	200004d4 	.word	0x200004d4

0800363c <digit_read>:

uint8_t digit_read(const char *buf, char *target)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b084      	sub	sp, #16
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
 8003644:	6039      	str	r1, [r7, #0]

  uint8_t i = 0;
 8003646:	230f      	movs	r3, #15
 8003648:	18fb      	adds	r3, r7, r3
 800364a:	2200      	movs	r2, #0
 800364c:	701a      	strb	r2, [r3, #0]

  while (i < 100)
 800364e:	e01d      	b.n	800368c <digit_read+0x50>
  {
    if ((buf[i])>='0' && (buf[i])<='9')
 8003650:	200f      	movs	r0, #15
 8003652:	183b      	adds	r3, r7, r0
 8003654:	781b      	ldrb	r3, [r3, #0]
 8003656:	687a      	ldr	r2, [r7, #4]
 8003658:	18d3      	adds	r3, r2, r3
 800365a:	781b      	ldrb	r3, [r3, #0]
 800365c:	2b2f      	cmp	r3, #47	; 0x2f
 800365e:	d91a      	bls.n	8003696 <digit_read+0x5a>
 8003660:	183b      	adds	r3, r7, r0
 8003662:	781b      	ldrb	r3, [r3, #0]
 8003664:	687a      	ldr	r2, [r7, #4]
 8003666:	18d3      	adds	r3, r2, r3
 8003668:	781b      	ldrb	r3, [r3, #0]
 800366a:	2b39      	cmp	r3, #57	; 0x39
 800366c:	d813      	bhi.n	8003696 <digit_read+0x5a>
    {
      target[i] = buf[i];
 800366e:	183b      	adds	r3, r7, r0
 8003670:	781b      	ldrb	r3, [r3, #0]
 8003672:	687a      	ldr	r2, [r7, #4]
 8003674:	18d2      	adds	r2, r2, r3
 8003676:	183b      	adds	r3, r7, r0
 8003678:	781b      	ldrb	r3, [r3, #0]
 800367a:	6839      	ldr	r1, [r7, #0]
 800367c:	18cb      	adds	r3, r1, r3
 800367e:	7812      	ldrb	r2, [r2, #0]
 8003680:	701a      	strb	r2, [r3, #0]
      i++;
 8003682:	183b      	adds	r3, r7, r0
 8003684:	781a      	ldrb	r2, [r3, #0]
 8003686:	183b      	adds	r3, r7, r0
 8003688:	3201      	adds	r2, #1
 800368a:	701a      	strb	r2, [r3, #0]
  while (i < 100)
 800368c:	230f      	movs	r3, #15
 800368e:	18fb      	adds	r3, r7, r3
 8003690:	781b      	ldrb	r3, [r3, #0]
 8003692:	2b63      	cmp	r3, #99	; 0x63
 8003694:	d9dc      	bls.n	8003650 <digit_read+0x14>
    }
    else
      break;
  }
  target[i] = 0;
 8003696:	210f      	movs	r1, #15
 8003698:	187b      	adds	r3, r7, r1
 800369a:	781b      	ldrb	r3, [r3, #0]
 800369c:	683a      	ldr	r2, [r7, #0]
 800369e:	18d3      	adds	r3, r2, r3
 80036a0:	2200      	movs	r2, #0
 80036a2:	701a      	strb	r2, [r3, #0]
  return i;
 80036a4:	187b      	adds	r3, r7, r1
 80036a6:	781b      	ldrb	r3, [r3, #0]
}
 80036a8:	0018      	movs	r0, r3
 80036aa:	46bd      	mov	sp, r7
 80036ac:	b004      	add	sp, #16
 80036ae:	bd80      	pop	{r7, pc}

080036b0 <gsm>:

void gsm(void)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b082      	sub	sp, #8
 80036b4:	af00      	add	r7, sp, #0
	bool string = get_gsm_string();
 80036b6:	f7ff ff33 	bl	8003520 <get_gsm_string>
 80036ba:	0003      	movs	r3, r0
 80036bc:	001a      	movs	r2, r3
 80036be:	1d7b      	adds	r3, r7, #5
 80036c0:	1e51      	subs	r1, r2, #1
 80036c2:	418a      	sbcs	r2, r1
 80036c4:	701a      	strb	r2, [r3, #0]
	static uint8_t gsm_state = 0;


	  switch (gsm_state)
 80036c6:	4bc8      	ldr	r3, [pc, #800]	; (80039e8 <gsm+0x338>)
 80036c8:	781b      	ldrb	r3, [r3, #0]
 80036ca:	2b0b      	cmp	r3, #11
 80036cc:	d900      	bls.n	80036d0 <gsm+0x20>
 80036ce:	e2a5      	b.n	8003c1c <gsm+0x56c>
 80036d0:	009a      	lsls	r2, r3, #2
 80036d2:	4bc6      	ldr	r3, [pc, #792]	; (80039ec <gsm+0x33c>)
 80036d4:	18d3      	adds	r3, r2, r3
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	469f      	mov	pc, r3
	  {
	    case 0:
	      gsm_write ("ATE0\r\n");
 80036da:	4bc5      	ldr	r3, [pc, #788]	; (80039f0 <gsm+0x340>)
 80036dc:	0018      	movs	r0, r3
 80036de:	f7ff ff8b 	bl	80035f8 <gsm_write>
	      gsm_state = 1;
 80036e2:	4bc1      	ldr	r3, [pc, #772]	; (80039e8 <gsm+0x338>)
 80036e4:	2201      	movs	r2, #1
 80036e6:	701a      	strb	r2, [r3, #0]
	      mc60_count_ATE0++;
 80036e8:	4bc2      	ldr	r3, [pc, #776]	; (80039f4 <gsm+0x344>)
 80036ea:	781b      	ldrb	r3, [r3, #0]
 80036ec:	3301      	adds	r3, #1
 80036ee:	b2da      	uxtb	r2, r3
 80036f0:	4bc0      	ldr	r3, [pc, #768]	; (80039f4 <gsm+0x344>)
 80036f2:	701a      	strb	r2, [r3, #0]
          signal_level =0;
 80036f4:	4bc0      	ldr	r3, [pc, #768]	; (80039f8 <gsm+0x348>)
 80036f6:	2200      	movs	r2, #0
 80036f8:	701a      	strb	r2, [r3, #0]
	      break;
 80036fa:	e28f      	b.n	8003c1c <gsm+0x56c>

	    case 1:
	      if (string && !strcmp((const char*)gsm_pack, "OK"))
 80036fc:	1d7b      	adds	r3, r7, #5
 80036fe:	781b      	ldrb	r3, [r3, #0]
 8003700:	2b00      	cmp	r3, #0
 8003702:	d00f      	beq.n	8003724 <gsm+0x74>
 8003704:	4abd      	ldr	r2, [pc, #756]	; (80039fc <gsm+0x34c>)
 8003706:	4bbe      	ldr	r3, [pc, #760]	; (8003a00 <gsm+0x350>)
 8003708:	0011      	movs	r1, r2
 800370a:	0018      	movs	r0, r3
 800370c:	f7fc fcfc 	bl	8000108 <strcmp>
 8003710:	1e03      	subs	r3, r0, #0
 8003712:	d107      	bne.n	8003724 <gsm+0x74>
	      {
	    	  gsm_write ("AT+CMGF=1\r\n");
 8003714:	4bbb      	ldr	r3, [pc, #748]	; (8003a04 <gsm+0x354>)
 8003716:	0018      	movs	r0, r3
 8003718:	f7ff ff6e 	bl	80035f8 <gsm_write>
	          gsm_state = 2;
 800371c:	4bb2      	ldr	r3, [pc, #712]	; (80039e8 <gsm+0x338>)
 800371e:	2202      	movs	r2, #2
 8003720:	701a      	strb	r2, [r3, #0]
	        {
	         // Выключить питание mc60
	        	PWR_GSM_OFF;
	        }
	      }
	      break;
 8003722:	e266      	b.n	8003bf2 <gsm+0x542>
	      } else if (timeout(gsm_timeout, 1000))
 8003724:	4bb8      	ldr	r3, [pc, #736]	; (8003a08 <gsm+0x358>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	22fa      	movs	r2, #250	; 0xfa
 800372a:	0092      	lsls	r2, r2, #2
 800372c:	0011      	movs	r1, r2
 800372e:	0018      	movs	r0, r3
 8003730:	f7ff ff4e 	bl	80035d0 <timeout>
 8003734:	1e03      	subs	r3, r0, #0
 8003736:	d100      	bne.n	800373a <gsm+0x8a>
 8003738:	e25b      	b.n	8003bf2 <gsm+0x542>
	        if (mc60_count_ATE0 < 4)
 800373a:	4bae      	ldr	r3, [pc, #696]	; (80039f4 <gsm+0x344>)
 800373c:	781b      	ldrb	r3, [r3, #0]
 800373e:	2b03      	cmp	r3, #3
 8003740:	d803      	bhi.n	800374a <gsm+0x9a>
	           gsm_state = 0;
 8003742:	4ba9      	ldr	r3, [pc, #676]	; (80039e8 <gsm+0x338>)
 8003744:	2200      	movs	r2, #0
 8003746:	701a      	strb	r2, [r3, #0]
	      break;
 8003748:	e253      	b.n	8003bf2 <gsm+0x542>
	        if (timeout(gsm_timeout, 6000))
 800374a:	4baf      	ldr	r3, [pc, #700]	; (8003a08 <gsm+0x358>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4aaf      	ldr	r2, [pc, #700]	; (8003a0c <gsm+0x35c>)
 8003750:	0011      	movs	r1, r2
 8003752:	0018      	movs	r0, r3
 8003754:	f7ff ff3c 	bl	80035d0 <timeout>
 8003758:	1e03      	subs	r3, r0, #0
 800375a:	d006      	beq.n	800376a <gsm+0xba>
	          mc60_count_ATE0 = 0;
 800375c:	4ba5      	ldr	r3, [pc, #660]	; (80039f4 <gsm+0x344>)
 800375e:	2200      	movs	r2, #0
 8003760:	701a      	strb	r2, [r3, #0]
	          gsm_state = 0;
 8003762:	4ba1      	ldr	r3, [pc, #644]	; (80039e8 <gsm+0x338>)
 8003764:	2200      	movs	r2, #0
 8003766:	701a      	strb	r2, [r3, #0]
	      break;
 8003768:	e243      	b.n	8003bf2 <gsm+0x542>
	        }else if(timeout(gsm_timeout, 1500))
 800376a:	4ba7      	ldr	r3, [pc, #668]	; (8003a08 <gsm+0x358>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4aa8      	ldr	r2, [pc, #672]	; (8003a10 <gsm+0x360>)
 8003770:	0011      	movs	r1, r2
 8003772:	0018      	movs	r0, r3
 8003774:	f7ff ff2c 	bl	80035d0 <timeout>
 8003778:	1e03      	subs	r3, r0, #0
 800377a:	d007      	beq.n	800378c <gsm+0xdc>
	        	PWR_GSM_ON;
 800377c:	2380      	movs	r3, #128	; 0x80
 800377e:	011b      	lsls	r3, r3, #4
 8003780:	48a4      	ldr	r0, [pc, #656]	; (8003a14 <gsm+0x364>)
 8003782:	2201      	movs	r2, #1
 8003784:	0019      	movs	r1, r3
 8003786:	f001 ffbd 	bl	8005704 <HAL_GPIO_WritePin>
	      break;
 800378a:	e232      	b.n	8003bf2 <gsm+0x542>
	        	PWR_GSM_OFF;
 800378c:	2380      	movs	r3, #128	; 0x80
 800378e:	011b      	lsls	r3, r3, #4
 8003790:	48a0      	ldr	r0, [pc, #640]	; (8003a14 <gsm+0x364>)
 8003792:	2200      	movs	r2, #0
 8003794:	0019      	movs	r1, r3
 8003796:	f001 ffb5 	bl	8005704 <HAL_GPIO_WritePin>
	      break;
 800379a:	e22a      	b.n	8003bf2 <gsm+0x542>

	    case 2:
	      if (string && !strcmp((const char*)gsm_pack, "OK"))
 800379c:	1d7b      	adds	r3, r7, #5
 800379e:	781b      	ldrb	r3, [r3, #0]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d00f      	beq.n	80037c4 <gsm+0x114>
 80037a4:	4a95      	ldr	r2, [pc, #596]	; (80039fc <gsm+0x34c>)
 80037a6:	4b96      	ldr	r3, [pc, #600]	; (8003a00 <gsm+0x350>)
 80037a8:	0011      	movs	r1, r2
 80037aa:	0018      	movs	r0, r3
 80037ac:	f7fc fcac 	bl	8000108 <strcmp>
 80037b0:	1e03      	subs	r3, r0, #0
 80037b2:	d107      	bne.n	80037c4 <gsm+0x114>
	      {
	        gsm_write ("AT+CSCS=\"GSM\"\r\n");
 80037b4:	4b98      	ldr	r3, [pc, #608]	; (8003a18 <gsm+0x368>)
 80037b6:	0018      	movs	r0, r3
 80037b8:	f7ff ff1e 	bl	80035f8 <gsm_write>
	        gsm_state = 3;
 80037bc:	4b8a      	ldr	r3, [pc, #552]	; (80039e8 <gsm+0x338>)
 80037be:	2203      	movs	r2, #3
 80037c0:	701a      	strb	r2, [r3, #0]
	      } else if (timeout(gsm_timeout, 1000))
	      {
	        gsm_state = 0;
	      }
	      break;
 80037c2:	e218      	b.n	8003bf6 <gsm+0x546>
	      } else if (timeout(gsm_timeout, 1000))
 80037c4:	4b90      	ldr	r3, [pc, #576]	; (8003a08 <gsm+0x358>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	22fa      	movs	r2, #250	; 0xfa
 80037ca:	0092      	lsls	r2, r2, #2
 80037cc:	0011      	movs	r1, r2
 80037ce:	0018      	movs	r0, r3
 80037d0:	f7ff fefe 	bl	80035d0 <timeout>
 80037d4:	1e03      	subs	r3, r0, #0
 80037d6:	d100      	bne.n	80037da <gsm+0x12a>
 80037d8:	e20d      	b.n	8003bf6 <gsm+0x546>
	        gsm_state = 0;
 80037da:	4b83      	ldr	r3, [pc, #524]	; (80039e8 <gsm+0x338>)
 80037dc:	2200      	movs	r2, #0
 80037de:	701a      	strb	r2, [r3, #0]
	      break;
 80037e0:	e209      	b.n	8003bf6 <gsm+0x546>

	    case 3:
	      if (string && (!strcmp((const char*)gsm_pack, "OK") || !strcmp((const char*)gsm_pack, "ERROR")))
 80037e2:	1d7b      	adds	r3, r7, #5
 80037e4:	781b      	ldrb	r3, [r3, #0]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d017      	beq.n	800381a <gsm+0x16a>
 80037ea:	4a84      	ldr	r2, [pc, #528]	; (80039fc <gsm+0x34c>)
 80037ec:	4b84      	ldr	r3, [pc, #528]	; (8003a00 <gsm+0x350>)
 80037ee:	0011      	movs	r1, r2
 80037f0:	0018      	movs	r0, r3
 80037f2:	f7fc fc89 	bl	8000108 <strcmp>
 80037f6:	1e03      	subs	r3, r0, #0
 80037f8:	d007      	beq.n	800380a <gsm+0x15a>
 80037fa:	4a88      	ldr	r2, [pc, #544]	; (8003a1c <gsm+0x36c>)
 80037fc:	4b80      	ldr	r3, [pc, #512]	; (8003a00 <gsm+0x350>)
 80037fe:	0011      	movs	r1, r2
 8003800:	0018      	movs	r0, r3
 8003802:	f7fc fc81 	bl	8000108 <strcmp>
 8003806:	1e03      	subs	r3, r0, #0
 8003808:	d107      	bne.n	800381a <gsm+0x16a>
	      {
	        gsm_write("AT+GSN\r\n");
 800380a:	4b85      	ldr	r3, [pc, #532]	; (8003a20 <gsm+0x370>)
 800380c:	0018      	movs	r0, r3
 800380e:	f7ff fef3 	bl	80035f8 <gsm_write>
	        gsm_state = 4;
 8003812:	4b75      	ldr	r3, [pc, #468]	; (80039e8 <gsm+0x338>)
 8003814:	2204      	movs	r2, #4
 8003816:	701a      	strb	r2, [r3, #0]
	      } else if (timeout(gsm_timeout, 1000))
	        gsm_state = 0;
	      break;
 8003818:	e1ef      	b.n	8003bfa <gsm+0x54a>
	      } else if (timeout(gsm_timeout, 1000))
 800381a:	4b7b      	ldr	r3, [pc, #492]	; (8003a08 <gsm+0x358>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	22fa      	movs	r2, #250	; 0xfa
 8003820:	0092      	lsls	r2, r2, #2
 8003822:	0011      	movs	r1, r2
 8003824:	0018      	movs	r0, r3
 8003826:	f7ff fed3 	bl	80035d0 <timeout>
 800382a:	1e03      	subs	r3, r0, #0
 800382c:	d100      	bne.n	8003830 <gsm+0x180>
 800382e:	e1e4      	b.n	8003bfa <gsm+0x54a>
	        gsm_state = 0;
 8003830:	4b6d      	ldr	r3, [pc, #436]	; (80039e8 <gsm+0x338>)
 8003832:	2200      	movs	r2, #0
 8003834:	701a      	strb	r2, [r3, #0]
	      break;
 8003836:	e1e0      	b.n	8003bfa <gsm+0x54a>

	    case 4:
	      if (string && gsm_pack[0]>='0' && gsm_pack[0]<='9')
 8003838:	1d7b      	adds	r3, r7, #5
 800383a:	781b      	ldrb	r3, [r3, #0]
 800383c:	2b00      	cmp	r3, #0
 800383e:	d018      	beq.n	8003872 <gsm+0x1c2>
 8003840:	4b6f      	ldr	r3, [pc, #444]	; (8003a00 <gsm+0x350>)
 8003842:	781b      	ldrb	r3, [r3, #0]
 8003844:	2b2f      	cmp	r3, #47	; 0x2f
 8003846:	d914      	bls.n	8003872 <gsm+0x1c2>
 8003848:	4b6d      	ldr	r3, [pc, #436]	; (8003a00 <gsm+0x350>)
 800384a:	781b      	ldrb	r3, [r3, #0]
 800384c:	2b39      	cmp	r3, #57	; 0x39
 800384e:	d810      	bhi.n	8003872 <gsm+0x1c2>
	      {
	        if (digit_read((const char*)gsm_pack, (char*)mc60_IMEI) == 15)
 8003850:	4a74      	ldr	r2, [pc, #464]	; (8003a24 <gsm+0x374>)
 8003852:	4b6b      	ldr	r3, [pc, #428]	; (8003a00 <gsm+0x350>)
 8003854:	0011      	movs	r1, r2
 8003856:	0018      	movs	r0, r3
 8003858:	f7ff fef0 	bl	800363c <digit_read>
 800385c:	0003      	movs	r3, r0
 800385e:	2b0f      	cmp	r3, #15
 8003860:	d103      	bne.n	800386a <gsm+0x1ba>
	        {
	          gsm_state = 5;
 8003862:	4b61      	ldr	r3, [pc, #388]	; (80039e8 <gsm+0x338>)
 8003864:	2205      	movs	r2, #5
 8003866:	701a      	strb	r2, [r3, #0]
	        if (digit_read((const char*)gsm_pack, (char*)mc60_IMEI) == 15)
 8003868:	e012      	b.n	8003890 <gsm+0x1e0>
	        } else
	          gsm_state = 0;
 800386a:	4b5f      	ldr	r3, [pc, #380]	; (80039e8 <gsm+0x338>)
 800386c:	2200      	movs	r2, #0
 800386e:	701a      	strb	r2, [r3, #0]
	        if (digit_read((const char*)gsm_pack, (char*)mc60_IMEI) == 15)
 8003870:	e00e      	b.n	8003890 <gsm+0x1e0>
	      }else if (timeout(gsm_timeout, 1000))
 8003872:	4b65      	ldr	r3, [pc, #404]	; (8003a08 <gsm+0x358>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	22fa      	movs	r2, #250	; 0xfa
 8003878:	0092      	lsls	r2, r2, #2
 800387a:	0011      	movs	r1, r2
 800387c:	0018      	movs	r0, r3
 800387e:	f7ff fea7 	bl	80035d0 <timeout>
 8003882:	1e03      	subs	r3, r0, #0
 8003884:	d100      	bne.n	8003888 <gsm+0x1d8>
 8003886:	e1ba      	b.n	8003bfe <gsm+0x54e>
	        gsm_state = 0;
 8003888:	4b57      	ldr	r3, [pc, #348]	; (80039e8 <gsm+0x338>)
 800388a:	2200      	movs	r2, #0
 800388c:	701a      	strb	r2, [r3, #0]
	      break;
 800388e:	e1b6      	b.n	8003bfe <gsm+0x54e>
 8003890:	e1b5      	b.n	8003bfe <gsm+0x54e>

	    case 5:
	      if (string && !strcmp((const char*)gsm_pack, "OK"))
 8003892:	1d7b      	adds	r3, r7, #5
 8003894:	781b      	ldrb	r3, [r3, #0]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d00f      	beq.n	80038ba <gsm+0x20a>
 800389a:	4a58      	ldr	r2, [pc, #352]	; (80039fc <gsm+0x34c>)
 800389c:	4b58      	ldr	r3, [pc, #352]	; (8003a00 <gsm+0x350>)
 800389e:	0011      	movs	r1, r2
 80038a0:	0018      	movs	r0, r3
 80038a2:	f7fc fc31 	bl	8000108 <strcmp>
 80038a6:	1e03      	subs	r3, r0, #0
 80038a8:	d107      	bne.n	80038ba <gsm+0x20a>
	      {
	        gsm_write ("AT+CPIN?\r\n");
 80038aa:	4b5f      	ldr	r3, [pc, #380]	; (8003a28 <gsm+0x378>)
 80038ac:	0018      	movs	r0, r3
 80038ae:	f7ff fea3 	bl	80035f8 <gsm_write>
	        gsm_state = 6;
 80038b2:	4b4d      	ldr	r3, [pc, #308]	; (80039e8 <gsm+0x338>)
 80038b4:	2206      	movs	r2, #6
 80038b6:	701a      	strb	r2, [r3, #0]
	      } else if (timeout(gsm_timeout, 1000))
	      {
	        gsm_state = 0;
	      }
	      break;
 80038b8:	e1a3      	b.n	8003c02 <gsm+0x552>
	      } else if (timeout(gsm_timeout, 1000))
 80038ba:	4b53      	ldr	r3, [pc, #332]	; (8003a08 <gsm+0x358>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	22fa      	movs	r2, #250	; 0xfa
 80038c0:	0092      	lsls	r2, r2, #2
 80038c2:	0011      	movs	r1, r2
 80038c4:	0018      	movs	r0, r3
 80038c6:	f7ff fe83 	bl	80035d0 <timeout>
 80038ca:	1e03      	subs	r3, r0, #0
 80038cc:	d100      	bne.n	80038d0 <gsm+0x220>
 80038ce:	e198      	b.n	8003c02 <gsm+0x552>
	        gsm_state = 0;
 80038d0:	4b45      	ldr	r3, [pc, #276]	; (80039e8 <gsm+0x338>)
 80038d2:	2200      	movs	r2, #0
 80038d4:	701a      	strb	r2, [r3, #0]
	      break;
 80038d6:	e194      	b.n	8003c02 <gsm+0x552>



	    case 6:
	      if (string && !strcmp((const char*)gsm_pack, "+CPIN: READY"))
 80038d8:	1d7b      	adds	r3, r7, #5
 80038da:	781b      	ldrb	r3, [r3, #0]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d00e      	beq.n	80038fe <gsm+0x24e>
 80038e0:	4a52      	ldr	r2, [pc, #328]	; (8003a2c <gsm+0x37c>)
 80038e2:	4b47      	ldr	r3, [pc, #284]	; (8003a00 <gsm+0x350>)
 80038e4:	0011      	movs	r1, r2
 80038e6:	0018      	movs	r0, r3
 80038e8:	f7fc fc0e 	bl	8000108 <strcmp>
 80038ec:	1e03      	subs	r3, r0, #0
 80038ee:	d106      	bne.n	80038fe <gsm+0x24e>
	      {
	        gsm_state = 7;
 80038f0:	4b3d      	ldr	r3, [pc, #244]	; (80039e8 <gsm+0x338>)
 80038f2:	2207      	movs	r2, #7
 80038f4:	701a      	strb	r2, [r3, #0]
	        mc60_count_registration = 0;
 80038f6:	4b4e      	ldr	r3, [pc, #312]	; (8003a30 <gsm+0x380>)
 80038f8:	2200      	movs	r2, #0
 80038fa:	701a      	strb	r2, [r3, #0]
 80038fc:	e032      	b.n	8003964 <gsm+0x2b4>
	      } else if (string && !strcmp((const char*)gsm_pack, "+CPIN: SIM PIN"))
 80038fe:	1d7b      	adds	r3, r7, #5
 8003900:	781b      	ldrb	r3, [r3, #0]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d00f      	beq.n	8003926 <gsm+0x276>
 8003906:	4a4b      	ldr	r2, [pc, #300]	; (8003a34 <gsm+0x384>)
 8003908:	4b3d      	ldr	r3, [pc, #244]	; (8003a00 <gsm+0x350>)
 800390a:	0011      	movs	r1, r2
 800390c:	0018      	movs	r0, r3
 800390e:	f7fc fbfb 	bl	8000108 <strcmp>
 8003912:	1e03      	subs	r3, r0, #0
 8003914:	d107      	bne.n	8003926 <gsm+0x276>
	      {
	        gsm_write("AT+CPIN=0000\r\n");
 8003916:	4b48      	ldr	r3, [pc, #288]	; (8003a38 <gsm+0x388>)
 8003918:	0018      	movs	r0, r3
 800391a:	f7ff fe6d 	bl	80035f8 <gsm_write>
	        gsm_state = 4;
 800391e:	4b32      	ldr	r3, [pc, #200]	; (80039e8 <gsm+0x338>)
 8003920:	2204      	movs	r2, #4
 8003922:	701a      	strb	r2, [r3, #0]
 8003924:	e01e      	b.n	8003964 <gsm+0x2b4>
	      } else if (!p_w && !strcmp((const char*)gsm_pack, "ERROR"))
 8003926:	4b45      	ldr	r3, [pc, #276]	; (8003a3c <gsm+0x38c>)
 8003928:	781b      	ldrb	r3, [r3, #0]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d10b      	bne.n	8003946 <gsm+0x296>
 800392e:	4a3b      	ldr	r2, [pc, #236]	; (8003a1c <gsm+0x36c>)
 8003930:	4b33      	ldr	r3, [pc, #204]	; (8003a00 <gsm+0x350>)
 8003932:	0011      	movs	r1, r2
 8003934:	0018      	movs	r0, r3
 8003936:	f7fc fbe7 	bl	8000108 <strcmp>
 800393a:	1e03      	subs	r3, r0, #0
 800393c:	d103      	bne.n	8003946 <gsm+0x296>
	      {
	        gsm_state = 0;
 800393e:	4b2a      	ldr	r3, [pc, #168]	; (80039e8 <gsm+0x338>)
 8003940:	2200      	movs	r2, #0
 8003942:	701a      	strb	r2, [r3, #0]
 8003944:	e00e      	b.n	8003964 <gsm+0x2b4>
	      } else if (timeout(gsm_timeout, 1000))
 8003946:	4b30      	ldr	r3, [pc, #192]	; (8003a08 <gsm+0x358>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	22fa      	movs	r2, #250	; 0xfa
 800394c:	0092      	lsls	r2, r2, #2
 800394e:	0011      	movs	r1, r2
 8003950:	0018      	movs	r0, r3
 8003952:	f7ff fe3d 	bl	80035d0 <timeout>
 8003956:	1e03      	subs	r3, r0, #0
 8003958:	d100      	bne.n	800395c <gsm+0x2ac>
 800395a:	e154      	b.n	8003c06 <gsm+0x556>
	      {
	        gsm_state = 0;
 800395c:	4b22      	ldr	r3, [pc, #136]	; (80039e8 <gsm+0x338>)
 800395e:	2200      	movs	r2, #0
 8003960:	701a      	strb	r2, [r3, #0]
	      }
	      break;
 8003962:	e150      	b.n	8003c06 <gsm+0x556>
 8003964:	e14f      	b.n	8003c06 <gsm+0x556>


	    case 7:
	      if (string && !strcmp((const char*)gsm_pack, "OK"))
 8003966:	1d7b      	adds	r3, r7, #5
 8003968:	781b      	ldrb	r3, [r3, #0]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d00f      	beq.n	800398e <gsm+0x2de>
 800396e:	4a23      	ldr	r2, [pc, #140]	; (80039fc <gsm+0x34c>)
 8003970:	4b23      	ldr	r3, [pc, #140]	; (8003a00 <gsm+0x350>)
 8003972:	0011      	movs	r1, r2
 8003974:	0018      	movs	r0, r3
 8003976:	f7fc fbc7 	bl	8000108 <strcmp>
 800397a:	1e03      	subs	r3, r0, #0
 800397c:	d107      	bne.n	800398e <gsm+0x2de>
	      {
	        gsm_write("AT+CREG?\r\n");
 800397e:	4b30      	ldr	r3, [pc, #192]	; (8003a40 <gsm+0x390>)
 8003980:	0018      	movs	r0, r3
 8003982:	f7ff fe39 	bl	80035f8 <gsm_write>
	        gsm_state = 8;
 8003986:	4b18      	ldr	r3, [pc, #96]	; (80039e8 <gsm+0x338>)
 8003988:	2208      	movs	r2, #8
 800398a:	701a      	strb	r2, [r3, #0]
	      } else if (timeout(gsm_timeout, 1000))
	        gsm_state = 0;
	      break;
 800398c:	e13d      	b.n	8003c0a <gsm+0x55a>
	      } else if (timeout(gsm_timeout, 1000))
 800398e:	4b1e      	ldr	r3, [pc, #120]	; (8003a08 <gsm+0x358>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	22fa      	movs	r2, #250	; 0xfa
 8003994:	0092      	lsls	r2, r2, #2
 8003996:	0011      	movs	r1, r2
 8003998:	0018      	movs	r0, r3
 800399a:	f7ff fe19 	bl	80035d0 <timeout>
 800399e:	1e03      	subs	r3, r0, #0
 80039a0:	d100      	bne.n	80039a4 <gsm+0x2f4>
 80039a2:	e132      	b.n	8003c0a <gsm+0x55a>
	        gsm_state = 0;
 80039a4:	4b10      	ldr	r3, [pc, #64]	; (80039e8 <gsm+0x338>)
 80039a6:	2200      	movs	r2, #0
 80039a8:	701a      	strb	r2, [r3, #0]
	      break;
 80039aa:	e12e      	b.n	8003c0a <gsm+0x55a>



	    case 8:
	      if (string && !strncmp((const char*)gsm_pack, "+CREG:", 6))
 80039ac:	1d7b      	adds	r3, r7, #5
 80039ae:	781b      	ldrb	r3, [r3, #0]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d05b      	beq.n	8003a6c <gsm+0x3bc>
 80039b4:	4923      	ldr	r1, [pc, #140]	; (8003a44 <gsm+0x394>)
 80039b6:	4b12      	ldr	r3, [pc, #72]	; (8003a00 <gsm+0x350>)
 80039b8:	2206      	movs	r2, #6
 80039ba:	0018      	movs	r0, r3
 80039bc:	f009 fcc6 	bl	800d34c <strncmp>
 80039c0:	1e03      	subs	r3, r0, #0
 80039c2:	d153      	bne.n	8003a6c <gsm+0x3bc>
	      {
	        mc60_registration = gsm_pack[9] - '0';
 80039c4:	4b0e      	ldr	r3, [pc, #56]	; (8003a00 <gsm+0x350>)
 80039c6:	7a5b      	ldrb	r3, [r3, #9]
 80039c8:	3b30      	subs	r3, #48	; 0x30
 80039ca:	b2da      	uxtb	r2, r3
 80039cc:	4b1e      	ldr	r3, [pc, #120]	; (8003a48 <gsm+0x398>)
 80039ce:	701a      	strb	r2, [r3, #0]
	        if (gsm_pack[9] == '1' || gsm_pack[9] == '5')
 80039d0:	4b0b      	ldr	r3, [pc, #44]	; (8003a00 <gsm+0x350>)
 80039d2:	7a5b      	ldrb	r3, [r3, #9]
 80039d4:	2b31      	cmp	r3, #49	; 0x31
 80039d6:	d003      	beq.n	80039e0 <gsm+0x330>
 80039d8:	4b09      	ldr	r3, [pc, #36]	; (8003a00 <gsm+0x350>)
 80039da:	7a5b      	ldrb	r3, [r3, #9]
 80039dc:	2b35      	cmp	r3, #53	; 0x35
 80039de:	d135      	bne.n	8003a4c <gsm+0x39c>
	        {
	          gsm_state = 9;
 80039e0:	4b01      	ldr	r3, [pc, #4]	; (80039e8 <gsm+0x338>)
 80039e2:	2209      	movs	r2, #9
 80039e4:	701a      	strb	r2, [r3, #0]
	        if (gsm_pack[9] == '1' || gsm_pack[9] == '5')
 80039e6:	e050      	b.n	8003a8a <gsm+0x3da>
 80039e8:	20000503 	.word	0x20000503
 80039ec:	0800f46c 	.word	0x0800f46c
 80039f0:	0800f2c8 	.word	0x0800f2c8
 80039f4:	200004d2 	.word	0x200004d2
 80039f8:	20000501 	.word	0x20000501
 80039fc:	0800f2d0 	.word	0x0800f2d0
 8003a00:	2000046c 	.word	0x2000046c
 8003a04:	0800f2d4 	.word	0x0800f2d4
 8003a08:	200004d4 	.word	0x200004d4
 8003a0c:	00001770 	.word	0x00001770
 8003a10:	000005dc 	.word	0x000005dc
 8003a14:	50000800 	.word	0x50000800
 8003a18:	0800f2e0 	.word	0x0800f2e0
 8003a1c:	0800f2f0 	.word	0x0800f2f0
 8003a20:	0800f2f8 	.word	0x0800f2f8
 8003a24:	200004f0 	.word	0x200004f0
 8003a28:	0800f304 	.word	0x0800f304
 8003a2c:	0800f310 	.word	0x0800f310
 8003a30:	200004d8 	.word	0x200004d8
 8003a34:	0800f320 	.word	0x0800f320
 8003a38:	0800f330 	.word	0x0800f330
 8003a3c:	200004d0 	.word	0x200004d0
 8003a40:	0800f340 	.word	0x0800f340
 8003a44:	0800f34c 	.word	0x0800f34c
 8003a48:	20000500 	.word	0x20000500
	        } else
	        {
	          if (mc60_count_registration++ < 20)
 8003a4c:	4b75      	ldr	r3, [pc, #468]	; (8003c24 <gsm+0x574>)
 8003a4e:	781b      	ldrb	r3, [r3, #0]
 8003a50:	1c5a      	adds	r2, r3, #1
 8003a52:	b2d1      	uxtb	r1, r2
 8003a54:	4a73      	ldr	r2, [pc, #460]	; (8003c24 <gsm+0x574>)
 8003a56:	7011      	strb	r1, [r2, #0]
 8003a58:	2b13      	cmp	r3, #19
 8003a5a:	d803      	bhi.n	8003a64 <gsm+0x3b4>
	            gsm_state = 7;
 8003a5c:	4b72      	ldr	r3, [pc, #456]	; (8003c28 <gsm+0x578>)
 8003a5e:	2207      	movs	r2, #7
 8003a60:	701a      	strb	r2, [r3, #0]
	        if (gsm_pack[9] == '1' || gsm_pack[9] == '5')
 8003a62:	e012      	b.n	8003a8a <gsm+0x3da>
	          else
	            gsm_state = 0;
 8003a64:	4b70      	ldr	r3, [pc, #448]	; (8003c28 <gsm+0x578>)
 8003a66:	2200      	movs	r2, #0
 8003a68:	701a      	strb	r2, [r3, #0]
	        if (gsm_pack[9] == '1' || gsm_pack[9] == '5')
 8003a6a:	e00e      	b.n	8003a8a <gsm+0x3da>
	        }
	      } else if (timeout(gsm_timeout, 1000))
 8003a6c:	4b6f      	ldr	r3, [pc, #444]	; (8003c2c <gsm+0x57c>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	22fa      	movs	r2, #250	; 0xfa
 8003a72:	0092      	lsls	r2, r2, #2
 8003a74:	0011      	movs	r1, r2
 8003a76:	0018      	movs	r0, r3
 8003a78:	f7ff fdaa 	bl	80035d0 <timeout>
 8003a7c:	1e03      	subs	r3, r0, #0
 8003a7e:	d100      	bne.n	8003a82 <gsm+0x3d2>
 8003a80:	e0c5      	b.n	8003c0e <gsm+0x55e>
	        gsm_state = 0;
 8003a82:	4b69      	ldr	r3, [pc, #420]	; (8003c28 <gsm+0x578>)
 8003a84:	2200      	movs	r2, #0
 8003a86:	701a      	strb	r2, [r3, #0]
	      break;
 8003a88:	e0c1      	b.n	8003c0e <gsm+0x55e>
 8003a8a:	e0c0      	b.n	8003c0e <gsm+0x55e>

	    case 9:
	      if (string && !strcmp((const char*)gsm_pack, "OK"))
 8003a8c:	1d7b      	adds	r3, r7, #5
 8003a8e:	781b      	ldrb	r3, [r3, #0]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d00f      	beq.n	8003ab4 <gsm+0x404>
 8003a94:	4a66      	ldr	r2, [pc, #408]	; (8003c30 <gsm+0x580>)
 8003a96:	4b67      	ldr	r3, [pc, #412]	; (8003c34 <gsm+0x584>)
 8003a98:	0011      	movs	r1, r2
 8003a9a:	0018      	movs	r0, r3
 8003a9c:	f7fc fb34 	bl	8000108 <strcmp>
 8003aa0:	1e03      	subs	r3, r0, #0
 8003aa2:	d107      	bne.n	8003ab4 <gsm+0x404>
	      {
	        gsm_write("AT+COPS?\r\n");
 8003aa4:	4b64      	ldr	r3, [pc, #400]	; (8003c38 <gsm+0x588>)
 8003aa6:	0018      	movs	r0, r3
 8003aa8:	f7ff fda6 	bl	80035f8 <gsm_write>
	        gsm_state = 10;
 8003aac:	4b5e      	ldr	r3, [pc, #376]	; (8003c28 <gsm+0x578>)
 8003aae:	220a      	movs	r2, #10
 8003ab0:	701a      	strb	r2, [r3, #0]
	      } else if (timeout(gsm_timeout, 1000))
	        gsm_state = 0;
	      break;
 8003ab2:	e0ae      	b.n	8003c12 <gsm+0x562>
	      } else if (timeout(gsm_timeout, 1000))
 8003ab4:	4b5d      	ldr	r3, [pc, #372]	; (8003c2c <gsm+0x57c>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	22fa      	movs	r2, #250	; 0xfa
 8003aba:	0092      	lsls	r2, r2, #2
 8003abc:	0011      	movs	r1, r2
 8003abe:	0018      	movs	r0, r3
 8003ac0:	f7ff fd86 	bl	80035d0 <timeout>
 8003ac4:	1e03      	subs	r3, r0, #0
 8003ac6:	d100      	bne.n	8003aca <gsm+0x41a>
 8003ac8:	e0a3      	b.n	8003c12 <gsm+0x562>
	        gsm_state = 0;
 8003aca:	4b57      	ldr	r3, [pc, #348]	; (8003c28 <gsm+0x578>)
 8003acc:	2200      	movs	r2, #0
 8003ace:	701a      	strb	r2, [r3, #0]
	      break;
 8003ad0:	e09f      	b.n	8003c12 <gsm+0x562>

	    case 10:
	      if (string && !strncmp((const char*)gsm_pack, "+COPS:", 6))
 8003ad2:	1d7b      	adds	r3, r7, #5
 8003ad4:	781b      	ldrb	r3, [r3, #0]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d041      	beq.n	8003b5e <gsm+0x4ae>
 8003ada:	4958      	ldr	r1, [pc, #352]	; (8003c3c <gsm+0x58c>)
 8003adc:	4b55      	ldr	r3, [pc, #340]	; (8003c34 <gsm+0x584>)
 8003ade:	2206      	movs	r2, #6
 8003ae0:	0018      	movs	r0, r3
 8003ae2:	f009 fc33 	bl	800d34c <strncmp>
 8003ae6:	1e03      	subs	r3, r0, #0
 8003ae8:	d139      	bne.n	8003b5e <gsm+0x4ae>
	      {
	        uint8_t i = 6;
 8003aea:	1dfb      	adds	r3, r7, #7
 8003aec:	2206      	movs	r2, #6
 8003aee:	701a      	strb	r2, [r3, #0]
	        uint8_t n = 0;
 8003af0:	1dbb      	adds	r3, r7, #6
 8003af2:	2200      	movs	r2, #0
 8003af4:	701a      	strb	r2, [r3, #0]
	        while (gsm_pack[i++] != '"');
 8003af6:	46c0      	nop			; (mov r8, r8)
 8003af8:	1dfb      	adds	r3, r7, #7
 8003afa:	781b      	ldrb	r3, [r3, #0]
 8003afc:	1dfa      	adds	r2, r7, #7
 8003afe:	1c59      	adds	r1, r3, #1
 8003b00:	7011      	strb	r1, [r2, #0]
 8003b02:	001a      	movs	r2, r3
 8003b04:	4b4b      	ldr	r3, [pc, #300]	; (8003c34 <gsm+0x584>)
 8003b06:	5c9b      	ldrb	r3, [r3, r2]
 8003b08:	2b22      	cmp	r3, #34	; 0x22
 8003b0a:	d1f5      	bne.n	8003af8 <gsm+0x448>
	        while (gsm_pack[i] != '"' && n<sizeof(name_operator)-1)
 8003b0c:	e00f      	b.n	8003b2e <gsm+0x47e>
	        	name_operator[n++] = gsm_pack[i++];
 8003b0e:	1dfb      	adds	r3, r7, #7
 8003b10:	781b      	ldrb	r3, [r3, #0]
 8003b12:	1dfa      	adds	r2, r7, #7
 8003b14:	1c59      	adds	r1, r3, #1
 8003b16:	7011      	strb	r1, [r2, #0]
 8003b18:	0019      	movs	r1, r3
 8003b1a:	1dbb      	adds	r3, r7, #6
 8003b1c:	781b      	ldrb	r3, [r3, #0]
 8003b1e:	1dba      	adds	r2, r7, #6
 8003b20:	1c58      	adds	r0, r3, #1
 8003b22:	7010      	strb	r0, [r2, #0]
 8003b24:	001a      	movs	r2, r3
 8003b26:	4b43      	ldr	r3, [pc, #268]	; (8003c34 <gsm+0x584>)
 8003b28:	5c59      	ldrb	r1, [r3, r1]
 8003b2a:	4b45      	ldr	r3, [pc, #276]	; (8003c40 <gsm+0x590>)
 8003b2c:	5499      	strb	r1, [r3, r2]
	        while (gsm_pack[i] != '"' && n<sizeof(name_operator)-1)
 8003b2e:	1dfb      	adds	r3, r7, #7
 8003b30:	781b      	ldrb	r3, [r3, #0]
 8003b32:	4a40      	ldr	r2, [pc, #256]	; (8003c34 <gsm+0x584>)
 8003b34:	5cd3      	ldrb	r3, [r2, r3]
 8003b36:	2b22      	cmp	r3, #34	; 0x22
 8003b38:	d003      	beq.n	8003b42 <gsm+0x492>
 8003b3a:	1dbb      	adds	r3, r7, #6
 8003b3c:	781b      	ldrb	r3, [r3, #0]
 8003b3e:	2b12      	cmp	r3, #18
 8003b40:	d9e5      	bls.n	8003b0e <gsm+0x45e>
	        name_operator[n] = 0;
 8003b42:	1dbb      	adds	r3, r7, #6
 8003b44:	781b      	ldrb	r3, [r3, #0]
 8003b46:	4a3e      	ldr	r2, [pc, #248]	; (8003c40 <gsm+0x590>)
 8003b48:	2100      	movs	r1, #0
 8003b4a:	54d1      	strb	r1, [r2, r3]
	        gsm_write("AT+CSQ\r\n");
 8003b4c:	4b3d      	ldr	r3, [pc, #244]	; (8003c44 <gsm+0x594>)
 8003b4e:	0018      	movs	r0, r3
 8003b50:	f7ff fd52 	bl	80035f8 <gsm_write>
	        gsm_state = 11;
 8003b54:	4b34      	ldr	r3, [pc, #208]	; (8003c28 <gsm+0x578>)
 8003b56:	220b      	movs	r2, #11
 8003b58:	701a      	strb	r2, [r3, #0]
	      {
 8003b5a:	46c0      	nop			; (mov r8, r8)
	      } else if (timeout(gsm_timeout, 1000))
	        gsm_state = 0;
	      break;
 8003b5c:	e05b      	b.n	8003c16 <gsm+0x566>
	      } else if (timeout(gsm_timeout, 1000))
 8003b5e:	4b33      	ldr	r3, [pc, #204]	; (8003c2c <gsm+0x57c>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	22fa      	movs	r2, #250	; 0xfa
 8003b64:	0092      	lsls	r2, r2, #2
 8003b66:	0011      	movs	r1, r2
 8003b68:	0018      	movs	r0, r3
 8003b6a:	f7ff fd31 	bl	80035d0 <timeout>
 8003b6e:	1e03      	subs	r3, r0, #0
 8003b70:	d051      	beq.n	8003c16 <gsm+0x566>
	        gsm_state = 0;
 8003b72:	4b2d      	ldr	r3, [pc, #180]	; (8003c28 <gsm+0x578>)
 8003b74:	2200      	movs	r2, #0
 8003b76:	701a      	strb	r2, [r3, #0]
	      break;
 8003b78:	e04d      	b.n	8003c16 <gsm+0x566>

	    case 11:
	      if (string && !strncmp ((const char*)gsm_pack, "+CSQ:", 5))
 8003b7a:	1d7b      	adds	r3, r7, #5
 8003b7c:	781b      	ldrb	r3, [r3, #0]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d029      	beq.n	8003bd6 <gsm+0x526>
 8003b82:	4931      	ldr	r1, [pc, #196]	; (8003c48 <gsm+0x598>)
 8003b84:	4b2b      	ldr	r3, [pc, #172]	; (8003c34 <gsm+0x584>)
 8003b86:	2205      	movs	r2, #5
 8003b88:	0018      	movs	r0, r3
 8003b8a:	f009 fbdf 	bl	800d34c <strncmp>
 8003b8e:	1e03      	subs	r3, r0, #0
 8003b90:	d121      	bne.n	8003bd6 <gsm+0x526>
	      {
	        if (gsm_pack[7] != ',' )
 8003b92:	4b28      	ldr	r3, [pc, #160]	; (8003c34 <gsm+0x584>)
 8003b94:	79db      	ldrb	r3, [r3, #7]
 8003b96:	2b2c      	cmp	r3, #44	; 0x2c
 8003b98:	d00f      	beq.n	8003bba <gsm+0x50a>
	          signal_level = (gsm_pack[6] - '0') * 10 + gsm_pack[7] - '0';
 8003b9a:	4b26      	ldr	r3, [pc, #152]	; (8003c34 <gsm+0x584>)
 8003b9c:	799b      	ldrb	r3, [r3, #6]
 8003b9e:	1c1a      	adds	r2, r3, #0
 8003ba0:	0092      	lsls	r2, r2, #2
 8003ba2:	18d3      	adds	r3, r2, r3
 8003ba4:	18db      	adds	r3, r3, r3
 8003ba6:	b2da      	uxtb	r2, r3
 8003ba8:	4b22      	ldr	r3, [pc, #136]	; (8003c34 <gsm+0x584>)
 8003baa:	79db      	ldrb	r3, [r3, #7]
 8003bac:	18d3      	adds	r3, r2, r3
 8003bae:	b2db      	uxtb	r3, r3
 8003bb0:	3b10      	subs	r3, #16
 8003bb2:	b2da      	uxtb	r2, r3
 8003bb4:	4b25      	ldr	r3, [pc, #148]	; (8003c4c <gsm+0x59c>)
 8003bb6:	701a      	strb	r2, [r3, #0]
 8003bb8:	e005      	b.n	8003bc6 <gsm+0x516>
	        else
	          signal_level = gsm_pack[6] - '0';
 8003bba:	4b1e      	ldr	r3, [pc, #120]	; (8003c34 <gsm+0x584>)
 8003bbc:	799b      	ldrb	r3, [r3, #6]
 8003bbe:	3b30      	subs	r3, #48	; 0x30
 8003bc0:	b2da      	uxtb	r2, r3
 8003bc2:	4b22      	ldr	r3, [pc, #136]	; (8003c4c <gsm+0x59c>)
 8003bc4:	701a      	strb	r2, [r3, #0]

	        gsm_write("AT+GSN\r\n");
 8003bc6:	4b22      	ldr	r3, [pc, #136]	; (8003c50 <gsm+0x5a0>)
 8003bc8:	0018      	movs	r0, r3
 8003bca:	f7ff fd15 	bl	80035f8 <gsm_write>
	        gsm_state = 4;
 8003bce:	4b16      	ldr	r3, [pc, #88]	; (8003c28 <gsm+0x578>)
 8003bd0:	2204      	movs	r2, #4
 8003bd2:	701a      	strb	r2, [r3, #0]
	      } else if (timeout(gsm_timeout, 1000))
	        gsm_state = 0;
	      break;
 8003bd4:	e021      	b.n	8003c1a <gsm+0x56a>
	      } else if (timeout(gsm_timeout, 1000))
 8003bd6:	4b15      	ldr	r3, [pc, #84]	; (8003c2c <gsm+0x57c>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	22fa      	movs	r2, #250	; 0xfa
 8003bdc:	0092      	lsls	r2, r2, #2
 8003bde:	0011      	movs	r1, r2
 8003be0:	0018      	movs	r0, r3
 8003be2:	f7ff fcf5 	bl	80035d0 <timeout>
 8003be6:	1e03      	subs	r3, r0, #0
 8003be8:	d017      	beq.n	8003c1a <gsm+0x56a>
	        gsm_state = 0;
 8003bea:	4b0f      	ldr	r3, [pc, #60]	; (8003c28 <gsm+0x578>)
 8003bec:	2200      	movs	r2, #0
 8003bee:	701a      	strb	r2, [r3, #0]
	      break;
 8003bf0:	e013      	b.n	8003c1a <gsm+0x56a>
	      break;
 8003bf2:	46c0      	nop			; (mov r8, r8)
 8003bf4:	e012      	b.n	8003c1c <gsm+0x56c>
	      break;
 8003bf6:	46c0      	nop			; (mov r8, r8)
 8003bf8:	e010      	b.n	8003c1c <gsm+0x56c>
	      break;
 8003bfa:	46c0      	nop			; (mov r8, r8)
 8003bfc:	e00e      	b.n	8003c1c <gsm+0x56c>
	      break;
 8003bfe:	46c0      	nop			; (mov r8, r8)
 8003c00:	e00c      	b.n	8003c1c <gsm+0x56c>
	      break;
 8003c02:	46c0      	nop			; (mov r8, r8)
 8003c04:	e00a      	b.n	8003c1c <gsm+0x56c>
	      break;
 8003c06:	46c0      	nop			; (mov r8, r8)
 8003c08:	e008      	b.n	8003c1c <gsm+0x56c>
	      break;
 8003c0a:	46c0      	nop			; (mov r8, r8)
 8003c0c:	e006      	b.n	8003c1c <gsm+0x56c>
	      break;
 8003c0e:	46c0      	nop			; (mov r8, r8)
 8003c10:	e004      	b.n	8003c1c <gsm+0x56c>
	      break;
 8003c12:	46c0      	nop			; (mov r8, r8)
 8003c14:	e002      	b.n	8003c1c <gsm+0x56c>
	      break;
 8003c16:	46c0      	nop			; (mov r8, r8)
 8003c18:	e000      	b.n	8003c1c <gsm+0x56c>
	      break;
 8003c1a:	46c0      	nop			; (mov r8, r8)
	  }
}
 8003c1c:	46c0      	nop			; (mov r8, r8)
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	b002      	add	sp, #8
 8003c22:	bd80      	pop	{r7, pc}
 8003c24:	200004d8 	.word	0x200004d8
 8003c28:	20000503 	.word	0x20000503
 8003c2c:	200004d4 	.word	0x200004d4
 8003c30:	0800f2d0 	.word	0x0800f2d0
 8003c34:	2000046c 	.word	0x2000046c
 8003c38:	0800f354 	.word	0x0800f354
 8003c3c:	0800f360 	.word	0x0800f360
 8003c40:	200004dc 	.word	0x200004dc
 8003c44:	0800f368 	.word	0x0800f368
 8003c48:	0800f374 	.word	0x0800f374
 8003c4c:	20000501 	.word	0x20000501
 8003c50:	0800f2f8 	.word	0x0800f2f8

08003c54 <lis2dh12_read_reg>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dh12_read_reg(lis2dh12_ctx_t* ctx, uint8_t reg, uint8_t* data,
                          uint16_t len)
{
 8003c54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c56:	b087      	sub	sp, #28
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	60f8      	str	r0, [r7, #12]
 8003c5c:	0008      	movs	r0, r1
 8003c5e:	607a      	str	r2, [r7, #4]
 8003c60:	0019      	movs	r1, r3
 8003c62:	260b      	movs	r6, #11
 8003c64:	19bb      	adds	r3, r7, r6
 8003c66:	1c02      	adds	r2, r0, #0
 8003c68:	701a      	strb	r2, [r3, #0]
 8003c6a:	2508      	movs	r5, #8
 8003c6c:	197b      	adds	r3, r7, r5
 8003c6e:	1c0a      	adds	r2, r1, #0
 8003c70:	801a      	strh	r2, [r3, #0]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	685c      	ldr	r4, [r3, #4]
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	6898      	ldr	r0, [r3, #8]
 8003c7a:	197b      	adds	r3, r7, r5
 8003c7c:	881d      	ldrh	r5, [r3, #0]
 8003c7e:	687a      	ldr	r2, [r7, #4]
 8003c80:	19bb      	adds	r3, r7, r6
 8003c82:	7819      	ldrb	r1, [r3, #0]
 8003c84:	002b      	movs	r3, r5
 8003c86:	47a0      	blx	r4
 8003c88:	0003      	movs	r3, r0
 8003c8a:	617b      	str	r3, [r7, #20]
  return ret;
 8003c8c:	697b      	ldr	r3, [r7, #20]
}
 8003c8e:	0018      	movs	r0, r3
 8003c90:	46bd      	mov	sp, r7
 8003c92:	b007      	add	sp, #28
 8003c94:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003c96 <lis2dh12_write_reg>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dh12_write_reg(lis2dh12_ctx_t* ctx, uint8_t reg, uint8_t* data,
                           uint16_t len)
{
 8003c96:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c98:	b087      	sub	sp, #28
 8003c9a:	af00      	add	r7, sp, #0
 8003c9c:	60f8      	str	r0, [r7, #12]
 8003c9e:	0008      	movs	r0, r1
 8003ca0:	607a      	str	r2, [r7, #4]
 8003ca2:	0019      	movs	r1, r3
 8003ca4:	260b      	movs	r6, #11
 8003ca6:	19bb      	adds	r3, r7, r6
 8003ca8:	1c02      	adds	r2, r0, #0
 8003caa:	701a      	strb	r2, [r3, #0]
 8003cac:	2508      	movs	r5, #8
 8003cae:	197b      	adds	r3, r7, r5
 8003cb0:	1c0a      	adds	r2, r1, #0
 8003cb2:	801a      	strh	r2, [r3, #0]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681c      	ldr	r4, [r3, #0]
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	6898      	ldr	r0, [r3, #8]
 8003cbc:	197b      	adds	r3, r7, r5
 8003cbe:	881d      	ldrh	r5, [r3, #0]
 8003cc0:	687a      	ldr	r2, [r7, #4]
 8003cc2:	19bb      	adds	r3, r7, r6
 8003cc4:	7819      	ldrb	r1, [r3, #0]
 8003cc6:	002b      	movs	r3, r5
 8003cc8:	47a0      	blx	r4
 8003cca:	0003      	movs	r3, r0
 8003ccc:	617b      	str	r3, [r7, #20]
  return ret;
 8003cce:	697b      	ldr	r3, [r7, #20]
}
 8003cd0:	0018      	movs	r0, r3
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	b007      	add	sp, #28
 8003cd6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003cd8 <lis2dh12_from_fs2_hr_to_mg>:
  * @{
  *
  */

float lis2dh12_from_fs2_hr_to_mg(int16_t lsb)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b082      	sub	sp, #8
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	0002      	movs	r2, r0
 8003ce0:	1dbb      	adds	r3, r7, #6
 8003ce2:	801a      	strh	r2, [r3, #0]
  return ( (float)lsb / 16.0f ) * 1.0f;
 8003ce4:	1dbb      	adds	r3, r7, #6
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	5e9b      	ldrsh	r3, [r3, r2]
 8003cea:	0018      	movs	r0, r3
 8003cec:	f7fd fa34 	bl	8001158 <__aeabi_i2f>
 8003cf0:	1c03      	adds	r3, r0, #0
 8003cf2:	2183      	movs	r1, #131	; 0x83
 8003cf4:	05c9      	lsls	r1, r1, #23
 8003cf6:	1c18      	adds	r0, r3, #0
 8003cf8:	f7fc ff16 	bl	8000b28 <__aeabi_fdiv>
 8003cfc:	1c03      	adds	r3, r0, #0
}
 8003cfe:	1c18      	adds	r0, r3, #0
 8003d00:	46bd      	mov	sp, r7
 8003d02:	b002      	add	sp, #8
 8003d04:	bd80      	pop	{r7, pc}
	...

08003d08 <lis2dh12_from_lsb_hr_to_celsius>:
{
  return ( (float)lsb / 16.0f ) * 12.0f;
}

float lis2dh12_from_lsb_hr_to_celsius(int16_t lsb)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b082      	sub	sp, #8
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	0002      	movs	r2, r0
 8003d10:	1dbb      	adds	r3, r7, #6
 8003d12:	801a      	strh	r2, [r3, #0]
  return ( ( (float)lsb / 64.0f ) / 4.0f ) + 25.0f;
 8003d14:	1dbb      	adds	r3, r7, #6
 8003d16:	2200      	movs	r2, #0
 8003d18:	5e9b      	ldrsh	r3, [r3, r2]
 8003d1a:	0018      	movs	r0, r3
 8003d1c:	f7fd fa1c 	bl	8001158 <__aeabi_i2f>
 8003d20:	1c03      	adds	r3, r0, #0
 8003d22:	2185      	movs	r1, #133	; 0x85
 8003d24:	05c9      	lsls	r1, r1, #23
 8003d26:	1c18      	adds	r0, r3, #0
 8003d28:	f7fc fefe 	bl	8000b28 <__aeabi_fdiv>
 8003d2c:	1c03      	adds	r3, r0, #0
 8003d2e:	2181      	movs	r1, #129	; 0x81
 8003d30:	05c9      	lsls	r1, r1, #23
 8003d32:	1c18      	adds	r0, r3, #0
 8003d34:	f7fc fef8 	bl	8000b28 <__aeabi_fdiv>
 8003d38:	1c03      	adds	r3, r0, #0
 8003d3a:	4904      	ldr	r1, [pc, #16]	; (8003d4c <lis2dh12_from_lsb_hr_to_celsius+0x44>)
 8003d3c:	1c18      	adds	r0, r3, #0
 8003d3e:	f7fc fd53 	bl	80007e8 <__aeabi_fadd>
 8003d42:	1c03      	adds	r3, r0, #0
}
 8003d44:	1c18      	adds	r0, r3, #0
 8003d46:	46bd      	mov	sp, r7
 8003d48:	b002      	add	sp, #8
 8003d4a:	bd80      	pop	{r7, pc}
 8003d4c:	41c80000 	.word	0x41c80000

08003d50 <lis2dh12_temp_data_ready_get>:
  * @param  val      change the values of tda in reg STATUS_REG_AUX
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dh12_temp_data_ready_get(lis2dh12_ctx_t *ctx, uint8_t *val)
{
 8003d50:	b590      	push	{r4, r7, lr}
 8003d52:	b085      	sub	sp, #20
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
 8003d58:	6039      	str	r1, [r7, #0]
  lis2dh12_status_reg_aux_t status_reg_aux;
  int32_t ret;

  ret = lis2dh12_read_reg(ctx, LIS2DH12_STATUS_REG_AUX,
 8003d5a:	2408      	movs	r4, #8
 8003d5c:	193a      	adds	r2, r7, r4
 8003d5e:	6878      	ldr	r0, [r7, #4]
 8003d60:	2301      	movs	r3, #1
 8003d62:	2107      	movs	r1, #7
 8003d64:	f7ff ff76 	bl	8003c54 <lis2dh12_read_reg>
 8003d68:	0003      	movs	r3, r0
 8003d6a:	60fb      	str	r3, [r7, #12]
                          (uint8_t*)&status_reg_aux, 1);
  *val = status_reg_aux.tda;
 8003d6c:	193b      	adds	r3, r7, r4
 8003d6e:	781b      	ldrb	r3, [r3, #0]
 8003d70:	075b      	lsls	r3, r3, #29
 8003d72:	0fdb      	lsrs	r3, r3, #31
 8003d74:	b2db      	uxtb	r3, r3
 8003d76:	001a      	movs	r2, r3
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	701a      	strb	r2, [r3, #0]

  return ret;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
}
 8003d7e:	0018      	movs	r0, r3
 8003d80:	46bd      	mov	sp, r7
 8003d82:	b005      	add	sp, #20
 8003d84:	bd90      	pop	{r4, r7, pc}

08003d86 <lis2dh12_temperature_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dh12_temperature_raw_get(lis2dh12_ctx_t *ctx, uint8_t *buff)
{
 8003d86:	b580      	push	{r7, lr}
 8003d88:	b084      	sub	sp, #16
 8003d8a:	af00      	add	r7, sp, #0
 8003d8c:	6078      	str	r0, [r7, #4]
 8003d8e:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lis2dh12_read_reg(ctx, LIS2DH12_OUT_TEMP_L, buff, 2);
 8003d90:	683a      	ldr	r2, [r7, #0]
 8003d92:	6878      	ldr	r0, [r7, #4]
 8003d94:	2302      	movs	r3, #2
 8003d96:	210c      	movs	r1, #12
 8003d98:	f7ff ff5c 	bl	8003c54 <lis2dh12_read_reg>
 8003d9c:	0003      	movs	r3, r0
 8003d9e:	60fb      	str	r3, [r7, #12]
  return ret;
 8003da0:	68fb      	ldr	r3, [r7, #12]
}
 8003da2:	0018      	movs	r0, r3
 8003da4:	46bd      	mov	sp, r7
 8003da6:	b004      	add	sp, #16
 8003da8:	bd80      	pop	{r7, pc}

08003daa <lis2dh12_temperature_meas_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dh12_temperature_meas_set(lis2dh12_ctx_t *ctx,
                                      lis2dh12_temp_en_t val)
{
 8003daa:	b590      	push	{r4, r7, lr}
 8003dac:	b085      	sub	sp, #20
 8003dae:	af00      	add	r7, sp, #0
 8003db0:	6078      	str	r0, [r7, #4]
 8003db2:	000a      	movs	r2, r1
 8003db4:	1cfb      	adds	r3, r7, #3
 8003db6:	701a      	strb	r2, [r3, #0]
  lis2dh12_temp_cfg_reg_t temp_cfg_reg;
  int32_t ret;

  ret = lis2dh12_read_reg(ctx, LIS2DH12_TEMP_CFG_REG, (uint8_t*)&temp_cfg_reg, 1);
 8003db8:	2408      	movs	r4, #8
 8003dba:	193a      	adds	r2, r7, r4
 8003dbc:	6878      	ldr	r0, [r7, #4]
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	211f      	movs	r1, #31
 8003dc2:	f7ff ff47 	bl	8003c54 <lis2dh12_read_reg>
 8003dc6:	0003      	movs	r3, r0
 8003dc8:	60fb      	str	r3, [r7, #12]
  if (ret == 0) {
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d115      	bne.n	8003dfc <lis2dh12_temperature_meas_set+0x52>
    temp_cfg_reg.temp_en = (uint8_t) val;
 8003dd0:	1cfb      	adds	r3, r7, #3
 8003dd2:	781b      	ldrb	r3, [r3, #0]
 8003dd4:	2203      	movs	r2, #3
 8003dd6:	4013      	ands	r3, r2
 8003dd8:	b2da      	uxtb	r2, r3
 8003dda:	193b      	adds	r3, r7, r4
 8003ddc:	0190      	lsls	r0, r2, #6
 8003dde:	781a      	ldrb	r2, [r3, #0]
 8003de0:	213f      	movs	r1, #63	; 0x3f
 8003de2:	400a      	ands	r2, r1
 8003de4:	1c11      	adds	r1, r2, #0
 8003de6:	1c02      	adds	r2, r0, #0
 8003de8:	430a      	orrs	r2, r1
 8003dea:	701a      	strb	r2, [r3, #0]
    ret = lis2dh12_write_reg(ctx, LIS2DH12_TEMP_CFG_REG, (uint8_t*)&temp_cfg_reg, 1);
 8003dec:	193a      	adds	r2, r7, r4
 8003dee:	6878      	ldr	r0, [r7, #4]
 8003df0:	2301      	movs	r3, #1
 8003df2:	211f      	movs	r1, #31
 8003df4:	f7ff ff4f 	bl	8003c96 <lis2dh12_write_reg>
 8003df8:	0003      	movs	r3, r0
 8003dfa:	60fb      	str	r3, [r7, #12]
  }
  return ret;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
}
 8003dfe:	0018      	movs	r0, r3
 8003e00:	46bd      	mov	sp, r7
 8003e02:	b005      	add	sp, #20
 8003e04:	bd90      	pop	{r4, r7, pc}

08003e06 <lis2dh12_operating_mode_set>:
  *                  and HR in reg CTRL_REG4
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dh12_operating_mode_set(lis2dh12_ctx_t *ctx, lis2dh12_op_md_t val)
{
 8003e06:	b580      	push	{r7, lr}
 8003e08:	b086      	sub	sp, #24
 8003e0a:	af00      	add	r7, sp, #0
 8003e0c:	6078      	str	r0, [r7, #4]
 8003e0e:	000a      	movs	r2, r1
 8003e10:	1cfb      	adds	r3, r7, #3
 8003e12:	701a      	strb	r2, [r3, #0]
  lis2dh12_ctrl_reg1_t ctrl_reg1;
  lis2dh12_ctrl_reg4_t ctrl_reg4;
  int32_t ret;

  ret = lis2dh12_read_reg(ctx, LIS2DH12_CTRL_REG1,
 8003e14:	2310      	movs	r3, #16
 8003e16:	18fa      	adds	r2, r7, r3
 8003e18:	6878      	ldr	r0, [r7, #4]
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	2120      	movs	r1, #32
 8003e1e:	f7ff ff19 	bl	8003c54 <lis2dh12_read_reg>
 8003e22:	0003      	movs	r3, r0
 8003e24:	617b      	str	r3, [r7, #20]
                          (uint8_t*)&ctrl_reg1, 1);
  if (ret == 0) {
 8003e26:	697b      	ldr	r3, [r7, #20]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d108      	bne.n	8003e3e <lis2dh12_operating_mode_set+0x38>
    ret = lis2dh12_read_reg(ctx, LIS2DH12_CTRL_REG4,
 8003e2c:	230c      	movs	r3, #12
 8003e2e:	18fa      	adds	r2, r7, r3
 8003e30:	6878      	ldr	r0, [r7, #4]
 8003e32:	2301      	movs	r3, #1
 8003e34:	2123      	movs	r1, #35	; 0x23
 8003e36:	f7ff ff0d 	bl	8003c54 <lis2dh12_read_reg>
 8003e3a:	0003      	movs	r3, r0
 8003e3c:	617b      	str	r3, [r7, #20]
                            (uint8_t*)&ctrl_reg4, 1);
  }
  if (ret == 0) {
 8003e3e:	697b      	ldr	r3, [r7, #20]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d138      	bne.n	8003eb6 <lis2dh12_operating_mode_set+0xb0>
    if ( val == LIS2DH12_HR_12bit ) {
 8003e44:	1cfb      	adds	r3, r7, #3
 8003e46:	781b      	ldrb	r3, [r3, #0]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d10b      	bne.n	8003e64 <lis2dh12_operating_mode_set+0x5e>
      ctrl_reg1.lpen = 0;
 8003e4c:	2310      	movs	r3, #16
 8003e4e:	18fb      	adds	r3, r7, r3
 8003e50:	781a      	ldrb	r2, [r3, #0]
 8003e52:	2108      	movs	r1, #8
 8003e54:	438a      	bics	r2, r1
 8003e56:	701a      	strb	r2, [r3, #0]
      ctrl_reg4.hr   = 1;
 8003e58:	230c      	movs	r3, #12
 8003e5a:	18fb      	adds	r3, r7, r3
 8003e5c:	781a      	ldrb	r2, [r3, #0]
 8003e5e:	2108      	movs	r1, #8
 8003e60:	430a      	orrs	r2, r1
 8003e62:	701a      	strb	r2, [r3, #0]
    }
    if (val == LIS2DH12_NM_10bit) {
 8003e64:	1cfb      	adds	r3, r7, #3
 8003e66:	781b      	ldrb	r3, [r3, #0]
 8003e68:	2b01      	cmp	r3, #1
 8003e6a:	d10b      	bne.n	8003e84 <lis2dh12_operating_mode_set+0x7e>
      ctrl_reg1.lpen = 0;
 8003e6c:	2310      	movs	r3, #16
 8003e6e:	18fb      	adds	r3, r7, r3
 8003e70:	781a      	ldrb	r2, [r3, #0]
 8003e72:	2108      	movs	r1, #8
 8003e74:	438a      	bics	r2, r1
 8003e76:	701a      	strb	r2, [r3, #0]
      ctrl_reg4.hr   = 0;
 8003e78:	230c      	movs	r3, #12
 8003e7a:	18fb      	adds	r3, r7, r3
 8003e7c:	781a      	ldrb	r2, [r3, #0]
 8003e7e:	2108      	movs	r1, #8
 8003e80:	438a      	bics	r2, r1
 8003e82:	701a      	strb	r2, [r3, #0]
    }
    if (val == LIS2DH12_LP_8bit) {
 8003e84:	1cfb      	adds	r3, r7, #3
 8003e86:	781b      	ldrb	r3, [r3, #0]
 8003e88:	2b02      	cmp	r3, #2
 8003e8a:	d10b      	bne.n	8003ea4 <lis2dh12_operating_mode_set+0x9e>
      ctrl_reg1.lpen = 1;
 8003e8c:	2310      	movs	r3, #16
 8003e8e:	18fb      	adds	r3, r7, r3
 8003e90:	781a      	ldrb	r2, [r3, #0]
 8003e92:	2108      	movs	r1, #8
 8003e94:	430a      	orrs	r2, r1
 8003e96:	701a      	strb	r2, [r3, #0]
      ctrl_reg4.hr   = 0;
 8003e98:	230c      	movs	r3, #12
 8003e9a:	18fb      	adds	r3, r7, r3
 8003e9c:	781a      	ldrb	r2, [r3, #0]
 8003e9e:	2108      	movs	r1, #8
 8003ea0:	438a      	bics	r2, r1
 8003ea2:	701a      	strb	r2, [r3, #0]
    }
    ret = lis2dh12_write_reg(ctx, LIS2DH12_CTRL_REG1, (uint8_t*)&ctrl_reg1, 1);
 8003ea4:	2310      	movs	r3, #16
 8003ea6:	18fa      	adds	r2, r7, r3
 8003ea8:	6878      	ldr	r0, [r7, #4]
 8003eaa:	2301      	movs	r3, #1
 8003eac:	2120      	movs	r1, #32
 8003eae:	f7ff fef2 	bl	8003c96 <lis2dh12_write_reg>
 8003eb2:	0003      	movs	r3, r0
 8003eb4:	617b      	str	r3, [r7, #20]
  }
  if (ret == 0) {
 8003eb6:	697b      	ldr	r3, [r7, #20]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d108      	bne.n	8003ece <lis2dh12_operating_mode_set+0xc8>
    ret = lis2dh12_write_reg(ctx, LIS2DH12_CTRL_REG4, (uint8_t*)&ctrl_reg4, 1);
 8003ebc:	230c      	movs	r3, #12
 8003ebe:	18fa      	adds	r2, r7, r3
 8003ec0:	6878      	ldr	r0, [r7, #4]
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	2123      	movs	r1, #35	; 0x23
 8003ec6:	f7ff fee6 	bl	8003c96 <lis2dh12_write_reg>
 8003eca:	0003      	movs	r3, r0
 8003ecc:	617b      	str	r3, [r7, #20]
  }
  return ret;
 8003ece:	697b      	ldr	r3, [r7, #20]
}
 8003ed0:	0018      	movs	r0, r3
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	b006      	add	sp, #24
 8003ed6:	bd80      	pop	{r7, pc}

08003ed8 <lis2dh12_data_rate_set>:
  * @param  val      change the values of odr in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dh12_data_rate_set(lis2dh12_ctx_t *ctx, lis2dh12_odr_t val)
{
 8003ed8:	b590      	push	{r4, r7, lr}
 8003eda:	b085      	sub	sp, #20
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
 8003ee0:	000a      	movs	r2, r1
 8003ee2:	1cfb      	adds	r3, r7, #3
 8003ee4:	701a      	strb	r2, [r3, #0]
  lis2dh12_ctrl_reg1_t ctrl_reg1;
  int32_t ret;

  ret = lis2dh12_read_reg(ctx, LIS2DH12_CTRL_REG1, (uint8_t*)&ctrl_reg1, 1);
 8003ee6:	2408      	movs	r4, #8
 8003ee8:	193a      	adds	r2, r7, r4
 8003eea:	6878      	ldr	r0, [r7, #4]
 8003eec:	2301      	movs	r3, #1
 8003eee:	2120      	movs	r1, #32
 8003ef0:	f7ff feb0 	bl	8003c54 <lis2dh12_read_reg>
 8003ef4:	0003      	movs	r3, r0
 8003ef6:	60fb      	str	r3, [r7, #12]
  if (ret == 0) {
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d115      	bne.n	8003f2a <lis2dh12_data_rate_set+0x52>
    ctrl_reg1.odr = (uint8_t)val;
 8003efe:	1cfb      	adds	r3, r7, #3
 8003f00:	781b      	ldrb	r3, [r3, #0]
 8003f02:	220f      	movs	r2, #15
 8003f04:	4013      	ands	r3, r2
 8003f06:	b2da      	uxtb	r2, r3
 8003f08:	193b      	adds	r3, r7, r4
 8003f0a:	0110      	lsls	r0, r2, #4
 8003f0c:	781a      	ldrb	r2, [r3, #0]
 8003f0e:	210f      	movs	r1, #15
 8003f10:	400a      	ands	r2, r1
 8003f12:	1c11      	adds	r1, r2, #0
 8003f14:	1c02      	adds	r2, r0, #0
 8003f16:	430a      	orrs	r2, r1
 8003f18:	701a      	strb	r2, [r3, #0]
    ret = lis2dh12_write_reg(ctx, LIS2DH12_CTRL_REG1, (uint8_t*)&ctrl_reg1, 1);
 8003f1a:	193a      	adds	r2, r7, r4
 8003f1c:	6878      	ldr	r0, [r7, #4]
 8003f1e:	2301      	movs	r3, #1
 8003f20:	2120      	movs	r1, #32
 8003f22:	f7ff feb8 	bl	8003c96 <lis2dh12_write_reg>
 8003f26:	0003      	movs	r3, r0
 8003f28:	60fb      	str	r3, [r7, #12]
  }
  return ret;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
}
 8003f2c:	0018      	movs	r0, r3
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	b005      	add	sp, #20
 8003f32:	bd90      	pop	{r4, r7, pc}

08003f34 <lis2dh12_full_scale_set>:
  * @param  val      change the values of fs in reg CTRL_REG4
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dh12_full_scale_set(lis2dh12_ctx_t *ctx, lis2dh12_fs_t val)
{
 8003f34:	b590      	push	{r4, r7, lr}
 8003f36:	b085      	sub	sp, #20
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
 8003f3c:	000a      	movs	r2, r1
 8003f3e:	1cfb      	adds	r3, r7, #3
 8003f40:	701a      	strb	r2, [r3, #0]
  lis2dh12_ctrl_reg4_t ctrl_reg4;
  int32_t ret;

  ret = lis2dh12_read_reg(ctx, LIS2DH12_CTRL_REG4, (uint8_t*)&ctrl_reg4, 1);
 8003f42:	2408      	movs	r4, #8
 8003f44:	193a      	adds	r2, r7, r4
 8003f46:	6878      	ldr	r0, [r7, #4]
 8003f48:	2301      	movs	r3, #1
 8003f4a:	2123      	movs	r1, #35	; 0x23
 8003f4c:	f7ff fe82 	bl	8003c54 <lis2dh12_read_reg>
 8003f50:	0003      	movs	r3, r0
 8003f52:	60fb      	str	r3, [r7, #12]
  if (ret == 0) {
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d117      	bne.n	8003f8a <lis2dh12_full_scale_set+0x56>
    ctrl_reg4.fs = (uint8_t)val;
 8003f5a:	1cfb      	adds	r3, r7, #3
 8003f5c:	781b      	ldrb	r3, [r3, #0]
 8003f5e:	2203      	movs	r2, #3
 8003f60:	4013      	ands	r3, r2
 8003f62:	b2da      	uxtb	r2, r3
 8003f64:	193b      	adds	r3, r7, r4
 8003f66:	2103      	movs	r1, #3
 8003f68:	400a      	ands	r2, r1
 8003f6a:	0110      	lsls	r0, r2, #4
 8003f6c:	781a      	ldrb	r2, [r3, #0]
 8003f6e:	2130      	movs	r1, #48	; 0x30
 8003f70:	438a      	bics	r2, r1
 8003f72:	1c11      	adds	r1, r2, #0
 8003f74:	1c02      	adds	r2, r0, #0
 8003f76:	430a      	orrs	r2, r1
 8003f78:	701a      	strb	r2, [r3, #0]
    ret = lis2dh12_write_reg(ctx, LIS2DH12_CTRL_REG4, (uint8_t*)&ctrl_reg4, 1);
 8003f7a:	193a      	adds	r2, r7, r4
 8003f7c:	6878      	ldr	r0, [r7, #4]
 8003f7e:	2301      	movs	r3, #1
 8003f80:	2123      	movs	r1, #35	; 0x23
 8003f82:	f7ff fe88 	bl	8003c96 <lis2dh12_write_reg>
 8003f86:	0003      	movs	r3, r0
 8003f88:	60fb      	str	r3, [r7, #12]
  }
  return ret;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
}
 8003f8c:	0018      	movs	r0, r3
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	b005      	add	sp, #20
 8003f92:	bd90      	pop	{r4, r7, pc}

08003f94 <lis2dh12_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL_REG4
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dh12_block_data_update_set(lis2dh12_ctx_t *ctx, uint8_t val)
{
 8003f94:	b590      	push	{r4, r7, lr}
 8003f96:	b085      	sub	sp, #20
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
 8003f9c:	000a      	movs	r2, r1
 8003f9e:	1cfb      	adds	r3, r7, #3
 8003fa0:	701a      	strb	r2, [r3, #0]
  lis2dh12_ctrl_reg4_t ctrl_reg4;
  int32_t ret;

  ret = lis2dh12_read_reg(ctx, LIS2DH12_CTRL_REG4, (uint8_t*)&ctrl_reg4, 1);
 8003fa2:	2408      	movs	r4, #8
 8003fa4:	193a      	adds	r2, r7, r4
 8003fa6:	6878      	ldr	r0, [r7, #4]
 8003fa8:	2301      	movs	r3, #1
 8003faa:	2123      	movs	r1, #35	; 0x23
 8003fac:	f7ff fe52 	bl	8003c54 <lis2dh12_read_reg>
 8003fb0:	0003      	movs	r3, r0
 8003fb2:	60fb      	str	r3, [r7, #12]
  if (ret == 0) {
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d115      	bne.n	8003fe6 <lis2dh12_block_data_update_set+0x52>
    ctrl_reg4.bdu = val;
 8003fba:	1cfb      	adds	r3, r7, #3
 8003fbc:	781b      	ldrb	r3, [r3, #0]
 8003fbe:	2201      	movs	r2, #1
 8003fc0:	4013      	ands	r3, r2
 8003fc2:	b2da      	uxtb	r2, r3
 8003fc4:	193b      	adds	r3, r7, r4
 8003fc6:	01d0      	lsls	r0, r2, #7
 8003fc8:	781a      	ldrb	r2, [r3, #0]
 8003fca:	217f      	movs	r1, #127	; 0x7f
 8003fcc:	400a      	ands	r2, r1
 8003fce:	1c11      	adds	r1, r2, #0
 8003fd0:	1c02      	adds	r2, r0, #0
 8003fd2:	430a      	orrs	r2, r1
 8003fd4:	701a      	strb	r2, [r3, #0]
    ret = lis2dh12_write_reg(ctx, LIS2DH12_CTRL_REG4, (uint8_t*)&ctrl_reg4, 1);
 8003fd6:	193a      	adds	r2, r7, r4
 8003fd8:	6878      	ldr	r0, [r7, #4]
 8003fda:	2301      	movs	r3, #1
 8003fdc:	2123      	movs	r1, #35	; 0x23
 8003fde:	f7ff fe5a 	bl	8003c96 <lis2dh12_write_reg>
 8003fe2:	0003      	movs	r3, r0
 8003fe4:	60fb      	str	r3, [r7, #12]
  }
  return ret;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
}
 8003fe8:	0018      	movs	r0, r3
 8003fea:	46bd      	mov	sp, r7
 8003fec:	b005      	add	sp, #20
 8003fee:	bd90      	pop	{r4, r7, pc}

08003ff0 <lis2dh12_xl_data_ready_get>:
  * @param  val      change the values of zyxda in reg STATUS_REG
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dh12_xl_data_ready_get(lis2dh12_ctx_t *ctx, uint8_t *val)
{
 8003ff0:	b590      	push	{r4, r7, lr}
 8003ff2:	b085      	sub	sp, #20
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
 8003ff8:	6039      	str	r1, [r7, #0]
  lis2dh12_status_reg_t status_reg;
  int32_t ret;

  ret = lis2dh12_read_reg(ctx, LIS2DH12_STATUS_REG, (uint8_t*)&status_reg, 1);
 8003ffa:	2408      	movs	r4, #8
 8003ffc:	193a      	adds	r2, r7, r4
 8003ffe:	6878      	ldr	r0, [r7, #4]
 8004000:	2301      	movs	r3, #1
 8004002:	2127      	movs	r1, #39	; 0x27
 8004004:	f7ff fe26 	bl	8003c54 <lis2dh12_read_reg>
 8004008:	0003      	movs	r3, r0
 800400a:	60fb      	str	r3, [r7, #12]
  *val = status_reg.zyxda;
 800400c:	193b      	adds	r3, r7, r4
 800400e:	781b      	ldrb	r3, [r3, #0]
 8004010:	071b      	lsls	r3, r3, #28
 8004012:	0fdb      	lsrs	r3, r3, #31
 8004014:	b2db      	uxtb	r3, r3
 8004016:	001a      	movs	r2, r3
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	701a      	strb	r2, [r3, #0]

  return ret;
 800401c:	68fb      	ldr	r3, [r7, #12]
}
 800401e:	0018      	movs	r0, r3
 8004020:	46bd      	mov	sp, r7
 8004022:	b005      	add	sp, #20
 8004024:	bd90      	pop	{r4, r7, pc}

08004026 <lis2dh12_acceleration_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dh12_acceleration_raw_get(lis2dh12_ctx_t *ctx, uint8_t *buff)
{
 8004026:	b580      	push	{r7, lr}
 8004028:	b084      	sub	sp, #16
 800402a:	af00      	add	r7, sp, #0
 800402c:	6078      	str	r0, [r7, #4]
 800402e:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lis2dh12_read_reg(ctx, LIS2DH12_OUT_X_L, buff, 6);
 8004030:	683a      	ldr	r2, [r7, #0]
 8004032:	6878      	ldr	r0, [r7, #4]
 8004034:	2306      	movs	r3, #6
 8004036:	2128      	movs	r1, #40	; 0x28
 8004038:	f7ff fe0c 	bl	8003c54 <lis2dh12_read_reg>
 800403c:	0003      	movs	r3, r0
 800403e:	60fb      	str	r3, [r7, #12]
  return ret;
 8004040:	68fb      	ldr	r3, [r7, #12]
}
 8004042:	0018      	movs	r0, r3
 8004044:	46bd      	mov	sp, r7
 8004046:	b004      	add	sp, #16
 8004048:	bd80      	pop	{r7, pc}

0800404a <lis2dh12_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dh12_device_id_get(lis2dh12_ctx_t *ctx, uint8_t *buff)
{
 800404a:	b580      	push	{r7, lr}
 800404c:	b084      	sub	sp, #16
 800404e:	af00      	add	r7, sp, #0
 8004050:	6078      	str	r0, [r7, #4]
 8004052:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lis2dh12_read_reg(ctx, LIS2DH12_WHO_AM_I, buff, 1);
 8004054:	683a      	ldr	r2, [r7, #0]
 8004056:	6878      	ldr	r0, [r7, #4]
 8004058:	2301      	movs	r3, #1
 800405a:	210f      	movs	r1, #15
 800405c:	f7ff fdfa 	bl	8003c54 <lis2dh12_read_reg>
 8004060:	0003      	movs	r3, r0
 8004062:	60fb      	str	r3, [r7, #12]
  return ret;
 8004064:	68fb      	ldr	r3, [r7, #12]
}
 8004066:	0018      	movs	r0, r3
 8004068:	46bd      	mov	sp, r7
 800406a:	b004      	add	sp, #16
 800406c:	bd80      	pop	{r7, pc}
	...

08004070 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004074:	f001 f812 	bl	800509c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004078:	f000 f84a 	bl	8004110 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800407c:	f000 f96e 	bl	800435c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8004080:	f000 f8d0 	bl	8004224 <MX_USART1_UART_Init>
  MX_I2C2_Init();
 8004084:	f000 f88c 	bl	80041a0 <MX_I2C2_Init>
  MX_USART3_UART_Init();
 8004088:	f000 f91a 	bl	80042c0 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800408c:	f005 ff98 	bl	8009fc0 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8004090:	4a13      	ldr	r2, [pc, #76]	; (80040e0 <main+0x70>)
 8004092:	4b14      	ldr	r3, [pc, #80]	; (80040e4 <main+0x74>)
 8004094:	2100      	movs	r1, #0
 8004096:	0018      	movs	r0, r3
 8004098:	f005 ffda 	bl	800a050 <osThreadNew>
 800409c:	0002      	movs	r2, r0
 800409e:	4b12      	ldr	r3, [pc, #72]	; (80040e8 <main+0x78>)
 80040a0:	601a      	str	r2, [r3, #0]

  /* creation of GPS */
  GPSHandle = osThreadNew(GPS_Task, NULL, &GPS_attributes);
 80040a2:	4a12      	ldr	r2, [pc, #72]	; (80040ec <main+0x7c>)
 80040a4:	4b12      	ldr	r3, [pc, #72]	; (80040f0 <main+0x80>)
 80040a6:	2100      	movs	r1, #0
 80040a8:	0018      	movs	r0, r3
 80040aa:	f005 ffd1 	bl	800a050 <osThreadNew>
 80040ae:	0002      	movs	r2, r0
 80040b0:	4b10      	ldr	r3, [pc, #64]	; (80040f4 <main+0x84>)
 80040b2:	601a      	str	r2, [r3, #0]

  /* creation of GSM */
  GSMHandle = osThreadNew(GSM_Task, NULL, &GSM_attributes);
 80040b4:	4a10      	ldr	r2, [pc, #64]	; (80040f8 <main+0x88>)
 80040b6:	4b11      	ldr	r3, [pc, #68]	; (80040fc <main+0x8c>)
 80040b8:	2100      	movs	r1, #0
 80040ba:	0018      	movs	r0, r3
 80040bc:	f005 ffc8 	bl	800a050 <osThreadNew>
 80040c0:	0002      	movs	r2, r0
 80040c2:	4b0f      	ldr	r3, [pc, #60]	; (8004100 <main+0x90>)
 80040c4:	601a      	str	r2, [r3, #0]

  /* creation of LIS */
  LISHandle = osThreadNew(LIS_Task, NULL, &LIS_attributes);
 80040c6:	4a0f      	ldr	r2, [pc, #60]	; (8004104 <main+0x94>)
 80040c8:	4b0f      	ldr	r3, [pc, #60]	; (8004108 <main+0x98>)
 80040ca:	2100      	movs	r1, #0
 80040cc:	0018      	movs	r0, r3
 80040ce:	f005 ffbf 	bl	800a050 <osThreadNew>
 80040d2:	0002      	movs	r2, r0
 80040d4:	4b0d      	ldr	r3, [pc, #52]	; (800410c <main+0x9c>)
 80040d6:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80040d8:	f005 ff94 	bl	800a004 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80040dc:	e7fe      	b.n	80040dc <main+0x6c>
 80040de:	46c0      	nop			; (mov r8, r8)
 80040e0:	0800f49c 	.word	0x0800f49c
 80040e4:	080044c5 	.word	0x080044c5
 80040e8:	20000680 	.word	0x20000680
 80040ec:	0800f4c0 	.word	0x0800f4c0
 80040f0:	080044d5 	.word	0x080044d5
 80040f4:	20000684 	.word	0x20000684
 80040f8:	0800f4e4 	.word	0x0800f4e4
 80040fc:	0800469d 	.word	0x0800469d
 8004100:	20000930 	.word	0x20000930
 8004104:	0800f508 	.word	0x0800f508
 8004108:	0800482d 	.word	0x0800482d
 800410c:	20000bdc 	.word	0x20000bdc

08004110 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004110:	b590      	push	{r4, r7, lr}
 8004112:	b095      	sub	sp, #84	; 0x54
 8004114:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004116:	2414      	movs	r4, #20
 8004118:	193b      	adds	r3, r7, r4
 800411a:	0018      	movs	r0, r3
 800411c:	233c      	movs	r3, #60	; 0x3c
 800411e:	001a      	movs	r2, r3
 8004120:	2100      	movs	r1, #0
 8004122:	f009 f90b 	bl	800d33c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004126:	1d3b      	adds	r3, r7, #4
 8004128:	0018      	movs	r0, r3
 800412a:	2310      	movs	r3, #16
 800412c:	001a      	movs	r2, r3
 800412e:	2100      	movs	r1, #0
 8004130:	f009 f904 	bl	800d33c <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004134:	2380      	movs	r3, #128	; 0x80
 8004136:	009b      	lsls	r3, r3, #2
 8004138:	0018      	movs	r0, r3
 800413a:	f002 f96d 	bl	8006418 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800413e:	193b      	adds	r3, r7, r4
 8004140:	2202      	movs	r2, #2
 8004142:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004144:	193b      	adds	r3, r7, r4
 8004146:	2280      	movs	r2, #128	; 0x80
 8004148:	0052      	lsls	r2, r2, #1
 800414a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 800414c:	193b      	adds	r3, r7, r4
 800414e:	2200      	movs	r2, #0
 8004150:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004152:	193b      	adds	r3, r7, r4
 8004154:	2240      	movs	r2, #64	; 0x40
 8004156:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8004158:	193b      	adds	r3, r7, r4
 800415a:	2200      	movs	r2, #0
 800415c:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800415e:	193b      	adds	r3, r7, r4
 8004160:	0018      	movs	r0, r3
 8004162:	f002 f9a5 	bl	80064b0 <HAL_RCC_OscConfig>
 8004166:	1e03      	subs	r3, r0, #0
 8004168:	d001      	beq.n	800416e <SystemClock_Config+0x5e>
  {
    Error_Handler();
 800416a:	f000 fc5b 	bl	8004a24 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800416e:	1d3b      	adds	r3, r7, #4
 8004170:	2207      	movs	r2, #7
 8004172:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8004174:	1d3b      	adds	r3, r7, #4
 8004176:	2200      	movs	r2, #0
 8004178:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800417a:	1d3b      	adds	r3, r7, #4
 800417c:	2200      	movs	r2, #0
 800417e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004180:	1d3b      	adds	r3, r7, #4
 8004182:	2200      	movs	r2, #0
 8004184:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8004186:	1d3b      	adds	r3, r7, #4
 8004188:	2100      	movs	r1, #0
 800418a:	0018      	movs	r0, r3
 800418c:	f002 fcf0 	bl	8006b70 <HAL_RCC_ClockConfig>
 8004190:	1e03      	subs	r3, r0, #0
 8004192:	d001      	beq.n	8004198 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8004194:	f000 fc46 	bl	8004a24 <Error_Handler>
  }
}
 8004198:	46c0      	nop			; (mov r8, r8)
 800419a:	46bd      	mov	sp, r7
 800419c:	b015      	add	sp, #84	; 0x54
 800419e:	bd90      	pop	{r4, r7, pc}

080041a0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80041a4:	4b1c      	ldr	r3, [pc, #112]	; (8004218 <MX_I2C2_Init+0x78>)
 80041a6:	4a1d      	ldr	r2, [pc, #116]	; (800421c <MX_I2C2_Init+0x7c>)
 80041a8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00303D5D;
 80041aa:	4b1b      	ldr	r3, [pc, #108]	; (8004218 <MX_I2C2_Init+0x78>)
 80041ac:	4a1c      	ldr	r2, [pc, #112]	; (8004220 <MX_I2C2_Init+0x80>)
 80041ae:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80041b0:	4b19      	ldr	r3, [pc, #100]	; (8004218 <MX_I2C2_Init+0x78>)
 80041b2:	2200      	movs	r2, #0
 80041b4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80041b6:	4b18      	ldr	r3, [pc, #96]	; (8004218 <MX_I2C2_Init+0x78>)
 80041b8:	2201      	movs	r2, #1
 80041ba:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80041bc:	4b16      	ldr	r3, [pc, #88]	; (8004218 <MX_I2C2_Init+0x78>)
 80041be:	2200      	movs	r2, #0
 80041c0:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80041c2:	4b15      	ldr	r3, [pc, #84]	; (8004218 <MX_I2C2_Init+0x78>)
 80041c4:	2200      	movs	r2, #0
 80041c6:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80041c8:	4b13      	ldr	r3, [pc, #76]	; (8004218 <MX_I2C2_Init+0x78>)
 80041ca:	2200      	movs	r2, #0
 80041cc:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80041ce:	4b12      	ldr	r3, [pc, #72]	; (8004218 <MX_I2C2_Init+0x78>)
 80041d0:	2200      	movs	r2, #0
 80041d2:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80041d4:	4b10      	ldr	r3, [pc, #64]	; (8004218 <MX_I2C2_Init+0x78>)
 80041d6:	2200      	movs	r2, #0
 80041d8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80041da:	4b0f      	ldr	r3, [pc, #60]	; (8004218 <MX_I2C2_Init+0x78>)
 80041dc:	0018      	movs	r0, r3
 80041de:	f001 faaf 	bl	8005740 <HAL_I2C_Init>
 80041e2:	1e03      	subs	r3, r0, #0
 80041e4:	d001      	beq.n	80041ea <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80041e6:	f000 fc1d 	bl	8004a24 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_DISABLE) != HAL_OK)
 80041ea:	2380      	movs	r3, #128	; 0x80
 80041ec:	015a      	lsls	r2, r3, #5
 80041ee:	4b0a      	ldr	r3, [pc, #40]	; (8004218 <MX_I2C2_Init+0x78>)
 80041f0:	0011      	movs	r1, r2
 80041f2:	0018      	movs	r0, r3
 80041f4:	f002 f878 	bl	80062e8 <HAL_I2CEx_ConfigAnalogFilter>
 80041f8:	1e03      	subs	r3, r0, #0
 80041fa:	d001      	beq.n	8004200 <MX_I2C2_Init+0x60>
  {
    Error_Handler();
 80041fc:	f000 fc12 	bl	8004a24 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8004200:	4b05      	ldr	r3, [pc, #20]	; (8004218 <MX_I2C2_Init+0x78>)
 8004202:	2100      	movs	r1, #0
 8004204:	0018      	movs	r0, r3
 8004206:	f002 f8bb 	bl	8006380 <HAL_I2CEx_ConfigDigitalFilter>
 800420a:	1e03      	subs	r3, r0, #0
 800420c:	d001      	beq.n	8004212 <MX_I2C2_Init+0x72>
  {
    Error_Handler();
 800420e:	f000 fc09 	bl	8004a24 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8004212:	46c0      	nop			; (mov r8, r8)
 8004214:	46bd      	mov	sp, r7
 8004216:	bd80      	pop	{r7, pc}
 8004218:	20000504 	.word	0x20000504
 800421c:	40005800 	.word	0x40005800
 8004220:	00303d5d 	.word	0x00303d5d

08004224 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8004224:	b580      	push	{r7, lr}
 8004226:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004228:	4b23      	ldr	r3, [pc, #140]	; (80042b8 <MX_USART1_UART_Init+0x94>)
 800422a:	4a24      	ldr	r2, [pc, #144]	; (80042bc <MX_USART1_UART_Init+0x98>)
 800422c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800422e:	4b22      	ldr	r3, [pc, #136]	; (80042b8 <MX_USART1_UART_Init+0x94>)
 8004230:	22e1      	movs	r2, #225	; 0xe1
 8004232:	0252      	lsls	r2, r2, #9
 8004234:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004236:	4b20      	ldr	r3, [pc, #128]	; (80042b8 <MX_USART1_UART_Init+0x94>)
 8004238:	2200      	movs	r2, #0
 800423a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800423c:	4b1e      	ldr	r3, [pc, #120]	; (80042b8 <MX_USART1_UART_Init+0x94>)
 800423e:	2200      	movs	r2, #0
 8004240:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004242:	4b1d      	ldr	r3, [pc, #116]	; (80042b8 <MX_USART1_UART_Init+0x94>)
 8004244:	2200      	movs	r2, #0
 8004246:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004248:	4b1b      	ldr	r3, [pc, #108]	; (80042b8 <MX_USART1_UART_Init+0x94>)
 800424a:	220c      	movs	r2, #12
 800424c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800424e:	4b1a      	ldr	r3, [pc, #104]	; (80042b8 <MX_USART1_UART_Init+0x94>)
 8004250:	2200      	movs	r2, #0
 8004252:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004254:	4b18      	ldr	r3, [pc, #96]	; (80042b8 <MX_USART1_UART_Init+0x94>)
 8004256:	2200      	movs	r2, #0
 8004258:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800425a:	4b17      	ldr	r3, [pc, #92]	; (80042b8 <MX_USART1_UART_Init+0x94>)
 800425c:	2200      	movs	r2, #0
 800425e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004260:	4b15      	ldr	r3, [pc, #84]	; (80042b8 <MX_USART1_UART_Init+0x94>)
 8004262:	2200      	movs	r2, #0
 8004264:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004266:	4b14      	ldr	r3, [pc, #80]	; (80042b8 <MX_USART1_UART_Init+0x94>)
 8004268:	2200      	movs	r2, #0
 800426a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800426c:	4b12      	ldr	r3, [pc, #72]	; (80042b8 <MX_USART1_UART_Init+0x94>)
 800426e:	0018      	movs	r0, r3
 8004270:	f003 fb44 	bl	80078fc <HAL_UART_Init>
 8004274:	1e03      	subs	r3, r0, #0
 8004276:	d001      	beq.n	800427c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8004278:	f000 fbd4 	bl	8004a24 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800427c:	4b0e      	ldr	r3, [pc, #56]	; (80042b8 <MX_USART1_UART_Init+0x94>)
 800427e:	2100      	movs	r1, #0
 8004280:	0018      	movs	r0, r3
 8004282:	f005 fd33 	bl	8009cec <HAL_UARTEx_SetTxFifoThreshold>
 8004286:	1e03      	subs	r3, r0, #0
 8004288:	d001      	beq.n	800428e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800428a:	f000 fbcb 	bl	8004a24 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800428e:	4b0a      	ldr	r3, [pc, #40]	; (80042b8 <MX_USART1_UART_Init+0x94>)
 8004290:	2100      	movs	r1, #0
 8004292:	0018      	movs	r0, r3
 8004294:	f005 fd6a 	bl	8009d6c <HAL_UARTEx_SetRxFifoThreshold>
 8004298:	1e03      	subs	r3, r0, #0
 800429a:	d001      	beq.n	80042a0 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 800429c:	f000 fbc2 	bl	8004a24 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80042a0:	4b05      	ldr	r3, [pc, #20]	; (80042b8 <MX_USART1_UART_Init+0x94>)
 80042a2:	0018      	movs	r0, r3
 80042a4:	f005 fce8 	bl	8009c78 <HAL_UARTEx_DisableFifoMode>
 80042a8:	1e03      	subs	r3, r0, #0
 80042aa:	d001      	beq.n	80042b0 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80042ac:	f000 fbba 	bl	8004a24 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80042b0:	46c0      	nop			; (mov r8, r8)
 80042b2:	46bd      	mov	sp, r7
 80042b4:	bd80      	pop	{r7, pc}
 80042b6:	46c0      	nop			; (mov r8, r8)
 80042b8:	20000558 	.word	0x20000558
 80042bc:	40013800 	.word	0x40013800

080042c0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80042c4:	4b23      	ldr	r3, [pc, #140]	; (8004354 <MX_USART3_UART_Init+0x94>)
 80042c6:	4a24      	ldr	r2, [pc, #144]	; (8004358 <MX_USART3_UART_Init+0x98>)
 80042c8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 38400;
 80042ca:	4b22      	ldr	r3, [pc, #136]	; (8004354 <MX_USART3_UART_Init+0x94>)
 80042cc:	2296      	movs	r2, #150	; 0x96
 80042ce:	0212      	lsls	r2, r2, #8
 80042d0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80042d2:	4b20      	ldr	r3, [pc, #128]	; (8004354 <MX_USART3_UART_Init+0x94>)
 80042d4:	2200      	movs	r2, #0
 80042d6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80042d8:	4b1e      	ldr	r3, [pc, #120]	; (8004354 <MX_USART3_UART_Init+0x94>)
 80042da:	2200      	movs	r2, #0
 80042dc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80042de:	4b1d      	ldr	r3, [pc, #116]	; (8004354 <MX_USART3_UART_Init+0x94>)
 80042e0:	2200      	movs	r2, #0
 80042e2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80042e4:	4b1b      	ldr	r3, [pc, #108]	; (8004354 <MX_USART3_UART_Init+0x94>)
 80042e6:	220c      	movs	r2, #12
 80042e8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80042ea:	4b1a      	ldr	r3, [pc, #104]	; (8004354 <MX_USART3_UART_Init+0x94>)
 80042ec:	2200      	movs	r2, #0
 80042ee:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80042f0:	4b18      	ldr	r3, [pc, #96]	; (8004354 <MX_USART3_UART_Init+0x94>)
 80042f2:	2200      	movs	r2, #0
 80042f4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80042f6:	4b17      	ldr	r3, [pc, #92]	; (8004354 <MX_USART3_UART_Init+0x94>)
 80042f8:	2200      	movs	r2, #0
 80042fa:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80042fc:	4b15      	ldr	r3, [pc, #84]	; (8004354 <MX_USART3_UART_Init+0x94>)
 80042fe:	2200      	movs	r2, #0
 8004300:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004302:	4b14      	ldr	r3, [pc, #80]	; (8004354 <MX_USART3_UART_Init+0x94>)
 8004304:	2200      	movs	r2, #0
 8004306:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8004308:	4b12      	ldr	r3, [pc, #72]	; (8004354 <MX_USART3_UART_Init+0x94>)
 800430a:	0018      	movs	r0, r3
 800430c:	f003 faf6 	bl	80078fc <HAL_UART_Init>
 8004310:	1e03      	subs	r3, r0, #0
 8004312:	d001      	beq.n	8004318 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8004314:	f000 fb86 	bl	8004a24 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004318:	4b0e      	ldr	r3, [pc, #56]	; (8004354 <MX_USART3_UART_Init+0x94>)
 800431a:	2100      	movs	r1, #0
 800431c:	0018      	movs	r0, r3
 800431e:	f005 fce5 	bl	8009cec <HAL_UARTEx_SetTxFifoThreshold>
 8004322:	1e03      	subs	r3, r0, #0
 8004324:	d001      	beq.n	800432a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8004326:	f000 fb7d 	bl	8004a24 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800432a:	4b0a      	ldr	r3, [pc, #40]	; (8004354 <MX_USART3_UART_Init+0x94>)
 800432c:	2100      	movs	r1, #0
 800432e:	0018      	movs	r0, r3
 8004330:	f005 fd1c 	bl	8009d6c <HAL_UARTEx_SetRxFifoThreshold>
 8004334:	1e03      	subs	r3, r0, #0
 8004336:	d001      	beq.n	800433c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8004338:	f000 fb74 	bl	8004a24 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800433c:	4b05      	ldr	r3, [pc, #20]	; (8004354 <MX_USART3_UART_Init+0x94>)
 800433e:	0018      	movs	r0, r3
 8004340:	f005 fc9a 	bl	8009c78 <HAL_UARTEx_DisableFifoMode>
 8004344:	1e03      	subs	r3, r0, #0
 8004346:	d001      	beq.n	800434c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8004348:	f000 fb6c 	bl	8004a24 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800434c:	46c0      	nop			; (mov r8, r8)
 800434e:	46bd      	mov	sp, r7
 8004350:	bd80      	pop	{r7, pc}
 8004352:	46c0      	nop			; (mov r8, r8)
 8004354:	200005ec 	.word	0x200005ec
 8004358:	40004800 	.word	0x40004800

0800435c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800435c:	b590      	push	{r4, r7, lr}
 800435e:	b08b      	sub	sp, #44	; 0x2c
 8004360:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004362:	2414      	movs	r4, #20
 8004364:	193b      	adds	r3, r7, r4
 8004366:	0018      	movs	r0, r3
 8004368:	2314      	movs	r3, #20
 800436a:	001a      	movs	r2, r3
 800436c:	2100      	movs	r1, #0
 800436e:	f008 ffe5 	bl	800d33c <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004372:	4b4e      	ldr	r3, [pc, #312]	; (80044ac <MX_GPIO_Init+0x150>)
 8004374:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004376:	4b4d      	ldr	r3, [pc, #308]	; (80044ac <MX_GPIO_Init+0x150>)
 8004378:	2104      	movs	r1, #4
 800437a:	430a      	orrs	r2, r1
 800437c:	635a      	str	r2, [r3, #52]	; 0x34
 800437e:	4b4b      	ldr	r3, [pc, #300]	; (80044ac <MX_GPIO_Init+0x150>)
 8004380:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004382:	2204      	movs	r2, #4
 8004384:	4013      	ands	r3, r2
 8004386:	613b      	str	r3, [r7, #16]
 8004388:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800438a:	4b48      	ldr	r3, [pc, #288]	; (80044ac <MX_GPIO_Init+0x150>)
 800438c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800438e:	4b47      	ldr	r3, [pc, #284]	; (80044ac <MX_GPIO_Init+0x150>)
 8004390:	2102      	movs	r1, #2
 8004392:	430a      	orrs	r2, r1
 8004394:	635a      	str	r2, [r3, #52]	; 0x34
 8004396:	4b45      	ldr	r3, [pc, #276]	; (80044ac <MX_GPIO_Init+0x150>)
 8004398:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800439a:	2202      	movs	r2, #2
 800439c:	4013      	ands	r3, r2
 800439e:	60fb      	str	r3, [r7, #12]
 80043a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80043a2:	4b42      	ldr	r3, [pc, #264]	; (80044ac <MX_GPIO_Init+0x150>)
 80043a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80043a6:	4b41      	ldr	r3, [pc, #260]	; (80044ac <MX_GPIO_Init+0x150>)
 80043a8:	2101      	movs	r1, #1
 80043aa:	430a      	orrs	r2, r1
 80043ac:	635a      	str	r2, [r3, #52]	; 0x34
 80043ae:	4b3f      	ldr	r3, [pc, #252]	; (80044ac <MX_GPIO_Init+0x150>)
 80043b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043b2:	2201      	movs	r2, #1
 80043b4:	4013      	ands	r3, r2
 80043b6:	60bb      	str	r3, [r7, #8]
 80043b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80043ba:	4b3c      	ldr	r3, [pc, #240]	; (80044ac <MX_GPIO_Init+0x150>)
 80043bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80043be:	4b3b      	ldr	r3, [pc, #236]	; (80044ac <MX_GPIO_Init+0x150>)
 80043c0:	2108      	movs	r1, #8
 80043c2:	430a      	orrs	r2, r1
 80043c4:	635a      	str	r2, [r3, #52]	; 0x34
 80043c6:	4b39      	ldr	r3, [pc, #228]	; (80044ac <MX_GPIO_Init+0x150>)
 80043c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043ca:	2208      	movs	r2, #8
 80043cc:	4013      	ands	r3, r2
 80043ce:	607b      	str	r3, [r7, #4]
 80043d0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, PWR_GSM_Pin|PWR_KEY_Pin, GPIO_PIN_RESET);
 80043d2:	23c0      	movs	r3, #192	; 0xc0
 80043d4:	015b      	lsls	r3, r3, #5
 80043d6:	4836      	ldr	r0, [pc, #216]	; (80044b0 <MX_GPIO_Init+0x154>)
 80043d8:	2200      	movs	r2, #0
 80043da:	0019      	movs	r1, r3
 80043dc:	f001 f992 	bl	8005704 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_G_Pin|LED_R_Pin|LED_B_Pin, GPIO_PIN_SET);
 80043e0:	4934      	ldr	r1, [pc, #208]	; (80044b4 <MX_GPIO_Init+0x158>)
 80043e2:	4b35      	ldr	r3, [pc, #212]	; (80044b8 <MX_GPIO_Init+0x15c>)
 80043e4:	2201      	movs	r2, #1
 80043e6:	0018      	movs	r0, r3
 80043e8:	f001 f98c 	bl	8005704 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACC_EN_GPIO_Port, ACC_EN_Pin, GPIO_PIN_RESET);
 80043ec:	2380      	movs	r3, #128	; 0x80
 80043ee:	009b      	lsls	r3, r3, #2
 80043f0:	4832      	ldr	r0, [pc, #200]	; (80044bc <MX_GPIO_Init+0x160>)
 80043f2:	2200      	movs	r2, #0
 80043f4:	0019      	movs	r1, r3
 80043f6:	f001 f985 	bl	8005704 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PWR_GPS_EN_GPIO_Port, PWR_GPS_EN_Pin, GPIO_PIN_RESET);
 80043fa:	4b2f      	ldr	r3, [pc, #188]	; (80044b8 <MX_GPIO_Init+0x15c>)
 80043fc:	2200      	movs	r2, #0
 80043fe:	2120      	movs	r1, #32
 8004400:	0018      	movs	r0, r3
 8004402:	f001 f97f 	bl	8005704 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PWR_GSM_Pin PWR_KEY_Pin */
  GPIO_InitStruct.Pin = PWR_GSM_Pin|PWR_KEY_Pin;
 8004406:	193b      	adds	r3, r7, r4
 8004408:	22c0      	movs	r2, #192	; 0xc0
 800440a:	0152      	lsls	r2, r2, #5
 800440c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800440e:	193b      	adds	r3, r7, r4
 8004410:	2201      	movs	r2, #1
 8004412:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004414:	193b      	adds	r3, r7, r4
 8004416:	2201      	movs	r2, #1
 8004418:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800441a:	193b      	adds	r3, r7, r4
 800441c:	2200      	movs	r2, #0
 800441e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004420:	193b      	adds	r3, r7, r4
 8004422:	4a23      	ldr	r2, [pc, #140]	; (80044b0 <MX_GPIO_Init+0x154>)
 8004424:	0019      	movs	r1, r3
 8004426:	0010      	movs	r0, r2
 8004428:	f001 f800 	bl	800542c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_G_Pin LED_R_Pin */
  GPIO_InitStruct.Pin = LED_G_Pin|LED_R_Pin;
 800442c:	193b      	adds	r3, r7, r4
 800442e:	4a24      	ldr	r2, [pc, #144]	; (80044c0 <MX_GPIO_Init+0x164>)
 8004430:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004432:	193b      	adds	r3, r7, r4
 8004434:	2201      	movs	r2, #1
 8004436:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004438:	193b      	adds	r3, r7, r4
 800443a:	2200      	movs	r2, #0
 800443c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800443e:	193b      	adds	r3, r7, r4
 8004440:	2200      	movs	r2, #0
 8004442:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004444:	193b      	adds	r3, r7, r4
 8004446:	4a1c      	ldr	r2, [pc, #112]	; (80044b8 <MX_GPIO_Init+0x15c>)
 8004448:	0019      	movs	r1, r3
 800444a:	0010      	movs	r0, r2
 800444c:	f000 ffee 	bl	800542c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_B_Pin PWR_GPS_EN_Pin */
  GPIO_InitStruct.Pin = LED_B_Pin|PWR_GPS_EN_Pin;
 8004450:	0021      	movs	r1, r4
 8004452:	187b      	adds	r3, r7, r1
 8004454:	2281      	movs	r2, #129	; 0x81
 8004456:	0152      	lsls	r2, r2, #5
 8004458:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800445a:	000c      	movs	r4, r1
 800445c:	193b      	adds	r3, r7, r4
 800445e:	2201      	movs	r2, #1
 8004460:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004462:	193b      	adds	r3, r7, r4
 8004464:	2201      	movs	r2, #1
 8004466:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004468:	193b      	adds	r3, r7, r4
 800446a:	2200      	movs	r2, #0
 800446c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800446e:	193b      	adds	r3, r7, r4
 8004470:	4a11      	ldr	r2, [pc, #68]	; (80044b8 <MX_GPIO_Init+0x15c>)
 8004472:	0019      	movs	r1, r3
 8004474:	0010      	movs	r0, r2
 8004476:	f000 ffd9 	bl	800542c <HAL_GPIO_Init>

  /*Configure GPIO pin : ACC_EN_Pin */
  GPIO_InitStruct.Pin = ACC_EN_Pin;
 800447a:	0021      	movs	r1, r4
 800447c:	187b      	adds	r3, r7, r1
 800447e:	2280      	movs	r2, #128	; 0x80
 8004480:	0092      	lsls	r2, r2, #2
 8004482:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004484:	187b      	adds	r3, r7, r1
 8004486:	2201      	movs	r2, #1
 8004488:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800448a:	187b      	adds	r3, r7, r1
 800448c:	2201      	movs	r2, #1
 800448e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004490:	187b      	adds	r3, r7, r1
 8004492:	2200      	movs	r2, #0
 8004494:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(ACC_EN_GPIO_Port, &GPIO_InitStruct);
 8004496:	187b      	adds	r3, r7, r1
 8004498:	4a08      	ldr	r2, [pc, #32]	; (80044bc <MX_GPIO_Init+0x160>)
 800449a:	0019      	movs	r1, r3
 800449c:	0010      	movs	r0, r2
 800449e:	f000 ffc5 	bl	800542c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80044a2:	46c0      	nop			; (mov r8, r8)
 80044a4:	46bd      	mov	sp, r7
 80044a6:	b00b      	add	sp, #44	; 0x2c
 80044a8:	bd90      	pop	{r4, r7, pc}
 80044aa:	46c0      	nop			; (mov r8, r8)
 80044ac:	40021000 	.word	0x40021000
 80044b0:	50000800 	.word	0x50000800
 80044b4:	00001804 	.word	0x00001804
 80044b8:	50000400 	.word	0x50000400
 80044bc:	50000c00 	.word	0x50000c00
 80044c0:	00000804 	.word	0x00000804

080044c4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b082      	sub	sp, #8
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80044cc:	2001      	movs	r0, #1
 80044ce:	f005 fe55 	bl	800a17c <osDelay>
 80044d2:	e7fb      	b.n	80044cc <StartDefaultTask+0x8>

080044d4 <GPS_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_GPS_Task */
void GPS_Task(void *argument)
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b084      	sub	sp, #16
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GPS_Task */
  uint8_t count;
  /* Infinite loop */
  for(;;)
  {
		HAL_UART_Receive_IT(&huart1, gps_data, sizeof(gps_data)/sizeof(gps_data[0]));
 80044dc:	4945      	ldr	r1, [pc, #276]	; (80045f4 <GPS_Task+0x120>)
 80044de:	4b46      	ldr	r3, [pc, #280]	; (80045f8 <GPS_Task+0x124>)
 80044e0:	22c8      	movs	r2, #200	; 0xc8
 80044e2:	0018      	movs	r0, r3
 80044e4:	f003 fb08 	bl	8007af8 <HAL_UART_Receive_IT>
		while (HAL_UART_GetState(&huart1) != HAL_UART_STATE_READY) vTaskDelay(50);
 80044e8:	e002      	b.n	80044f0 <GPS_Task+0x1c>
 80044ea:	2032      	movs	r0, #50	; 0x32
 80044ec:	f006 fd00 	bl	800aef0 <vTaskDelay>
 80044f0:	4b41      	ldr	r3, [pc, #260]	; (80045f8 <GPS_Task+0x124>)
 80044f2:	0018      	movs	r0, r3
 80044f4:	f003 fe9f 	bl	8008236 <HAL_UART_GetState>
 80044f8:	0003      	movs	r3, r0
 80044fa:	2b20      	cmp	r3, #32
 80044fc:	d1f5      	bne.n	80044ea <GPS_Task+0x16>
		for (uint8_t i=0; i<sizeof(gps_data)/sizeof(gps_data[0]); i++)
 80044fe:	230e      	movs	r3, #14
 8004500:	18fb      	adds	r3, r7, r3
 8004502:	2200      	movs	r2, #0
 8004504:	701a      	strb	r2, [r3, #0]
 8004506:	e048      	b.n	800459a <GPS_Task+0xc6>
		{
			if (gps_data[i] == '$')
 8004508:	210e      	movs	r1, #14
 800450a:	187b      	adds	r3, r7, r1
 800450c:	781b      	ldrb	r3, [r3, #0]
 800450e:	4a39      	ldr	r2, [pc, #228]	; (80045f4 <GPS_Task+0x120>)
 8004510:	5cd3      	ldrb	r3, [r2, r3]
 8004512:	2b24      	cmp	r3, #36	; 0x24
 8004514:	d131      	bne.n	800457a <GPS_Task+0xa6>
			{
				uint8_t p=1;
 8004516:	230d      	movs	r3, #13
 8004518:	18fb      	adds	r3, r7, r3
 800451a:	2201      	movs	r2, #1
 800451c:	701a      	strb	r2, [r3, #0]
				gps_pack[0]='$';
 800451e:	4b37      	ldr	r3, [pc, #220]	; (80045fc <GPS_Task+0x128>)
 8004520:	2224      	movs	r2, #36	; 0x24
 8004522:	701a      	strb	r2, [r3, #0]
				i++;
 8004524:	187b      	adds	r3, r7, r1
 8004526:	781a      	ldrb	r2, [r3, #0]
 8004528:	187b      	adds	r3, r7, r1
 800452a:	3201      	adds	r2, #1
 800452c:	701a      	strb	r2, [r3, #0]

				while(i<sizeof(gps_data)/sizeof(gps_data[0]))
 800452e:	e01f      	b.n	8004570 <GPS_Task+0x9c>
				{
					if (gps_data[i]==0x0D)
 8004530:	230e      	movs	r3, #14
 8004532:	18fb      	adds	r3, r7, r3
 8004534:	781b      	ldrb	r3, [r3, #0]
 8004536:	4a2f      	ldr	r2, [pc, #188]	; (80045f4 <GPS_Task+0x120>)
 8004538:	5cd3      	ldrb	r3, [r2, r3]
 800453a:	2b0d      	cmp	r3, #13
 800453c:	d106      	bne.n	800454c <GPS_Task+0x78>
					{
						count=20;
 800453e:	230f      	movs	r3, #15
 8004540:	18fb      	adds	r3, r7, r3
 8004542:	2214      	movs	r2, #20
 8004544:	701a      	strb	r2, [r3, #0]
						Check_GPS_Pack();
 8004546:	f7fe fd33 	bl	8002fb0 <Check_GPS_Pack>
						break;
 800454a:	e016      	b.n	800457a <GPS_Task+0xa6>
					}
					gps_pack[p++]=gps_data[i++];
 800454c:	220e      	movs	r2, #14
 800454e:	18bb      	adds	r3, r7, r2
 8004550:	781b      	ldrb	r3, [r3, #0]
 8004552:	18ba      	adds	r2, r7, r2
 8004554:	1c59      	adds	r1, r3, #1
 8004556:	7011      	strb	r1, [r2, #0]
 8004558:	0019      	movs	r1, r3
 800455a:	220d      	movs	r2, #13
 800455c:	18bb      	adds	r3, r7, r2
 800455e:	781b      	ldrb	r3, [r3, #0]
 8004560:	18ba      	adds	r2, r7, r2
 8004562:	1c58      	adds	r0, r3, #1
 8004564:	7010      	strb	r0, [r2, #0]
 8004566:	001a      	movs	r2, r3
 8004568:	4b22      	ldr	r3, [pc, #136]	; (80045f4 <GPS_Task+0x120>)
 800456a:	5c59      	ldrb	r1, [r3, r1]
 800456c:	4b23      	ldr	r3, [pc, #140]	; (80045fc <GPS_Task+0x128>)
 800456e:	5499      	strb	r1, [r3, r2]
				while(i<sizeof(gps_data)/sizeof(gps_data[0]))
 8004570:	230e      	movs	r3, #14
 8004572:	18fb      	adds	r3, r7, r3
 8004574:	781b      	ldrb	r3, [r3, #0]
 8004576:	2bc7      	cmp	r3, #199	; 0xc7
 8004578:	d9da      	bls.n	8004530 <GPS_Task+0x5c>
				}
			}
			if (count)
 800457a:	210f      	movs	r1, #15
 800457c:	187b      	adds	r3, r7, r1
 800457e:	781b      	ldrb	r3, [r3, #0]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d004      	beq.n	800458e <GPS_Task+0xba>
				count--;
 8004584:	187b      	adds	r3, r7, r1
 8004586:	781a      	ldrb	r2, [r3, #0]
 8004588:	187b      	adds	r3, r7, r1
 800458a:	3a01      	subs	r2, #1
 800458c:	701a      	strb	r2, [r3, #0]
		for (uint8_t i=0; i<sizeof(gps_data)/sizeof(gps_data[0]); i++)
 800458e:	210e      	movs	r1, #14
 8004590:	187b      	adds	r3, r7, r1
 8004592:	781a      	ldrb	r2, [r3, #0]
 8004594:	187b      	adds	r3, r7, r1
 8004596:	3201      	adds	r2, #1
 8004598:	701a      	strb	r2, [r3, #0]
 800459a:	230e      	movs	r3, #14
 800459c:	18fb      	adds	r3, r7, r3
 800459e:	781b      	ldrb	r3, [r3, #0]
 80045a0:	2bc7      	cmp	r3, #199	; 0xc7
 80045a2:	d9b1      	bls.n	8004508 <GPS_Task+0x34>

		}

		if (gps_info.fix_valid)
 80045a4:	4b16      	ldr	r3, [pc, #88]	; (8004600 <GPS_Task+0x12c>)
 80045a6:	799b      	ldrb	r3, [r3, #6]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d007      	beq.n	80045bc <GPS_Task+0xe8>
			LED_R_ON;
 80045ac:	2380      	movs	r3, #128	; 0x80
 80045ae:	011b      	lsls	r3, r3, #4
 80045b0:	4814      	ldr	r0, [pc, #80]	; (8004604 <GPS_Task+0x130>)
 80045b2:	2200      	movs	r2, #0
 80045b4:	0019      	movs	r1, r3
 80045b6:	f001 f8a5 	bl	8005704 <HAL_GPIO_WritePin>
 80045ba:	e78f      	b.n	80044dc <GPS_Task+0x8>
		else
			gps_info.time_pack.sec & 0x01 && count ? LED_R_ON:LED_R_OFF;
 80045bc:	4b10      	ldr	r3, [pc, #64]	; (8004600 <GPS_Task+0x12c>)
 80045be:	781b      	ldrb	r3, [r3, #0]
 80045c0:	001a      	movs	r2, r3
 80045c2:	2301      	movs	r3, #1
 80045c4:	4013      	ands	r3, r2
 80045c6:	d00c      	beq.n	80045e2 <GPS_Task+0x10e>
 80045c8:	230f      	movs	r3, #15
 80045ca:	18fb      	adds	r3, r7, r3
 80045cc:	781b      	ldrb	r3, [r3, #0]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d007      	beq.n	80045e2 <GPS_Task+0x10e>
 80045d2:	2380      	movs	r3, #128	; 0x80
 80045d4:	011b      	lsls	r3, r3, #4
 80045d6:	480b      	ldr	r0, [pc, #44]	; (8004604 <GPS_Task+0x130>)
 80045d8:	2200      	movs	r2, #0
 80045da:	0019      	movs	r1, r3
 80045dc:	f001 f892 	bl	8005704 <HAL_GPIO_WritePin>
 80045e0:	e006      	b.n	80045f0 <GPS_Task+0x11c>
 80045e2:	2380      	movs	r3, #128	; 0x80
 80045e4:	011b      	lsls	r3, r3, #4
 80045e6:	4807      	ldr	r0, [pc, #28]	; (8004604 <GPS_Task+0x130>)
 80045e8:	2201      	movs	r2, #1
 80045ea:	0019      	movs	r1, r3
 80045ec:	f001 f88a 	bl	8005704 <HAL_GPIO_WritePin>
		HAL_UART_Receive_IT(&huart1, gps_data, sizeof(gps_data)/sizeof(gps_data[0]));
 80045f0:	e774      	b.n	80044dc <GPS_Task+0x8>
 80045f2:	46c0      	nop			; (mov r8, r8)
 80045f4:	200001f4 	.word	0x200001f4
 80045f8:	20000558 	.word	0x20000558
 80045fc:	200002bc 	.word	0x200002bc
 8004600:	20000384 	.word	0x20000384
 8004604:	50000400 	.word	0x50000400

08004608 <HAL_UART_RxCpltCallback>:
* @param argument: Not used
* @retval None
*/

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b082      	sub	sp, #8
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
     if (huart == &huart3)
 8004610:	687a      	ldr	r2, [r7, #4]
 8004612:	4b0f      	ldr	r3, [pc, #60]	; (8004650 <HAL_UART_RxCpltCallback+0x48>)
 8004614:	429a      	cmp	r2, r3
 8004616:	d117      	bne.n	8004648 <HAL_UART_RxCpltCallback+0x40>
     {
	 gsm_data[p_w++] = u3;
 8004618:	4b0e      	ldr	r3, [pc, #56]	; (8004654 <HAL_UART_RxCpltCallback+0x4c>)
 800461a:	781b      	ldrb	r3, [r3, #0]
 800461c:	1c5a      	adds	r2, r3, #1
 800461e:	b2d1      	uxtb	r1, r2
 8004620:	4a0c      	ldr	r2, [pc, #48]	; (8004654 <HAL_UART_RxCpltCallback+0x4c>)
 8004622:	7011      	strb	r1, [r2, #0]
 8004624:	001a      	movs	r2, r3
 8004626:	4b0c      	ldr	r3, [pc, #48]	; (8004658 <HAL_UART_RxCpltCallback+0x50>)
 8004628:	7819      	ldrb	r1, [r3, #0]
 800462a:	4b0c      	ldr	r3, [pc, #48]	; (800465c <HAL_UART_RxCpltCallback+0x54>)
 800462c:	5499      	strb	r1, [r3, r2]
	 if (p_w >= sizeof(gsm_data)/sizeof(gsm_data[0]))
 800462e:	4b09      	ldr	r3, [pc, #36]	; (8004654 <HAL_UART_RxCpltCallback+0x4c>)
 8004630:	781b      	ldrb	r3, [r3, #0]
 8004632:	2bc7      	cmp	r3, #199	; 0xc7
 8004634:	d902      	bls.n	800463c <HAL_UART_RxCpltCallback+0x34>
		 p_w = 0;
 8004636:	4b07      	ldr	r3, [pc, #28]	; (8004654 <HAL_UART_RxCpltCallback+0x4c>)
 8004638:	2200      	movs	r2, #0
 800463a:	701a      	strb	r2, [r3, #0]
	 HAL_UART_Receive_IT(&huart3,&u3,1);
 800463c:	4906      	ldr	r1, [pc, #24]	; (8004658 <HAL_UART_RxCpltCallback+0x50>)
 800463e:	4b04      	ldr	r3, [pc, #16]	; (8004650 <HAL_UART_RxCpltCallback+0x48>)
 8004640:	2201      	movs	r2, #1
 8004642:	0018      	movs	r0, r3
 8004644:	f003 fa58 	bl	8007af8 <HAL_UART_Receive_IT>
     }
}
 8004648:	46c0      	nop			; (mov r8, r8)
 800464a:	46bd      	mov	sp, r7
 800464c:	b002      	add	sp, #8
 800464e:	bd80      	pop	{r7, pc}
 8004650:	200005ec 	.word	0x200005ec
 8004654:	200004d0 	.word	0x200004d0
 8004658:	20000e88 	.word	0x20000e88
 800465c:	200003a4 	.word	0x200003a4

08004660 <HAL_UART_ErrorCallback>:

uint8_t error;
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004660:	b580      	push	{r7, lr}
 8004662:	b082      	sub	sp, #8
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
    if (huart == &huart3)
 8004668:	687a      	ldr	r2, [r7, #4]
 800466a:	4b09      	ldr	r3, [pc, #36]	; (8004690 <HAL_UART_ErrorCallback+0x30>)
 800466c:	429a      	cmp	r2, r3
 800466e:	d10b      	bne.n	8004688 <HAL_UART_ErrorCallback+0x28>
    {
    	error++;
 8004670:	4b08      	ldr	r3, [pc, #32]	; (8004694 <HAL_UART_ErrorCallback+0x34>)
 8004672:	781b      	ldrb	r3, [r3, #0]
 8004674:	3301      	adds	r3, #1
 8004676:	b2da      	uxtb	r2, r3
 8004678:	4b06      	ldr	r3, [pc, #24]	; (8004694 <HAL_UART_ErrorCallback+0x34>)
 800467a:	701a      	strb	r2, [r3, #0]
    	HAL_UART_Receive_IT(&huart3,&u3,1);
 800467c:	4906      	ldr	r1, [pc, #24]	; (8004698 <HAL_UART_ErrorCallback+0x38>)
 800467e:	4b04      	ldr	r3, [pc, #16]	; (8004690 <HAL_UART_ErrorCallback+0x30>)
 8004680:	2201      	movs	r2, #1
 8004682:	0018      	movs	r0, r3
 8004684:	f003 fa38 	bl	8007af8 <HAL_UART_Receive_IT>
    }
}
 8004688:	46c0      	nop			; (mov r8, r8)
 800468a:	46bd      	mov	sp, r7
 800468c:	b002      	add	sp, #8
 800468e:	bd80      	pop	{r7, pc}
 8004690:	200005ec 	.word	0x200005ec
 8004694:	20000ea9 	.word	0x20000ea9
 8004698:	20000e88 	.word	0x20000e88

0800469c <GSM_Task>:

/* USER CODE END Header_GSM_Task */
void GSM_Task(void *argument)
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b082      	sub	sp, #8
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GSM_Task */
	PWR_GPS_ON;
 80046a4:	4b29      	ldr	r3, [pc, #164]	; (800474c <GSM_Task+0xb0>)
 80046a6:	2201      	movs	r2, #1
 80046a8:	2120      	movs	r1, #32
 80046aa:	0018      	movs	r0, r3
 80046ac:	f001 f82a 	bl	8005704 <HAL_GPIO_WritePin>
	PWR_GSM_ON;
 80046b0:	2380      	movs	r3, #128	; 0x80
 80046b2:	011b      	lsls	r3, r3, #4
 80046b4:	4826      	ldr	r0, [pc, #152]	; (8004750 <GSM_Task+0xb4>)
 80046b6:	2201      	movs	r2, #1
 80046b8:	0019      	movs	r1, r3
 80046ba:	f001 f823 	bl	8005704 <HAL_GPIO_WritePin>
	KEY_GSM_OFF;
 80046be:	2380      	movs	r3, #128	; 0x80
 80046c0:	015b      	lsls	r3, r3, #5
 80046c2:	4823      	ldr	r0, [pc, #140]	; (8004750 <GSM_Task+0xb4>)
 80046c4:	2200      	movs	r2, #0
 80046c6:	0019      	movs	r1, r3
 80046c8:	f001 f81c 	bl	8005704 <HAL_GPIO_WritePin>
	osDelay(150);
 80046cc:	2096      	movs	r0, #150	; 0x96
 80046ce:	f005 fd55 	bl	800a17c <osDelay>
	KEY_GSM_ON;
 80046d2:	2380      	movs	r3, #128	; 0x80
 80046d4:	015b      	lsls	r3, r3, #5
 80046d6:	481e      	ldr	r0, [pc, #120]	; (8004750 <GSM_Task+0xb4>)
 80046d8:	2201      	movs	r2, #1
 80046da:	0019      	movs	r1, r3
 80046dc:	f001 f812 	bl	8005704 <HAL_GPIO_WritePin>
	osDelay(800);
 80046e0:	23c8      	movs	r3, #200	; 0xc8
 80046e2:	009b      	lsls	r3, r3, #2
 80046e4:	0018      	movs	r0, r3
 80046e6:	f005 fd49 	bl	800a17c <osDelay>
	KEY_GSM_OFF;
 80046ea:	2380      	movs	r3, #128	; 0x80
 80046ec:	015b      	lsls	r3, r3, #5
 80046ee:	4818      	ldr	r0, [pc, #96]	; (8004750 <GSM_Task+0xb4>)
 80046f0:	2200      	movs	r2, #0
 80046f2:	0019      	movs	r1, r3
 80046f4:	f001 f806 	bl	8005704 <HAL_GPIO_WritePin>
	HAL_UART_Receive_IT(&huart3, &u3, 1);
 80046f8:	4916      	ldr	r1, [pc, #88]	; (8004754 <GSM_Task+0xb8>)
 80046fa:	4b17      	ldr	r3, [pc, #92]	; (8004758 <GSM_Task+0xbc>)
 80046fc:	2201      	movs	r2, #1
 80046fe:	0018      	movs	r0, r3
 8004700:	f003 f9fa 	bl	8007af8 <HAL_UART_Receive_IT>
 /* Infinite loop */
  for(;;)
  {
	  gsm();
 8004704:	f7fe ffd4 	bl	80036b0 <gsm>
	  vTaskDelay(50);
 8004708:	2032      	movs	r0, #50	; 0x32
 800470a:	f006 fbf1 	bl	800aef0 <vTaskDelay>
	  if (signal_level)
 800470e:	4b13      	ldr	r3, [pc, #76]	; (800475c <GSM_Task+0xc0>)
 8004710:	781b      	ldrb	r3, [r3, #0]
 8004712:	2b00      	cmp	r3, #0
 8004714:	d006      	beq.n	8004724 <GSM_Task+0x88>
		  LED_G_ON;
 8004716:	4b0d      	ldr	r3, [pc, #52]	; (800474c <GSM_Task+0xb0>)
 8004718:	2200      	movs	r2, #0
 800471a:	2104      	movs	r1, #4
 800471c:	0018      	movs	r0, r3
 800471e:	f000 fff1 	bl	8005704 <HAL_GPIO_WritePin>
 8004722:	e7ef      	b.n	8004704 <GSM_Task+0x68>
	  else
		 p_w & 0x10?LED_G_ON:LED_G_OFF;
 8004724:	4b0e      	ldr	r3, [pc, #56]	; (8004760 <GSM_Task+0xc4>)
 8004726:	781b      	ldrb	r3, [r3, #0]
 8004728:	001a      	movs	r2, r3
 800472a:	2310      	movs	r3, #16
 800472c:	4013      	ands	r3, r2
 800472e:	d006      	beq.n	800473e <GSM_Task+0xa2>
 8004730:	4b06      	ldr	r3, [pc, #24]	; (800474c <GSM_Task+0xb0>)
 8004732:	2200      	movs	r2, #0
 8004734:	2104      	movs	r1, #4
 8004736:	0018      	movs	r0, r3
 8004738:	f000 ffe4 	bl	8005704 <HAL_GPIO_WritePin>
 800473c:	e7e2      	b.n	8004704 <GSM_Task+0x68>
 800473e:	4b03      	ldr	r3, [pc, #12]	; (800474c <GSM_Task+0xb0>)
 8004740:	2201      	movs	r2, #1
 8004742:	2104      	movs	r1, #4
 8004744:	0018      	movs	r0, r3
 8004746:	f000 ffdd 	bl	8005704 <HAL_GPIO_WritePin>
	  gsm();
 800474a:	e7db      	b.n	8004704 <GSM_Task+0x68>
 800474c:	50000400 	.word	0x50000400
 8004750:	50000800 	.word	0x50000800
 8004754:	20000e88 	.word	0x20000e88
 8004758:	200005ec 	.word	0x200005ec
 800475c:	20000501 	.word	0x20000501
 8004760:	200004d0 	.word	0x200004d0

08004764 <platform_write>:
}

/* USER CODE BEGIN Header_LIS_Task */
static int32_t platform_write(void *handle, uint8_t reg, uint8_t *bufp,
                              uint16_t len)
{
 8004764:	b5b0      	push	{r4, r5, r7, lr}
 8004766:	b088      	sub	sp, #32
 8004768:	af04      	add	r7, sp, #16
 800476a:	60f8      	str	r0, [r7, #12]
 800476c:	0008      	movs	r0, r1
 800476e:	607a      	str	r2, [r7, #4]
 8004770:	0019      	movs	r1, r3
 8004772:	240b      	movs	r4, #11
 8004774:	193b      	adds	r3, r7, r4
 8004776:	1c02      	adds	r2, r0, #0
 8004778:	701a      	strb	r2, [r3, #0]
 800477a:	2508      	movs	r5, #8
 800477c:	197b      	adds	r3, r7, r5
 800477e:	1c0a      	adds	r2, r1, #0
 8004780:	801a      	strh	r2, [r3, #0]
  if (handle == &hi2c2)
 8004782:	68fa      	ldr	r2, [r7, #12]
 8004784:	4b0f      	ldr	r3, [pc, #60]	; (80047c4 <platform_write+0x60>)
 8004786:	429a      	cmp	r2, r3
 8004788:	d116      	bne.n	80047b8 <platform_write+0x54>
  {
    /* Write multiple command */
    reg |= 0x80;
 800478a:	193b      	adds	r3, r7, r4
 800478c:	193a      	adds	r2, r7, r4
 800478e:	7812      	ldrb	r2, [r2, #0]
 8004790:	2180      	movs	r1, #128	; 0x80
 8004792:	4249      	negs	r1, r1
 8004794:	430a      	orrs	r2, r1
 8004796:	701a      	strb	r2, [r3, #0]
    HAL_I2C_Mem_Write(handle, LIS2DH12_I2C_ADD_H, reg,
 8004798:	193b      	adds	r3, r7, r4
 800479a:	781b      	ldrb	r3, [r3, #0]
 800479c:	b29a      	uxth	r2, r3
 800479e:	68f8      	ldr	r0, [r7, #12]
 80047a0:	23fa      	movs	r3, #250	; 0xfa
 80047a2:	009b      	lsls	r3, r3, #2
 80047a4:	9302      	str	r3, [sp, #8]
 80047a6:	197b      	adds	r3, r7, r5
 80047a8:	881b      	ldrh	r3, [r3, #0]
 80047aa:	9301      	str	r3, [sp, #4]
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	9300      	str	r3, [sp, #0]
 80047b0:	2301      	movs	r3, #1
 80047b2:	2133      	movs	r1, #51	; 0x33
 80047b4:	f001 f85a 	bl	800586c <HAL_I2C_Mem_Write>
                      I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
  }
  return 0;
 80047b8:	2300      	movs	r3, #0
}
 80047ba:	0018      	movs	r0, r3
 80047bc:	46bd      	mov	sp, r7
 80047be:	b004      	add	sp, #16
 80047c0:	bdb0      	pop	{r4, r5, r7, pc}
 80047c2:	46c0      	nop			; (mov r8, r8)
 80047c4:	20000504 	.word	0x20000504

080047c8 <platform_read>:


static int32_t platform_read(void *handle, uint8_t reg, uint8_t *bufp,
                             uint16_t len)
{
 80047c8:	b5b0      	push	{r4, r5, r7, lr}
 80047ca:	b088      	sub	sp, #32
 80047cc:	af04      	add	r7, sp, #16
 80047ce:	60f8      	str	r0, [r7, #12]
 80047d0:	0008      	movs	r0, r1
 80047d2:	607a      	str	r2, [r7, #4]
 80047d4:	0019      	movs	r1, r3
 80047d6:	240b      	movs	r4, #11
 80047d8:	193b      	adds	r3, r7, r4
 80047da:	1c02      	adds	r2, r0, #0
 80047dc:	701a      	strb	r2, [r3, #0]
 80047de:	2508      	movs	r5, #8
 80047e0:	197b      	adds	r3, r7, r5
 80047e2:	1c0a      	adds	r2, r1, #0
 80047e4:	801a      	strh	r2, [r3, #0]
  if (handle == &hi2c2)
 80047e6:	68fa      	ldr	r2, [r7, #12]
 80047e8:	4b0f      	ldr	r3, [pc, #60]	; (8004828 <platform_read+0x60>)
 80047ea:	429a      	cmp	r2, r3
 80047ec:	d116      	bne.n	800481c <platform_read+0x54>
  {
    /* Read multiple command */
    reg |= 0x80;
 80047ee:	193b      	adds	r3, r7, r4
 80047f0:	193a      	adds	r2, r7, r4
 80047f2:	7812      	ldrb	r2, [r2, #0]
 80047f4:	2180      	movs	r1, #128	; 0x80
 80047f6:	4249      	negs	r1, r1
 80047f8:	430a      	orrs	r2, r1
 80047fa:	701a      	strb	r2, [r3, #0]
    HAL_I2C_Mem_Read(handle, LIS2DH12_I2C_ADD_H, reg,
 80047fc:	193b      	adds	r3, r7, r4
 80047fe:	781b      	ldrb	r3, [r3, #0]
 8004800:	b29a      	uxth	r2, r3
 8004802:	68f8      	ldr	r0, [r7, #12]
 8004804:	23fa      	movs	r3, #250	; 0xfa
 8004806:	009b      	lsls	r3, r3, #2
 8004808:	9302      	str	r3, [sp, #8]
 800480a:	197b      	adds	r3, r7, r5
 800480c:	881b      	ldrh	r3, [r3, #0]
 800480e:	9301      	str	r3, [sp, #4]
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	9300      	str	r3, [sp, #0]
 8004814:	2301      	movs	r3, #1
 8004816:	2133      	movs	r1, #51	; 0x33
 8004818:	f001 f956 	bl	8005ac8 <HAL_I2C_Mem_Read>
                     I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
  }
  return 0;
 800481c:	2300      	movs	r3, #0
}
 800481e:	0018      	movs	r0, r3
 8004820:	46bd      	mov	sp, r7
 8004822:	b004      	add	sp, #16
 8004824:	bdb0      	pop	{r4, r5, r7, pc}
 8004826:	46c0      	nop			; (mov r8, r8)
 8004828:	20000504 	.word	0x20000504

0800482c <LIS_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_LIS_Task */
void LIS_Task(void *argument)
{
 800482c:	b5b0      	push	{r4, r5, r7, lr}
 800482e:	b088      	sub	sp, #32
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN LIS_Task */
	  lis2dh12_ctx_t dev_ctx;

	  dev_ctx.write_reg = platform_write;
 8004834:	2110      	movs	r1, #16
 8004836:	187b      	adds	r3, r7, r1
 8004838:	4a67      	ldr	r2, [pc, #412]	; (80049d8 <LIS_Task+0x1ac>)
 800483a:	601a      	str	r2, [r3, #0]
	  dev_ctx.read_reg = platform_read;
 800483c:	187b      	adds	r3, r7, r1
 800483e:	4a67      	ldr	r2, [pc, #412]	; (80049dc <LIS_Task+0x1b0>)
 8004840:	605a      	str	r2, [r3, #4]
	  dev_ctx.handle = &hi2c2;
 8004842:	187b      	adds	r3, r7, r1
 8004844:	4a66      	ldr	r2, [pc, #408]	; (80049e0 <LIS_Task+0x1b4>)
 8004846:	609a      	str	r2, [r3, #8]

	  uint8_t state=0;
 8004848:	231f      	movs	r3, #31
 800484a:	18fb      	adds	r3, r7, r3
 800484c:	2200      	movs	r2, #0
 800484e:	701a      	strb	r2, [r3, #0]
	  HAL_GPIO_WritePin(GPIOD, ACC_EN_Pin, GPIO_PIN_SET);
 8004850:	2380      	movs	r3, #128	; 0x80
 8004852:	009b      	lsls	r3, r3, #2
 8004854:	4863      	ldr	r0, [pc, #396]	; (80049e4 <LIS_Task+0x1b8>)
 8004856:	2201      	movs	r2, #1
 8004858:	0019      	movs	r1, r3
 800485a:	f000 ff53 	bl	8005704 <HAL_GPIO_WritePin>
	   *  Check device ID
	   */
	  /* Infinite loop */
	  for(;;)
	  {
		  vTaskDelay(50);
 800485e:	2032      	movs	r0, #50	; 0x32
 8004860:	f006 fb46 	bl	800aef0 <vTaskDelay>
	  switch (state)
 8004864:	231f      	movs	r3, #31
 8004866:	18fb      	adds	r3, r7, r3
 8004868:	781b      	ldrb	r3, [r3, #0]
 800486a:	2b02      	cmp	r3, #2
 800486c:	d035      	beq.n	80048da <LIS_Task+0xae>
 800486e:	dd00      	ble.n	8004872 <LIS_Task+0x46>
 8004870:	e08b      	b.n	800498a <LIS_Task+0x15e>
 8004872:	2b00      	cmp	r3, #0
 8004874:	d002      	beq.n	800487c <LIS_Task+0x50>
 8004876:	2b01      	cmp	r3, #1
 8004878:	d010      	beq.n	800489c <LIS_Task+0x70>
 800487a:	e086      	b.n	800498a <LIS_Task+0x15e>
	  {
	  case 0:
		  lis2dh12_device_id_get(&dev_ctx, &whoamI);
 800487c:	4a5a      	ldr	r2, [pc, #360]	; (80049e8 <LIS_Task+0x1bc>)
 800487e:	2310      	movs	r3, #16
 8004880:	18fb      	adds	r3, r7, r3
 8004882:	0011      	movs	r1, r2
 8004884:	0018      	movs	r0, r3
 8004886:	f7ff fbe0 	bl	800404a <lis2dh12_device_id_get>
		  if (whoamI == LIS2DH12_ID)
 800488a:	4b57      	ldr	r3, [pc, #348]	; (80049e8 <LIS_Task+0x1bc>)
 800488c:	781b      	ldrb	r3, [r3, #0]
 800488e:	2b33      	cmp	r3, #51	; 0x33
 8004890:	d178      	bne.n	8004984 <LIS_Task+0x158>
			  state = 1;
 8004892:	231f      	movs	r3, #31
 8004894:	18fb      	adds	r3, r7, r3
 8004896:	2201      	movs	r2, #1
 8004898:	701a      	strb	r2, [r3, #0]
		  break;
 800489a:	e073      	b.n	8004984 <LIS_Task+0x158>
	  case 1:

		/*
		 *  Enable Block Data Update
		 */
		lis2dh12_block_data_update_set(&dev_ctx, PROPERTY_ENABLE);
 800489c:	2410      	movs	r4, #16
 800489e:	193b      	adds	r3, r7, r4
 80048a0:	2101      	movs	r1, #1
 80048a2:	0018      	movs	r0, r3
 80048a4:	f7ff fb76 	bl	8003f94 <lis2dh12_block_data_update_set>

		/*
		 * Set Output Data Rate to 100Hz
		 */
		lis2dh12_data_rate_set(&dev_ctx, LIS2DH12_ODR_100Hz);
 80048a8:	193b      	adds	r3, r7, r4
 80048aa:	2105      	movs	r1, #5
 80048ac:	0018      	movs	r0, r3
 80048ae:	f7ff fb13 	bl	8003ed8 <lis2dh12_data_rate_set>

		/*
		 * Set full scale to 2g
		 */
		lis2dh12_full_scale_set(&dev_ctx, LIS2DH12_2g);
 80048b2:	193b      	adds	r3, r7, r4
 80048b4:	2100      	movs	r1, #0
 80048b6:	0018      	movs	r0, r3
 80048b8:	f7ff fb3c 	bl	8003f34 <lis2dh12_full_scale_set>

		/*
		 * Enable temperature sensor
		 */
		lis2dh12_temperature_meas_set(&dev_ctx, LIS2DH12_TEMP_ENABLE);
 80048bc:	193b      	adds	r3, r7, r4
 80048be:	2103      	movs	r1, #3
 80048c0:	0018      	movs	r0, r3
 80048c2:	f7ff fa72 	bl	8003daa <lis2dh12_temperature_meas_set>

		/*
		 * Set device in continuous mode with 12 bit resol.
		 */
		lis2dh12_operating_mode_set(&dev_ctx, LIS2DH12_HR_12bit);
 80048c6:	193b      	adds	r3, r7, r4
 80048c8:	2100      	movs	r1, #0
 80048ca:	0018      	movs	r0, r3
 80048cc:	f7ff fa9b 	bl	8003e06 <lis2dh12_operating_mode_set>
	    state = 2;
 80048d0:	231f      	movs	r3, #31
 80048d2:	18fb      	adds	r3, r7, r3
 80048d4:	2202      	movs	r2, #2
 80048d6:	701a      	strb	r2, [r3, #0]
	    break;
 80048d8:	e057      	b.n	800498a <LIS_Task+0x15e>
		  lis2dh12_reg_t reg;

		  /*
		   * Read output only if new value available
		   */
		  lis2dh12_xl_data_ready_get(&dev_ctx, &reg.byte);
 80048da:	240c      	movs	r4, #12
 80048dc:	193a      	adds	r2, r7, r4
 80048de:	2510      	movs	r5, #16
 80048e0:	197b      	adds	r3, r7, r5
 80048e2:	0011      	movs	r1, r2
 80048e4:	0018      	movs	r0, r3
 80048e6:	f7ff fb83 	bl	8003ff0 <lis2dh12_xl_data_ready_get>
		  if (reg.byte)
 80048ea:	193b      	adds	r3, r7, r4
 80048ec:	781b      	ldrb	r3, [r3, #0]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d026      	beq.n	8004940 <LIS_Task+0x114>
		  {
			/* Read accelerometer data */
			memset(data_raw_acceleration.u8bit, 0x00, 3*sizeof(int16_t));
 80048f2:	4b3e      	ldr	r3, [pc, #248]	; (80049ec <LIS_Task+0x1c0>)
 80048f4:	2206      	movs	r2, #6
 80048f6:	2100      	movs	r1, #0
 80048f8:	0018      	movs	r0, r3
 80048fa:	f008 fd1f 	bl	800d33c <memset>
			lis2dh12_acceleration_raw_get(&dev_ctx, data_raw_acceleration.u8bit);
 80048fe:	4a3b      	ldr	r2, [pc, #236]	; (80049ec <LIS_Task+0x1c0>)
 8004900:	197b      	adds	r3, r7, r5
 8004902:	0011      	movs	r1, r2
 8004904:	0018      	movs	r0, r3
 8004906:	f7ff fb8e 	bl	8004026 <lis2dh12_acceleration_raw_get>
			acceleration_mg[0] = lis2dh12_from_fs2_hr_to_mg(data_raw_acceleration.i16bit[0]);
 800490a:	4b38      	ldr	r3, [pc, #224]	; (80049ec <LIS_Task+0x1c0>)
 800490c:	2200      	movs	r2, #0
 800490e:	5e9b      	ldrsh	r3, [r3, r2]
 8004910:	0018      	movs	r0, r3
 8004912:	f7ff f9e1 	bl	8003cd8 <lis2dh12_from_fs2_hr_to_mg>
 8004916:	1c02      	adds	r2, r0, #0
 8004918:	4b35      	ldr	r3, [pc, #212]	; (80049f0 <LIS_Task+0x1c4>)
 800491a:	601a      	str	r2, [r3, #0]
			acceleration_mg[1] = lis2dh12_from_fs2_hr_to_mg(data_raw_acceleration.i16bit[1]);
 800491c:	4b33      	ldr	r3, [pc, #204]	; (80049ec <LIS_Task+0x1c0>)
 800491e:	2202      	movs	r2, #2
 8004920:	5e9b      	ldrsh	r3, [r3, r2]
 8004922:	0018      	movs	r0, r3
 8004924:	f7ff f9d8 	bl	8003cd8 <lis2dh12_from_fs2_hr_to_mg>
 8004928:	1c02      	adds	r2, r0, #0
 800492a:	4b31      	ldr	r3, [pc, #196]	; (80049f0 <LIS_Task+0x1c4>)
 800492c:	605a      	str	r2, [r3, #4]
			acceleration_mg[2] = lis2dh12_from_fs2_hr_to_mg(data_raw_acceleration.i16bit[2]);
 800492e:	4b2f      	ldr	r3, [pc, #188]	; (80049ec <LIS_Task+0x1c0>)
 8004930:	2204      	movs	r2, #4
 8004932:	5e9b      	ldrsh	r3, [r3, r2]
 8004934:	0018      	movs	r0, r3
 8004936:	f7ff f9cf 	bl	8003cd8 <lis2dh12_from_fs2_hr_to_mg>
 800493a:	1c02      	adds	r2, r0, #0
 800493c:	4b2c      	ldr	r3, [pc, #176]	; (80049f0 <LIS_Task+0x1c4>)
 800493e:	609a      	str	r2, [r3, #8]

		  }

		  lis2dh12_temp_data_ready_get(&dev_ctx, &reg.byte);
 8004940:	240c      	movs	r4, #12
 8004942:	193a      	adds	r2, r7, r4
 8004944:	2510      	movs	r5, #16
 8004946:	197b      	adds	r3, r7, r5
 8004948:	0011      	movs	r1, r2
 800494a:	0018      	movs	r0, r3
 800494c:	f7ff fa00 	bl	8003d50 <lis2dh12_temp_data_ready_get>
		  if (reg.byte)
 8004950:	193b      	adds	r3, r7, r4
 8004952:	781b      	ldrb	r3, [r3, #0]
 8004954:	2b00      	cmp	r3, #0
 8004956:	d017      	beq.n	8004988 <LIS_Task+0x15c>
		  {
			/* Read temperature data */
			memset(data_raw_temperature.u8bit, 0x00, sizeof(int16_t));
 8004958:	4b26      	ldr	r3, [pc, #152]	; (80049f4 <LIS_Task+0x1c8>)
 800495a:	2202      	movs	r2, #2
 800495c:	2100      	movs	r1, #0
 800495e:	0018      	movs	r0, r3
 8004960:	f008 fcec 	bl	800d33c <memset>
			lis2dh12_temperature_raw_get(&dev_ctx, data_raw_temperature.u8bit);
 8004964:	4a23      	ldr	r2, [pc, #140]	; (80049f4 <LIS_Task+0x1c8>)
 8004966:	197b      	adds	r3, r7, r5
 8004968:	0011      	movs	r1, r2
 800496a:	0018      	movs	r0, r3
 800496c:	f7ff fa0b 	bl	8003d86 <lis2dh12_temperature_raw_get>
			temperature_degC =
			  lis2dh12_from_lsb_hr_to_celsius(data_raw_temperature.i16bit);
 8004970:	4b20      	ldr	r3, [pc, #128]	; (80049f4 <LIS_Task+0x1c8>)
 8004972:	2200      	movs	r2, #0
 8004974:	5e9b      	ldrsh	r3, [r3, r2]
 8004976:	0018      	movs	r0, r3
 8004978:	f7ff f9c6 	bl	8003d08 <lis2dh12_from_lsb_hr_to_celsius>
 800497c:	1c02      	adds	r2, r0, #0
			temperature_degC =
 800497e:	4b1e      	ldr	r3, [pc, #120]	; (80049f8 <LIS_Task+0x1cc>)
 8004980:	601a      	str	r2, [r3, #0]

		  }

		break;
 8004982:	e001      	b.n	8004988 <LIS_Task+0x15c>
		  break;
 8004984:	46c0      	nop			; (mov r8, r8)
 8004986:	e000      	b.n	800498a <LIS_Task+0x15e>
		break;
 8004988:	46c0      	nop			; (mov r8, r8)
	  }
	  if (acceleration_mg[0]*acceleration_mg[1]*acceleration_mg[2]<0 )
 800498a:	4b19      	ldr	r3, [pc, #100]	; (80049f0 <LIS_Task+0x1c4>)
 800498c:	681a      	ldr	r2, [r3, #0]
 800498e:	4b18      	ldr	r3, [pc, #96]	; (80049f0 <LIS_Task+0x1c4>)
 8004990:	685b      	ldr	r3, [r3, #4]
 8004992:	1c19      	adds	r1, r3, #0
 8004994:	1c10      	adds	r0, r2, #0
 8004996:	f7fc fa91 	bl	8000ebc <__aeabi_fmul>
 800499a:	1c03      	adds	r3, r0, #0
 800499c:	1c1a      	adds	r2, r3, #0
 800499e:	4b14      	ldr	r3, [pc, #80]	; (80049f0 <LIS_Task+0x1c4>)
 80049a0:	689b      	ldr	r3, [r3, #8]
 80049a2:	1c19      	adds	r1, r3, #0
 80049a4:	1c10      	adds	r0, r2, #0
 80049a6:	f7fc fa89 	bl	8000ebc <__aeabi_fmul>
 80049aa:	1c03      	adds	r3, r0, #0
 80049ac:	2100      	movs	r1, #0
 80049ae:	1c18      	adds	r0, r3, #0
 80049b0:	f7fb fd96 	bl	80004e0 <__aeabi_fcmplt>
 80049b4:	1e03      	subs	r3, r0, #0
 80049b6:	d007      	beq.n	80049c8 <LIS_Task+0x19c>
	    LED_B_ON;
 80049b8:	2380      	movs	r3, #128	; 0x80
 80049ba:	015b      	lsls	r3, r3, #5
 80049bc:	480f      	ldr	r0, [pc, #60]	; (80049fc <LIS_Task+0x1d0>)
 80049be:	2200      	movs	r2, #0
 80049c0:	0019      	movs	r1, r3
 80049c2:	f000 fe9f 	bl	8005704 <HAL_GPIO_WritePin>
 80049c6:	e74a      	b.n	800485e <LIS_Task+0x32>
	  else
	    LED_B_OFF;
 80049c8:	2380      	movs	r3, #128	; 0x80
 80049ca:	015b      	lsls	r3, r3, #5
 80049cc:	480b      	ldr	r0, [pc, #44]	; (80049fc <LIS_Task+0x1d0>)
 80049ce:	2201      	movs	r2, #1
 80049d0:	0019      	movs	r1, r3
 80049d2:	f000 fe97 	bl	8005704 <HAL_GPIO_WritePin>
		  vTaskDelay(50);
 80049d6:	e742      	b.n	800485e <LIS_Task+0x32>
 80049d8:	08004765 	.word	0x08004765
 80049dc:	080047c9 	.word	0x080047c9
 80049e0:	20000504 	.word	0x20000504
 80049e4:	50000c00 	.word	0x50000c00
 80049e8:	20000ea8 	.word	0x20000ea8
 80049ec:	20000e8c 	.word	0x20000e8c
 80049f0:	20000e98 	.word	0x20000e98
 80049f4:	20000e94 	.word	0x20000e94
 80049f8:	20000ea4 	.word	0x20000ea4
 80049fc:	50000400 	.word	0x50000400

08004a00 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	b082      	sub	sp, #8
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	4a04      	ldr	r2, [pc, #16]	; (8004a20 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d101      	bne.n	8004a16 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8004a12:	f000 fb63 	bl	80050dc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8004a16:	46c0      	nop			; (mov r8, r8)
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	b002      	add	sp, #8
 8004a1c:	bd80      	pop	{r7, pc}
 8004a1e:	46c0      	nop			; (mov r8, r8)
 8004a20:	40012c00 	.word	0x40012c00

08004a24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004a24:	b580      	push	{r7, lr}
 8004a26:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004a28:	b672      	cpsid	i
}
 8004a2a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004a2c:	e7fe      	b.n	8004a2c <Error_Handler+0x8>
	...

08004a30 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b082      	sub	sp, #8
 8004a34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004a36:	4b15      	ldr	r3, [pc, #84]	; (8004a8c <HAL_MspInit+0x5c>)
 8004a38:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004a3a:	4b14      	ldr	r3, [pc, #80]	; (8004a8c <HAL_MspInit+0x5c>)
 8004a3c:	2101      	movs	r1, #1
 8004a3e:	430a      	orrs	r2, r1
 8004a40:	641a      	str	r2, [r3, #64]	; 0x40
 8004a42:	4b12      	ldr	r3, [pc, #72]	; (8004a8c <HAL_MspInit+0x5c>)
 8004a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a46:	2201      	movs	r2, #1
 8004a48:	4013      	ands	r3, r2
 8004a4a:	607b      	str	r3, [r7, #4]
 8004a4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004a4e:	4b0f      	ldr	r3, [pc, #60]	; (8004a8c <HAL_MspInit+0x5c>)
 8004a50:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004a52:	4b0e      	ldr	r3, [pc, #56]	; (8004a8c <HAL_MspInit+0x5c>)
 8004a54:	2180      	movs	r1, #128	; 0x80
 8004a56:	0549      	lsls	r1, r1, #21
 8004a58:	430a      	orrs	r2, r1
 8004a5a:	63da      	str	r2, [r3, #60]	; 0x3c
 8004a5c:	4b0b      	ldr	r3, [pc, #44]	; (8004a8c <HAL_MspInit+0x5c>)
 8004a5e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004a60:	2380      	movs	r3, #128	; 0x80
 8004a62:	055b      	lsls	r3, r3, #21
 8004a64:	4013      	ands	r3, r2
 8004a66:	603b      	str	r3, [r7, #0]
 8004a68:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 8004a6a:	2302      	movs	r3, #2
 8004a6c:	425b      	negs	r3, r3
 8004a6e:	2200      	movs	r2, #0
 8004a70:	2103      	movs	r1, #3
 8004a72:	0018      	movs	r0, r3
 8004a74:	f000 fbec 	bl	8005250 <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 8004a78:	23c0      	movs	r3, #192	; 0xc0
 8004a7a:	00db      	lsls	r3, r3, #3
 8004a7c:	0018      	movs	r0, r3
 8004a7e:	f000 fb49 	bl	8005114 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004a82:	46c0      	nop			; (mov r8, r8)
 8004a84:	46bd      	mov	sp, r7
 8004a86:	b002      	add	sp, #8
 8004a88:	bd80      	pop	{r7, pc}
 8004a8a:	46c0      	nop			; (mov r8, r8)
 8004a8c:	40021000 	.word	0x40021000

08004a90 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004a90:	b590      	push	{r4, r7, lr}
 8004a92:	b09f      	sub	sp, #124	; 0x7c
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a98:	2364      	movs	r3, #100	; 0x64
 8004a9a:	18fb      	adds	r3, r7, r3
 8004a9c:	0018      	movs	r0, r3
 8004a9e:	2314      	movs	r3, #20
 8004aa0:	001a      	movs	r2, r3
 8004aa2:	2100      	movs	r1, #0
 8004aa4:	f008 fc4a 	bl	800d33c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004aa8:	2418      	movs	r4, #24
 8004aaa:	193b      	adds	r3, r7, r4
 8004aac:	0018      	movs	r0, r3
 8004aae:	234c      	movs	r3, #76	; 0x4c
 8004ab0:	001a      	movs	r2, r3
 8004ab2:	2100      	movs	r1, #0
 8004ab4:	f008 fc42 	bl	800d33c <memset>
  if(hi2c->Instance==I2C2)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	4a35      	ldr	r2, [pc, #212]	; (8004b94 <HAL_I2C_MspInit+0x104>)
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d163      	bne.n	8004b8a <HAL_I2C_MspInit+0xfa>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8004ac2:	193b      	adds	r3, r7, r4
 8004ac4:	2240      	movs	r2, #64	; 0x40
 8004ac6:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8004ac8:	193b      	adds	r3, r7, r4
 8004aca:	2200      	movs	r2, #0
 8004acc:	61da      	str	r2, [r3, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004ace:	193b      	adds	r3, r7, r4
 8004ad0:	0018      	movs	r0, r3
 8004ad2:	f002 fa21 	bl	8006f18 <HAL_RCCEx_PeriphCLKConfig>
 8004ad6:	1e03      	subs	r3, r0, #0
 8004ad8:	d001      	beq.n	8004ade <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8004ada:	f7ff ffa3 	bl	8004a24 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004ade:	4b2e      	ldr	r3, [pc, #184]	; (8004b98 <HAL_I2C_MspInit+0x108>)
 8004ae0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004ae2:	4b2d      	ldr	r3, [pc, #180]	; (8004b98 <HAL_I2C_MspInit+0x108>)
 8004ae4:	2102      	movs	r1, #2
 8004ae6:	430a      	orrs	r2, r1
 8004ae8:	635a      	str	r2, [r3, #52]	; 0x34
 8004aea:	4b2b      	ldr	r3, [pc, #172]	; (8004b98 <HAL_I2C_MspInit+0x108>)
 8004aec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004aee:	2202      	movs	r2, #2
 8004af0:	4013      	ands	r3, r2
 8004af2:	617b      	str	r3, [r7, #20]
 8004af4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004af6:	4b28      	ldr	r3, [pc, #160]	; (8004b98 <HAL_I2C_MspInit+0x108>)
 8004af8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004afa:	4b27      	ldr	r3, [pc, #156]	; (8004b98 <HAL_I2C_MspInit+0x108>)
 8004afc:	2101      	movs	r1, #1
 8004afe:	430a      	orrs	r2, r1
 8004b00:	635a      	str	r2, [r3, #52]	; 0x34
 8004b02:	4b25      	ldr	r3, [pc, #148]	; (8004b98 <HAL_I2C_MspInit+0x108>)
 8004b04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b06:	2201      	movs	r2, #1
 8004b08:	4013      	ands	r3, r2
 8004b0a:	613b      	str	r3, [r7, #16]
 8004b0c:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB14     ------> I2C2_SDA
    PA9     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8004b0e:	2164      	movs	r1, #100	; 0x64
 8004b10:	187b      	adds	r3, r7, r1
 8004b12:	2280      	movs	r2, #128	; 0x80
 8004b14:	01d2      	lsls	r2, r2, #7
 8004b16:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004b18:	000c      	movs	r4, r1
 8004b1a:	193b      	adds	r3, r7, r4
 8004b1c:	2212      	movs	r2, #18
 8004b1e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b20:	193b      	adds	r3, r7, r4
 8004b22:	2200      	movs	r2, #0
 8004b24:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b26:	193b      	adds	r3, r7, r4
 8004b28:	2200      	movs	r2, #0
 8004b2a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 8004b2c:	193b      	adds	r3, r7, r4
 8004b2e:	2206      	movs	r2, #6
 8004b30:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004b32:	193b      	adds	r3, r7, r4
 8004b34:	4a19      	ldr	r2, [pc, #100]	; (8004b9c <HAL_I2C_MspInit+0x10c>)
 8004b36:	0019      	movs	r1, r3
 8004b38:	0010      	movs	r0, r2
 8004b3a:	f000 fc77 	bl	800542c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004b3e:	0021      	movs	r1, r4
 8004b40:	187b      	adds	r3, r7, r1
 8004b42:	2280      	movs	r2, #128	; 0x80
 8004b44:	0092      	lsls	r2, r2, #2
 8004b46:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004b48:	187b      	adds	r3, r7, r1
 8004b4a:	2212      	movs	r2, #18
 8004b4c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b4e:	187b      	adds	r3, r7, r1
 8004b50:	2200      	movs	r2, #0
 8004b52:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b54:	187b      	adds	r3, r7, r1
 8004b56:	2200      	movs	r2, #0
 8004b58:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF8_I2C2;
 8004b5a:	187b      	adds	r3, r7, r1
 8004b5c:	2208      	movs	r2, #8
 8004b5e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004b60:	187a      	adds	r2, r7, r1
 8004b62:	23a0      	movs	r3, #160	; 0xa0
 8004b64:	05db      	lsls	r3, r3, #23
 8004b66:	0011      	movs	r1, r2
 8004b68:	0018      	movs	r0, r3
 8004b6a:	f000 fc5f 	bl	800542c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8004b6e:	4b0a      	ldr	r3, [pc, #40]	; (8004b98 <HAL_I2C_MspInit+0x108>)
 8004b70:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004b72:	4b09      	ldr	r3, [pc, #36]	; (8004b98 <HAL_I2C_MspInit+0x108>)
 8004b74:	2180      	movs	r1, #128	; 0x80
 8004b76:	03c9      	lsls	r1, r1, #15
 8004b78:	430a      	orrs	r2, r1
 8004b7a:	63da      	str	r2, [r3, #60]	; 0x3c
 8004b7c:	4b06      	ldr	r3, [pc, #24]	; (8004b98 <HAL_I2C_MspInit+0x108>)
 8004b7e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004b80:	2380      	movs	r3, #128	; 0x80
 8004b82:	03db      	lsls	r3, r3, #15
 8004b84:	4013      	ands	r3, r2
 8004b86:	60fb      	str	r3, [r7, #12]
 8004b88:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8004b8a:	46c0      	nop			; (mov r8, r8)
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	b01f      	add	sp, #124	; 0x7c
 8004b90:	bd90      	pop	{r4, r7, pc}
 8004b92:	46c0      	nop			; (mov r8, r8)
 8004b94:	40005800 	.word	0x40005800
 8004b98:	40021000 	.word	0x40021000
 8004b9c:	50000400 	.word	0x50000400

08004ba0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004ba0:	b590      	push	{r4, r7, lr}
 8004ba2:	b0a1      	sub	sp, #132	; 0x84
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ba8:	236c      	movs	r3, #108	; 0x6c
 8004baa:	18fb      	adds	r3, r7, r3
 8004bac:	0018      	movs	r0, r3
 8004bae:	2314      	movs	r3, #20
 8004bb0:	001a      	movs	r2, r3
 8004bb2:	2100      	movs	r1, #0
 8004bb4:	f008 fbc2 	bl	800d33c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004bb8:	2420      	movs	r4, #32
 8004bba:	193b      	adds	r3, r7, r4
 8004bbc:	0018      	movs	r0, r3
 8004bbe:	234c      	movs	r3, #76	; 0x4c
 8004bc0:	001a      	movs	r2, r3
 8004bc2:	2100      	movs	r1, #0
 8004bc4:	f008 fbba 	bl	800d33c <memset>
  if(huart->Instance==USART1)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	4a5f      	ldr	r2, [pc, #380]	; (8004d4c <HAL_UART_MspInit+0x1ac>)
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d146      	bne.n	8004c60 <HAL_UART_MspInit+0xc0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8004bd2:	193b      	adds	r3, r7, r4
 8004bd4:	2201      	movs	r2, #1
 8004bd6:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8004bd8:	193b      	adds	r3, r7, r4
 8004bda:	2200      	movs	r2, #0
 8004bdc:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004bde:	193b      	adds	r3, r7, r4
 8004be0:	0018      	movs	r0, r3
 8004be2:	f002 f999 	bl	8006f18 <HAL_RCCEx_PeriphCLKConfig>
 8004be6:	1e03      	subs	r3, r0, #0
 8004be8:	d001      	beq.n	8004bee <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8004bea:	f7ff ff1b 	bl	8004a24 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004bee:	4b58      	ldr	r3, [pc, #352]	; (8004d50 <HAL_UART_MspInit+0x1b0>)
 8004bf0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004bf2:	4b57      	ldr	r3, [pc, #348]	; (8004d50 <HAL_UART_MspInit+0x1b0>)
 8004bf4:	2180      	movs	r1, #128	; 0x80
 8004bf6:	01c9      	lsls	r1, r1, #7
 8004bf8:	430a      	orrs	r2, r1
 8004bfa:	641a      	str	r2, [r3, #64]	; 0x40
 8004bfc:	4b54      	ldr	r3, [pc, #336]	; (8004d50 <HAL_UART_MspInit+0x1b0>)
 8004bfe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004c00:	2380      	movs	r3, #128	; 0x80
 8004c02:	01db      	lsls	r3, r3, #7
 8004c04:	4013      	ands	r3, r2
 8004c06:	61fb      	str	r3, [r7, #28]
 8004c08:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004c0a:	4b51      	ldr	r3, [pc, #324]	; (8004d50 <HAL_UART_MspInit+0x1b0>)
 8004c0c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004c0e:	4b50      	ldr	r3, [pc, #320]	; (8004d50 <HAL_UART_MspInit+0x1b0>)
 8004c10:	2102      	movs	r1, #2
 8004c12:	430a      	orrs	r2, r1
 8004c14:	635a      	str	r2, [r3, #52]	; 0x34
 8004c16:	4b4e      	ldr	r3, [pc, #312]	; (8004d50 <HAL_UART_MspInit+0x1b0>)
 8004c18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c1a:	2202      	movs	r2, #2
 8004c1c:	4013      	ands	r3, r2
 8004c1e:	61bb      	str	r3, [r7, #24]
 8004c20:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004c22:	216c      	movs	r1, #108	; 0x6c
 8004c24:	187b      	adds	r3, r7, r1
 8004c26:	22c0      	movs	r2, #192	; 0xc0
 8004c28:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c2a:	187b      	adds	r3, r7, r1
 8004c2c:	2202      	movs	r2, #2
 8004c2e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c30:	187b      	adds	r3, r7, r1
 8004c32:	2200      	movs	r2, #0
 8004c34:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c36:	187b      	adds	r3, r7, r1
 8004c38:	2200      	movs	r2, #0
 8004c3a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 8004c3c:	187b      	adds	r3, r7, r1
 8004c3e:	2200      	movs	r2, #0
 8004c40:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004c42:	187b      	adds	r3, r7, r1
 8004c44:	4a43      	ldr	r2, [pc, #268]	; (8004d54 <HAL_UART_MspInit+0x1b4>)
 8004c46:	0019      	movs	r1, r3
 8004c48:	0010      	movs	r0, r2
 8004c4a:	f000 fbef 	bl	800542c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 3, 0);
 8004c4e:	2200      	movs	r2, #0
 8004c50:	2103      	movs	r1, #3
 8004c52:	201b      	movs	r0, #27
 8004c54:	f000 fafc 	bl	8005250 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004c58:	201b      	movs	r0, #27
 8004c5a:	f000 fb0e 	bl	800527a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8004c5e:	e070      	b.n	8004d42 <HAL_UART_MspInit+0x1a2>
  else if(huart->Instance==USART3)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	4a3c      	ldr	r2, [pc, #240]	; (8004d58 <HAL_UART_MspInit+0x1b8>)
 8004c66:	4293      	cmp	r3, r2
 8004c68:	d16b      	bne.n	8004d42 <HAL_UART_MspInit+0x1a2>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8004c6a:	2120      	movs	r1, #32
 8004c6c:	187b      	adds	r3, r7, r1
 8004c6e:	2204      	movs	r2, #4
 8004c70:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8004c72:	187b      	adds	r3, r7, r1
 8004c74:	2200      	movs	r2, #0
 8004c76:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004c78:	187b      	adds	r3, r7, r1
 8004c7a:	0018      	movs	r0, r3
 8004c7c:	f002 f94c 	bl	8006f18 <HAL_RCCEx_PeriphCLKConfig>
 8004c80:	1e03      	subs	r3, r0, #0
 8004c82:	d001      	beq.n	8004c88 <HAL_UART_MspInit+0xe8>
      Error_Handler();
 8004c84:	f7ff fece 	bl	8004a24 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8004c88:	4b31      	ldr	r3, [pc, #196]	; (8004d50 <HAL_UART_MspInit+0x1b0>)
 8004c8a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004c8c:	4b30      	ldr	r3, [pc, #192]	; (8004d50 <HAL_UART_MspInit+0x1b0>)
 8004c8e:	2180      	movs	r1, #128	; 0x80
 8004c90:	02c9      	lsls	r1, r1, #11
 8004c92:	430a      	orrs	r2, r1
 8004c94:	63da      	str	r2, [r3, #60]	; 0x3c
 8004c96:	4b2e      	ldr	r3, [pc, #184]	; (8004d50 <HAL_UART_MspInit+0x1b0>)
 8004c98:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004c9a:	2380      	movs	r3, #128	; 0x80
 8004c9c:	02db      	lsls	r3, r3, #11
 8004c9e:	4013      	ands	r3, r2
 8004ca0:	617b      	str	r3, [r7, #20]
 8004ca2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004ca4:	4b2a      	ldr	r3, [pc, #168]	; (8004d50 <HAL_UART_MspInit+0x1b0>)
 8004ca6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004ca8:	4b29      	ldr	r3, [pc, #164]	; (8004d50 <HAL_UART_MspInit+0x1b0>)
 8004caa:	2102      	movs	r1, #2
 8004cac:	430a      	orrs	r2, r1
 8004cae:	635a      	str	r2, [r3, #52]	; 0x34
 8004cb0:	4b27      	ldr	r3, [pc, #156]	; (8004d50 <HAL_UART_MspInit+0x1b0>)
 8004cb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cb4:	2202      	movs	r2, #2
 8004cb6:	4013      	ands	r3, r2
 8004cb8:	613b      	str	r3, [r7, #16]
 8004cba:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004cbc:	4b24      	ldr	r3, [pc, #144]	; (8004d50 <HAL_UART_MspInit+0x1b0>)
 8004cbe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004cc0:	4b23      	ldr	r3, [pc, #140]	; (8004d50 <HAL_UART_MspInit+0x1b0>)
 8004cc2:	2104      	movs	r1, #4
 8004cc4:	430a      	orrs	r2, r1
 8004cc6:	635a      	str	r2, [r3, #52]	; 0x34
 8004cc8:	4b21      	ldr	r3, [pc, #132]	; (8004d50 <HAL_UART_MspInit+0x1b0>)
 8004cca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ccc:	2204      	movs	r2, #4
 8004cce:	4013      	ands	r3, r2
 8004cd0:	60fb      	str	r3, [r7, #12]
 8004cd2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004cd4:	216c      	movs	r1, #108	; 0x6c
 8004cd6:	187b      	adds	r3, r7, r1
 8004cd8:	2280      	movs	r2, #128	; 0x80
 8004cda:	0092      	lsls	r2, r2, #2
 8004cdc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004cde:	000c      	movs	r4, r1
 8004ce0:	193b      	adds	r3, r7, r4
 8004ce2:	2202      	movs	r2, #2
 8004ce4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ce6:	193b      	adds	r3, r7, r4
 8004ce8:	2200      	movs	r2, #0
 8004cea:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004cec:	193b      	adds	r3, r7, r4
 8004cee:	2200      	movs	r2, #0
 8004cf0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 8004cf2:	193b      	adds	r3, r7, r4
 8004cf4:	2204      	movs	r2, #4
 8004cf6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004cf8:	193b      	adds	r3, r7, r4
 8004cfa:	4a16      	ldr	r2, [pc, #88]	; (8004d54 <HAL_UART_MspInit+0x1b4>)
 8004cfc:	0019      	movs	r1, r3
 8004cfe:	0010      	movs	r0, r2
 8004d00:	f000 fb94 	bl	800542c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8004d04:	0021      	movs	r1, r4
 8004d06:	187b      	adds	r3, r7, r1
 8004d08:	2280      	movs	r2, #128	; 0x80
 8004d0a:	00d2      	lsls	r2, r2, #3
 8004d0c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d0e:	187b      	adds	r3, r7, r1
 8004d10:	2202      	movs	r2, #2
 8004d12:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d14:	187b      	adds	r3, r7, r1
 8004d16:	2200      	movs	r2, #0
 8004d18:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004d1a:	187b      	adds	r3, r7, r1
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART3;
 8004d20:	187b      	adds	r3, r7, r1
 8004d22:	2200      	movs	r2, #0
 8004d24:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004d26:	187b      	adds	r3, r7, r1
 8004d28:	4a0c      	ldr	r2, [pc, #48]	; (8004d5c <HAL_UART_MspInit+0x1bc>)
 8004d2a:	0019      	movs	r1, r3
 8004d2c:	0010      	movs	r0, r2
 8004d2e:	f000 fb7d 	bl	800542c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_4_5_6_LPUART1_IRQn, 3, 0);
 8004d32:	2200      	movs	r2, #0
 8004d34:	2103      	movs	r1, #3
 8004d36:	201d      	movs	r0, #29
 8004d38:	f000 fa8a 	bl	8005250 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_4_5_6_LPUART1_IRQn);
 8004d3c:	201d      	movs	r0, #29
 8004d3e:	f000 fa9c 	bl	800527a <HAL_NVIC_EnableIRQ>
}
 8004d42:	46c0      	nop			; (mov r8, r8)
 8004d44:	46bd      	mov	sp, r7
 8004d46:	b021      	add	sp, #132	; 0x84
 8004d48:	bd90      	pop	{r4, r7, pc}
 8004d4a:	46c0      	nop			; (mov r8, r8)
 8004d4c:	40013800 	.word	0x40013800
 8004d50:	40021000 	.word	0x40021000
 8004d54:	50000400 	.word	0x50000400
 8004d58:	40004800 	.word	0x40004800
 8004d5c:	50000800 	.word	0x50000800

08004d60 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004d60:	b5b0      	push	{r4, r5, r7, lr}
 8004d62:	b08c      	sub	sp, #48	; 0x30
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8004d68:	232b      	movs	r3, #43	; 0x2b
 8004d6a:	18fb      	adds	r3, r7, r3
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	701a      	strb	r2, [r3, #0]

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8004d70:	4b38      	ldr	r3, [pc, #224]	; (8004e54 <HAL_InitTick+0xf4>)
 8004d72:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004d74:	4b37      	ldr	r3, [pc, #220]	; (8004e54 <HAL_InitTick+0xf4>)
 8004d76:	2180      	movs	r1, #128	; 0x80
 8004d78:	0109      	lsls	r1, r1, #4
 8004d7a:	430a      	orrs	r2, r1
 8004d7c:	641a      	str	r2, [r3, #64]	; 0x40
 8004d7e:	4b35      	ldr	r3, [pc, #212]	; (8004e54 <HAL_InitTick+0xf4>)
 8004d80:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004d82:	2380      	movs	r3, #128	; 0x80
 8004d84:	011b      	lsls	r3, r3, #4
 8004d86:	4013      	ands	r3, r2
 8004d88:	60bb      	str	r3, [r7, #8]
 8004d8a:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004d8c:	230c      	movs	r3, #12
 8004d8e:	18fa      	adds	r2, r7, r3
 8004d90:	2410      	movs	r4, #16
 8004d92:	193b      	adds	r3, r7, r4
 8004d94:	0011      	movs	r1, r2
 8004d96:	0018      	movs	r0, r3
 8004d98:	f002 f894 	bl	8006ec4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8004d9c:	193b      	adds	r3, r7, r4
 8004d9e:	68db      	ldr	r3, [r3, #12]
 8004da0:	627b      	str	r3, [r7, #36]	; 0x24
  /* Compute TIM1 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8004da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d104      	bne.n	8004db2 <HAL_InitTick+0x52>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8004da8:	f002 f876 	bl	8006e98 <HAL_RCC_GetPCLK1Freq>
 8004dac:	0003      	movs	r3, r0
 8004dae:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004db0:	e004      	b.n	8004dbc <HAL_InitTick+0x5c>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8004db2:	f002 f871 	bl	8006e98 <HAL_RCC_GetPCLK1Freq>
 8004db6:	0003      	movs	r3, r0
 8004db8:	005b      	lsls	r3, r3, #1
 8004dba:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8004dbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dbe:	4926      	ldr	r1, [pc, #152]	; (8004e58 <HAL_InitTick+0xf8>)
 8004dc0:	0018      	movs	r0, r3
 8004dc2:	f7fb f9c7 	bl	8000154 <__udivsi3>
 8004dc6:	0003      	movs	r3, r0
 8004dc8:	3b01      	subs	r3, #1
 8004dca:	623b      	str	r3, [r7, #32]

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8004dcc:	4b23      	ldr	r3, [pc, #140]	; (8004e5c <HAL_InitTick+0xfc>)
 8004dce:	4a24      	ldr	r2, [pc, #144]	; (8004e60 <HAL_InitTick+0x100>)
 8004dd0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8004dd2:	4b22      	ldr	r3, [pc, #136]	; (8004e5c <HAL_InitTick+0xfc>)
 8004dd4:	4a23      	ldr	r2, [pc, #140]	; (8004e64 <HAL_InitTick+0x104>)
 8004dd6:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8004dd8:	4b20      	ldr	r3, [pc, #128]	; (8004e5c <HAL_InitTick+0xfc>)
 8004dda:	6a3a      	ldr	r2, [r7, #32]
 8004ddc:	605a      	str	r2, [r3, #4]
  htim1.Init.ClockDivision = 0;
 8004dde:	4b1f      	ldr	r3, [pc, #124]	; (8004e5c <HAL_InitTick+0xfc>)
 8004de0:	2200      	movs	r2, #0
 8004de2:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004de4:	4b1d      	ldr	r3, [pc, #116]	; (8004e5c <HAL_InitTick+0xfc>)
 8004de6:	2200      	movs	r2, #0
 8004de8:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004dea:	4b1c      	ldr	r3, [pc, #112]	; (8004e5c <HAL_InitTick+0xfc>)
 8004dec:	2200      	movs	r2, #0
 8004dee:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8004df0:	252b      	movs	r5, #43	; 0x2b
 8004df2:	197c      	adds	r4, r7, r5
 8004df4:	4b19      	ldr	r3, [pc, #100]	; (8004e5c <HAL_InitTick+0xfc>)
 8004df6:	0018      	movs	r0, r3
 8004df8:	f002 faca 	bl	8007390 <HAL_TIM_Base_Init>
 8004dfc:	0003      	movs	r3, r0
 8004dfe:	7023      	strb	r3, [r4, #0]
  if (status == HAL_OK)
 8004e00:	197b      	adds	r3, r7, r5
 8004e02:	781b      	ldrb	r3, [r3, #0]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d11e      	bne.n	8004e46 <HAL_InitTick+0xe6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8004e08:	197c      	adds	r4, r7, r5
 8004e0a:	4b14      	ldr	r3, [pc, #80]	; (8004e5c <HAL_InitTick+0xfc>)
 8004e0c:	0018      	movs	r0, r3
 8004e0e:	f002 fb1f 	bl	8007450 <HAL_TIM_Base_Start_IT>
 8004e12:	0003      	movs	r3, r0
 8004e14:	7023      	strb	r3, [r4, #0]
    if (status == HAL_OK)
 8004e16:	197b      	adds	r3, r7, r5
 8004e18:	781b      	ldrb	r3, [r3, #0]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d113      	bne.n	8004e46 <HAL_InitTick+0xe6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 8004e1e:	200d      	movs	r0, #13
 8004e20:	f000 fa2b 	bl	800527a <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2b03      	cmp	r3, #3
 8004e28:	d809      	bhi.n	8004e3e <HAL_InitTick+0xde>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, TickPriority, 0U);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	0019      	movs	r1, r3
 8004e30:	200d      	movs	r0, #13
 8004e32:	f000 fa0d 	bl	8005250 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004e36:	4b0c      	ldr	r3, [pc, #48]	; (8004e68 <HAL_InitTick+0x108>)
 8004e38:	687a      	ldr	r2, [r7, #4]
 8004e3a:	601a      	str	r2, [r3, #0]
 8004e3c:	e003      	b.n	8004e46 <HAL_InitTick+0xe6>
      }
      else
      {
        status = HAL_ERROR;
 8004e3e:	232b      	movs	r3, #43	; 0x2b
 8004e40:	18fb      	adds	r3, r7, r3
 8004e42:	2201      	movs	r2, #1
 8004e44:	701a      	strb	r2, [r3, #0]
      }
    }
  }

 /* Return function status */
  return status;
 8004e46:	232b      	movs	r3, #43	; 0x2b
 8004e48:	18fb      	adds	r3, r7, r3
 8004e4a:	781b      	ldrb	r3, [r3, #0]
}
 8004e4c:	0018      	movs	r0, r3
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	b00c      	add	sp, #48	; 0x30
 8004e52:	bdb0      	pop	{r4, r5, r7, pc}
 8004e54:	40021000 	.word	0x40021000
 8004e58:	000f4240 	.word	0x000f4240
 8004e5c:	20000eac 	.word	0x20000eac
 8004e60:	40012c00 	.word	0x40012c00
 8004e64:	000003e7 	.word	0x000003e7
 8004e68:	20000004 	.word	0x20000004

08004e6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004e70:	e7fe      	b.n	8004e70 <NMI_Handler+0x4>

08004e72 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004e72:	b580      	push	{r7, lr}
 8004e74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004e76:	e7fe      	b.n	8004e76 <HardFault_Handler+0x4>

08004e78 <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004e7c:	4b03      	ldr	r3, [pc, #12]	; (8004e8c <TIM1_BRK_UP_TRG_COM_IRQHandler+0x14>)
 8004e7e:	0018      	movs	r0, r3
 8004e80:	f002 fb48 	bl	8007514 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 8004e84:	46c0      	nop			; (mov r8, r8)
 8004e86:	46bd      	mov	sp, r7
 8004e88:	bd80      	pop	{r7, pc}
 8004e8a:	46c0      	nop			; (mov r8, r8)
 8004e8c:	20000eac 	.word	0x20000eac

08004e90 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004e94:	4b03      	ldr	r3, [pc, #12]	; (8004ea4 <USART1_IRQHandler+0x14>)
 8004e96:	0018      	movs	r0, r3
 8004e98:	f002 fe94 	bl	8007bc4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8004e9c:	46c0      	nop			; (mov r8, r8)
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	bd80      	pop	{r7, pc}
 8004ea2:	46c0      	nop			; (mov r8, r8)
 8004ea4:	20000558 	.word	0x20000558

08004ea8 <USART3_4_5_6_LPUART1_IRQHandler>:

/**
  * @brief This function handles USART3, USART4, USART5, USART6, LPUART1 globlal Interrupts (combined with EXTI 28).
  */
void USART3_4_5_6_LPUART1_IRQHandler(void)
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_4_5_6_LPUART1_IRQn 0 */

  /* USER CODE END USART3_4_5_6_LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8004eac:	4b03      	ldr	r3, [pc, #12]	; (8004ebc <USART3_4_5_6_LPUART1_IRQHandler+0x14>)
 8004eae:	0018      	movs	r0, r3
 8004eb0:	f002 fe88 	bl	8007bc4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_4_5_6_LPUART1_IRQn 1 */

  /* USER CODE END USART3_4_5_6_LPUART1_IRQn 1 */
}
 8004eb4:	46c0      	nop			; (mov r8, r8)
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	bd80      	pop	{r7, pc}
 8004eba:	46c0      	nop			; (mov r8, r8)
 8004ebc:	200005ec 	.word	0x200005ec

08004ec0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	af00      	add	r7, sp, #0
  return 1;
 8004ec4:	2301      	movs	r3, #1
}
 8004ec6:	0018      	movs	r0, r3
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	bd80      	pop	{r7, pc}

08004ecc <_kill>:

int _kill(int pid, int sig)
{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b082      	sub	sp, #8
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
 8004ed4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004ed6:	f008 faf7 	bl	800d4c8 <__errno>
 8004eda:	0003      	movs	r3, r0
 8004edc:	2216      	movs	r2, #22
 8004ede:	601a      	str	r2, [r3, #0]
  return -1;
 8004ee0:	2301      	movs	r3, #1
 8004ee2:	425b      	negs	r3, r3
}
 8004ee4:	0018      	movs	r0, r3
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	b002      	add	sp, #8
 8004eea:	bd80      	pop	{r7, pc}

08004eec <_exit>:

void _exit (int status)
{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	b082      	sub	sp, #8
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004ef4:	2301      	movs	r3, #1
 8004ef6:	425a      	negs	r2, r3
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	0011      	movs	r1, r2
 8004efc:	0018      	movs	r0, r3
 8004efe:	f7ff ffe5 	bl	8004ecc <_kill>
  while (1) {}    /* Make sure we hang here */
 8004f02:	e7fe      	b.n	8004f02 <_exit+0x16>

08004f04 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b086      	sub	sp, #24
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	60f8      	str	r0, [r7, #12]
 8004f0c:	60b9      	str	r1, [r7, #8]
 8004f0e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004f10:	2300      	movs	r3, #0
 8004f12:	617b      	str	r3, [r7, #20]
 8004f14:	e00a      	b.n	8004f2c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004f16:	e000      	b.n	8004f1a <_read+0x16>
 8004f18:	bf00      	nop
 8004f1a:	0001      	movs	r1, r0
 8004f1c:	68bb      	ldr	r3, [r7, #8]
 8004f1e:	1c5a      	adds	r2, r3, #1
 8004f20:	60ba      	str	r2, [r7, #8]
 8004f22:	b2ca      	uxtb	r2, r1
 8004f24:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004f26:	697b      	ldr	r3, [r7, #20]
 8004f28:	3301      	adds	r3, #1
 8004f2a:	617b      	str	r3, [r7, #20]
 8004f2c:	697a      	ldr	r2, [r7, #20]
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	429a      	cmp	r2, r3
 8004f32:	dbf0      	blt.n	8004f16 <_read+0x12>
  }

  return len;
 8004f34:	687b      	ldr	r3, [r7, #4]
}
 8004f36:	0018      	movs	r0, r3
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	b006      	add	sp, #24
 8004f3c:	bd80      	pop	{r7, pc}

08004f3e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004f3e:	b580      	push	{r7, lr}
 8004f40:	b086      	sub	sp, #24
 8004f42:	af00      	add	r7, sp, #0
 8004f44:	60f8      	str	r0, [r7, #12]
 8004f46:	60b9      	str	r1, [r7, #8]
 8004f48:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	617b      	str	r3, [r7, #20]
 8004f4e:	e009      	b.n	8004f64 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8004f50:	68bb      	ldr	r3, [r7, #8]
 8004f52:	1c5a      	adds	r2, r3, #1
 8004f54:	60ba      	str	r2, [r7, #8]
 8004f56:	781b      	ldrb	r3, [r3, #0]
 8004f58:	0018      	movs	r0, r3
 8004f5a:	e000      	b.n	8004f5e <_write+0x20>
 8004f5c:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004f5e:	697b      	ldr	r3, [r7, #20]
 8004f60:	3301      	adds	r3, #1
 8004f62:	617b      	str	r3, [r7, #20]
 8004f64:	697a      	ldr	r2, [r7, #20]
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	429a      	cmp	r2, r3
 8004f6a:	dbf1      	blt.n	8004f50 <_write+0x12>
  }
  return len;
 8004f6c:	687b      	ldr	r3, [r7, #4]
}
 8004f6e:	0018      	movs	r0, r3
 8004f70:	46bd      	mov	sp, r7
 8004f72:	b006      	add	sp, #24
 8004f74:	bd80      	pop	{r7, pc}

08004f76 <_close>:

int _close(int file)
{
 8004f76:	b580      	push	{r7, lr}
 8004f78:	b082      	sub	sp, #8
 8004f7a:	af00      	add	r7, sp, #0
 8004f7c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004f7e:	2301      	movs	r3, #1
 8004f80:	425b      	negs	r3, r3
}
 8004f82:	0018      	movs	r0, r3
 8004f84:	46bd      	mov	sp, r7
 8004f86:	b002      	add	sp, #8
 8004f88:	bd80      	pop	{r7, pc}

08004f8a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004f8a:	b580      	push	{r7, lr}
 8004f8c:	b082      	sub	sp, #8
 8004f8e:	af00      	add	r7, sp, #0
 8004f90:	6078      	str	r0, [r7, #4]
 8004f92:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	2280      	movs	r2, #128	; 0x80
 8004f98:	0192      	lsls	r2, r2, #6
 8004f9a:	605a      	str	r2, [r3, #4]
  return 0;
 8004f9c:	2300      	movs	r3, #0
}
 8004f9e:	0018      	movs	r0, r3
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	b002      	add	sp, #8
 8004fa4:	bd80      	pop	{r7, pc}

08004fa6 <_isatty>:

int _isatty(int file)
{
 8004fa6:	b580      	push	{r7, lr}
 8004fa8:	b082      	sub	sp, #8
 8004faa:	af00      	add	r7, sp, #0
 8004fac:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004fae:	2301      	movs	r3, #1
}
 8004fb0:	0018      	movs	r0, r3
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	b002      	add	sp, #8
 8004fb6:	bd80      	pop	{r7, pc}

08004fb8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b084      	sub	sp, #16
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	60f8      	str	r0, [r7, #12]
 8004fc0:	60b9      	str	r1, [r7, #8]
 8004fc2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004fc4:	2300      	movs	r3, #0
}
 8004fc6:	0018      	movs	r0, r3
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	b004      	add	sp, #16
 8004fcc:	bd80      	pop	{r7, pc}
	...

08004fd0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	b086      	sub	sp, #24
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004fd8:	4a14      	ldr	r2, [pc, #80]	; (800502c <_sbrk+0x5c>)
 8004fda:	4b15      	ldr	r3, [pc, #84]	; (8005030 <_sbrk+0x60>)
 8004fdc:	1ad3      	subs	r3, r2, r3
 8004fde:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004fe0:	697b      	ldr	r3, [r7, #20]
 8004fe2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004fe4:	4b13      	ldr	r3, [pc, #76]	; (8005034 <_sbrk+0x64>)
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d102      	bne.n	8004ff2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004fec:	4b11      	ldr	r3, [pc, #68]	; (8005034 <_sbrk+0x64>)
 8004fee:	4a12      	ldr	r2, [pc, #72]	; (8005038 <_sbrk+0x68>)
 8004ff0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004ff2:	4b10      	ldr	r3, [pc, #64]	; (8005034 <_sbrk+0x64>)
 8004ff4:	681a      	ldr	r2, [r3, #0]
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	18d3      	adds	r3, r2, r3
 8004ffa:	693a      	ldr	r2, [r7, #16]
 8004ffc:	429a      	cmp	r2, r3
 8004ffe:	d207      	bcs.n	8005010 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005000:	f008 fa62 	bl	800d4c8 <__errno>
 8005004:	0003      	movs	r3, r0
 8005006:	220c      	movs	r2, #12
 8005008:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800500a:	2301      	movs	r3, #1
 800500c:	425b      	negs	r3, r3
 800500e:	e009      	b.n	8005024 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005010:	4b08      	ldr	r3, [pc, #32]	; (8005034 <_sbrk+0x64>)
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005016:	4b07      	ldr	r3, [pc, #28]	; (8005034 <_sbrk+0x64>)
 8005018:	681a      	ldr	r2, [r3, #0]
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	18d2      	adds	r2, r2, r3
 800501e:	4b05      	ldr	r3, [pc, #20]	; (8005034 <_sbrk+0x64>)
 8005020:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8005022:	68fb      	ldr	r3, [r7, #12]
}
 8005024:	0018      	movs	r0, r3
 8005026:	46bd      	mov	sp, r7
 8005028:	b006      	add	sp, #24
 800502a:	bd80      	pop	{r7, pc}
 800502c:	20024000 	.word	0x20024000
 8005030:	00000400 	.word	0x00000400
 8005034:	20000ef8 	.word	0x20000ef8
 8005038:	20002a30 	.word	0x20002a30

0800503c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800503c:	b580      	push	{r7, lr}
 800503e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005040:	46c0      	nop			; (mov r8, r8)
 8005042:	46bd      	mov	sp, r7
 8005044:	bd80      	pop	{r7, pc}
	...

08005048 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8005048:	480d      	ldr	r0, [pc, #52]	; (8005080 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800504a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 800504c:	f7ff fff6 	bl	800503c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005050:	480c      	ldr	r0, [pc, #48]	; (8005084 <LoopForever+0x6>)
  ldr r1, =_edata
 8005052:	490d      	ldr	r1, [pc, #52]	; (8005088 <LoopForever+0xa>)
  ldr r2, =_sidata
 8005054:	4a0d      	ldr	r2, [pc, #52]	; (800508c <LoopForever+0xe>)
  movs r3, #0
 8005056:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005058:	e002      	b.n	8005060 <LoopCopyDataInit>

0800505a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800505a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800505c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800505e:	3304      	adds	r3, #4

08005060 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005060:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005062:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005064:	d3f9      	bcc.n	800505a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005066:	4a0a      	ldr	r2, [pc, #40]	; (8005090 <LoopForever+0x12>)
  ldr r4, =_ebss
 8005068:	4c0a      	ldr	r4, [pc, #40]	; (8005094 <LoopForever+0x16>)
  movs r3, #0
 800506a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800506c:	e001      	b.n	8005072 <LoopFillZerobss>

0800506e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800506e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005070:	3204      	adds	r2, #4

08005072 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005072:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005074:	d3fb      	bcc.n	800506e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8005076:	f008 fa2d 	bl	800d4d4 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800507a:	f7fe fff9 	bl	8004070 <main>

0800507e <LoopForever>:

LoopForever:
  b LoopForever
 800507e:	e7fe      	b.n	800507e <LoopForever>
  ldr   r0, =_estack
 8005080:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 8005084:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005088:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 800508c:	0800f9ac 	.word	0x0800f9ac
  ldr r2, =_sbss
 8005090:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8005094:	20002a2c 	.word	0x20002a2c

08005098 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8005098:	e7fe      	b.n	8005098 <ADC1_COMP_IRQHandler>
	...

0800509c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800509c:	b580      	push	{r7, lr}
 800509e:	b082      	sub	sp, #8
 80050a0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80050a2:	1dfb      	adds	r3, r7, #7
 80050a4:	2200      	movs	r2, #0
 80050a6:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80050a8:	4b0b      	ldr	r3, [pc, #44]	; (80050d8 <HAL_Init+0x3c>)
 80050aa:	681a      	ldr	r2, [r3, #0]
 80050ac:	4b0a      	ldr	r3, [pc, #40]	; (80050d8 <HAL_Init+0x3c>)
 80050ae:	2180      	movs	r1, #128	; 0x80
 80050b0:	0049      	lsls	r1, r1, #1
 80050b2:	430a      	orrs	r2, r1
 80050b4:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80050b6:	2003      	movs	r0, #3
 80050b8:	f7ff fe52 	bl	8004d60 <HAL_InitTick>
 80050bc:	1e03      	subs	r3, r0, #0
 80050be:	d003      	beq.n	80050c8 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80050c0:	1dfb      	adds	r3, r7, #7
 80050c2:	2201      	movs	r2, #1
 80050c4:	701a      	strb	r2, [r3, #0]
 80050c6:	e001      	b.n	80050cc <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80050c8:	f7ff fcb2 	bl	8004a30 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80050cc:	1dfb      	adds	r3, r7, #7
 80050ce:	781b      	ldrb	r3, [r3, #0]
}
 80050d0:	0018      	movs	r0, r3
 80050d2:	46bd      	mov	sp, r7
 80050d4:	b002      	add	sp, #8
 80050d6:	bd80      	pop	{r7, pc}
 80050d8:	40022000 	.word	0x40022000

080050dc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80050e0:	4b05      	ldr	r3, [pc, #20]	; (80050f8 <HAL_IncTick+0x1c>)
 80050e2:	781b      	ldrb	r3, [r3, #0]
 80050e4:	001a      	movs	r2, r3
 80050e6:	4b05      	ldr	r3, [pc, #20]	; (80050fc <HAL_IncTick+0x20>)
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	18d2      	adds	r2, r2, r3
 80050ec:	4b03      	ldr	r3, [pc, #12]	; (80050fc <HAL_IncTick+0x20>)
 80050ee:	601a      	str	r2, [r3, #0]
}
 80050f0:	46c0      	nop			; (mov r8, r8)
 80050f2:	46bd      	mov	sp, r7
 80050f4:	bd80      	pop	{r7, pc}
 80050f6:	46c0      	nop			; (mov r8, r8)
 80050f8:	20000008 	.word	0x20000008
 80050fc:	20000efc 	.word	0x20000efc

08005100 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005100:	b580      	push	{r7, lr}
 8005102:	af00      	add	r7, sp, #0
  return uwTick;
 8005104:	4b02      	ldr	r3, [pc, #8]	; (8005110 <HAL_GetTick+0x10>)
 8005106:	681b      	ldr	r3, [r3, #0]
}
 8005108:	0018      	movs	r0, r3
 800510a:	46bd      	mov	sp, r7
 800510c:	bd80      	pop	{r7, pc}
 800510e:	46c0      	nop			; (mov r8, r8)
 8005110:	20000efc 	.word	0x20000efc

08005114 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8005114:	b580      	push	{r7, lr}
 8005116:	b082      	sub	sp, #8
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 800511c:	4b06      	ldr	r3, [pc, #24]	; (8005138 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	4a06      	ldr	r2, [pc, #24]	; (800513c <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8005122:	4013      	ands	r3, r2
 8005124:	0019      	movs	r1, r3
 8005126:	4b04      	ldr	r3, [pc, #16]	; (8005138 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8005128:	687a      	ldr	r2, [r7, #4]
 800512a:	430a      	orrs	r2, r1
 800512c:	601a      	str	r2, [r3, #0]
}
 800512e:	46c0      	nop			; (mov r8, r8)
 8005130:	46bd      	mov	sp, r7
 8005132:	b002      	add	sp, #8
 8005134:	bd80      	pop	{r7, pc}
 8005136:	46c0      	nop			; (mov r8, r8)
 8005138:	40010000 	.word	0x40010000
 800513c:	fffff9ff 	.word	0xfffff9ff

08005140 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005140:	b580      	push	{r7, lr}
 8005142:	b082      	sub	sp, #8
 8005144:	af00      	add	r7, sp, #0
 8005146:	0002      	movs	r2, r0
 8005148:	1dfb      	adds	r3, r7, #7
 800514a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800514c:	1dfb      	adds	r3, r7, #7
 800514e:	781b      	ldrb	r3, [r3, #0]
 8005150:	2b7f      	cmp	r3, #127	; 0x7f
 8005152:	d809      	bhi.n	8005168 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005154:	1dfb      	adds	r3, r7, #7
 8005156:	781b      	ldrb	r3, [r3, #0]
 8005158:	001a      	movs	r2, r3
 800515a:	231f      	movs	r3, #31
 800515c:	401a      	ands	r2, r3
 800515e:	4b04      	ldr	r3, [pc, #16]	; (8005170 <__NVIC_EnableIRQ+0x30>)
 8005160:	2101      	movs	r1, #1
 8005162:	4091      	lsls	r1, r2
 8005164:	000a      	movs	r2, r1
 8005166:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8005168:	46c0      	nop			; (mov r8, r8)
 800516a:	46bd      	mov	sp, r7
 800516c:	b002      	add	sp, #8
 800516e:	bd80      	pop	{r7, pc}
 8005170:	e000e100 	.word	0xe000e100

08005174 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005174:	b590      	push	{r4, r7, lr}
 8005176:	b083      	sub	sp, #12
 8005178:	af00      	add	r7, sp, #0
 800517a:	0002      	movs	r2, r0
 800517c:	6039      	str	r1, [r7, #0]
 800517e:	1dfb      	adds	r3, r7, #7
 8005180:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8005182:	1dfb      	adds	r3, r7, #7
 8005184:	781b      	ldrb	r3, [r3, #0]
 8005186:	2b7f      	cmp	r3, #127	; 0x7f
 8005188:	d828      	bhi.n	80051dc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800518a:	4a2f      	ldr	r2, [pc, #188]	; (8005248 <__NVIC_SetPriority+0xd4>)
 800518c:	1dfb      	adds	r3, r7, #7
 800518e:	781b      	ldrb	r3, [r3, #0]
 8005190:	b25b      	sxtb	r3, r3
 8005192:	089b      	lsrs	r3, r3, #2
 8005194:	33c0      	adds	r3, #192	; 0xc0
 8005196:	009b      	lsls	r3, r3, #2
 8005198:	589b      	ldr	r3, [r3, r2]
 800519a:	1dfa      	adds	r2, r7, #7
 800519c:	7812      	ldrb	r2, [r2, #0]
 800519e:	0011      	movs	r1, r2
 80051a0:	2203      	movs	r2, #3
 80051a2:	400a      	ands	r2, r1
 80051a4:	00d2      	lsls	r2, r2, #3
 80051a6:	21ff      	movs	r1, #255	; 0xff
 80051a8:	4091      	lsls	r1, r2
 80051aa:	000a      	movs	r2, r1
 80051ac:	43d2      	mvns	r2, r2
 80051ae:	401a      	ands	r2, r3
 80051b0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	019b      	lsls	r3, r3, #6
 80051b6:	22ff      	movs	r2, #255	; 0xff
 80051b8:	401a      	ands	r2, r3
 80051ba:	1dfb      	adds	r3, r7, #7
 80051bc:	781b      	ldrb	r3, [r3, #0]
 80051be:	0018      	movs	r0, r3
 80051c0:	2303      	movs	r3, #3
 80051c2:	4003      	ands	r3, r0
 80051c4:	00db      	lsls	r3, r3, #3
 80051c6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80051c8:	481f      	ldr	r0, [pc, #124]	; (8005248 <__NVIC_SetPriority+0xd4>)
 80051ca:	1dfb      	adds	r3, r7, #7
 80051cc:	781b      	ldrb	r3, [r3, #0]
 80051ce:	b25b      	sxtb	r3, r3
 80051d0:	089b      	lsrs	r3, r3, #2
 80051d2:	430a      	orrs	r2, r1
 80051d4:	33c0      	adds	r3, #192	; 0xc0
 80051d6:	009b      	lsls	r3, r3, #2
 80051d8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80051da:	e031      	b.n	8005240 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80051dc:	4a1b      	ldr	r2, [pc, #108]	; (800524c <__NVIC_SetPriority+0xd8>)
 80051de:	1dfb      	adds	r3, r7, #7
 80051e0:	781b      	ldrb	r3, [r3, #0]
 80051e2:	0019      	movs	r1, r3
 80051e4:	230f      	movs	r3, #15
 80051e6:	400b      	ands	r3, r1
 80051e8:	3b08      	subs	r3, #8
 80051ea:	089b      	lsrs	r3, r3, #2
 80051ec:	3306      	adds	r3, #6
 80051ee:	009b      	lsls	r3, r3, #2
 80051f0:	18d3      	adds	r3, r2, r3
 80051f2:	3304      	adds	r3, #4
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	1dfa      	adds	r2, r7, #7
 80051f8:	7812      	ldrb	r2, [r2, #0]
 80051fa:	0011      	movs	r1, r2
 80051fc:	2203      	movs	r2, #3
 80051fe:	400a      	ands	r2, r1
 8005200:	00d2      	lsls	r2, r2, #3
 8005202:	21ff      	movs	r1, #255	; 0xff
 8005204:	4091      	lsls	r1, r2
 8005206:	000a      	movs	r2, r1
 8005208:	43d2      	mvns	r2, r2
 800520a:	401a      	ands	r2, r3
 800520c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	019b      	lsls	r3, r3, #6
 8005212:	22ff      	movs	r2, #255	; 0xff
 8005214:	401a      	ands	r2, r3
 8005216:	1dfb      	adds	r3, r7, #7
 8005218:	781b      	ldrb	r3, [r3, #0]
 800521a:	0018      	movs	r0, r3
 800521c:	2303      	movs	r3, #3
 800521e:	4003      	ands	r3, r0
 8005220:	00db      	lsls	r3, r3, #3
 8005222:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005224:	4809      	ldr	r0, [pc, #36]	; (800524c <__NVIC_SetPriority+0xd8>)
 8005226:	1dfb      	adds	r3, r7, #7
 8005228:	781b      	ldrb	r3, [r3, #0]
 800522a:	001c      	movs	r4, r3
 800522c:	230f      	movs	r3, #15
 800522e:	4023      	ands	r3, r4
 8005230:	3b08      	subs	r3, #8
 8005232:	089b      	lsrs	r3, r3, #2
 8005234:	430a      	orrs	r2, r1
 8005236:	3306      	adds	r3, #6
 8005238:	009b      	lsls	r3, r3, #2
 800523a:	18c3      	adds	r3, r0, r3
 800523c:	3304      	adds	r3, #4
 800523e:	601a      	str	r2, [r3, #0]
}
 8005240:	46c0      	nop			; (mov r8, r8)
 8005242:	46bd      	mov	sp, r7
 8005244:	b003      	add	sp, #12
 8005246:	bd90      	pop	{r4, r7, pc}
 8005248:	e000e100 	.word	0xe000e100
 800524c:	e000ed00 	.word	0xe000ed00

08005250 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005250:	b580      	push	{r7, lr}
 8005252:	b084      	sub	sp, #16
 8005254:	af00      	add	r7, sp, #0
 8005256:	60b9      	str	r1, [r7, #8]
 8005258:	607a      	str	r2, [r7, #4]
 800525a:	210f      	movs	r1, #15
 800525c:	187b      	adds	r3, r7, r1
 800525e:	1c02      	adds	r2, r0, #0
 8005260:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8005262:	68ba      	ldr	r2, [r7, #8]
 8005264:	187b      	adds	r3, r7, r1
 8005266:	781b      	ldrb	r3, [r3, #0]
 8005268:	b25b      	sxtb	r3, r3
 800526a:	0011      	movs	r1, r2
 800526c:	0018      	movs	r0, r3
 800526e:	f7ff ff81 	bl	8005174 <__NVIC_SetPriority>
}
 8005272:	46c0      	nop			; (mov r8, r8)
 8005274:	46bd      	mov	sp, r7
 8005276:	b004      	add	sp, #16
 8005278:	bd80      	pop	{r7, pc}

0800527a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800527a:	b580      	push	{r7, lr}
 800527c:	b082      	sub	sp, #8
 800527e:	af00      	add	r7, sp, #0
 8005280:	0002      	movs	r2, r0
 8005282:	1dfb      	adds	r3, r7, #7
 8005284:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005286:	1dfb      	adds	r3, r7, #7
 8005288:	781b      	ldrb	r3, [r3, #0]
 800528a:	b25b      	sxtb	r3, r3
 800528c:	0018      	movs	r0, r3
 800528e:	f7ff ff57 	bl	8005140 <__NVIC_EnableIRQ>
}
 8005292:	46c0      	nop			; (mov r8, r8)
 8005294:	46bd      	mov	sp, r7
 8005296:	b002      	add	sp, #8
 8005298:	bd80      	pop	{r7, pc}
	...

0800529c <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800529c:	b580      	push	{r7, lr}
 800529e:	b082      	sub	sp, #8
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d101      	bne.n	80052ae <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 80052aa:	2301      	movs	r3, #1
 80052ac:	e04f      	b.n	800534e <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	2225      	movs	r2, #37	; 0x25
 80052b2:	5c9b      	ldrb	r3, [r3, r2]
 80052b4:	b2db      	uxtb	r3, r3
 80052b6:	2b02      	cmp	r3, #2
 80052b8:	d008      	beq.n	80052cc <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	2204      	movs	r2, #4
 80052be:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2224      	movs	r2, #36	; 0x24
 80052c4:	2100      	movs	r1, #0
 80052c6:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80052c8:	2301      	movs	r3, #1
 80052ca:	e040      	b.n	800534e <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	681a      	ldr	r2, [r3, #0]
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	210e      	movs	r1, #14
 80052d8:	438a      	bics	r2, r1
 80052da:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80052e0:	681a      	ldr	r2, [r3, #0]
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80052e6:	491c      	ldr	r1, [pc, #112]	; (8005358 <HAL_DMA_Abort+0xbc>)
 80052e8:	400a      	ands	r2, r1
 80052ea:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	681a      	ldr	r2, [r3, #0]
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	2101      	movs	r1, #1
 80052f8:	438a      	bics	r2, r1
 80052fa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005300:	221c      	movs	r2, #28
 8005302:	401a      	ands	r2, r3
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005308:	2101      	movs	r1, #1
 800530a:	4091      	lsls	r1, r2
 800530c:	000a      	movs	r2, r1
 800530e:	605a      	str	r2, [r3, #4]
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005314:	687a      	ldr	r2, [r7, #4]
 8005316:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005318:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800531e:	2b00      	cmp	r3, #0
 8005320:	d00c      	beq.n	800533c <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005326:	681a      	ldr	r2, [r3, #0]
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800532c:	490a      	ldr	r1, [pc, #40]	; (8005358 <HAL_DMA_Abort+0xbc>)
 800532e:	400a      	ands	r2, r1
 8005330:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005336:	687a      	ldr	r2, [r7, #4]
 8005338:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800533a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2225      	movs	r2, #37	; 0x25
 8005340:	2101      	movs	r1, #1
 8005342:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2224      	movs	r2, #36	; 0x24
 8005348:	2100      	movs	r1, #0
 800534a:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 800534c:	2300      	movs	r3, #0
}
 800534e:	0018      	movs	r0, r3
 8005350:	46bd      	mov	sp, r7
 8005352:	b002      	add	sp, #8
 8005354:	bd80      	pop	{r7, pc}
 8005356:	46c0      	nop			; (mov r8, r8)
 8005358:	fffffeff 	.word	0xfffffeff

0800535c <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800535c:	b580      	push	{r7, lr}
 800535e:	b084      	sub	sp, #16
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005364:	210f      	movs	r1, #15
 8005366:	187b      	adds	r3, r7, r1
 8005368:	2200      	movs	r2, #0
 800536a:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2225      	movs	r2, #37	; 0x25
 8005370:	5c9b      	ldrb	r3, [r3, r2]
 8005372:	b2db      	uxtb	r3, r3
 8005374:	2b02      	cmp	r3, #2
 8005376:	d006      	beq.n	8005386 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2204      	movs	r2, #4
 800537c:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800537e:	187b      	adds	r3, r7, r1
 8005380:	2201      	movs	r2, #1
 8005382:	701a      	strb	r2, [r3, #0]
 8005384:	e048      	b.n	8005418 <HAL_DMA_Abort_IT+0xbc>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	681a      	ldr	r2, [r3, #0]
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	210e      	movs	r1, #14
 8005392:	438a      	bics	r2, r1
 8005394:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	681a      	ldr	r2, [r3, #0]
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	2101      	movs	r1, #1
 80053a2:	438a      	bics	r2, r1
 80053a4:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80053aa:	681a      	ldr	r2, [r3, #0]
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80053b0:	491d      	ldr	r1, [pc, #116]	; (8005428 <HAL_DMA_Abort_IT+0xcc>)
 80053b2:	400a      	ands	r2, r1
 80053b4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053ba:	221c      	movs	r2, #28
 80053bc:	401a      	ands	r2, r3
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053c2:	2101      	movs	r1, #1
 80053c4:	4091      	lsls	r1, r2
 80053c6:	000a      	movs	r2, r1
 80053c8:	605a      	str	r2, [r3, #4]
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053ce:	687a      	ldr	r2, [r7, #4]
 80053d0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80053d2:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d00c      	beq.n	80053f6 <HAL_DMA_Abort_IT+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053e0:	681a      	ldr	r2, [r3, #0]
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053e6:	4910      	ldr	r1, [pc, #64]	; (8005428 <HAL_DMA_Abort_IT+0xcc>)
 80053e8:	400a      	ands	r2, r1
 80053ea:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053f0:	687a      	ldr	r2, [r7, #4]
 80053f2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80053f4:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	2225      	movs	r2, #37	; 0x25
 80053fa:	2101      	movs	r1, #1
 80053fc:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	2224      	movs	r2, #36	; 0x24
 8005402:	2100      	movs	r1, #0
 8005404:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800540a:	2b00      	cmp	r3, #0
 800540c:	d004      	beq.n	8005418 <HAL_DMA_Abort_IT+0xbc>
    {
      hdma->XferAbortCallback(hdma);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005412:	687a      	ldr	r2, [r7, #4]
 8005414:	0010      	movs	r0, r2
 8005416:	4798      	blx	r3
    }
  }
  return status;
 8005418:	230f      	movs	r3, #15
 800541a:	18fb      	adds	r3, r7, r3
 800541c:	781b      	ldrb	r3, [r3, #0]
}
 800541e:	0018      	movs	r0, r3
 8005420:	46bd      	mov	sp, r7
 8005422:	b004      	add	sp, #16
 8005424:	bd80      	pop	{r7, pc}
 8005426:	46c0      	nop			; (mov r8, r8)
 8005428:	fffffeff 	.word	0xfffffeff

0800542c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800542c:	b580      	push	{r7, lr}
 800542e:	b086      	sub	sp, #24
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
 8005434:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005436:	2300      	movs	r3, #0
 8005438:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800543a:	e14d      	b.n	80056d8 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800543c:	683b      	ldr	r3, [r7, #0]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	2101      	movs	r1, #1
 8005442:	697a      	ldr	r2, [r7, #20]
 8005444:	4091      	lsls	r1, r2
 8005446:	000a      	movs	r2, r1
 8005448:	4013      	ands	r3, r2
 800544a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	2b00      	cmp	r3, #0
 8005450:	d100      	bne.n	8005454 <HAL_GPIO_Init+0x28>
 8005452:	e13e      	b.n	80056d2 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005454:	683b      	ldr	r3, [r7, #0]
 8005456:	685b      	ldr	r3, [r3, #4]
 8005458:	2203      	movs	r2, #3
 800545a:	4013      	ands	r3, r2
 800545c:	2b01      	cmp	r3, #1
 800545e:	d005      	beq.n	800546c <HAL_GPIO_Init+0x40>
 8005460:	683b      	ldr	r3, [r7, #0]
 8005462:	685b      	ldr	r3, [r3, #4]
 8005464:	2203      	movs	r2, #3
 8005466:	4013      	ands	r3, r2
 8005468:	2b02      	cmp	r3, #2
 800546a:	d130      	bne.n	80054ce <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	689b      	ldr	r3, [r3, #8]
 8005470:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8005472:	697b      	ldr	r3, [r7, #20]
 8005474:	005b      	lsls	r3, r3, #1
 8005476:	2203      	movs	r2, #3
 8005478:	409a      	lsls	r2, r3
 800547a:	0013      	movs	r3, r2
 800547c:	43da      	mvns	r2, r3
 800547e:	693b      	ldr	r3, [r7, #16]
 8005480:	4013      	ands	r3, r2
 8005482:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	68da      	ldr	r2, [r3, #12]
 8005488:	697b      	ldr	r3, [r7, #20]
 800548a:	005b      	lsls	r3, r3, #1
 800548c:	409a      	lsls	r2, r3
 800548e:	0013      	movs	r3, r2
 8005490:	693a      	ldr	r2, [r7, #16]
 8005492:	4313      	orrs	r3, r2
 8005494:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	693a      	ldr	r2, [r7, #16]
 800549a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	685b      	ldr	r3, [r3, #4]
 80054a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80054a2:	2201      	movs	r2, #1
 80054a4:	697b      	ldr	r3, [r7, #20]
 80054a6:	409a      	lsls	r2, r3
 80054a8:	0013      	movs	r3, r2
 80054aa:	43da      	mvns	r2, r3
 80054ac:	693b      	ldr	r3, [r7, #16]
 80054ae:	4013      	ands	r3, r2
 80054b0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80054b2:	683b      	ldr	r3, [r7, #0]
 80054b4:	685b      	ldr	r3, [r3, #4]
 80054b6:	091b      	lsrs	r3, r3, #4
 80054b8:	2201      	movs	r2, #1
 80054ba:	401a      	ands	r2, r3
 80054bc:	697b      	ldr	r3, [r7, #20]
 80054be:	409a      	lsls	r2, r3
 80054c0:	0013      	movs	r3, r2
 80054c2:	693a      	ldr	r2, [r7, #16]
 80054c4:	4313      	orrs	r3, r2
 80054c6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	693a      	ldr	r2, [r7, #16]
 80054cc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80054ce:	683b      	ldr	r3, [r7, #0]
 80054d0:	685b      	ldr	r3, [r3, #4]
 80054d2:	2203      	movs	r2, #3
 80054d4:	4013      	ands	r3, r2
 80054d6:	2b03      	cmp	r3, #3
 80054d8:	d017      	beq.n	800550a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	68db      	ldr	r3, [r3, #12]
 80054de:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80054e0:	697b      	ldr	r3, [r7, #20]
 80054e2:	005b      	lsls	r3, r3, #1
 80054e4:	2203      	movs	r2, #3
 80054e6:	409a      	lsls	r2, r3
 80054e8:	0013      	movs	r3, r2
 80054ea:	43da      	mvns	r2, r3
 80054ec:	693b      	ldr	r3, [r7, #16]
 80054ee:	4013      	ands	r3, r2
 80054f0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	689a      	ldr	r2, [r3, #8]
 80054f6:	697b      	ldr	r3, [r7, #20]
 80054f8:	005b      	lsls	r3, r3, #1
 80054fa:	409a      	lsls	r2, r3
 80054fc:	0013      	movs	r3, r2
 80054fe:	693a      	ldr	r2, [r7, #16]
 8005500:	4313      	orrs	r3, r2
 8005502:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	693a      	ldr	r2, [r7, #16]
 8005508:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800550a:	683b      	ldr	r3, [r7, #0]
 800550c:	685b      	ldr	r3, [r3, #4]
 800550e:	2203      	movs	r2, #3
 8005510:	4013      	ands	r3, r2
 8005512:	2b02      	cmp	r3, #2
 8005514:	d123      	bne.n	800555e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8005516:	697b      	ldr	r3, [r7, #20]
 8005518:	08da      	lsrs	r2, r3, #3
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	3208      	adds	r2, #8
 800551e:	0092      	lsls	r2, r2, #2
 8005520:	58d3      	ldr	r3, [r2, r3]
 8005522:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005524:	697b      	ldr	r3, [r7, #20]
 8005526:	2207      	movs	r2, #7
 8005528:	4013      	ands	r3, r2
 800552a:	009b      	lsls	r3, r3, #2
 800552c:	220f      	movs	r2, #15
 800552e:	409a      	lsls	r2, r3
 8005530:	0013      	movs	r3, r2
 8005532:	43da      	mvns	r2, r3
 8005534:	693b      	ldr	r3, [r7, #16]
 8005536:	4013      	ands	r3, r2
 8005538:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800553a:	683b      	ldr	r3, [r7, #0]
 800553c:	691a      	ldr	r2, [r3, #16]
 800553e:	697b      	ldr	r3, [r7, #20]
 8005540:	2107      	movs	r1, #7
 8005542:	400b      	ands	r3, r1
 8005544:	009b      	lsls	r3, r3, #2
 8005546:	409a      	lsls	r2, r3
 8005548:	0013      	movs	r3, r2
 800554a:	693a      	ldr	r2, [r7, #16]
 800554c:	4313      	orrs	r3, r2
 800554e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005550:	697b      	ldr	r3, [r7, #20]
 8005552:	08da      	lsrs	r2, r3, #3
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	3208      	adds	r2, #8
 8005558:	0092      	lsls	r2, r2, #2
 800555a:	6939      	ldr	r1, [r7, #16]
 800555c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8005564:	697b      	ldr	r3, [r7, #20]
 8005566:	005b      	lsls	r3, r3, #1
 8005568:	2203      	movs	r2, #3
 800556a:	409a      	lsls	r2, r3
 800556c:	0013      	movs	r3, r2
 800556e:	43da      	mvns	r2, r3
 8005570:	693b      	ldr	r3, [r7, #16]
 8005572:	4013      	ands	r3, r2
 8005574:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8005576:	683b      	ldr	r3, [r7, #0]
 8005578:	685b      	ldr	r3, [r3, #4]
 800557a:	2203      	movs	r2, #3
 800557c:	401a      	ands	r2, r3
 800557e:	697b      	ldr	r3, [r7, #20]
 8005580:	005b      	lsls	r3, r3, #1
 8005582:	409a      	lsls	r2, r3
 8005584:	0013      	movs	r3, r2
 8005586:	693a      	ldr	r2, [r7, #16]
 8005588:	4313      	orrs	r3, r2
 800558a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	693a      	ldr	r2, [r7, #16]
 8005590:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005592:	683b      	ldr	r3, [r7, #0]
 8005594:	685a      	ldr	r2, [r3, #4]
 8005596:	23c0      	movs	r3, #192	; 0xc0
 8005598:	029b      	lsls	r3, r3, #10
 800559a:	4013      	ands	r3, r2
 800559c:	d100      	bne.n	80055a0 <HAL_GPIO_Init+0x174>
 800559e:	e098      	b.n	80056d2 <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80055a0:	4a53      	ldr	r2, [pc, #332]	; (80056f0 <HAL_GPIO_Init+0x2c4>)
 80055a2:	697b      	ldr	r3, [r7, #20]
 80055a4:	089b      	lsrs	r3, r3, #2
 80055a6:	3318      	adds	r3, #24
 80055a8:	009b      	lsls	r3, r3, #2
 80055aa:	589b      	ldr	r3, [r3, r2]
 80055ac:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80055ae:	697b      	ldr	r3, [r7, #20]
 80055b0:	2203      	movs	r2, #3
 80055b2:	4013      	ands	r3, r2
 80055b4:	00db      	lsls	r3, r3, #3
 80055b6:	220f      	movs	r2, #15
 80055b8:	409a      	lsls	r2, r3
 80055ba:	0013      	movs	r3, r2
 80055bc:	43da      	mvns	r2, r3
 80055be:	693b      	ldr	r3, [r7, #16]
 80055c0:	4013      	ands	r3, r2
 80055c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80055c4:	687a      	ldr	r2, [r7, #4]
 80055c6:	23a0      	movs	r3, #160	; 0xa0
 80055c8:	05db      	lsls	r3, r3, #23
 80055ca:	429a      	cmp	r2, r3
 80055cc:	d019      	beq.n	8005602 <HAL_GPIO_Init+0x1d6>
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	4a48      	ldr	r2, [pc, #288]	; (80056f4 <HAL_GPIO_Init+0x2c8>)
 80055d2:	4293      	cmp	r3, r2
 80055d4:	d013      	beq.n	80055fe <HAL_GPIO_Init+0x1d2>
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	4a47      	ldr	r2, [pc, #284]	; (80056f8 <HAL_GPIO_Init+0x2cc>)
 80055da:	4293      	cmp	r3, r2
 80055dc:	d00d      	beq.n	80055fa <HAL_GPIO_Init+0x1ce>
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	4a46      	ldr	r2, [pc, #280]	; (80056fc <HAL_GPIO_Init+0x2d0>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d007      	beq.n	80055f6 <HAL_GPIO_Init+0x1ca>
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	4a45      	ldr	r2, [pc, #276]	; (8005700 <HAL_GPIO_Init+0x2d4>)
 80055ea:	4293      	cmp	r3, r2
 80055ec:	d101      	bne.n	80055f2 <HAL_GPIO_Init+0x1c6>
 80055ee:	2304      	movs	r3, #4
 80055f0:	e008      	b.n	8005604 <HAL_GPIO_Init+0x1d8>
 80055f2:	2305      	movs	r3, #5
 80055f4:	e006      	b.n	8005604 <HAL_GPIO_Init+0x1d8>
 80055f6:	2303      	movs	r3, #3
 80055f8:	e004      	b.n	8005604 <HAL_GPIO_Init+0x1d8>
 80055fa:	2302      	movs	r3, #2
 80055fc:	e002      	b.n	8005604 <HAL_GPIO_Init+0x1d8>
 80055fe:	2301      	movs	r3, #1
 8005600:	e000      	b.n	8005604 <HAL_GPIO_Init+0x1d8>
 8005602:	2300      	movs	r3, #0
 8005604:	697a      	ldr	r2, [r7, #20]
 8005606:	2103      	movs	r1, #3
 8005608:	400a      	ands	r2, r1
 800560a:	00d2      	lsls	r2, r2, #3
 800560c:	4093      	lsls	r3, r2
 800560e:	693a      	ldr	r2, [r7, #16]
 8005610:	4313      	orrs	r3, r2
 8005612:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8005614:	4936      	ldr	r1, [pc, #216]	; (80056f0 <HAL_GPIO_Init+0x2c4>)
 8005616:	697b      	ldr	r3, [r7, #20]
 8005618:	089b      	lsrs	r3, r3, #2
 800561a:	3318      	adds	r3, #24
 800561c:	009b      	lsls	r3, r3, #2
 800561e:	693a      	ldr	r2, [r7, #16]
 8005620:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005622:	4b33      	ldr	r3, [pc, #204]	; (80056f0 <HAL_GPIO_Init+0x2c4>)
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	43da      	mvns	r2, r3
 800562c:	693b      	ldr	r3, [r7, #16]
 800562e:	4013      	ands	r3, r2
 8005630:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005632:	683b      	ldr	r3, [r7, #0]
 8005634:	685a      	ldr	r2, [r3, #4]
 8005636:	2380      	movs	r3, #128	; 0x80
 8005638:	035b      	lsls	r3, r3, #13
 800563a:	4013      	ands	r3, r2
 800563c:	d003      	beq.n	8005646 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 800563e:	693a      	ldr	r2, [r7, #16]
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	4313      	orrs	r3, r2
 8005644:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005646:	4b2a      	ldr	r3, [pc, #168]	; (80056f0 <HAL_GPIO_Init+0x2c4>)
 8005648:	693a      	ldr	r2, [r7, #16]
 800564a:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 800564c:	4b28      	ldr	r3, [pc, #160]	; (80056f0 <HAL_GPIO_Init+0x2c4>)
 800564e:	685b      	ldr	r3, [r3, #4]
 8005650:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	43da      	mvns	r2, r3
 8005656:	693b      	ldr	r3, [r7, #16]
 8005658:	4013      	ands	r3, r2
 800565a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	685a      	ldr	r2, [r3, #4]
 8005660:	2380      	movs	r3, #128	; 0x80
 8005662:	039b      	lsls	r3, r3, #14
 8005664:	4013      	ands	r3, r2
 8005666:	d003      	beq.n	8005670 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8005668:	693a      	ldr	r2, [r7, #16]
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	4313      	orrs	r3, r2
 800566e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005670:	4b1f      	ldr	r3, [pc, #124]	; (80056f0 <HAL_GPIO_Init+0x2c4>)
 8005672:	693a      	ldr	r2, [r7, #16]
 8005674:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8005676:	4a1e      	ldr	r2, [pc, #120]	; (80056f0 <HAL_GPIO_Init+0x2c4>)
 8005678:	2384      	movs	r3, #132	; 0x84
 800567a:	58d3      	ldr	r3, [r2, r3]
 800567c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	43da      	mvns	r2, r3
 8005682:	693b      	ldr	r3, [r7, #16]
 8005684:	4013      	ands	r3, r2
 8005686:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	685a      	ldr	r2, [r3, #4]
 800568c:	2380      	movs	r3, #128	; 0x80
 800568e:	029b      	lsls	r3, r3, #10
 8005690:	4013      	ands	r3, r2
 8005692:	d003      	beq.n	800569c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8005694:	693a      	ldr	r2, [r7, #16]
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	4313      	orrs	r3, r2
 800569a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800569c:	4914      	ldr	r1, [pc, #80]	; (80056f0 <HAL_GPIO_Init+0x2c4>)
 800569e:	2284      	movs	r2, #132	; 0x84
 80056a0:	693b      	ldr	r3, [r7, #16]
 80056a2:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 80056a4:	4a12      	ldr	r2, [pc, #72]	; (80056f0 <HAL_GPIO_Init+0x2c4>)
 80056a6:	2380      	movs	r3, #128	; 0x80
 80056a8:	58d3      	ldr	r3, [r2, r3]
 80056aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	43da      	mvns	r2, r3
 80056b0:	693b      	ldr	r3, [r7, #16]
 80056b2:	4013      	ands	r3, r2
 80056b4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80056b6:	683b      	ldr	r3, [r7, #0]
 80056b8:	685a      	ldr	r2, [r3, #4]
 80056ba:	2380      	movs	r3, #128	; 0x80
 80056bc:	025b      	lsls	r3, r3, #9
 80056be:	4013      	ands	r3, r2
 80056c0:	d003      	beq.n	80056ca <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 80056c2:	693a      	ldr	r2, [r7, #16]
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	4313      	orrs	r3, r2
 80056c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80056ca:	4909      	ldr	r1, [pc, #36]	; (80056f0 <HAL_GPIO_Init+0x2c4>)
 80056cc:	2280      	movs	r2, #128	; 0x80
 80056ce:	693b      	ldr	r3, [r7, #16]
 80056d0:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80056d2:	697b      	ldr	r3, [r7, #20]
 80056d4:	3301      	adds	r3, #1
 80056d6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80056d8:	683b      	ldr	r3, [r7, #0]
 80056da:	681a      	ldr	r2, [r3, #0]
 80056dc:	697b      	ldr	r3, [r7, #20]
 80056de:	40da      	lsrs	r2, r3
 80056e0:	1e13      	subs	r3, r2, #0
 80056e2:	d000      	beq.n	80056e6 <HAL_GPIO_Init+0x2ba>
 80056e4:	e6aa      	b.n	800543c <HAL_GPIO_Init+0x10>
  }
}
 80056e6:	46c0      	nop			; (mov r8, r8)
 80056e8:	46c0      	nop			; (mov r8, r8)
 80056ea:	46bd      	mov	sp, r7
 80056ec:	b006      	add	sp, #24
 80056ee:	bd80      	pop	{r7, pc}
 80056f0:	40021800 	.word	0x40021800
 80056f4:	50000400 	.word	0x50000400
 80056f8:	50000800 	.word	0x50000800
 80056fc:	50000c00 	.word	0x50000c00
 8005700:	50001000 	.word	0x50001000

08005704 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005704:	b580      	push	{r7, lr}
 8005706:	b082      	sub	sp, #8
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
 800570c:	0008      	movs	r0, r1
 800570e:	0011      	movs	r1, r2
 8005710:	1cbb      	adds	r3, r7, #2
 8005712:	1c02      	adds	r2, r0, #0
 8005714:	801a      	strh	r2, [r3, #0]
 8005716:	1c7b      	adds	r3, r7, #1
 8005718:	1c0a      	adds	r2, r1, #0
 800571a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800571c:	1c7b      	adds	r3, r7, #1
 800571e:	781b      	ldrb	r3, [r3, #0]
 8005720:	2b00      	cmp	r3, #0
 8005722:	d004      	beq.n	800572e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005724:	1cbb      	adds	r3, r7, #2
 8005726:	881a      	ldrh	r2, [r3, #0]
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800572c:	e003      	b.n	8005736 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800572e:	1cbb      	adds	r3, r7, #2
 8005730:	881a      	ldrh	r2, [r3, #0]
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005736:	46c0      	nop			; (mov r8, r8)
 8005738:	46bd      	mov	sp, r7
 800573a:	b002      	add	sp, #8
 800573c:	bd80      	pop	{r7, pc}
	...

08005740 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005740:	b580      	push	{r7, lr}
 8005742:	b082      	sub	sp, #8
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2b00      	cmp	r3, #0
 800574c:	d101      	bne.n	8005752 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800574e:	2301      	movs	r3, #1
 8005750:	e082      	b.n	8005858 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	2241      	movs	r2, #65	; 0x41
 8005756:	5c9b      	ldrb	r3, [r3, r2]
 8005758:	b2db      	uxtb	r3, r3
 800575a:	2b00      	cmp	r3, #0
 800575c:	d107      	bne.n	800576e <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	2240      	movs	r2, #64	; 0x40
 8005762:	2100      	movs	r1, #0
 8005764:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	0018      	movs	r0, r3
 800576a:	f7ff f991 	bl	8004a90 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	2241      	movs	r2, #65	; 0x41
 8005772:	2124      	movs	r1, #36	; 0x24
 8005774:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	681a      	ldr	r2, [r3, #0]
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	2101      	movs	r1, #1
 8005782:	438a      	bics	r2, r1
 8005784:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	685a      	ldr	r2, [r3, #4]
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	4934      	ldr	r1, [pc, #208]	; (8005860 <HAL_I2C_Init+0x120>)
 8005790:	400a      	ands	r2, r1
 8005792:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	689a      	ldr	r2, [r3, #8]
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	4931      	ldr	r1, [pc, #196]	; (8005864 <HAL_I2C_Init+0x124>)
 80057a0:	400a      	ands	r2, r1
 80057a2:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	68db      	ldr	r3, [r3, #12]
 80057a8:	2b01      	cmp	r3, #1
 80057aa:	d108      	bne.n	80057be <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	689a      	ldr	r2, [r3, #8]
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	2180      	movs	r1, #128	; 0x80
 80057b6:	0209      	lsls	r1, r1, #8
 80057b8:	430a      	orrs	r2, r1
 80057ba:	609a      	str	r2, [r3, #8]
 80057bc:	e007      	b.n	80057ce <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	689a      	ldr	r2, [r3, #8]
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	2184      	movs	r1, #132	; 0x84
 80057c8:	0209      	lsls	r1, r1, #8
 80057ca:	430a      	orrs	r2, r1
 80057cc:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	68db      	ldr	r3, [r3, #12]
 80057d2:	2b02      	cmp	r3, #2
 80057d4:	d104      	bne.n	80057e0 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	2280      	movs	r2, #128	; 0x80
 80057dc:	0112      	lsls	r2, r2, #4
 80057de:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	685a      	ldr	r2, [r3, #4]
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	491f      	ldr	r1, [pc, #124]	; (8005868 <HAL_I2C_Init+0x128>)
 80057ec:	430a      	orrs	r2, r1
 80057ee:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	68da      	ldr	r2, [r3, #12]
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	491a      	ldr	r1, [pc, #104]	; (8005864 <HAL_I2C_Init+0x124>)
 80057fc:	400a      	ands	r2, r1
 80057fe:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	691a      	ldr	r2, [r3, #16]
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	695b      	ldr	r3, [r3, #20]
 8005808:	431a      	orrs	r2, r3
 800580a:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	699b      	ldr	r3, [r3, #24]
 8005810:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	430a      	orrs	r2, r1
 8005818:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	69d9      	ldr	r1, [r3, #28]
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	6a1a      	ldr	r2, [r3, #32]
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	430a      	orrs	r2, r1
 8005828:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	681a      	ldr	r2, [r3, #0]
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	2101      	movs	r1, #1
 8005836:	430a      	orrs	r2, r1
 8005838:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	2200      	movs	r2, #0
 800583e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2241      	movs	r2, #65	; 0x41
 8005844:	2120      	movs	r1, #32
 8005846:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2200      	movs	r2, #0
 800584c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	2242      	movs	r2, #66	; 0x42
 8005852:	2100      	movs	r1, #0
 8005854:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005856:	2300      	movs	r3, #0
}
 8005858:	0018      	movs	r0, r3
 800585a:	46bd      	mov	sp, r7
 800585c:	b002      	add	sp, #8
 800585e:	bd80      	pop	{r7, pc}
 8005860:	f0ffffff 	.word	0xf0ffffff
 8005864:	ffff7fff 	.word	0xffff7fff
 8005868:	02008000 	.word	0x02008000

0800586c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800586c:	b590      	push	{r4, r7, lr}
 800586e:	b089      	sub	sp, #36	; 0x24
 8005870:	af02      	add	r7, sp, #8
 8005872:	60f8      	str	r0, [r7, #12]
 8005874:	000c      	movs	r4, r1
 8005876:	0010      	movs	r0, r2
 8005878:	0019      	movs	r1, r3
 800587a:	230a      	movs	r3, #10
 800587c:	18fb      	adds	r3, r7, r3
 800587e:	1c22      	adds	r2, r4, #0
 8005880:	801a      	strh	r2, [r3, #0]
 8005882:	2308      	movs	r3, #8
 8005884:	18fb      	adds	r3, r7, r3
 8005886:	1c02      	adds	r2, r0, #0
 8005888:	801a      	strh	r2, [r3, #0]
 800588a:	1dbb      	adds	r3, r7, #6
 800588c:	1c0a      	adds	r2, r1, #0
 800588e:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	2241      	movs	r2, #65	; 0x41
 8005894:	5c9b      	ldrb	r3, [r3, r2]
 8005896:	b2db      	uxtb	r3, r3
 8005898:	2b20      	cmp	r3, #32
 800589a:	d000      	beq.n	800589e <HAL_I2C_Mem_Write+0x32>
 800589c:	e10c      	b.n	8005ab8 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 800589e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d004      	beq.n	80058ae <HAL_I2C_Mem_Write+0x42>
 80058a4:	232c      	movs	r3, #44	; 0x2c
 80058a6:	18fb      	adds	r3, r7, r3
 80058a8:	881b      	ldrh	r3, [r3, #0]
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d105      	bne.n	80058ba <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	2280      	movs	r2, #128	; 0x80
 80058b2:	0092      	lsls	r2, r2, #2
 80058b4:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80058b6:	2301      	movs	r3, #1
 80058b8:	e0ff      	b.n	8005aba <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	2240      	movs	r2, #64	; 0x40
 80058be:	5c9b      	ldrb	r3, [r3, r2]
 80058c0:	2b01      	cmp	r3, #1
 80058c2:	d101      	bne.n	80058c8 <HAL_I2C_Mem_Write+0x5c>
 80058c4:	2302      	movs	r3, #2
 80058c6:	e0f8      	b.n	8005aba <HAL_I2C_Mem_Write+0x24e>
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	2240      	movs	r2, #64	; 0x40
 80058cc:	2101      	movs	r1, #1
 80058ce:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80058d0:	f7ff fc16 	bl	8005100 <HAL_GetTick>
 80058d4:	0003      	movs	r3, r0
 80058d6:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80058d8:	2380      	movs	r3, #128	; 0x80
 80058da:	0219      	lsls	r1, r3, #8
 80058dc:	68f8      	ldr	r0, [r7, #12]
 80058de:	697b      	ldr	r3, [r7, #20]
 80058e0:	9300      	str	r3, [sp, #0]
 80058e2:	2319      	movs	r3, #25
 80058e4:	2201      	movs	r2, #1
 80058e6:	f000 fb0b 	bl	8005f00 <I2C_WaitOnFlagUntilTimeout>
 80058ea:	1e03      	subs	r3, r0, #0
 80058ec:	d001      	beq.n	80058f2 <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 80058ee:	2301      	movs	r3, #1
 80058f0:	e0e3      	b.n	8005aba <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	2241      	movs	r2, #65	; 0x41
 80058f6:	2121      	movs	r1, #33	; 0x21
 80058f8:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	2242      	movs	r2, #66	; 0x42
 80058fe:	2140      	movs	r1, #64	; 0x40
 8005900:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	2200      	movs	r2, #0
 8005906:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800590c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	222c      	movs	r2, #44	; 0x2c
 8005912:	18ba      	adds	r2, r7, r2
 8005914:	8812      	ldrh	r2, [r2, #0]
 8005916:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	2200      	movs	r2, #0
 800591c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800591e:	1dbb      	adds	r3, r7, #6
 8005920:	881c      	ldrh	r4, [r3, #0]
 8005922:	2308      	movs	r3, #8
 8005924:	18fb      	adds	r3, r7, r3
 8005926:	881a      	ldrh	r2, [r3, #0]
 8005928:	230a      	movs	r3, #10
 800592a:	18fb      	adds	r3, r7, r3
 800592c:	8819      	ldrh	r1, [r3, #0]
 800592e:	68f8      	ldr	r0, [r7, #12]
 8005930:	697b      	ldr	r3, [r7, #20]
 8005932:	9301      	str	r3, [sp, #4]
 8005934:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005936:	9300      	str	r3, [sp, #0]
 8005938:	0023      	movs	r3, r4
 800593a:	f000 f9f9 	bl	8005d30 <I2C_RequestMemoryWrite>
 800593e:	1e03      	subs	r3, r0, #0
 8005940:	d005      	beq.n	800594e <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	2240      	movs	r2, #64	; 0x40
 8005946:	2100      	movs	r1, #0
 8005948:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 800594a:	2301      	movs	r3, #1
 800594c:	e0b5      	b.n	8005aba <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005952:	b29b      	uxth	r3, r3
 8005954:	2bff      	cmp	r3, #255	; 0xff
 8005956:	d911      	bls.n	800597c <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	22ff      	movs	r2, #255	; 0xff
 800595c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005962:	b2da      	uxtb	r2, r3
 8005964:	2380      	movs	r3, #128	; 0x80
 8005966:	045c      	lsls	r4, r3, #17
 8005968:	230a      	movs	r3, #10
 800596a:	18fb      	adds	r3, r7, r3
 800596c:	8819      	ldrh	r1, [r3, #0]
 800596e:	68f8      	ldr	r0, [r7, #12]
 8005970:	2300      	movs	r3, #0
 8005972:	9300      	str	r3, [sp, #0]
 8005974:	0023      	movs	r3, r4
 8005976:	f000 fc7d 	bl	8006274 <I2C_TransferConfig>
 800597a:	e012      	b.n	80059a2 <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005980:	b29a      	uxth	r2, r3
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800598a:	b2da      	uxtb	r2, r3
 800598c:	2380      	movs	r3, #128	; 0x80
 800598e:	049c      	lsls	r4, r3, #18
 8005990:	230a      	movs	r3, #10
 8005992:	18fb      	adds	r3, r7, r3
 8005994:	8819      	ldrh	r1, [r3, #0]
 8005996:	68f8      	ldr	r0, [r7, #12]
 8005998:	2300      	movs	r3, #0
 800599a:	9300      	str	r3, [sp, #0]
 800599c:	0023      	movs	r3, r4
 800599e:	f000 fc69 	bl	8006274 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80059a2:	697a      	ldr	r2, [r7, #20]
 80059a4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	0018      	movs	r0, r3
 80059aa:	f000 fae8 	bl	8005f7e <I2C_WaitOnTXISFlagUntilTimeout>
 80059ae:	1e03      	subs	r3, r0, #0
 80059b0:	d001      	beq.n	80059b6 <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 80059b2:	2301      	movs	r3, #1
 80059b4:	e081      	b.n	8005aba <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059ba:	781a      	ldrb	r2, [r3, #0]
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059c6:	1c5a      	adds	r2, r3, #1
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059d0:	b29b      	uxth	r3, r3
 80059d2:	3b01      	subs	r3, #1
 80059d4:	b29a      	uxth	r2, r3
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059de:	3b01      	subs	r3, #1
 80059e0:	b29a      	uxth	r2, r3
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059ea:	b29b      	uxth	r3, r3
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d03a      	beq.n	8005a66 <HAL_I2C_Mem_Write+0x1fa>
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d136      	bne.n	8005a66 <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80059f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80059fa:	68f8      	ldr	r0, [r7, #12]
 80059fc:	697b      	ldr	r3, [r7, #20]
 80059fe:	9300      	str	r3, [sp, #0]
 8005a00:	0013      	movs	r3, r2
 8005a02:	2200      	movs	r2, #0
 8005a04:	2180      	movs	r1, #128	; 0x80
 8005a06:	f000 fa7b 	bl	8005f00 <I2C_WaitOnFlagUntilTimeout>
 8005a0a:	1e03      	subs	r3, r0, #0
 8005a0c:	d001      	beq.n	8005a12 <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 8005a0e:	2301      	movs	r3, #1
 8005a10:	e053      	b.n	8005aba <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a16:	b29b      	uxth	r3, r3
 8005a18:	2bff      	cmp	r3, #255	; 0xff
 8005a1a:	d911      	bls.n	8005a40 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	22ff      	movs	r2, #255	; 0xff
 8005a20:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a26:	b2da      	uxtb	r2, r3
 8005a28:	2380      	movs	r3, #128	; 0x80
 8005a2a:	045c      	lsls	r4, r3, #17
 8005a2c:	230a      	movs	r3, #10
 8005a2e:	18fb      	adds	r3, r7, r3
 8005a30:	8819      	ldrh	r1, [r3, #0]
 8005a32:	68f8      	ldr	r0, [r7, #12]
 8005a34:	2300      	movs	r3, #0
 8005a36:	9300      	str	r3, [sp, #0]
 8005a38:	0023      	movs	r3, r4
 8005a3a:	f000 fc1b 	bl	8006274 <I2C_TransferConfig>
 8005a3e:	e012      	b.n	8005a66 <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a44:	b29a      	uxth	r2, r3
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a4e:	b2da      	uxtb	r2, r3
 8005a50:	2380      	movs	r3, #128	; 0x80
 8005a52:	049c      	lsls	r4, r3, #18
 8005a54:	230a      	movs	r3, #10
 8005a56:	18fb      	adds	r3, r7, r3
 8005a58:	8819      	ldrh	r1, [r3, #0]
 8005a5a:	68f8      	ldr	r0, [r7, #12]
 8005a5c:	2300      	movs	r3, #0
 8005a5e:	9300      	str	r3, [sp, #0]
 8005a60:	0023      	movs	r3, r4
 8005a62:	f000 fc07 	bl	8006274 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a6a:	b29b      	uxth	r3, r3
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d198      	bne.n	80059a2 <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005a70:	697a      	ldr	r2, [r7, #20]
 8005a72:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	0018      	movs	r0, r3
 8005a78:	f000 fac0 	bl	8005ffc <I2C_WaitOnSTOPFlagUntilTimeout>
 8005a7c:	1e03      	subs	r3, r0, #0
 8005a7e:	d001      	beq.n	8005a84 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8005a80:	2301      	movs	r3, #1
 8005a82:	e01a      	b.n	8005aba <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	2220      	movs	r2, #32
 8005a8a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	685a      	ldr	r2, [r3, #4]
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	490b      	ldr	r1, [pc, #44]	; (8005ac4 <HAL_I2C_Mem_Write+0x258>)
 8005a98:	400a      	ands	r2, r1
 8005a9a:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	2241      	movs	r2, #65	; 0x41
 8005aa0:	2120      	movs	r1, #32
 8005aa2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	2242      	movs	r2, #66	; 0x42
 8005aa8:	2100      	movs	r1, #0
 8005aaa:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	2240      	movs	r2, #64	; 0x40
 8005ab0:	2100      	movs	r1, #0
 8005ab2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005ab4:	2300      	movs	r3, #0
 8005ab6:	e000      	b.n	8005aba <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 8005ab8:	2302      	movs	r3, #2
  }
}
 8005aba:	0018      	movs	r0, r3
 8005abc:	46bd      	mov	sp, r7
 8005abe:	b007      	add	sp, #28
 8005ac0:	bd90      	pop	{r4, r7, pc}
 8005ac2:	46c0      	nop			; (mov r8, r8)
 8005ac4:	fe00e800 	.word	0xfe00e800

08005ac8 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005ac8:	b590      	push	{r4, r7, lr}
 8005aca:	b089      	sub	sp, #36	; 0x24
 8005acc:	af02      	add	r7, sp, #8
 8005ace:	60f8      	str	r0, [r7, #12]
 8005ad0:	000c      	movs	r4, r1
 8005ad2:	0010      	movs	r0, r2
 8005ad4:	0019      	movs	r1, r3
 8005ad6:	230a      	movs	r3, #10
 8005ad8:	18fb      	adds	r3, r7, r3
 8005ada:	1c22      	adds	r2, r4, #0
 8005adc:	801a      	strh	r2, [r3, #0]
 8005ade:	2308      	movs	r3, #8
 8005ae0:	18fb      	adds	r3, r7, r3
 8005ae2:	1c02      	adds	r2, r0, #0
 8005ae4:	801a      	strh	r2, [r3, #0]
 8005ae6:	1dbb      	adds	r3, r7, #6
 8005ae8:	1c0a      	adds	r2, r1, #0
 8005aea:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	2241      	movs	r2, #65	; 0x41
 8005af0:	5c9b      	ldrb	r3, [r3, r2]
 8005af2:	b2db      	uxtb	r3, r3
 8005af4:	2b20      	cmp	r3, #32
 8005af6:	d000      	beq.n	8005afa <HAL_I2C_Mem_Read+0x32>
 8005af8:	e110      	b.n	8005d1c <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 8005afa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d004      	beq.n	8005b0a <HAL_I2C_Mem_Read+0x42>
 8005b00:	232c      	movs	r3, #44	; 0x2c
 8005b02:	18fb      	adds	r3, r7, r3
 8005b04:	881b      	ldrh	r3, [r3, #0]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d105      	bne.n	8005b16 <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	2280      	movs	r2, #128	; 0x80
 8005b0e:	0092      	lsls	r2, r2, #2
 8005b10:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005b12:	2301      	movs	r3, #1
 8005b14:	e103      	b.n	8005d1e <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	2240      	movs	r2, #64	; 0x40
 8005b1a:	5c9b      	ldrb	r3, [r3, r2]
 8005b1c:	2b01      	cmp	r3, #1
 8005b1e:	d101      	bne.n	8005b24 <HAL_I2C_Mem_Read+0x5c>
 8005b20:	2302      	movs	r3, #2
 8005b22:	e0fc      	b.n	8005d1e <HAL_I2C_Mem_Read+0x256>
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	2240      	movs	r2, #64	; 0x40
 8005b28:	2101      	movs	r1, #1
 8005b2a:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005b2c:	f7ff fae8 	bl	8005100 <HAL_GetTick>
 8005b30:	0003      	movs	r3, r0
 8005b32:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005b34:	2380      	movs	r3, #128	; 0x80
 8005b36:	0219      	lsls	r1, r3, #8
 8005b38:	68f8      	ldr	r0, [r7, #12]
 8005b3a:	697b      	ldr	r3, [r7, #20]
 8005b3c:	9300      	str	r3, [sp, #0]
 8005b3e:	2319      	movs	r3, #25
 8005b40:	2201      	movs	r2, #1
 8005b42:	f000 f9dd 	bl	8005f00 <I2C_WaitOnFlagUntilTimeout>
 8005b46:	1e03      	subs	r3, r0, #0
 8005b48:	d001      	beq.n	8005b4e <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 8005b4a:	2301      	movs	r3, #1
 8005b4c:	e0e7      	b.n	8005d1e <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	2241      	movs	r2, #65	; 0x41
 8005b52:	2122      	movs	r1, #34	; 0x22
 8005b54:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	2242      	movs	r2, #66	; 0x42
 8005b5a:	2140      	movs	r1, #64	; 0x40
 8005b5c:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	2200      	movs	r2, #0
 8005b62:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005b68:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	222c      	movs	r2, #44	; 0x2c
 8005b6e:	18ba      	adds	r2, r7, r2
 8005b70:	8812      	ldrh	r2, [r2, #0]
 8005b72:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	2200      	movs	r2, #0
 8005b78:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005b7a:	1dbb      	adds	r3, r7, #6
 8005b7c:	881c      	ldrh	r4, [r3, #0]
 8005b7e:	2308      	movs	r3, #8
 8005b80:	18fb      	adds	r3, r7, r3
 8005b82:	881a      	ldrh	r2, [r3, #0]
 8005b84:	230a      	movs	r3, #10
 8005b86:	18fb      	adds	r3, r7, r3
 8005b88:	8819      	ldrh	r1, [r3, #0]
 8005b8a:	68f8      	ldr	r0, [r7, #12]
 8005b8c:	697b      	ldr	r3, [r7, #20]
 8005b8e:	9301      	str	r3, [sp, #4]
 8005b90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b92:	9300      	str	r3, [sp, #0]
 8005b94:	0023      	movs	r3, r4
 8005b96:	f000 f92f 	bl	8005df8 <I2C_RequestMemoryRead>
 8005b9a:	1e03      	subs	r3, r0, #0
 8005b9c:	d005      	beq.n	8005baa <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	2240      	movs	r2, #64	; 0x40
 8005ba2:	2100      	movs	r1, #0
 8005ba4:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8005ba6:	2301      	movs	r3, #1
 8005ba8:	e0b9      	b.n	8005d1e <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bae:	b29b      	uxth	r3, r3
 8005bb0:	2bff      	cmp	r3, #255	; 0xff
 8005bb2:	d911      	bls.n	8005bd8 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	22ff      	movs	r2, #255	; 0xff
 8005bb8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005bbe:	b2da      	uxtb	r2, r3
 8005bc0:	2380      	movs	r3, #128	; 0x80
 8005bc2:	045c      	lsls	r4, r3, #17
 8005bc4:	230a      	movs	r3, #10
 8005bc6:	18fb      	adds	r3, r7, r3
 8005bc8:	8819      	ldrh	r1, [r3, #0]
 8005bca:	68f8      	ldr	r0, [r7, #12]
 8005bcc:	4b56      	ldr	r3, [pc, #344]	; (8005d28 <HAL_I2C_Mem_Read+0x260>)
 8005bce:	9300      	str	r3, [sp, #0]
 8005bd0:	0023      	movs	r3, r4
 8005bd2:	f000 fb4f 	bl	8006274 <I2C_TransferConfig>
 8005bd6:	e012      	b.n	8005bfe <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bdc:	b29a      	uxth	r2, r3
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005be6:	b2da      	uxtb	r2, r3
 8005be8:	2380      	movs	r3, #128	; 0x80
 8005bea:	049c      	lsls	r4, r3, #18
 8005bec:	230a      	movs	r3, #10
 8005bee:	18fb      	adds	r3, r7, r3
 8005bf0:	8819      	ldrh	r1, [r3, #0]
 8005bf2:	68f8      	ldr	r0, [r7, #12]
 8005bf4:	4b4c      	ldr	r3, [pc, #304]	; (8005d28 <HAL_I2C_Mem_Read+0x260>)
 8005bf6:	9300      	str	r3, [sp, #0]
 8005bf8:	0023      	movs	r3, r4
 8005bfa:	f000 fb3b 	bl	8006274 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8005bfe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c00:	68f8      	ldr	r0, [r7, #12]
 8005c02:	697b      	ldr	r3, [r7, #20]
 8005c04:	9300      	str	r3, [sp, #0]
 8005c06:	0013      	movs	r3, r2
 8005c08:	2200      	movs	r2, #0
 8005c0a:	2104      	movs	r1, #4
 8005c0c:	f000 f978 	bl	8005f00 <I2C_WaitOnFlagUntilTimeout>
 8005c10:	1e03      	subs	r3, r0, #0
 8005c12:	d001      	beq.n	8005c18 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 8005c14:	2301      	movs	r3, #1
 8005c16:	e082      	b.n	8005d1e <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c22:	b2d2      	uxtb	r2, r2
 8005c24:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c2a:	1c5a      	adds	r2, r3, #1
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c34:	3b01      	subs	r3, #1
 8005c36:	b29a      	uxth	r2, r3
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c40:	b29b      	uxth	r3, r3
 8005c42:	3b01      	subs	r3, #1
 8005c44:	b29a      	uxth	r2, r3
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c4e:	b29b      	uxth	r3, r3
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d03a      	beq.n	8005cca <HAL_I2C_Mem_Read+0x202>
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d136      	bne.n	8005cca <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005c5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c5e:	68f8      	ldr	r0, [r7, #12]
 8005c60:	697b      	ldr	r3, [r7, #20]
 8005c62:	9300      	str	r3, [sp, #0]
 8005c64:	0013      	movs	r3, r2
 8005c66:	2200      	movs	r2, #0
 8005c68:	2180      	movs	r1, #128	; 0x80
 8005c6a:	f000 f949 	bl	8005f00 <I2C_WaitOnFlagUntilTimeout>
 8005c6e:	1e03      	subs	r3, r0, #0
 8005c70:	d001      	beq.n	8005c76 <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 8005c72:	2301      	movs	r3, #1
 8005c74:	e053      	b.n	8005d1e <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c7a:	b29b      	uxth	r3, r3
 8005c7c:	2bff      	cmp	r3, #255	; 0xff
 8005c7e:	d911      	bls.n	8005ca4 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	22ff      	movs	r2, #255	; 0xff
 8005c84:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c8a:	b2da      	uxtb	r2, r3
 8005c8c:	2380      	movs	r3, #128	; 0x80
 8005c8e:	045c      	lsls	r4, r3, #17
 8005c90:	230a      	movs	r3, #10
 8005c92:	18fb      	adds	r3, r7, r3
 8005c94:	8819      	ldrh	r1, [r3, #0]
 8005c96:	68f8      	ldr	r0, [r7, #12]
 8005c98:	2300      	movs	r3, #0
 8005c9a:	9300      	str	r3, [sp, #0]
 8005c9c:	0023      	movs	r3, r4
 8005c9e:	f000 fae9 	bl	8006274 <I2C_TransferConfig>
 8005ca2:	e012      	b.n	8005cca <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ca8:	b29a      	uxth	r2, r3
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005cb2:	b2da      	uxtb	r2, r3
 8005cb4:	2380      	movs	r3, #128	; 0x80
 8005cb6:	049c      	lsls	r4, r3, #18
 8005cb8:	230a      	movs	r3, #10
 8005cba:	18fb      	adds	r3, r7, r3
 8005cbc:	8819      	ldrh	r1, [r3, #0]
 8005cbe:	68f8      	ldr	r0, [r7, #12]
 8005cc0:	2300      	movs	r3, #0
 8005cc2:	9300      	str	r3, [sp, #0]
 8005cc4:	0023      	movs	r3, r4
 8005cc6:	f000 fad5 	bl	8006274 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cce:	b29b      	uxth	r3, r3
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d194      	bne.n	8005bfe <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005cd4:	697a      	ldr	r2, [r7, #20]
 8005cd6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	0018      	movs	r0, r3
 8005cdc:	f000 f98e 	bl	8005ffc <I2C_WaitOnSTOPFlagUntilTimeout>
 8005ce0:	1e03      	subs	r3, r0, #0
 8005ce2:	d001      	beq.n	8005ce8 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8005ce4:	2301      	movs	r3, #1
 8005ce6:	e01a      	b.n	8005d1e <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	2220      	movs	r2, #32
 8005cee:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	685a      	ldr	r2, [r3, #4]
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	490c      	ldr	r1, [pc, #48]	; (8005d2c <HAL_I2C_Mem_Read+0x264>)
 8005cfc:	400a      	ands	r2, r1
 8005cfe:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	2241      	movs	r2, #65	; 0x41
 8005d04:	2120      	movs	r1, #32
 8005d06:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	2242      	movs	r2, #66	; 0x42
 8005d0c:	2100      	movs	r1, #0
 8005d0e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	2240      	movs	r2, #64	; 0x40
 8005d14:	2100      	movs	r1, #0
 8005d16:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005d18:	2300      	movs	r3, #0
 8005d1a:	e000      	b.n	8005d1e <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 8005d1c:	2302      	movs	r3, #2
  }
}
 8005d1e:	0018      	movs	r0, r3
 8005d20:	46bd      	mov	sp, r7
 8005d22:	b007      	add	sp, #28
 8005d24:	bd90      	pop	{r4, r7, pc}
 8005d26:	46c0      	nop			; (mov r8, r8)
 8005d28:	80002400 	.word	0x80002400
 8005d2c:	fe00e800 	.word	0xfe00e800

08005d30 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8005d30:	b5b0      	push	{r4, r5, r7, lr}
 8005d32:	b086      	sub	sp, #24
 8005d34:	af02      	add	r7, sp, #8
 8005d36:	60f8      	str	r0, [r7, #12]
 8005d38:	000c      	movs	r4, r1
 8005d3a:	0010      	movs	r0, r2
 8005d3c:	0019      	movs	r1, r3
 8005d3e:	250a      	movs	r5, #10
 8005d40:	197b      	adds	r3, r7, r5
 8005d42:	1c22      	adds	r2, r4, #0
 8005d44:	801a      	strh	r2, [r3, #0]
 8005d46:	2308      	movs	r3, #8
 8005d48:	18fb      	adds	r3, r7, r3
 8005d4a:	1c02      	adds	r2, r0, #0
 8005d4c:	801a      	strh	r2, [r3, #0]
 8005d4e:	1dbb      	adds	r3, r7, #6
 8005d50:	1c0a      	adds	r2, r1, #0
 8005d52:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8005d54:	1dbb      	adds	r3, r7, #6
 8005d56:	881b      	ldrh	r3, [r3, #0]
 8005d58:	b2da      	uxtb	r2, r3
 8005d5a:	2380      	movs	r3, #128	; 0x80
 8005d5c:	045c      	lsls	r4, r3, #17
 8005d5e:	197b      	adds	r3, r7, r5
 8005d60:	8819      	ldrh	r1, [r3, #0]
 8005d62:	68f8      	ldr	r0, [r7, #12]
 8005d64:	4b23      	ldr	r3, [pc, #140]	; (8005df4 <I2C_RequestMemoryWrite+0xc4>)
 8005d66:	9300      	str	r3, [sp, #0]
 8005d68:	0023      	movs	r3, r4
 8005d6a:	f000 fa83 	bl	8006274 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005d6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d70:	6a39      	ldr	r1, [r7, #32]
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	0018      	movs	r0, r3
 8005d76:	f000 f902 	bl	8005f7e <I2C_WaitOnTXISFlagUntilTimeout>
 8005d7a:	1e03      	subs	r3, r0, #0
 8005d7c:	d001      	beq.n	8005d82 <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 8005d7e:	2301      	movs	r3, #1
 8005d80:	e033      	b.n	8005dea <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005d82:	1dbb      	adds	r3, r7, #6
 8005d84:	881b      	ldrh	r3, [r3, #0]
 8005d86:	2b01      	cmp	r3, #1
 8005d88:	d107      	bne.n	8005d9a <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005d8a:	2308      	movs	r3, #8
 8005d8c:	18fb      	adds	r3, r7, r3
 8005d8e:	881b      	ldrh	r3, [r3, #0]
 8005d90:	b2da      	uxtb	r2, r3
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	629a      	str	r2, [r3, #40]	; 0x28
 8005d98:	e019      	b.n	8005dce <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005d9a:	2308      	movs	r3, #8
 8005d9c:	18fb      	adds	r3, r7, r3
 8005d9e:	881b      	ldrh	r3, [r3, #0]
 8005da0:	0a1b      	lsrs	r3, r3, #8
 8005da2:	b29b      	uxth	r3, r3
 8005da4:	b2da      	uxtb	r2, r3
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005dac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005dae:	6a39      	ldr	r1, [r7, #32]
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	0018      	movs	r0, r3
 8005db4:	f000 f8e3 	bl	8005f7e <I2C_WaitOnTXISFlagUntilTimeout>
 8005db8:	1e03      	subs	r3, r0, #0
 8005dba:	d001      	beq.n	8005dc0 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 8005dbc:	2301      	movs	r3, #1
 8005dbe:	e014      	b.n	8005dea <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005dc0:	2308      	movs	r3, #8
 8005dc2:	18fb      	adds	r3, r7, r3
 8005dc4:	881b      	ldrh	r3, [r3, #0]
 8005dc6:	b2da      	uxtb	r2, r3
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8005dce:	6a3a      	ldr	r2, [r7, #32]
 8005dd0:	68f8      	ldr	r0, [r7, #12]
 8005dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dd4:	9300      	str	r3, [sp, #0]
 8005dd6:	0013      	movs	r3, r2
 8005dd8:	2200      	movs	r2, #0
 8005dda:	2180      	movs	r1, #128	; 0x80
 8005ddc:	f000 f890 	bl	8005f00 <I2C_WaitOnFlagUntilTimeout>
 8005de0:	1e03      	subs	r3, r0, #0
 8005de2:	d001      	beq.n	8005de8 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 8005de4:	2301      	movs	r3, #1
 8005de6:	e000      	b.n	8005dea <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 8005de8:	2300      	movs	r3, #0
}
 8005dea:	0018      	movs	r0, r3
 8005dec:	46bd      	mov	sp, r7
 8005dee:	b004      	add	sp, #16
 8005df0:	bdb0      	pop	{r4, r5, r7, pc}
 8005df2:	46c0      	nop			; (mov r8, r8)
 8005df4:	80002000 	.word	0x80002000

08005df8 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8005df8:	b5b0      	push	{r4, r5, r7, lr}
 8005dfa:	b086      	sub	sp, #24
 8005dfc:	af02      	add	r7, sp, #8
 8005dfe:	60f8      	str	r0, [r7, #12]
 8005e00:	000c      	movs	r4, r1
 8005e02:	0010      	movs	r0, r2
 8005e04:	0019      	movs	r1, r3
 8005e06:	250a      	movs	r5, #10
 8005e08:	197b      	adds	r3, r7, r5
 8005e0a:	1c22      	adds	r2, r4, #0
 8005e0c:	801a      	strh	r2, [r3, #0]
 8005e0e:	2308      	movs	r3, #8
 8005e10:	18fb      	adds	r3, r7, r3
 8005e12:	1c02      	adds	r2, r0, #0
 8005e14:	801a      	strh	r2, [r3, #0]
 8005e16:	1dbb      	adds	r3, r7, #6
 8005e18:	1c0a      	adds	r2, r1, #0
 8005e1a:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8005e1c:	1dbb      	adds	r3, r7, #6
 8005e1e:	881b      	ldrh	r3, [r3, #0]
 8005e20:	b2da      	uxtb	r2, r3
 8005e22:	197b      	adds	r3, r7, r5
 8005e24:	8819      	ldrh	r1, [r3, #0]
 8005e26:	68f8      	ldr	r0, [r7, #12]
 8005e28:	4b23      	ldr	r3, [pc, #140]	; (8005eb8 <I2C_RequestMemoryRead+0xc0>)
 8005e2a:	9300      	str	r3, [sp, #0]
 8005e2c:	2300      	movs	r3, #0
 8005e2e:	f000 fa21 	bl	8006274 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005e32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e34:	6a39      	ldr	r1, [r7, #32]
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	0018      	movs	r0, r3
 8005e3a:	f000 f8a0 	bl	8005f7e <I2C_WaitOnTXISFlagUntilTimeout>
 8005e3e:	1e03      	subs	r3, r0, #0
 8005e40:	d001      	beq.n	8005e46 <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 8005e42:	2301      	movs	r3, #1
 8005e44:	e033      	b.n	8005eae <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005e46:	1dbb      	adds	r3, r7, #6
 8005e48:	881b      	ldrh	r3, [r3, #0]
 8005e4a:	2b01      	cmp	r3, #1
 8005e4c:	d107      	bne.n	8005e5e <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005e4e:	2308      	movs	r3, #8
 8005e50:	18fb      	adds	r3, r7, r3
 8005e52:	881b      	ldrh	r3, [r3, #0]
 8005e54:	b2da      	uxtb	r2, r3
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	629a      	str	r2, [r3, #40]	; 0x28
 8005e5c:	e019      	b.n	8005e92 <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005e5e:	2308      	movs	r3, #8
 8005e60:	18fb      	adds	r3, r7, r3
 8005e62:	881b      	ldrh	r3, [r3, #0]
 8005e64:	0a1b      	lsrs	r3, r3, #8
 8005e66:	b29b      	uxth	r3, r3
 8005e68:	b2da      	uxtb	r2, r3
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005e70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e72:	6a39      	ldr	r1, [r7, #32]
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	0018      	movs	r0, r3
 8005e78:	f000 f881 	bl	8005f7e <I2C_WaitOnTXISFlagUntilTimeout>
 8005e7c:	1e03      	subs	r3, r0, #0
 8005e7e:	d001      	beq.n	8005e84 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8005e80:	2301      	movs	r3, #1
 8005e82:	e014      	b.n	8005eae <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005e84:	2308      	movs	r3, #8
 8005e86:	18fb      	adds	r3, r7, r3
 8005e88:	881b      	ldrh	r3, [r3, #0]
 8005e8a:	b2da      	uxtb	r2, r3
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8005e92:	6a3a      	ldr	r2, [r7, #32]
 8005e94:	68f8      	ldr	r0, [r7, #12]
 8005e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e98:	9300      	str	r3, [sp, #0]
 8005e9a:	0013      	movs	r3, r2
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	2140      	movs	r1, #64	; 0x40
 8005ea0:	f000 f82e 	bl	8005f00 <I2C_WaitOnFlagUntilTimeout>
 8005ea4:	1e03      	subs	r3, r0, #0
 8005ea6:	d001      	beq.n	8005eac <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 8005ea8:	2301      	movs	r3, #1
 8005eaa:	e000      	b.n	8005eae <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 8005eac:	2300      	movs	r3, #0
}
 8005eae:	0018      	movs	r0, r3
 8005eb0:	46bd      	mov	sp, r7
 8005eb2:	b004      	add	sp, #16
 8005eb4:	bdb0      	pop	{r4, r5, r7, pc}
 8005eb6:	46c0      	nop			; (mov r8, r8)
 8005eb8:	80002000 	.word	0x80002000

08005ebc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005ebc:	b580      	push	{r7, lr}
 8005ebe:	b082      	sub	sp, #8
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	699b      	ldr	r3, [r3, #24]
 8005eca:	2202      	movs	r2, #2
 8005ecc:	4013      	ands	r3, r2
 8005ece:	2b02      	cmp	r3, #2
 8005ed0:	d103      	bne.n	8005eda <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	699b      	ldr	r3, [r3, #24]
 8005ee0:	2201      	movs	r2, #1
 8005ee2:	4013      	ands	r3, r2
 8005ee4:	2b01      	cmp	r3, #1
 8005ee6:	d007      	beq.n	8005ef8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	699a      	ldr	r2, [r3, #24]
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	2101      	movs	r1, #1
 8005ef4:	430a      	orrs	r2, r1
 8005ef6:	619a      	str	r2, [r3, #24]
  }
}
 8005ef8:	46c0      	nop			; (mov r8, r8)
 8005efa:	46bd      	mov	sp, r7
 8005efc:	b002      	add	sp, #8
 8005efe:	bd80      	pop	{r7, pc}

08005f00 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005f00:	b580      	push	{r7, lr}
 8005f02:	b084      	sub	sp, #16
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	60f8      	str	r0, [r7, #12]
 8005f08:	60b9      	str	r1, [r7, #8]
 8005f0a:	603b      	str	r3, [r7, #0]
 8005f0c:	1dfb      	adds	r3, r7, #7
 8005f0e:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005f10:	e021      	b.n	8005f56 <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f12:	683b      	ldr	r3, [r7, #0]
 8005f14:	3301      	adds	r3, #1
 8005f16:	d01e      	beq.n	8005f56 <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f18:	f7ff f8f2 	bl	8005100 <HAL_GetTick>
 8005f1c:	0002      	movs	r2, r0
 8005f1e:	69bb      	ldr	r3, [r7, #24]
 8005f20:	1ad3      	subs	r3, r2, r3
 8005f22:	683a      	ldr	r2, [r7, #0]
 8005f24:	429a      	cmp	r2, r3
 8005f26:	d302      	bcc.n	8005f2e <I2C_WaitOnFlagUntilTimeout+0x2e>
 8005f28:	683b      	ldr	r3, [r7, #0]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d113      	bne.n	8005f56 <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f32:	2220      	movs	r2, #32
 8005f34:	431a      	orrs	r2, r3
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	2241      	movs	r2, #65	; 0x41
 8005f3e:	2120      	movs	r1, #32
 8005f40:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	2242      	movs	r2, #66	; 0x42
 8005f46:	2100      	movs	r1, #0
 8005f48:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	2240      	movs	r2, #64	; 0x40
 8005f4e:	2100      	movs	r1, #0
 8005f50:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8005f52:	2301      	movs	r3, #1
 8005f54:	e00f      	b.n	8005f76 <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	699b      	ldr	r3, [r3, #24]
 8005f5c:	68ba      	ldr	r2, [r7, #8]
 8005f5e:	4013      	ands	r3, r2
 8005f60:	68ba      	ldr	r2, [r7, #8]
 8005f62:	1ad3      	subs	r3, r2, r3
 8005f64:	425a      	negs	r2, r3
 8005f66:	4153      	adcs	r3, r2
 8005f68:	b2db      	uxtb	r3, r3
 8005f6a:	001a      	movs	r2, r3
 8005f6c:	1dfb      	adds	r3, r7, #7
 8005f6e:	781b      	ldrb	r3, [r3, #0]
 8005f70:	429a      	cmp	r2, r3
 8005f72:	d0ce      	beq.n	8005f12 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005f74:	2300      	movs	r3, #0
}
 8005f76:	0018      	movs	r0, r3
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	b004      	add	sp, #16
 8005f7c:	bd80      	pop	{r7, pc}

08005f7e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005f7e:	b580      	push	{r7, lr}
 8005f80:	b084      	sub	sp, #16
 8005f82:	af00      	add	r7, sp, #0
 8005f84:	60f8      	str	r0, [r7, #12]
 8005f86:	60b9      	str	r1, [r7, #8]
 8005f88:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005f8a:	e02b      	b.n	8005fe4 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005f8c:	687a      	ldr	r2, [r7, #4]
 8005f8e:	68b9      	ldr	r1, [r7, #8]
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	0018      	movs	r0, r3
 8005f94:	f000 f86e 	bl	8006074 <I2C_IsErrorOccurred>
 8005f98:	1e03      	subs	r3, r0, #0
 8005f9a:	d001      	beq.n	8005fa0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005f9c:	2301      	movs	r3, #1
 8005f9e:	e029      	b.n	8005ff4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005fa0:	68bb      	ldr	r3, [r7, #8]
 8005fa2:	3301      	adds	r3, #1
 8005fa4:	d01e      	beq.n	8005fe4 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005fa6:	f7ff f8ab 	bl	8005100 <HAL_GetTick>
 8005faa:	0002      	movs	r2, r0
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	1ad3      	subs	r3, r2, r3
 8005fb0:	68ba      	ldr	r2, [r7, #8]
 8005fb2:	429a      	cmp	r2, r3
 8005fb4:	d302      	bcc.n	8005fbc <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8005fb6:	68bb      	ldr	r3, [r7, #8]
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d113      	bne.n	8005fe4 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fc0:	2220      	movs	r2, #32
 8005fc2:	431a      	orrs	r2, r3
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	2241      	movs	r2, #65	; 0x41
 8005fcc:	2120      	movs	r1, #32
 8005fce:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	2242      	movs	r2, #66	; 0x42
 8005fd4:	2100      	movs	r1, #0
 8005fd6:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	2240      	movs	r2, #64	; 0x40
 8005fdc:	2100      	movs	r1, #0
 8005fde:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8005fe0:	2301      	movs	r3, #1
 8005fe2:	e007      	b.n	8005ff4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	699b      	ldr	r3, [r3, #24]
 8005fea:	2202      	movs	r2, #2
 8005fec:	4013      	ands	r3, r2
 8005fee:	2b02      	cmp	r3, #2
 8005ff0:	d1cc      	bne.n	8005f8c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005ff2:	2300      	movs	r3, #0
}
 8005ff4:	0018      	movs	r0, r3
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	b004      	add	sp, #16
 8005ffa:	bd80      	pop	{r7, pc}

08005ffc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005ffc:	b580      	push	{r7, lr}
 8005ffe:	b084      	sub	sp, #16
 8006000:	af00      	add	r7, sp, #0
 8006002:	60f8      	str	r0, [r7, #12]
 8006004:	60b9      	str	r1, [r7, #8]
 8006006:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006008:	e028      	b.n	800605c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800600a:	687a      	ldr	r2, [r7, #4]
 800600c:	68b9      	ldr	r1, [r7, #8]
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	0018      	movs	r0, r3
 8006012:	f000 f82f 	bl	8006074 <I2C_IsErrorOccurred>
 8006016:	1e03      	subs	r3, r0, #0
 8006018:	d001      	beq.n	800601e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800601a:	2301      	movs	r3, #1
 800601c:	e026      	b.n	800606c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800601e:	f7ff f86f 	bl	8005100 <HAL_GetTick>
 8006022:	0002      	movs	r2, r0
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	1ad3      	subs	r3, r2, r3
 8006028:	68ba      	ldr	r2, [r7, #8]
 800602a:	429a      	cmp	r2, r3
 800602c:	d302      	bcc.n	8006034 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800602e:	68bb      	ldr	r3, [r7, #8]
 8006030:	2b00      	cmp	r3, #0
 8006032:	d113      	bne.n	800605c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006038:	2220      	movs	r2, #32
 800603a:	431a      	orrs	r2, r3
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	2241      	movs	r2, #65	; 0x41
 8006044:	2120      	movs	r1, #32
 8006046:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	2242      	movs	r2, #66	; 0x42
 800604c:	2100      	movs	r1, #0
 800604e:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	2240      	movs	r2, #64	; 0x40
 8006054:	2100      	movs	r1, #0
 8006056:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8006058:	2301      	movs	r3, #1
 800605a:	e007      	b.n	800606c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	699b      	ldr	r3, [r3, #24]
 8006062:	2220      	movs	r2, #32
 8006064:	4013      	ands	r3, r2
 8006066:	2b20      	cmp	r3, #32
 8006068:	d1cf      	bne.n	800600a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800606a:	2300      	movs	r3, #0
}
 800606c:	0018      	movs	r0, r3
 800606e:	46bd      	mov	sp, r7
 8006070:	b004      	add	sp, #16
 8006072:	bd80      	pop	{r7, pc}

08006074 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006074:	b590      	push	{r4, r7, lr}
 8006076:	b08b      	sub	sp, #44	; 0x2c
 8006078:	af00      	add	r7, sp, #0
 800607a:	60f8      	str	r0, [r7, #12]
 800607c:	60b9      	str	r1, [r7, #8]
 800607e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006080:	2327      	movs	r3, #39	; 0x27
 8006082:	18fb      	adds	r3, r7, r3
 8006084:	2200      	movs	r2, #0
 8006086:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	699b      	ldr	r3, [r3, #24]
 800608e:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8006090:	2300      	movs	r3, #0
 8006092:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8006098:	69bb      	ldr	r3, [r7, #24]
 800609a:	2210      	movs	r2, #16
 800609c:	4013      	ands	r3, r2
 800609e:	d100      	bne.n	80060a2 <I2C_IsErrorOccurred+0x2e>
 80060a0:	e082      	b.n	80061a8 <I2C_IsErrorOccurred+0x134>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	2210      	movs	r2, #16
 80060a8:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80060aa:	e060      	b.n	800616e <I2C_IsErrorOccurred+0xfa>
 80060ac:	2427      	movs	r4, #39	; 0x27
 80060ae:	193b      	adds	r3, r7, r4
 80060b0:	193a      	adds	r2, r7, r4
 80060b2:	7812      	ldrb	r2, [r2, #0]
 80060b4:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80060b6:	68bb      	ldr	r3, [r7, #8]
 80060b8:	3301      	adds	r3, #1
 80060ba:	d058      	beq.n	800616e <I2C_IsErrorOccurred+0xfa>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80060bc:	f7ff f820 	bl	8005100 <HAL_GetTick>
 80060c0:	0002      	movs	r2, r0
 80060c2:	69fb      	ldr	r3, [r7, #28]
 80060c4:	1ad3      	subs	r3, r2, r3
 80060c6:	68ba      	ldr	r2, [r7, #8]
 80060c8:	429a      	cmp	r2, r3
 80060ca:	d306      	bcc.n	80060da <I2C_IsErrorOccurred+0x66>
 80060cc:	193b      	adds	r3, r7, r4
 80060ce:	193a      	adds	r2, r7, r4
 80060d0:	7812      	ldrb	r2, [r2, #0]
 80060d2:	701a      	strb	r2, [r3, #0]
 80060d4:	68bb      	ldr	r3, [r7, #8]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d149      	bne.n	800616e <I2C_IsErrorOccurred+0xfa>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	685a      	ldr	r2, [r3, #4]
 80060e0:	2380      	movs	r3, #128	; 0x80
 80060e2:	01db      	lsls	r3, r3, #7
 80060e4:	4013      	ands	r3, r2
 80060e6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80060e8:	2013      	movs	r0, #19
 80060ea:	183b      	adds	r3, r7, r0
 80060ec:	68fa      	ldr	r2, [r7, #12]
 80060ee:	2142      	movs	r1, #66	; 0x42
 80060f0:	5c52      	ldrb	r2, [r2, r1]
 80060f2:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	699a      	ldr	r2, [r3, #24]
 80060fa:	2380      	movs	r3, #128	; 0x80
 80060fc:	021b      	lsls	r3, r3, #8
 80060fe:	401a      	ands	r2, r3
 8006100:	2380      	movs	r3, #128	; 0x80
 8006102:	021b      	lsls	r3, r3, #8
 8006104:	429a      	cmp	r2, r3
 8006106:	d126      	bne.n	8006156 <I2C_IsErrorOccurred+0xe2>
 8006108:	697a      	ldr	r2, [r7, #20]
 800610a:	2380      	movs	r3, #128	; 0x80
 800610c:	01db      	lsls	r3, r3, #7
 800610e:	429a      	cmp	r2, r3
 8006110:	d021      	beq.n	8006156 <I2C_IsErrorOccurred+0xe2>
              (tmp1 != I2C_CR2_STOP) && \
 8006112:	183b      	adds	r3, r7, r0
 8006114:	781b      	ldrb	r3, [r3, #0]
 8006116:	2b20      	cmp	r3, #32
 8006118:	d01d      	beq.n	8006156 <I2C_IsErrorOccurred+0xe2>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	685a      	ldr	r2, [r3, #4]
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	2180      	movs	r1, #128	; 0x80
 8006126:	01c9      	lsls	r1, r1, #7
 8006128:	430a      	orrs	r2, r1
 800612a:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800612c:	f7fe ffe8 	bl	8005100 <HAL_GetTick>
 8006130:	0003      	movs	r3, r0
 8006132:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006134:	e00f      	b.n	8006156 <I2C_IsErrorOccurred+0xe2>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8006136:	f7fe ffe3 	bl	8005100 <HAL_GetTick>
 800613a:	0002      	movs	r2, r0
 800613c:	69fb      	ldr	r3, [r7, #28]
 800613e:	1ad3      	subs	r3, r2, r3
 8006140:	2b19      	cmp	r3, #25
 8006142:	d908      	bls.n	8006156 <I2C_IsErrorOccurred+0xe2>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8006144:	6a3b      	ldr	r3, [r7, #32]
 8006146:	2220      	movs	r2, #32
 8006148:	4313      	orrs	r3, r2
 800614a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800614c:	2327      	movs	r3, #39	; 0x27
 800614e:	18fb      	adds	r3, r7, r3
 8006150:	2201      	movs	r2, #1
 8006152:	701a      	strb	r2, [r3, #0]

              break;
 8006154:	e00b      	b.n	800616e <I2C_IsErrorOccurred+0xfa>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	699b      	ldr	r3, [r3, #24]
 800615c:	2220      	movs	r2, #32
 800615e:	4013      	ands	r3, r2
 8006160:	2127      	movs	r1, #39	; 0x27
 8006162:	187a      	adds	r2, r7, r1
 8006164:	1879      	adds	r1, r7, r1
 8006166:	7809      	ldrb	r1, [r1, #0]
 8006168:	7011      	strb	r1, [r2, #0]
 800616a:	2b20      	cmp	r3, #32
 800616c:	d1e3      	bne.n	8006136 <I2C_IsErrorOccurred+0xc2>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	699b      	ldr	r3, [r3, #24]
 8006174:	2220      	movs	r2, #32
 8006176:	4013      	ands	r3, r2
 8006178:	2b20      	cmp	r3, #32
 800617a:	d004      	beq.n	8006186 <I2C_IsErrorOccurred+0x112>
 800617c:	2327      	movs	r3, #39	; 0x27
 800617e:	18fb      	adds	r3, r7, r3
 8006180:	781b      	ldrb	r3, [r3, #0]
 8006182:	2b00      	cmp	r3, #0
 8006184:	d092      	beq.n	80060ac <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8006186:	2327      	movs	r3, #39	; 0x27
 8006188:	18fb      	adds	r3, r7, r3
 800618a:	781b      	ldrb	r3, [r3, #0]
 800618c:	2b00      	cmp	r3, #0
 800618e:	d103      	bne.n	8006198 <I2C_IsErrorOccurred+0x124>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	2220      	movs	r2, #32
 8006196:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8006198:	6a3b      	ldr	r3, [r7, #32]
 800619a:	2204      	movs	r2, #4
 800619c:	4313      	orrs	r3, r2
 800619e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80061a0:	2327      	movs	r3, #39	; 0x27
 80061a2:	18fb      	adds	r3, r7, r3
 80061a4:	2201      	movs	r2, #1
 80061a6:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	699b      	ldr	r3, [r3, #24]
 80061ae:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80061b0:	69ba      	ldr	r2, [r7, #24]
 80061b2:	2380      	movs	r3, #128	; 0x80
 80061b4:	005b      	lsls	r3, r3, #1
 80061b6:	4013      	ands	r3, r2
 80061b8:	d00c      	beq.n	80061d4 <I2C_IsErrorOccurred+0x160>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80061ba:	6a3b      	ldr	r3, [r7, #32]
 80061bc:	2201      	movs	r2, #1
 80061be:	4313      	orrs	r3, r2
 80061c0:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	2280      	movs	r2, #128	; 0x80
 80061c8:	0052      	lsls	r2, r2, #1
 80061ca:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80061cc:	2327      	movs	r3, #39	; 0x27
 80061ce:	18fb      	adds	r3, r7, r3
 80061d0:	2201      	movs	r2, #1
 80061d2:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80061d4:	69ba      	ldr	r2, [r7, #24]
 80061d6:	2380      	movs	r3, #128	; 0x80
 80061d8:	00db      	lsls	r3, r3, #3
 80061da:	4013      	ands	r3, r2
 80061dc:	d00c      	beq.n	80061f8 <I2C_IsErrorOccurred+0x184>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80061de:	6a3b      	ldr	r3, [r7, #32]
 80061e0:	2208      	movs	r2, #8
 80061e2:	4313      	orrs	r3, r2
 80061e4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	2280      	movs	r2, #128	; 0x80
 80061ec:	00d2      	lsls	r2, r2, #3
 80061ee:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80061f0:	2327      	movs	r3, #39	; 0x27
 80061f2:	18fb      	adds	r3, r7, r3
 80061f4:	2201      	movs	r2, #1
 80061f6:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80061f8:	69ba      	ldr	r2, [r7, #24]
 80061fa:	2380      	movs	r3, #128	; 0x80
 80061fc:	009b      	lsls	r3, r3, #2
 80061fe:	4013      	ands	r3, r2
 8006200:	d00c      	beq.n	800621c <I2C_IsErrorOccurred+0x1a8>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8006202:	6a3b      	ldr	r3, [r7, #32]
 8006204:	2202      	movs	r2, #2
 8006206:	4313      	orrs	r3, r2
 8006208:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	2280      	movs	r2, #128	; 0x80
 8006210:	0092      	lsls	r2, r2, #2
 8006212:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006214:	2327      	movs	r3, #39	; 0x27
 8006216:	18fb      	adds	r3, r7, r3
 8006218:	2201      	movs	r2, #1
 800621a:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 800621c:	2327      	movs	r3, #39	; 0x27
 800621e:	18fb      	adds	r3, r7, r3
 8006220:	781b      	ldrb	r3, [r3, #0]
 8006222:	2b00      	cmp	r3, #0
 8006224:	d01d      	beq.n	8006262 <I2C_IsErrorOccurred+0x1ee>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	0018      	movs	r0, r3
 800622a:	f7ff fe47 	bl	8005ebc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	685a      	ldr	r2, [r3, #4]
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	490d      	ldr	r1, [pc, #52]	; (8006270 <I2C_IsErrorOccurred+0x1fc>)
 800623a:	400a      	ands	r2, r1
 800623c:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006242:	6a3b      	ldr	r3, [r7, #32]
 8006244:	431a      	orrs	r2, r3
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	2241      	movs	r2, #65	; 0x41
 800624e:	2120      	movs	r1, #32
 8006250:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	2242      	movs	r2, #66	; 0x42
 8006256:	2100      	movs	r1, #0
 8006258:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	2240      	movs	r2, #64	; 0x40
 800625e:	2100      	movs	r1, #0
 8006260:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8006262:	2327      	movs	r3, #39	; 0x27
 8006264:	18fb      	adds	r3, r7, r3
 8006266:	781b      	ldrb	r3, [r3, #0]
}
 8006268:	0018      	movs	r0, r3
 800626a:	46bd      	mov	sp, r7
 800626c:	b00b      	add	sp, #44	; 0x2c
 800626e:	bd90      	pop	{r4, r7, pc}
 8006270:	fe00e800 	.word	0xfe00e800

08006274 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006274:	b590      	push	{r4, r7, lr}
 8006276:	b087      	sub	sp, #28
 8006278:	af00      	add	r7, sp, #0
 800627a:	60f8      	str	r0, [r7, #12]
 800627c:	0008      	movs	r0, r1
 800627e:	0011      	movs	r1, r2
 8006280:	607b      	str	r3, [r7, #4]
 8006282:	240a      	movs	r4, #10
 8006284:	193b      	adds	r3, r7, r4
 8006286:	1c02      	adds	r2, r0, #0
 8006288:	801a      	strh	r2, [r3, #0]
 800628a:	2009      	movs	r0, #9
 800628c:	183b      	adds	r3, r7, r0
 800628e:	1c0a      	adds	r2, r1, #0
 8006290:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006292:	193b      	adds	r3, r7, r4
 8006294:	881b      	ldrh	r3, [r3, #0]
 8006296:	059b      	lsls	r3, r3, #22
 8006298:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800629a:	183b      	adds	r3, r7, r0
 800629c:	781b      	ldrb	r3, [r3, #0]
 800629e:	0419      	lsls	r1, r3, #16
 80062a0:	23ff      	movs	r3, #255	; 0xff
 80062a2:	041b      	lsls	r3, r3, #16
 80062a4:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80062a6:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80062ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062ae:	4313      	orrs	r3, r2
 80062b0:	005b      	lsls	r3, r3, #1
 80062b2:	085b      	lsrs	r3, r3, #1
 80062b4:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	685b      	ldr	r3, [r3, #4]
 80062bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80062be:	0d51      	lsrs	r1, r2, #21
 80062c0:	2280      	movs	r2, #128	; 0x80
 80062c2:	00d2      	lsls	r2, r2, #3
 80062c4:	400a      	ands	r2, r1
 80062c6:	4907      	ldr	r1, [pc, #28]	; (80062e4 <I2C_TransferConfig+0x70>)
 80062c8:	430a      	orrs	r2, r1
 80062ca:	43d2      	mvns	r2, r2
 80062cc:	401a      	ands	r2, r3
 80062ce:	0011      	movs	r1, r2
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	697a      	ldr	r2, [r7, #20]
 80062d6:	430a      	orrs	r2, r1
 80062d8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80062da:	46c0      	nop			; (mov r8, r8)
 80062dc:	46bd      	mov	sp, r7
 80062de:	b007      	add	sp, #28
 80062e0:	bd90      	pop	{r4, r7, pc}
 80062e2:	46c0      	nop			; (mov r8, r8)
 80062e4:	03ff63ff 	.word	0x03ff63ff

080062e8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80062e8:	b580      	push	{r7, lr}
 80062ea:	b082      	sub	sp, #8
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	6078      	str	r0, [r7, #4]
 80062f0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	2241      	movs	r2, #65	; 0x41
 80062f6:	5c9b      	ldrb	r3, [r3, r2]
 80062f8:	b2db      	uxtb	r3, r3
 80062fa:	2b20      	cmp	r3, #32
 80062fc:	d138      	bne.n	8006370 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	2240      	movs	r2, #64	; 0x40
 8006302:	5c9b      	ldrb	r3, [r3, r2]
 8006304:	2b01      	cmp	r3, #1
 8006306:	d101      	bne.n	800630c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006308:	2302      	movs	r3, #2
 800630a:	e032      	b.n	8006372 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2240      	movs	r2, #64	; 0x40
 8006310:	2101      	movs	r1, #1
 8006312:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	2241      	movs	r2, #65	; 0x41
 8006318:	2124      	movs	r1, #36	; 0x24
 800631a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	681a      	ldr	r2, [r3, #0]
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	2101      	movs	r1, #1
 8006328:	438a      	bics	r2, r1
 800632a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	681a      	ldr	r2, [r3, #0]
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	4911      	ldr	r1, [pc, #68]	; (800637c <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8006338:	400a      	ands	r2, r1
 800633a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	6819      	ldr	r1, [r3, #0]
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	683a      	ldr	r2, [r7, #0]
 8006348:	430a      	orrs	r2, r1
 800634a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	681a      	ldr	r2, [r3, #0]
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	2101      	movs	r1, #1
 8006358:	430a      	orrs	r2, r1
 800635a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	2241      	movs	r2, #65	; 0x41
 8006360:	2120      	movs	r1, #32
 8006362:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	2240      	movs	r2, #64	; 0x40
 8006368:	2100      	movs	r1, #0
 800636a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800636c:	2300      	movs	r3, #0
 800636e:	e000      	b.n	8006372 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006370:	2302      	movs	r3, #2
  }
}
 8006372:	0018      	movs	r0, r3
 8006374:	46bd      	mov	sp, r7
 8006376:	b002      	add	sp, #8
 8006378:	bd80      	pop	{r7, pc}
 800637a:	46c0      	nop			; (mov r8, r8)
 800637c:	ffffefff 	.word	0xffffefff

08006380 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006380:	b580      	push	{r7, lr}
 8006382:	b084      	sub	sp, #16
 8006384:	af00      	add	r7, sp, #0
 8006386:	6078      	str	r0, [r7, #4]
 8006388:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	2241      	movs	r2, #65	; 0x41
 800638e:	5c9b      	ldrb	r3, [r3, r2]
 8006390:	b2db      	uxtb	r3, r3
 8006392:	2b20      	cmp	r3, #32
 8006394:	d139      	bne.n	800640a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	2240      	movs	r2, #64	; 0x40
 800639a:	5c9b      	ldrb	r3, [r3, r2]
 800639c:	2b01      	cmp	r3, #1
 800639e:	d101      	bne.n	80063a4 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80063a0:	2302      	movs	r3, #2
 80063a2:	e033      	b.n	800640c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2240      	movs	r2, #64	; 0x40
 80063a8:	2101      	movs	r1, #1
 80063aa:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2241      	movs	r2, #65	; 0x41
 80063b0:	2124      	movs	r1, #36	; 0x24
 80063b2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	681a      	ldr	r2, [r3, #0]
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	2101      	movs	r1, #1
 80063c0:	438a      	bics	r2, r1
 80063c2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	4a11      	ldr	r2, [pc, #68]	; (8006414 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80063d0:	4013      	ands	r3, r2
 80063d2:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80063d4:	683b      	ldr	r3, [r7, #0]
 80063d6:	021b      	lsls	r3, r3, #8
 80063d8:	68fa      	ldr	r2, [r7, #12]
 80063da:	4313      	orrs	r3, r2
 80063dc:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	68fa      	ldr	r2, [r7, #12]
 80063e4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	681a      	ldr	r2, [r3, #0]
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	2101      	movs	r1, #1
 80063f2:	430a      	orrs	r2, r1
 80063f4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	2241      	movs	r2, #65	; 0x41
 80063fa:	2120      	movs	r1, #32
 80063fc:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	2240      	movs	r2, #64	; 0x40
 8006402:	2100      	movs	r1, #0
 8006404:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8006406:	2300      	movs	r3, #0
 8006408:	e000      	b.n	800640c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800640a:	2302      	movs	r3, #2
  }
}
 800640c:	0018      	movs	r0, r3
 800640e:	46bd      	mov	sp, r7
 8006410:	b004      	add	sp, #16
 8006412:	bd80      	pop	{r7, pc}
 8006414:	fffff0ff 	.word	0xfffff0ff

08006418 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006418:	b580      	push	{r7, lr}
 800641a:	b084      	sub	sp, #16
 800641c:	af00      	add	r7, sp, #0
 800641e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8006420:	4b19      	ldr	r3, [pc, #100]	; (8006488 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	4a19      	ldr	r2, [pc, #100]	; (800648c <HAL_PWREx_ControlVoltageScaling+0x74>)
 8006426:	4013      	ands	r3, r2
 8006428:	0019      	movs	r1, r3
 800642a:	4b17      	ldr	r3, [pc, #92]	; (8006488 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800642c:	687a      	ldr	r2, [r7, #4]
 800642e:	430a      	orrs	r2, r1
 8006430:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006432:	687a      	ldr	r2, [r7, #4]
 8006434:	2380      	movs	r3, #128	; 0x80
 8006436:	009b      	lsls	r3, r3, #2
 8006438:	429a      	cmp	r2, r3
 800643a:	d11f      	bne.n	800647c <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 800643c:	4b14      	ldr	r3, [pc, #80]	; (8006490 <HAL_PWREx_ControlVoltageScaling+0x78>)
 800643e:	681a      	ldr	r2, [r3, #0]
 8006440:	0013      	movs	r3, r2
 8006442:	005b      	lsls	r3, r3, #1
 8006444:	189b      	adds	r3, r3, r2
 8006446:	005b      	lsls	r3, r3, #1
 8006448:	4912      	ldr	r1, [pc, #72]	; (8006494 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800644a:	0018      	movs	r0, r3
 800644c:	f7f9 fe82 	bl	8000154 <__udivsi3>
 8006450:	0003      	movs	r3, r0
 8006452:	3301      	adds	r3, #1
 8006454:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006456:	e008      	b.n	800646a <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	2b00      	cmp	r3, #0
 800645c:	d003      	beq.n	8006466 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	3b01      	subs	r3, #1
 8006462:	60fb      	str	r3, [r7, #12]
 8006464:	e001      	b.n	800646a <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8006466:	2303      	movs	r3, #3
 8006468:	e009      	b.n	800647e <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800646a:	4b07      	ldr	r3, [pc, #28]	; (8006488 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800646c:	695a      	ldr	r2, [r3, #20]
 800646e:	2380      	movs	r3, #128	; 0x80
 8006470:	00db      	lsls	r3, r3, #3
 8006472:	401a      	ands	r2, r3
 8006474:	2380      	movs	r3, #128	; 0x80
 8006476:	00db      	lsls	r3, r3, #3
 8006478:	429a      	cmp	r2, r3
 800647a:	d0ed      	beq.n	8006458 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 800647c:	2300      	movs	r3, #0
}
 800647e:	0018      	movs	r0, r3
 8006480:	46bd      	mov	sp, r7
 8006482:	b004      	add	sp, #16
 8006484:	bd80      	pop	{r7, pc}
 8006486:	46c0      	nop			; (mov r8, r8)
 8006488:	40007000 	.word	0x40007000
 800648c:	fffff9ff 	.word	0xfffff9ff
 8006490:	20000000 	.word	0x20000000
 8006494:	000f4240 	.word	0x000f4240

08006498 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8006498:	b580      	push	{r7, lr}
 800649a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 800649c:	4b03      	ldr	r3, [pc, #12]	; (80064ac <LL_RCC_GetAPB1Prescaler+0x14>)
 800649e:	689a      	ldr	r2, [r3, #8]
 80064a0:	23e0      	movs	r3, #224	; 0xe0
 80064a2:	01db      	lsls	r3, r3, #7
 80064a4:	4013      	ands	r3, r2
}
 80064a6:	0018      	movs	r0, r3
 80064a8:	46bd      	mov	sp, r7
 80064aa:	bd80      	pop	{r7, pc}
 80064ac:	40021000 	.word	0x40021000

080064b0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80064b0:	b580      	push	{r7, lr}
 80064b2:	b088      	sub	sp, #32
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d102      	bne.n	80064c4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80064be:	2301      	movs	r3, #1
 80064c0:	f000 fb50 	bl	8006b64 <HAL_RCC_OscConfig+0x6b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	2201      	movs	r2, #1
 80064ca:	4013      	ands	r3, r2
 80064cc:	d100      	bne.n	80064d0 <HAL_RCC_OscConfig+0x20>
 80064ce:	e07c      	b.n	80065ca <HAL_RCC_OscConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80064d0:	4bc3      	ldr	r3, [pc, #780]	; (80067e0 <HAL_RCC_OscConfig+0x330>)
 80064d2:	689b      	ldr	r3, [r3, #8]
 80064d4:	2238      	movs	r2, #56	; 0x38
 80064d6:	4013      	ands	r3, r2
 80064d8:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80064da:	4bc1      	ldr	r3, [pc, #772]	; (80067e0 <HAL_RCC_OscConfig+0x330>)
 80064dc:	68db      	ldr	r3, [r3, #12]
 80064de:	2203      	movs	r2, #3
 80064e0:	4013      	ands	r3, r2
 80064e2:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80064e4:	69bb      	ldr	r3, [r7, #24]
 80064e6:	2b10      	cmp	r3, #16
 80064e8:	d102      	bne.n	80064f0 <HAL_RCC_OscConfig+0x40>
 80064ea:	697b      	ldr	r3, [r7, #20]
 80064ec:	2b03      	cmp	r3, #3
 80064ee:	d002      	beq.n	80064f6 <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80064f0:	69bb      	ldr	r3, [r7, #24]
 80064f2:	2b08      	cmp	r3, #8
 80064f4:	d10b      	bne.n	800650e <HAL_RCC_OscConfig+0x5e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80064f6:	4bba      	ldr	r3, [pc, #744]	; (80067e0 <HAL_RCC_OscConfig+0x330>)
 80064f8:	681a      	ldr	r2, [r3, #0]
 80064fa:	2380      	movs	r3, #128	; 0x80
 80064fc:	029b      	lsls	r3, r3, #10
 80064fe:	4013      	ands	r3, r2
 8006500:	d062      	beq.n	80065c8 <HAL_RCC_OscConfig+0x118>
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	685b      	ldr	r3, [r3, #4]
 8006506:	2b00      	cmp	r3, #0
 8006508:	d15e      	bne.n	80065c8 <HAL_RCC_OscConfig+0x118>
      {
        return HAL_ERROR;
 800650a:	2301      	movs	r3, #1
 800650c:	e32a      	b.n	8006b64 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	685a      	ldr	r2, [r3, #4]
 8006512:	2380      	movs	r3, #128	; 0x80
 8006514:	025b      	lsls	r3, r3, #9
 8006516:	429a      	cmp	r2, r3
 8006518:	d107      	bne.n	800652a <HAL_RCC_OscConfig+0x7a>
 800651a:	4bb1      	ldr	r3, [pc, #708]	; (80067e0 <HAL_RCC_OscConfig+0x330>)
 800651c:	681a      	ldr	r2, [r3, #0]
 800651e:	4bb0      	ldr	r3, [pc, #704]	; (80067e0 <HAL_RCC_OscConfig+0x330>)
 8006520:	2180      	movs	r1, #128	; 0x80
 8006522:	0249      	lsls	r1, r1, #9
 8006524:	430a      	orrs	r2, r1
 8006526:	601a      	str	r2, [r3, #0]
 8006528:	e020      	b.n	800656c <HAL_RCC_OscConfig+0xbc>
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	685a      	ldr	r2, [r3, #4]
 800652e:	23a0      	movs	r3, #160	; 0xa0
 8006530:	02db      	lsls	r3, r3, #11
 8006532:	429a      	cmp	r2, r3
 8006534:	d10e      	bne.n	8006554 <HAL_RCC_OscConfig+0xa4>
 8006536:	4baa      	ldr	r3, [pc, #680]	; (80067e0 <HAL_RCC_OscConfig+0x330>)
 8006538:	681a      	ldr	r2, [r3, #0]
 800653a:	4ba9      	ldr	r3, [pc, #676]	; (80067e0 <HAL_RCC_OscConfig+0x330>)
 800653c:	2180      	movs	r1, #128	; 0x80
 800653e:	02c9      	lsls	r1, r1, #11
 8006540:	430a      	orrs	r2, r1
 8006542:	601a      	str	r2, [r3, #0]
 8006544:	4ba6      	ldr	r3, [pc, #664]	; (80067e0 <HAL_RCC_OscConfig+0x330>)
 8006546:	681a      	ldr	r2, [r3, #0]
 8006548:	4ba5      	ldr	r3, [pc, #660]	; (80067e0 <HAL_RCC_OscConfig+0x330>)
 800654a:	2180      	movs	r1, #128	; 0x80
 800654c:	0249      	lsls	r1, r1, #9
 800654e:	430a      	orrs	r2, r1
 8006550:	601a      	str	r2, [r3, #0]
 8006552:	e00b      	b.n	800656c <HAL_RCC_OscConfig+0xbc>
 8006554:	4ba2      	ldr	r3, [pc, #648]	; (80067e0 <HAL_RCC_OscConfig+0x330>)
 8006556:	681a      	ldr	r2, [r3, #0]
 8006558:	4ba1      	ldr	r3, [pc, #644]	; (80067e0 <HAL_RCC_OscConfig+0x330>)
 800655a:	49a2      	ldr	r1, [pc, #648]	; (80067e4 <HAL_RCC_OscConfig+0x334>)
 800655c:	400a      	ands	r2, r1
 800655e:	601a      	str	r2, [r3, #0]
 8006560:	4b9f      	ldr	r3, [pc, #636]	; (80067e0 <HAL_RCC_OscConfig+0x330>)
 8006562:	681a      	ldr	r2, [r3, #0]
 8006564:	4b9e      	ldr	r3, [pc, #632]	; (80067e0 <HAL_RCC_OscConfig+0x330>)
 8006566:	49a0      	ldr	r1, [pc, #640]	; (80067e8 <HAL_RCC_OscConfig+0x338>)
 8006568:	400a      	ands	r2, r1
 800656a:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	685b      	ldr	r3, [r3, #4]
 8006570:	2b00      	cmp	r3, #0
 8006572:	d014      	beq.n	800659e <HAL_RCC_OscConfig+0xee>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006574:	f7fe fdc4 	bl	8005100 <HAL_GetTick>
 8006578:	0003      	movs	r3, r0
 800657a:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800657c:	e008      	b.n	8006590 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800657e:	f7fe fdbf 	bl	8005100 <HAL_GetTick>
 8006582:	0002      	movs	r2, r0
 8006584:	693b      	ldr	r3, [r7, #16]
 8006586:	1ad3      	subs	r3, r2, r3
 8006588:	2b64      	cmp	r3, #100	; 0x64
 800658a:	d901      	bls.n	8006590 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 800658c:	2303      	movs	r3, #3
 800658e:	e2e9      	b.n	8006b64 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006590:	4b93      	ldr	r3, [pc, #588]	; (80067e0 <HAL_RCC_OscConfig+0x330>)
 8006592:	681a      	ldr	r2, [r3, #0]
 8006594:	2380      	movs	r3, #128	; 0x80
 8006596:	029b      	lsls	r3, r3, #10
 8006598:	4013      	ands	r3, r2
 800659a:	d0f0      	beq.n	800657e <HAL_RCC_OscConfig+0xce>
 800659c:	e015      	b.n	80065ca <HAL_RCC_OscConfig+0x11a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800659e:	f7fe fdaf 	bl	8005100 <HAL_GetTick>
 80065a2:	0003      	movs	r3, r0
 80065a4:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80065a6:	e008      	b.n	80065ba <HAL_RCC_OscConfig+0x10a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80065a8:	f7fe fdaa 	bl	8005100 <HAL_GetTick>
 80065ac:	0002      	movs	r2, r0
 80065ae:	693b      	ldr	r3, [r7, #16]
 80065b0:	1ad3      	subs	r3, r2, r3
 80065b2:	2b64      	cmp	r3, #100	; 0x64
 80065b4:	d901      	bls.n	80065ba <HAL_RCC_OscConfig+0x10a>
          {
            return HAL_TIMEOUT;
 80065b6:	2303      	movs	r3, #3
 80065b8:	e2d4      	b.n	8006b64 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80065ba:	4b89      	ldr	r3, [pc, #548]	; (80067e0 <HAL_RCC_OscConfig+0x330>)
 80065bc:	681a      	ldr	r2, [r3, #0]
 80065be:	2380      	movs	r3, #128	; 0x80
 80065c0:	029b      	lsls	r3, r3, #10
 80065c2:	4013      	ands	r3, r2
 80065c4:	d1f0      	bne.n	80065a8 <HAL_RCC_OscConfig+0xf8>
 80065c6:	e000      	b.n	80065ca <HAL_RCC_OscConfig+0x11a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80065c8:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	2202      	movs	r2, #2
 80065d0:	4013      	ands	r3, r2
 80065d2:	d100      	bne.n	80065d6 <HAL_RCC_OscConfig+0x126>
 80065d4:	e099      	b.n	800670a <HAL_RCC_OscConfig+0x25a>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80065d6:	4b82      	ldr	r3, [pc, #520]	; (80067e0 <HAL_RCC_OscConfig+0x330>)
 80065d8:	689b      	ldr	r3, [r3, #8]
 80065da:	2238      	movs	r2, #56	; 0x38
 80065dc:	4013      	ands	r3, r2
 80065de:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80065e0:	4b7f      	ldr	r3, [pc, #508]	; (80067e0 <HAL_RCC_OscConfig+0x330>)
 80065e2:	68db      	ldr	r3, [r3, #12]
 80065e4:	2203      	movs	r2, #3
 80065e6:	4013      	ands	r3, r2
 80065e8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80065ea:	69bb      	ldr	r3, [r7, #24]
 80065ec:	2b10      	cmp	r3, #16
 80065ee:	d102      	bne.n	80065f6 <HAL_RCC_OscConfig+0x146>
 80065f0:	697b      	ldr	r3, [r7, #20]
 80065f2:	2b02      	cmp	r3, #2
 80065f4:	d002      	beq.n	80065fc <HAL_RCC_OscConfig+0x14c>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80065f6:	69bb      	ldr	r3, [r7, #24]
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d135      	bne.n	8006668 <HAL_RCC_OscConfig+0x1b8>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80065fc:	4b78      	ldr	r3, [pc, #480]	; (80067e0 <HAL_RCC_OscConfig+0x330>)
 80065fe:	681a      	ldr	r2, [r3, #0]
 8006600:	2380      	movs	r3, #128	; 0x80
 8006602:	00db      	lsls	r3, r3, #3
 8006604:	4013      	ands	r3, r2
 8006606:	d005      	beq.n	8006614 <HAL_RCC_OscConfig+0x164>
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	68db      	ldr	r3, [r3, #12]
 800660c:	2b00      	cmp	r3, #0
 800660e:	d101      	bne.n	8006614 <HAL_RCC_OscConfig+0x164>
      {
        return HAL_ERROR;
 8006610:	2301      	movs	r3, #1
 8006612:	e2a7      	b.n	8006b64 <HAL_RCC_OscConfig+0x6b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006614:	4b72      	ldr	r3, [pc, #456]	; (80067e0 <HAL_RCC_OscConfig+0x330>)
 8006616:	685b      	ldr	r3, [r3, #4]
 8006618:	4a74      	ldr	r2, [pc, #464]	; (80067ec <HAL_RCC_OscConfig+0x33c>)
 800661a:	4013      	ands	r3, r2
 800661c:	0019      	movs	r1, r3
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	695b      	ldr	r3, [r3, #20]
 8006622:	021a      	lsls	r2, r3, #8
 8006624:	4b6e      	ldr	r3, [pc, #440]	; (80067e0 <HAL_RCC_OscConfig+0x330>)
 8006626:	430a      	orrs	r2, r1
 8006628:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800662a:	69bb      	ldr	r3, [r7, #24]
 800662c:	2b00      	cmp	r3, #0
 800662e:	d112      	bne.n	8006656 <HAL_RCC_OscConfig+0x1a6>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8006630:	4b6b      	ldr	r3, [pc, #428]	; (80067e0 <HAL_RCC_OscConfig+0x330>)
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	4a6e      	ldr	r2, [pc, #440]	; (80067f0 <HAL_RCC_OscConfig+0x340>)
 8006636:	4013      	ands	r3, r2
 8006638:	0019      	movs	r1, r3
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	691a      	ldr	r2, [r3, #16]
 800663e:	4b68      	ldr	r3, [pc, #416]	; (80067e0 <HAL_RCC_OscConfig+0x330>)
 8006640:	430a      	orrs	r2, r1
 8006642:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8006644:	4b66      	ldr	r3, [pc, #408]	; (80067e0 <HAL_RCC_OscConfig+0x330>)
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	0adb      	lsrs	r3, r3, #11
 800664a:	2207      	movs	r2, #7
 800664c:	4013      	ands	r3, r2
 800664e:	4a69      	ldr	r2, [pc, #420]	; (80067f4 <HAL_RCC_OscConfig+0x344>)
 8006650:	40da      	lsrs	r2, r3
 8006652:	4b69      	ldr	r3, [pc, #420]	; (80067f8 <HAL_RCC_OscConfig+0x348>)
 8006654:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8006656:	4b69      	ldr	r3, [pc, #420]	; (80067fc <HAL_RCC_OscConfig+0x34c>)
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	0018      	movs	r0, r3
 800665c:	f7fe fb80 	bl	8004d60 <HAL_InitTick>
 8006660:	1e03      	subs	r3, r0, #0
 8006662:	d051      	beq.n	8006708 <HAL_RCC_OscConfig+0x258>
        {
          return HAL_ERROR;
 8006664:	2301      	movs	r3, #1
 8006666:	e27d      	b.n	8006b64 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	68db      	ldr	r3, [r3, #12]
 800666c:	2b00      	cmp	r3, #0
 800666e:	d030      	beq.n	80066d2 <HAL_RCC_OscConfig+0x222>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8006670:	4b5b      	ldr	r3, [pc, #364]	; (80067e0 <HAL_RCC_OscConfig+0x330>)
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	4a5e      	ldr	r2, [pc, #376]	; (80067f0 <HAL_RCC_OscConfig+0x340>)
 8006676:	4013      	ands	r3, r2
 8006678:	0019      	movs	r1, r3
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	691a      	ldr	r2, [r3, #16]
 800667e:	4b58      	ldr	r3, [pc, #352]	; (80067e0 <HAL_RCC_OscConfig+0x330>)
 8006680:	430a      	orrs	r2, r1
 8006682:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8006684:	4b56      	ldr	r3, [pc, #344]	; (80067e0 <HAL_RCC_OscConfig+0x330>)
 8006686:	681a      	ldr	r2, [r3, #0]
 8006688:	4b55      	ldr	r3, [pc, #340]	; (80067e0 <HAL_RCC_OscConfig+0x330>)
 800668a:	2180      	movs	r1, #128	; 0x80
 800668c:	0049      	lsls	r1, r1, #1
 800668e:	430a      	orrs	r2, r1
 8006690:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006692:	f7fe fd35 	bl	8005100 <HAL_GetTick>
 8006696:	0003      	movs	r3, r0
 8006698:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800669a:	e008      	b.n	80066ae <HAL_RCC_OscConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800669c:	f7fe fd30 	bl	8005100 <HAL_GetTick>
 80066a0:	0002      	movs	r2, r0
 80066a2:	693b      	ldr	r3, [r7, #16]
 80066a4:	1ad3      	subs	r3, r2, r3
 80066a6:	2b02      	cmp	r3, #2
 80066a8:	d901      	bls.n	80066ae <HAL_RCC_OscConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 80066aa:	2303      	movs	r3, #3
 80066ac:	e25a      	b.n	8006b64 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80066ae:	4b4c      	ldr	r3, [pc, #304]	; (80067e0 <HAL_RCC_OscConfig+0x330>)
 80066b0:	681a      	ldr	r2, [r3, #0]
 80066b2:	2380      	movs	r3, #128	; 0x80
 80066b4:	00db      	lsls	r3, r3, #3
 80066b6:	4013      	ands	r3, r2
 80066b8:	d0f0      	beq.n	800669c <HAL_RCC_OscConfig+0x1ec>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80066ba:	4b49      	ldr	r3, [pc, #292]	; (80067e0 <HAL_RCC_OscConfig+0x330>)
 80066bc:	685b      	ldr	r3, [r3, #4]
 80066be:	4a4b      	ldr	r2, [pc, #300]	; (80067ec <HAL_RCC_OscConfig+0x33c>)
 80066c0:	4013      	ands	r3, r2
 80066c2:	0019      	movs	r1, r3
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	695b      	ldr	r3, [r3, #20]
 80066c8:	021a      	lsls	r2, r3, #8
 80066ca:	4b45      	ldr	r3, [pc, #276]	; (80067e0 <HAL_RCC_OscConfig+0x330>)
 80066cc:	430a      	orrs	r2, r1
 80066ce:	605a      	str	r2, [r3, #4]
 80066d0:	e01b      	b.n	800670a <HAL_RCC_OscConfig+0x25a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80066d2:	4b43      	ldr	r3, [pc, #268]	; (80067e0 <HAL_RCC_OscConfig+0x330>)
 80066d4:	681a      	ldr	r2, [r3, #0]
 80066d6:	4b42      	ldr	r3, [pc, #264]	; (80067e0 <HAL_RCC_OscConfig+0x330>)
 80066d8:	4949      	ldr	r1, [pc, #292]	; (8006800 <HAL_RCC_OscConfig+0x350>)
 80066da:	400a      	ands	r2, r1
 80066dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066de:	f7fe fd0f 	bl	8005100 <HAL_GetTick>
 80066e2:	0003      	movs	r3, r0
 80066e4:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80066e6:	e008      	b.n	80066fa <HAL_RCC_OscConfig+0x24a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80066e8:	f7fe fd0a 	bl	8005100 <HAL_GetTick>
 80066ec:	0002      	movs	r2, r0
 80066ee:	693b      	ldr	r3, [r7, #16]
 80066f0:	1ad3      	subs	r3, r2, r3
 80066f2:	2b02      	cmp	r3, #2
 80066f4:	d901      	bls.n	80066fa <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 80066f6:	2303      	movs	r3, #3
 80066f8:	e234      	b.n	8006b64 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80066fa:	4b39      	ldr	r3, [pc, #228]	; (80067e0 <HAL_RCC_OscConfig+0x330>)
 80066fc:	681a      	ldr	r2, [r3, #0]
 80066fe:	2380      	movs	r3, #128	; 0x80
 8006700:	00db      	lsls	r3, r3, #3
 8006702:	4013      	ands	r3, r2
 8006704:	d1f0      	bne.n	80066e8 <HAL_RCC_OscConfig+0x238>
 8006706:	e000      	b.n	800670a <HAL_RCC_OscConfig+0x25a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006708:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	2208      	movs	r2, #8
 8006710:	4013      	ands	r3, r2
 8006712:	d047      	beq.n	80067a4 <HAL_RCC_OscConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8006714:	4b32      	ldr	r3, [pc, #200]	; (80067e0 <HAL_RCC_OscConfig+0x330>)
 8006716:	689b      	ldr	r3, [r3, #8]
 8006718:	2238      	movs	r2, #56	; 0x38
 800671a:	4013      	ands	r3, r2
 800671c:	2b18      	cmp	r3, #24
 800671e:	d10a      	bne.n	8006736 <HAL_RCC_OscConfig+0x286>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8006720:	4b2f      	ldr	r3, [pc, #188]	; (80067e0 <HAL_RCC_OscConfig+0x330>)
 8006722:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006724:	2202      	movs	r2, #2
 8006726:	4013      	ands	r3, r2
 8006728:	d03c      	beq.n	80067a4 <HAL_RCC_OscConfig+0x2f4>
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	699b      	ldr	r3, [r3, #24]
 800672e:	2b00      	cmp	r3, #0
 8006730:	d138      	bne.n	80067a4 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8006732:	2301      	movs	r3, #1
 8006734:	e216      	b.n	8006b64 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	699b      	ldr	r3, [r3, #24]
 800673a:	2b00      	cmp	r3, #0
 800673c:	d019      	beq.n	8006772 <HAL_RCC_OscConfig+0x2c2>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 800673e:	4b28      	ldr	r3, [pc, #160]	; (80067e0 <HAL_RCC_OscConfig+0x330>)
 8006740:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8006742:	4b27      	ldr	r3, [pc, #156]	; (80067e0 <HAL_RCC_OscConfig+0x330>)
 8006744:	2101      	movs	r1, #1
 8006746:	430a      	orrs	r2, r1
 8006748:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800674a:	f7fe fcd9 	bl	8005100 <HAL_GetTick>
 800674e:	0003      	movs	r3, r0
 8006750:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006752:	e008      	b.n	8006766 <HAL_RCC_OscConfig+0x2b6>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006754:	f7fe fcd4 	bl	8005100 <HAL_GetTick>
 8006758:	0002      	movs	r2, r0
 800675a:	693b      	ldr	r3, [r7, #16]
 800675c:	1ad3      	subs	r3, r2, r3
 800675e:	2b02      	cmp	r3, #2
 8006760:	d901      	bls.n	8006766 <HAL_RCC_OscConfig+0x2b6>
          {
            return HAL_TIMEOUT;
 8006762:	2303      	movs	r3, #3
 8006764:	e1fe      	b.n	8006b64 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006766:	4b1e      	ldr	r3, [pc, #120]	; (80067e0 <HAL_RCC_OscConfig+0x330>)
 8006768:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800676a:	2202      	movs	r2, #2
 800676c:	4013      	ands	r3, r2
 800676e:	d0f1      	beq.n	8006754 <HAL_RCC_OscConfig+0x2a4>
 8006770:	e018      	b.n	80067a4 <HAL_RCC_OscConfig+0x2f4>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8006772:	4b1b      	ldr	r3, [pc, #108]	; (80067e0 <HAL_RCC_OscConfig+0x330>)
 8006774:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8006776:	4b1a      	ldr	r3, [pc, #104]	; (80067e0 <HAL_RCC_OscConfig+0x330>)
 8006778:	2101      	movs	r1, #1
 800677a:	438a      	bics	r2, r1
 800677c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800677e:	f7fe fcbf 	bl	8005100 <HAL_GetTick>
 8006782:	0003      	movs	r3, r0
 8006784:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006786:	e008      	b.n	800679a <HAL_RCC_OscConfig+0x2ea>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006788:	f7fe fcba 	bl	8005100 <HAL_GetTick>
 800678c:	0002      	movs	r2, r0
 800678e:	693b      	ldr	r3, [r7, #16]
 8006790:	1ad3      	subs	r3, r2, r3
 8006792:	2b02      	cmp	r3, #2
 8006794:	d901      	bls.n	800679a <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 8006796:	2303      	movs	r3, #3
 8006798:	e1e4      	b.n	8006b64 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800679a:	4b11      	ldr	r3, [pc, #68]	; (80067e0 <HAL_RCC_OscConfig+0x330>)
 800679c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800679e:	2202      	movs	r2, #2
 80067a0:	4013      	ands	r3, r2
 80067a2:	d1f1      	bne.n	8006788 <HAL_RCC_OscConfig+0x2d8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	2204      	movs	r2, #4
 80067aa:	4013      	ands	r3, r2
 80067ac:	d100      	bne.n	80067b0 <HAL_RCC_OscConfig+0x300>
 80067ae:	e0c7      	b.n	8006940 <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 80067b0:	231f      	movs	r3, #31
 80067b2:	18fb      	adds	r3, r7, r3
 80067b4:	2200      	movs	r2, #0
 80067b6:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80067b8:	4b09      	ldr	r3, [pc, #36]	; (80067e0 <HAL_RCC_OscConfig+0x330>)
 80067ba:	689b      	ldr	r3, [r3, #8]
 80067bc:	2238      	movs	r2, #56	; 0x38
 80067be:	4013      	ands	r3, r2
 80067c0:	2b20      	cmp	r3, #32
 80067c2:	d11f      	bne.n	8006804 <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80067c4:	4b06      	ldr	r3, [pc, #24]	; (80067e0 <HAL_RCC_OscConfig+0x330>)
 80067c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80067c8:	2202      	movs	r2, #2
 80067ca:	4013      	ands	r3, r2
 80067cc:	d100      	bne.n	80067d0 <HAL_RCC_OscConfig+0x320>
 80067ce:	e0b7      	b.n	8006940 <HAL_RCC_OscConfig+0x490>
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	689b      	ldr	r3, [r3, #8]
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d000      	beq.n	80067da <HAL_RCC_OscConfig+0x32a>
 80067d8:	e0b2      	b.n	8006940 <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 80067da:	2301      	movs	r3, #1
 80067dc:	e1c2      	b.n	8006b64 <HAL_RCC_OscConfig+0x6b4>
 80067de:	46c0      	nop			; (mov r8, r8)
 80067e0:	40021000 	.word	0x40021000
 80067e4:	fffeffff 	.word	0xfffeffff
 80067e8:	fffbffff 	.word	0xfffbffff
 80067ec:	ffff80ff 	.word	0xffff80ff
 80067f0:	ffffc7ff 	.word	0xffffc7ff
 80067f4:	00f42400 	.word	0x00f42400
 80067f8:	20000000 	.word	0x20000000
 80067fc:	20000004 	.word	0x20000004
 8006800:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006804:	4bb5      	ldr	r3, [pc, #724]	; (8006adc <HAL_RCC_OscConfig+0x62c>)
 8006806:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006808:	2380      	movs	r3, #128	; 0x80
 800680a:	055b      	lsls	r3, r3, #21
 800680c:	4013      	ands	r3, r2
 800680e:	d101      	bne.n	8006814 <HAL_RCC_OscConfig+0x364>
 8006810:	2301      	movs	r3, #1
 8006812:	e000      	b.n	8006816 <HAL_RCC_OscConfig+0x366>
 8006814:	2300      	movs	r3, #0
 8006816:	2b00      	cmp	r3, #0
 8006818:	d011      	beq.n	800683e <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800681a:	4bb0      	ldr	r3, [pc, #704]	; (8006adc <HAL_RCC_OscConfig+0x62c>)
 800681c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800681e:	4baf      	ldr	r3, [pc, #700]	; (8006adc <HAL_RCC_OscConfig+0x62c>)
 8006820:	2180      	movs	r1, #128	; 0x80
 8006822:	0549      	lsls	r1, r1, #21
 8006824:	430a      	orrs	r2, r1
 8006826:	63da      	str	r2, [r3, #60]	; 0x3c
 8006828:	4bac      	ldr	r3, [pc, #688]	; (8006adc <HAL_RCC_OscConfig+0x62c>)
 800682a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800682c:	2380      	movs	r3, #128	; 0x80
 800682e:	055b      	lsls	r3, r3, #21
 8006830:	4013      	ands	r3, r2
 8006832:	60fb      	str	r3, [r7, #12]
 8006834:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8006836:	231f      	movs	r3, #31
 8006838:	18fb      	adds	r3, r7, r3
 800683a:	2201      	movs	r2, #1
 800683c:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800683e:	4ba8      	ldr	r3, [pc, #672]	; (8006ae0 <HAL_RCC_OscConfig+0x630>)
 8006840:	681a      	ldr	r2, [r3, #0]
 8006842:	2380      	movs	r3, #128	; 0x80
 8006844:	005b      	lsls	r3, r3, #1
 8006846:	4013      	ands	r3, r2
 8006848:	d11a      	bne.n	8006880 <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800684a:	4ba5      	ldr	r3, [pc, #660]	; (8006ae0 <HAL_RCC_OscConfig+0x630>)
 800684c:	681a      	ldr	r2, [r3, #0]
 800684e:	4ba4      	ldr	r3, [pc, #656]	; (8006ae0 <HAL_RCC_OscConfig+0x630>)
 8006850:	2180      	movs	r1, #128	; 0x80
 8006852:	0049      	lsls	r1, r1, #1
 8006854:	430a      	orrs	r2, r1
 8006856:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8006858:	f7fe fc52 	bl	8005100 <HAL_GetTick>
 800685c:	0003      	movs	r3, r0
 800685e:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006860:	e008      	b.n	8006874 <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006862:	f7fe fc4d 	bl	8005100 <HAL_GetTick>
 8006866:	0002      	movs	r2, r0
 8006868:	693b      	ldr	r3, [r7, #16]
 800686a:	1ad3      	subs	r3, r2, r3
 800686c:	2b02      	cmp	r3, #2
 800686e:	d901      	bls.n	8006874 <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 8006870:	2303      	movs	r3, #3
 8006872:	e177      	b.n	8006b64 <HAL_RCC_OscConfig+0x6b4>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006874:	4b9a      	ldr	r3, [pc, #616]	; (8006ae0 <HAL_RCC_OscConfig+0x630>)
 8006876:	681a      	ldr	r2, [r3, #0]
 8006878:	2380      	movs	r3, #128	; 0x80
 800687a:	005b      	lsls	r3, r3, #1
 800687c:	4013      	ands	r3, r2
 800687e:	d0f0      	beq.n	8006862 <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	689b      	ldr	r3, [r3, #8]
 8006884:	2b01      	cmp	r3, #1
 8006886:	d106      	bne.n	8006896 <HAL_RCC_OscConfig+0x3e6>
 8006888:	4b94      	ldr	r3, [pc, #592]	; (8006adc <HAL_RCC_OscConfig+0x62c>)
 800688a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800688c:	4b93      	ldr	r3, [pc, #588]	; (8006adc <HAL_RCC_OscConfig+0x62c>)
 800688e:	2101      	movs	r1, #1
 8006890:	430a      	orrs	r2, r1
 8006892:	65da      	str	r2, [r3, #92]	; 0x5c
 8006894:	e01c      	b.n	80068d0 <HAL_RCC_OscConfig+0x420>
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	689b      	ldr	r3, [r3, #8]
 800689a:	2b05      	cmp	r3, #5
 800689c:	d10c      	bne.n	80068b8 <HAL_RCC_OscConfig+0x408>
 800689e:	4b8f      	ldr	r3, [pc, #572]	; (8006adc <HAL_RCC_OscConfig+0x62c>)
 80068a0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80068a2:	4b8e      	ldr	r3, [pc, #568]	; (8006adc <HAL_RCC_OscConfig+0x62c>)
 80068a4:	2104      	movs	r1, #4
 80068a6:	430a      	orrs	r2, r1
 80068a8:	65da      	str	r2, [r3, #92]	; 0x5c
 80068aa:	4b8c      	ldr	r3, [pc, #560]	; (8006adc <HAL_RCC_OscConfig+0x62c>)
 80068ac:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80068ae:	4b8b      	ldr	r3, [pc, #556]	; (8006adc <HAL_RCC_OscConfig+0x62c>)
 80068b0:	2101      	movs	r1, #1
 80068b2:	430a      	orrs	r2, r1
 80068b4:	65da      	str	r2, [r3, #92]	; 0x5c
 80068b6:	e00b      	b.n	80068d0 <HAL_RCC_OscConfig+0x420>
 80068b8:	4b88      	ldr	r3, [pc, #544]	; (8006adc <HAL_RCC_OscConfig+0x62c>)
 80068ba:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80068bc:	4b87      	ldr	r3, [pc, #540]	; (8006adc <HAL_RCC_OscConfig+0x62c>)
 80068be:	2101      	movs	r1, #1
 80068c0:	438a      	bics	r2, r1
 80068c2:	65da      	str	r2, [r3, #92]	; 0x5c
 80068c4:	4b85      	ldr	r3, [pc, #532]	; (8006adc <HAL_RCC_OscConfig+0x62c>)
 80068c6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80068c8:	4b84      	ldr	r3, [pc, #528]	; (8006adc <HAL_RCC_OscConfig+0x62c>)
 80068ca:	2104      	movs	r1, #4
 80068cc:	438a      	bics	r2, r1
 80068ce:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	689b      	ldr	r3, [r3, #8]
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d014      	beq.n	8006902 <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068d8:	f7fe fc12 	bl	8005100 <HAL_GetTick>
 80068dc:	0003      	movs	r3, r0
 80068de:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80068e0:	e009      	b.n	80068f6 <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80068e2:	f7fe fc0d 	bl	8005100 <HAL_GetTick>
 80068e6:	0002      	movs	r2, r0
 80068e8:	693b      	ldr	r3, [r7, #16]
 80068ea:	1ad3      	subs	r3, r2, r3
 80068ec:	4a7d      	ldr	r2, [pc, #500]	; (8006ae4 <HAL_RCC_OscConfig+0x634>)
 80068ee:	4293      	cmp	r3, r2
 80068f0:	d901      	bls.n	80068f6 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 80068f2:	2303      	movs	r3, #3
 80068f4:	e136      	b.n	8006b64 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80068f6:	4b79      	ldr	r3, [pc, #484]	; (8006adc <HAL_RCC_OscConfig+0x62c>)
 80068f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80068fa:	2202      	movs	r2, #2
 80068fc:	4013      	ands	r3, r2
 80068fe:	d0f0      	beq.n	80068e2 <HAL_RCC_OscConfig+0x432>
 8006900:	e013      	b.n	800692a <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006902:	f7fe fbfd 	bl	8005100 <HAL_GetTick>
 8006906:	0003      	movs	r3, r0
 8006908:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800690a:	e009      	b.n	8006920 <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800690c:	f7fe fbf8 	bl	8005100 <HAL_GetTick>
 8006910:	0002      	movs	r2, r0
 8006912:	693b      	ldr	r3, [r7, #16]
 8006914:	1ad3      	subs	r3, r2, r3
 8006916:	4a73      	ldr	r2, [pc, #460]	; (8006ae4 <HAL_RCC_OscConfig+0x634>)
 8006918:	4293      	cmp	r3, r2
 800691a:	d901      	bls.n	8006920 <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 800691c:	2303      	movs	r3, #3
 800691e:	e121      	b.n	8006b64 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006920:	4b6e      	ldr	r3, [pc, #440]	; (8006adc <HAL_RCC_OscConfig+0x62c>)
 8006922:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006924:	2202      	movs	r2, #2
 8006926:	4013      	ands	r3, r2
 8006928:	d1f0      	bne.n	800690c <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800692a:	231f      	movs	r3, #31
 800692c:	18fb      	adds	r3, r7, r3
 800692e:	781b      	ldrb	r3, [r3, #0]
 8006930:	2b01      	cmp	r3, #1
 8006932:	d105      	bne.n	8006940 <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8006934:	4b69      	ldr	r3, [pc, #420]	; (8006adc <HAL_RCC_OscConfig+0x62c>)
 8006936:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006938:	4b68      	ldr	r3, [pc, #416]	; (8006adc <HAL_RCC_OscConfig+0x62c>)
 800693a:	496b      	ldr	r1, [pc, #428]	; (8006ae8 <HAL_RCC_OscConfig+0x638>)
 800693c:	400a      	ands	r2, r1
 800693e:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	2220      	movs	r2, #32
 8006946:	4013      	ands	r3, r2
 8006948:	d039      	beq.n	80069be <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	69db      	ldr	r3, [r3, #28]
 800694e:	2b00      	cmp	r3, #0
 8006950:	d01b      	beq.n	800698a <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006952:	4b62      	ldr	r3, [pc, #392]	; (8006adc <HAL_RCC_OscConfig+0x62c>)
 8006954:	681a      	ldr	r2, [r3, #0]
 8006956:	4b61      	ldr	r3, [pc, #388]	; (8006adc <HAL_RCC_OscConfig+0x62c>)
 8006958:	2180      	movs	r1, #128	; 0x80
 800695a:	03c9      	lsls	r1, r1, #15
 800695c:	430a      	orrs	r2, r1
 800695e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006960:	f7fe fbce 	bl	8005100 <HAL_GetTick>
 8006964:	0003      	movs	r3, r0
 8006966:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8006968:	e008      	b.n	800697c <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800696a:	f7fe fbc9 	bl	8005100 <HAL_GetTick>
 800696e:	0002      	movs	r2, r0
 8006970:	693b      	ldr	r3, [r7, #16]
 8006972:	1ad3      	subs	r3, r2, r3
 8006974:	2b02      	cmp	r3, #2
 8006976:	d901      	bls.n	800697c <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 8006978:	2303      	movs	r3, #3
 800697a:	e0f3      	b.n	8006b64 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800697c:	4b57      	ldr	r3, [pc, #348]	; (8006adc <HAL_RCC_OscConfig+0x62c>)
 800697e:	681a      	ldr	r2, [r3, #0]
 8006980:	2380      	movs	r3, #128	; 0x80
 8006982:	041b      	lsls	r3, r3, #16
 8006984:	4013      	ands	r3, r2
 8006986:	d0f0      	beq.n	800696a <HAL_RCC_OscConfig+0x4ba>
 8006988:	e019      	b.n	80069be <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800698a:	4b54      	ldr	r3, [pc, #336]	; (8006adc <HAL_RCC_OscConfig+0x62c>)
 800698c:	681a      	ldr	r2, [r3, #0]
 800698e:	4b53      	ldr	r3, [pc, #332]	; (8006adc <HAL_RCC_OscConfig+0x62c>)
 8006990:	4956      	ldr	r1, [pc, #344]	; (8006aec <HAL_RCC_OscConfig+0x63c>)
 8006992:	400a      	ands	r2, r1
 8006994:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006996:	f7fe fbb3 	bl	8005100 <HAL_GetTick>
 800699a:	0003      	movs	r3, r0
 800699c:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800699e:	e008      	b.n	80069b2 <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80069a0:	f7fe fbae 	bl	8005100 <HAL_GetTick>
 80069a4:	0002      	movs	r2, r0
 80069a6:	693b      	ldr	r3, [r7, #16]
 80069a8:	1ad3      	subs	r3, r2, r3
 80069aa:	2b02      	cmp	r3, #2
 80069ac:	d901      	bls.n	80069b2 <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 80069ae:	2303      	movs	r3, #3
 80069b0:	e0d8      	b.n	8006b64 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80069b2:	4b4a      	ldr	r3, [pc, #296]	; (8006adc <HAL_RCC_OscConfig+0x62c>)
 80069b4:	681a      	ldr	r2, [r3, #0]
 80069b6:	2380      	movs	r3, #128	; 0x80
 80069b8:	041b      	lsls	r3, r3, #16
 80069ba:	4013      	ands	r3, r2
 80069bc:	d1f0      	bne.n	80069a0 <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	6a1b      	ldr	r3, [r3, #32]
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d100      	bne.n	80069c8 <HAL_RCC_OscConfig+0x518>
 80069c6:	e0cc      	b.n	8006b62 <HAL_RCC_OscConfig+0x6b2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80069c8:	4b44      	ldr	r3, [pc, #272]	; (8006adc <HAL_RCC_OscConfig+0x62c>)
 80069ca:	689b      	ldr	r3, [r3, #8]
 80069cc:	2238      	movs	r2, #56	; 0x38
 80069ce:	4013      	ands	r3, r2
 80069d0:	2b10      	cmp	r3, #16
 80069d2:	d100      	bne.n	80069d6 <HAL_RCC_OscConfig+0x526>
 80069d4:	e07b      	b.n	8006ace <HAL_RCC_OscConfig+0x61e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	6a1b      	ldr	r3, [r3, #32]
 80069da:	2b02      	cmp	r3, #2
 80069dc:	d156      	bne.n	8006a8c <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80069de:	4b3f      	ldr	r3, [pc, #252]	; (8006adc <HAL_RCC_OscConfig+0x62c>)
 80069e0:	681a      	ldr	r2, [r3, #0]
 80069e2:	4b3e      	ldr	r3, [pc, #248]	; (8006adc <HAL_RCC_OscConfig+0x62c>)
 80069e4:	4942      	ldr	r1, [pc, #264]	; (8006af0 <HAL_RCC_OscConfig+0x640>)
 80069e6:	400a      	ands	r2, r1
 80069e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069ea:	f7fe fb89 	bl	8005100 <HAL_GetTick>
 80069ee:	0003      	movs	r3, r0
 80069f0:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80069f2:	e008      	b.n	8006a06 <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80069f4:	f7fe fb84 	bl	8005100 <HAL_GetTick>
 80069f8:	0002      	movs	r2, r0
 80069fa:	693b      	ldr	r3, [r7, #16]
 80069fc:	1ad3      	subs	r3, r2, r3
 80069fe:	2b02      	cmp	r3, #2
 8006a00:	d901      	bls.n	8006a06 <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 8006a02:	2303      	movs	r3, #3
 8006a04:	e0ae      	b.n	8006b64 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006a06:	4b35      	ldr	r3, [pc, #212]	; (8006adc <HAL_RCC_OscConfig+0x62c>)
 8006a08:	681a      	ldr	r2, [r3, #0]
 8006a0a:	2380      	movs	r3, #128	; 0x80
 8006a0c:	049b      	lsls	r3, r3, #18
 8006a0e:	4013      	ands	r3, r2
 8006a10:	d1f0      	bne.n	80069f4 <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006a12:	4b32      	ldr	r3, [pc, #200]	; (8006adc <HAL_RCC_OscConfig+0x62c>)
 8006a14:	68db      	ldr	r3, [r3, #12]
 8006a16:	4a37      	ldr	r2, [pc, #220]	; (8006af4 <HAL_RCC_OscConfig+0x644>)
 8006a18:	4013      	ands	r3, r2
 8006a1a:	0019      	movs	r1, r3
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a24:	431a      	orrs	r2, r3
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a2a:	021b      	lsls	r3, r3, #8
 8006a2c:	431a      	orrs	r2, r3
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a32:	431a      	orrs	r2, r3
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a38:	431a      	orrs	r2, r3
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a3e:	431a      	orrs	r2, r3
 8006a40:	4b26      	ldr	r3, [pc, #152]	; (8006adc <HAL_RCC_OscConfig+0x62c>)
 8006a42:	430a      	orrs	r2, r1
 8006a44:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006a46:	4b25      	ldr	r3, [pc, #148]	; (8006adc <HAL_RCC_OscConfig+0x62c>)
 8006a48:	681a      	ldr	r2, [r3, #0]
 8006a4a:	4b24      	ldr	r3, [pc, #144]	; (8006adc <HAL_RCC_OscConfig+0x62c>)
 8006a4c:	2180      	movs	r1, #128	; 0x80
 8006a4e:	0449      	lsls	r1, r1, #17
 8006a50:	430a      	orrs	r2, r1
 8006a52:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8006a54:	4b21      	ldr	r3, [pc, #132]	; (8006adc <HAL_RCC_OscConfig+0x62c>)
 8006a56:	68da      	ldr	r2, [r3, #12]
 8006a58:	4b20      	ldr	r3, [pc, #128]	; (8006adc <HAL_RCC_OscConfig+0x62c>)
 8006a5a:	2180      	movs	r1, #128	; 0x80
 8006a5c:	0549      	lsls	r1, r1, #21
 8006a5e:	430a      	orrs	r2, r1
 8006a60:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a62:	f7fe fb4d 	bl	8005100 <HAL_GetTick>
 8006a66:	0003      	movs	r3, r0
 8006a68:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006a6a:	e008      	b.n	8006a7e <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006a6c:	f7fe fb48 	bl	8005100 <HAL_GetTick>
 8006a70:	0002      	movs	r2, r0
 8006a72:	693b      	ldr	r3, [r7, #16]
 8006a74:	1ad3      	subs	r3, r2, r3
 8006a76:	2b02      	cmp	r3, #2
 8006a78:	d901      	bls.n	8006a7e <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 8006a7a:	2303      	movs	r3, #3
 8006a7c:	e072      	b.n	8006b64 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006a7e:	4b17      	ldr	r3, [pc, #92]	; (8006adc <HAL_RCC_OscConfig+0x62c>)
 8006a80:	681a      	ldr	r2, [r3, #0]
 8006a82:	2380      	movs	r3, #128	; 0x80
 8006a84:	049b      	lsls	r3, r3, #18
 8006a86:	4013      	ands	r3, r2
 8006a88:	d0f0      	beq.n	8006a6c <HAL_RCC_OscConfig+0x5bc>
 8006a8a:	e06a      	b.n	8006b62 <HAL_RCC_OscConfig+0x6b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006a8c:	4b13      	ldr	r3, [pc, #76]	; (8006adc <HAL_RCC_OscConfig+0x62c>)
 8006a8e:	681a      	ldr	r2, [r3, #0]
 8006a90:	4b12      	ldr	r3, [pc, #72]	; (8006adc <HAL_RCC_OscConfig+0x62c>)
 8006a92:	4917      	ldr	r1, [pc, #92]	; (8006af0 <HAL_RCC_OscConfig+0x640>)
 8006a94:	400a      	ands	r2, r1
 8006a96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a98:	f7fe fb32 	bl	8005100 <HAL_GetTick>
 8006a9c:	0003      	movs	r3, r0
 8006a9e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006aa0:	e008      	b.n	8006ab4 <HAL_RCC_OscConfig+0x604>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006aa2:	f7fe fb2d 	bl	8005100 <HAL_GetTick>
 8006aa6:	0002      	movs	r2, r0
 8006aa8:	693b      	ldr	r3, [r7, #16]
 8006aaa:	1ad3      	subs	r3, r2, r3
 8006aac:	2b02      	cmp	r3, #2
 8006aae:	d901      	bls.n	8006ab4 <HAL_RCC_OscConfig+0x604>
          {
            return HAL_TIMEOUT;
 8006ab0:	2303      	movs	r3, #3
 8006ab2:	e057      	b.n	8006b64 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006ab4:	4b09      	ldr	r3, [pc, #36]	; (8006adc <HAL_RCC_OscConfig+0x62c>)
 8006ab6:	681a      	ldr	r2, [r3, #0]
 8006ab8:	2380      	movs	r3, #128	; 0x80
 8006aba:	049b      	lsls	r3, r3, #18
 8006abc:	4013      	ands	r3, r2
 8006abe:	d1f0      	bne.n	8006aa2 <HAL_RCC_OscConfig+0x5f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8006ac0:	4b06      	ldr	r3, [pc, #24]	; (8006adc <HAL_RCC_OscConfig+0x62c>)
 8006ac2:	68da      	ldr	r2, [r3, #12]
 8006ac4:	4b05      	ldr	r3, [pc, #20]	; (8006adc <HAL_RCC_OscConfig+0x62c>)
 8006ac6:	490c      	ldr	r1, [pc, #48]	; (8006af8 <HAL_RCC_OscConfig+0x648>)
 8006ac8:	400a      	ands	r2, r1
 8006aca:	60da      	str	r2, [r3, #12]
 8006acc:	e049      	b.n	8006b62 <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	6a1b      	ldr	r3, [r3, #32]
 8006ad2:	2b01      	cmp	r3, #1
 8006ad4:	d112      	bne.n	8006afc <HAL_RCC_OscConfig+0x64c>
      {
        return HAL_ERROR;
 8006ad6:	2301      	movs	r3, #1
 8006ad8:	e044      	b.n	8006b64 <HAL_RCC_OscConfig+0x6b4>
 8006ada:	46c0      	nop			; (mov r8, r8)
 8006adc:	40021000 	.word	0x40021000
 8006ae0:	40007000 	.word	0x40007000
 8006ae4:	00001388 	.word	0x00001388
 8006ae8:	efffffff 	.word	0xefffffff
 8006aec:	ffbfffff 	.word	0xffbfffff
 8006af0:	feffffff 	.word	0xfeffffff
 8006af4:	11c1808c 	.word	0x11c1808c
 8006af8:	eefefffc 	.word	0xeefefffc
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8006afc:	4b1b      	ldr	r3, [pc, #108]	; (8006b6c <HAL_RCC_OscConfig+0x6bc>)
 8006afe:	68db      	ldr	r3, [r3, #12]
 8006b00:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006b02:	697b      	ldr	r3, [r7, #20]
 8006b04:	2203      	movs	r2, #3
 8006b06:	401a      	ands	r2, r3
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b0c:	429a      	cmp	r2, r3
 8006b0e:	d126      	bne.n	8006b5e <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006b10:	697b      	ldr	r3, [r7, #20]
 8006b12:	2270      	movs	r2, #112	; 0x70
 8006b14:	401a      	ands	r2, r3
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006b1a:	429a      	cmp	r2, r3
 8006b1c:	d11f      	bne.n	8006b5e <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006b1e:	697a      	ldr	r2, [r7, #20]
 8006b20:	23fe      	movs	r3, #254	; 0xfe
 8006b22:	01db      	lsls	r3, r3, #7
 8006b24:	401a      	ands	r2, r3
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b2a:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006b2c:	429a      	cmp	r2, r3
 8006b2e:	d116      	bne.n	8006b5e <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006b30:	697a      	ldr	r2, [r7, #20]
 8006b32:	23f8      	movs	r3, #248	; 0xf8
 8006b34:	039b      	lsls	r3, r3, #14
 8006b36:	401a      	ands	r2, r3
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006b3c:	429a      	cmp	r2, r3
 8006b3e:	d10e      	bne.n	8006b5e <HAL_RCC_OscConfig+0x6ae>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8006b40:	697a      	ldr	r2, [r7, #20]
 8006b42:	23e0      	movs	r3, #224	; 0xe0
 8006b44:	051b      	lsls	r3, r3, #20
 8006b46:	401a      	ands	r2, r3
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006b4c:	429a      	cmp	r2, r3
 8006b4e:	d106      	bne.n	8006b5e <HAL_RCC_OscConfig+0x6ae>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8006b50:	697b      	ldr	r3, [r7, #20]
 8006b52:	0f5b      	lsrs	r3, r3, #29
 8006b54:	075a      	lsls	r2, r3, #29
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8006b5a:	429a      	cmp	r2, r3
 8006b5c:	d001      	beq.n	8006b62 <HAL_RCC_OscConfig+0x6b2>
        {
          return HAL_ERROR;
 8006b5e:	2301      	movs	r3, #1
 8006b60:	e000      	b.n	8006b64 <HAL_RCC_OscConfig+0x6b4>
        }
      }
    }
  }
  return HAL_OK;
 8006b62:	2300      	movs	r3, #0
}
 8006b64:	0018      	movs	r0, r3
 8006b66:	46bd      	mov	sp, r7
 8006b68:	b008      	add	sp, #32
 8006b6a:	bd80      	pop	{r7, pc}
 8006b6c:	40021000 	.word	0x40021000

08006b70 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006b70:	b580      	push	{r7, lr}
 8006b72:	b084      	sub	sp, #16
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	6078      	str	r0, [r7, #4]
 8006b78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d101      	bne.n	8006b84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006b80:	2301      	movs	r3, #1
 8006b82:	e0e9      	b.n	8006d58 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006b84:	4b76      	ldr	r3, [pc, #472]	; (8006d60 <HAL_RCC_ClockConfig+0x1f0>)
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	2207      	movs	r2, #7
 8006b8a:	4013      	ands	r3, r2
 8006b8c:	683a      	ldr	r2, [r7, #0]
 8006b8e:	429a      	cmp	r2, r3
 8006b90:	d91e      	bls.n	8006bd0 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006b92:	4b73      	ldr	r3, [pc, #460]	; (8006d60 <HAL_RCC_ClockConfig+0x1f0>)
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	2207      	movs	r2, #7
 8006b98:	4393      	bics	r3, r2
 8006b9a:	0019      	movs	r1, r3
 8006b9c:	4b70      	ldr	r3, [pc, #448]	; (8006d60 <HAL_RCC_ClockConfig+0x1f0>)
 8006b9e:	683a      	ldr	r2, [r7, #0]
 8006ba0:	430a      	orrs	r2, r1
 8006ba2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8006ba4:	f7fe faac 	bl	8005100 <HAL_GetTick>
 8006ba8:	0003      	movs	r3, r0
 8006baa:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8006bac:	e009      	b.n	8006bc2 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006bae:	f7fe faa7 	bl	8005100 <HAL_GetTick>
 8006bb2:	0002      	movs	r2, r0
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	1ad3      	subs	r3, r2, r3
 8006bb8:	4a6a      	ldr	r2, [pc, #424]	; (8006d64 <HAL_RCC_ClockConfig+0x1f4>)
 8006bba:	4293      	cmp	r3, r2
 8006bbc:	d901      	bls.n	8006bc2 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8006bbe:	2303      	movs	r3, #3
 8006bc0:	e0ca      	b.n	8006d58 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8006bc2:	4b67      	ldr	r3, [pc, #412]	; (8006d60 <HAL_RCC_ClockConfig+0x1f0>)
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	2207      	movs	r2, #7
 8006bc8:	4013      	ands	r3, r2
 8006bca:	683a      	ldr	r2, [r7, #0]
 8006bcc:	429a      	cmp	r2, r3
 8006bce:	d1ee      	bne.n	8006bae <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	2202      	movs	r2, #2
 8006bd6:	4013      	ands	r3, r2
 8006bd8:	d015      	beq.n	8006c06 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	2204      	movs	r2, #4
 8006be0:	4013      	ands	r3, r2
 8006be2:	d006      	beq.n	8006bf2 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8006be4:	4b60      	ldr	r3, [pc, #384]	; (8006d68 <HAL_RCC_ClockConfig+0x1f8>)
 8006be6:	689a      	ldr	r2, [r3, #8]
 8006be8:	4b5f      	ldr	r3, [pc, #380]	; (8006d68 <HAL_RCC_ClockConfig+0x1f8>)
 8006bea:	21e0      	movs	r1, #224	; 0xe0
 8006bec:	01c9      	lsls	r1, r1, #7
 8006bee:	430a      	orrs	r2, r1
 8006bf0:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006bf2:	4b5d      	ldr	r3, [pc, #372]	; (8006d68 <HAL_RCC_ClockConfig+0x1f8>)
 8006bf4:	689b      	ldr	r3, [r3, #8]
 8006bf6:	4a5d      	ldr	r2, [pc, #372]	; (8006d6c <HAL_RCC_ClockConfig+0x1fc>)
 8006bf8:	4013      	ands	r3, r2
 8006bfa:	0019      	movs	r1, r3
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	689a      	ldr	r2, [r3, #8]
 8006c00:	4b59      	ldr	r3, [pc, #356]	; (8006d68 <HAL_RCC_ClockConfig+0x1f8>)
 8006c02:	430a      	orrs	r2, r1
 8006c04:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	2201      	movs	r2, #1
 8006c0c:	4013      	ands	r3, r2
 8006c0e:	d057      	beq.n	8006cc0 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	685b      	ldr	r3, [r3, #4]
 8006c14:	2b01      	cmp	r3, #1
 8006c16:	d107      	bne.n	8006c28 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006c18:	4b53      	ldr	r3, [pc, #332]	; (8006d68 <HAL_RCC_ClockConfig+0x1f8>)
 8006c1a:	681a      	ldr	r2, [r3, #0]
 8006c1c:	2380      	movs	r3, #128	; 0x80
 8006c1e:	029b      	lsls	r3, r3, #10
 8006c20:	4013      	ands	r3, r2
 8006c22:	d12b      	bne.n	8006c7c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8006c24:	2301      	movs	r3, #1
 8006c26:	e097      	b.n	8006d58 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	685b      	ldr	r3, [r3, #4]
 8006c2c:	2b02      	cmp	r3, #2
 8006c2e:	d107      	bne.n	8006c40 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006c30:	4b4d      	ldr	r3, [pc, #308]	; (8006d68 <HAL_RCC_ClockConfig+0x1f8>)
 8006c32:	681a      	ldr	r2, [r3, #0]
 8006c34:	2380      	movs	r3, #128	; 0x80
 8006c36:	049b      	lsls	r3, r3, #18
 8006c38:	4013      	ands	r3, r2
 8006c3a:	d11f      	bne.n	8006c7c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8006c3c:	2301      	movs	r3, #1
 8006c3e:	e08b      	b.n	8006d58 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	685b      	ldr	r3, [r3, #4]
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d107      	bne.n	8006c58 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006c48:	4b47      	ldr	r3, [pc, #284]	; (8006d68 <HAL_RCC_ClockConfig+0x1f8>)
 8006c4a:	681a      	ldr	r2, [r3, #0]
 8006c4c:	2380      	movs	r3, #128	; 0x80
 8006c4e:	00db      	lsls	r3, r3, #3
 8006c50:	4013      	ands	r3, r2
 8006c52:	d113      	bne.n	8006c7c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8006c54:	2301      	movs	r3, #1
 8006c56:	e07f      	b.n	8006d58 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	685b      	ldr	r3, [r3, #4]
 8006c5c:	2b03      	cmp	r3, #3
 8006c5e:	d106      	bne.n	8006c6e <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006c60:	4b41      	ldr	r3, [pc, #260]	; (8006d68 <HAL_RCC_ClockConfig+0x1f8>)
 8006c62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c64:	2202      	movs	r2, #2
 8006c66:	4013      	ands	r3, r2
 8006c68:	d108      	bne.n	8006c7c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8006c6a:	2301      	movs	r3, #1
 8006c6c:	e074      	b.n	8006d58 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006c6e:	4b3e      	ldr	r3, [pc, #248]	; (8006d68 <HAL_RCC_ClockConfig+0x1f8>)
 8006c70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c72:	2202      	movs	r2, #2
 8006c74:	4013      	ands	r3, r2
 8006c76:	d101      	bne.n	8006c7c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8006c78:	2301      	movs	r3, #1
 8006c7a:	e06d      	b.n	8006d58 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006c7c:	4b3a      	ldr	r3, [pc, #232]	; (8006d68 <HAL_RCC_ClockConfig+0x1f8>)
 8006c7e:	689b      	ldr	r3, [r3, #8]
 8006c80:	2207      	movs	r2, #7
 8006c82:	4393      	bics	r3, r2
 8006c84:	0019      	movs	r1, r3
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	685a      	ldr	r2, [r3, #4]
 8006c8a:	4b37      	ldr	r3, [pc, #220]	; (8006d68 <HAL_RCC_ClockConfig+0x1f8>)
 8006c8c:	430a      	orrs	r2, r1
 8006c8e:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006c90:	f7fe fa36 	bl	8005100 <HAL_GetTick>
 8006c94:	0003      	movs	r3, r0
 8006c96:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006c98:	e009      	b.n	8006cae <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006c9a:	f7fe fa31 	bl	8005100 <HAL_GetTick>
 8006c9e:	0002      	movs	r2, r0
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	1ad3      	subs	r3, r2, r3
 8006ca4:	4a2f      	ldr	r2, [pc, #188]	; (8006d64 <HAL_RCC_ClockConfig+0x1f4>)
 8006ca6:	4293      	cmp	r3, r2
 8006ca8:	d901      	bls.n	8006cae <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8006caa:	2303      	movs	r3, #3
 8006cac:	e054      	b.n	8006d58 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006cae:	4b2e      	ldr	r3, [pc, #184]	; (8006d68 <HAL_RCC_ClockConfig+0x1f8>)
 8006cb0:	689b      	ldr	r3, [r3, #8]
 8006cb2:	2238      	movs	r2, #56	; 0x38
 8006cb4:	401a      	ands	r2, r3
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	685b      	ldr	r3, [r3, #4]
 8006cba:	00db      	lsls	r3, r3, #3
 8006cbc:	429a      	cmp	r2, r3
 8006cbe:	d1ec      	bne.n	8006c9a <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006cc0:	4b27      	ldr	r3, [pc, #156]	; (8006d60 <HAL_RCC_ClockConfig+0x1f0>)
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	2207      	movs	r2, #7
 8006cc6:	4013      	ands	r3, r2
 8006cc8:	683a      	ldr	r2, [r7, #0]
 8006cca:	429a      	cmp	r2, r3
 8006ccc:	d21e      	bcs.n	8006d0c <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006cce:	4b24      	ldr	r3, [pc, #144]	; (8006d60 <HAL_RCC_ClockConfig+0x1f0>)
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	2207      	movs	r2, #7
 8006cd4:	4393      	bics	r3, r2
 8006cd6:	0019      	movs	r1, r3
 8006cd8:	4b21      	ldr	r3, [pc, #132]	; (8006d60 <HAL_RCC_ClockConfig+0x1f0>)
 8006cda:	683a      	ldr	r2, [r7, #0]
 8006cdc:	430a      	orrs	r2, r1
 8006cde:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8006ce0:	f7fe fa0e 	bl	8005100 <HAL_GetTick>
 8006ce4:	0003      	movs	r3, r0
 8006ce6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8006ce8:	e009      	b.n	8006cfe <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006cea:	f7fe fa09 	bl	8005100 <HAL_GetTick>
 8006cee:	0002      	movs	r2, r0
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	1ad3      	subs	r3, r2, r3
 8006cf4:	4a1b      	ldr	r2, [pc, #108]	; (8006d64 <HAL_RCC_ClockConfig+0x1f4>)
 8006cf6:	4293      	cmp	r3, r2
 8006cf8:	d901      	bls.n	8006cfe <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8006cfa:	2303      	movs	r3, #3
 8006cfc:	e02c      	b.n	8006d58 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8006cfe:	4b18      	ldr	r3, [pc, #96]	; (8006d60 <HAL_RCC_ClockConfig+0x1f0>)
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	2207      	movs	r2, #7
 8006d04:	4013      	ands	r3, r2
 8006d06:	683a      	ldr	r2, [r7, #0]
 8006d08:	429a      	cmp	r2, r3
 8006d0a:	d1ee      	bne.n	8006cea <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	2204      	movs	r2, #4
 8006d12:	4013      	ands	r3, r2
 8006d14:	d009      	beq.n	8006d2a <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8006d16:	4b14      	ldr	r3, [pc, #80]	; (8006d68 <HAL_RCC_ClockConfig+0x1f8>)
 8006d18:	689b      	ldr	r3, [r3, #8]
 8006d1a:	4a15      	ldr	r2, [pc, #84]	; (8006d70 <HAL_RCC_ClockConfig+0x200>)
 8006d1c:	4013      	ands	r3, r2
 8006d1e:	0019      	movs	r1, r3
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	68da      	ldr	r2, [r3, #12]
 8006d24:	4b10      	ldr	r3, [pc, #64]	; (8006d68 <HAL_RCC_ClockConfig+0x1f8>)
 8006d26:	430a      	orrs	r2, r1
 8006d28:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8006d2a:	f000 f829 	bl	8006d80 <HAL_RCC_GetSysClockFreq>
 8006d2e:	0001      	movs	r1, r0
 8006d30:	4b0d      	ldr	r3, [pc, #52]	; (8006d68 <HAL_RCC_ClockConfig+0x1f8>)
 8006d32:	689b      	ldr	r3, [r3, #8]
 8006d34:	0a1b      	lsrs	r3, r3, #8
 8006d36:	220f      	movs	r2, #15
 8006d38:	401a      	ands	r2, r3
 8006d3a:	4b0e      	ldr	r3, [pc, #56]	; (8006d74 <HAL_RCC_ClockConfig+0x204>)
 8006d3c:	0092      	lsls	r2, r2, #2
 8006d3e:	58d3      	ldr	r3, [r2, r3]
 8006d40:	221f      	movs	r2, #31
 8006d42:	4013      	ands	r3, r2
 8006d44:	000a      	movs	r2, r1
 8006d46:	40da      	lsrs	r2, r3
 8006d48:	4b0b      	ldr	r3, [pc, #44]	; (8006d78 <HAL_RCC_ClockConfig+0x208>)
 8006d4a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8006d4c:	4b0b      	ldr	r3, [pc, #44]	; (8006d7c <HAL_RCC_ClockConfig+0x20c>)
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	0018      	movs	r0, r3
 8006d52:	f7fe f805 	bl	8004d60 <HAL_InitTick>
 8006d56:	0003      	movs	r3, r0
}
 8006d58:	0018      	movs	r0, r3
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	b004      	add	sp, #16
 8006d5e:	bd80      	pop	{r7, pc}
 8006d60:	40022000 	.word	0x40022000
 8006d64:	00001388 	.word	0x00001388
 8006d68:	40021000 	.word	0x40021000
 8006d6c:	fffff0ff 	.word	0xfffff0ff
 8006d70:	ffff8fff 	.word	0xffff8fff
 8006d74:	0800f52c 	.word	0x0800f52c
 8006d78:	20000000 	.word	0x20000000
 8006d7c:	20000004 	.word	0x20000004

08006d80 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006d80:	b580      	push	{r7, lr}
 8006d82:	b086      	sub	sp, #24
 8006d84:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006d86:	4b3c      	ldr	r3, [pc, #240]	; (8006e78 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006d88:	689b      	ldr	r3, [r3, #8]
 8006d8a:	2238      	movs	r2, #56	; 0x38
 8006d8c:	4013      	ands	r3, r2
 8006d8e:	d10f      	bne.n	8006db0 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8006d90:	4b39      	ldr	r3, [pc, #228]	; (8006e78 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	0adb      	lsrs	r3, r3, #11
 8006d96:	2207      	movs	r2, #7
 8006d98:	4013      	ands	r3, r2
 8006d9a:	2201      	movs	r2, #1
 8006d9c:	409a      	lsls	r2, r3
 8006d9e:	0013      	movs	r3, r2
 8006da0:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8006da2:	6839      	ldr	r1, [r7, #0]
 8006da4:	4835      	ldr	r0, [pc, #212]	; (8006e7c <HAL_RCC_GetSysClockFreq+0xfc>)
 8006da6:	f7f9 f9d5 	bl	8000154 <__udivsi3>
 8006daa:	0003      	movs	r3, r0
 8006dac:	613b      	str	r3, [r7, #16]
 8006dae:	e05d      	b.n	8006e6c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006db0:	4b31      	ldr	r3, [pc, #196]	; (8006e78 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006db2:	689b      	ldr	r3, [r3, #8]
 8006db4:	2238      	movs	r2, #56	; 0x38
 8006db6:	4013      	ands	r3, r2
 8006db8:	2b08      	cmp	r3, #8
 8006dba:	d102      	bne.n	8006dc2 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006dbc:	4b30      	ldr	r3, [pc, #192]	; (8006e80 <HAL_RCC_GetSysClockFreq+0x100>)
 8006dbe:	613b      	str	r3, [r7, #16]
 8006dc0:	e054      	b.n	8006e6c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006dc2:	4b2d      	ldr	r3, [pc, #180]	; (8006e78 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006dc4:	689b      	ldr	r3, [r3, #8]
 8006dc6:	2238      	movs	r2, #56	; 0x38
 8006dc8:	4013      	ands	r3, r2
 8006dca:	2b10      	cmp	r3, #16
 8006dcc:	d138      	bne.n	8006e40 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8006dce:	4b2a      	ldr	r3, [pc, #168]	; (8006e78 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006dd0:	68db      	ldr	r3, [r3, #12]
 8006dd2:	2203      	movs	r2, #3
 8006dd4:	4013      	ands	r3, r2
 8006dd6:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006dd8:	4b27      	ldr	r3, [pc, #156]	; (8006e78 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006dda:	68db      	ldr	r3, [r3, #12]
 8006ddc:	091b      	lsrs	r3, r3, #4
 8006dde:	2207      	movs	r2, #7
 8006de0:	4013      	ands	r3, r2
 8006de2:	3301      	adds	r3, #1
 8006de4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	2b03      	cmp	r3, #3
 8006dea:	d10d      	bne.n	8006e08 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006dec:	68b9      	ldr	r1, [r7, #8]
 8006dee:	4824      	ldr	r0, [pc, #144]	; (8006e80 <HAL_RCC_GetSysClockFreq+0x100>)
 8006df0:	f7f9 f9b0 	bl	8000154 <__udivsi3>
 8006df4:	0003      	movs	r3, r0
 8006df6:	0019      	movs	r1, r3
 8006df8:	4b1f      	ldr	r3, [pc, #124]	; (8006e78 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006dfa:	68db      	ldr	r3, [r3, #12]
 8006dfc:	0a1b      	lsrs	r3, r3, #8
 8006dfe:	227f      	movs	r2, #127	; 0x7f
 8006e00:	4013      	ands	r3, r2
 8006e02:	434b      	muls	r3, r1
 8006e04:	617b      	str	r3, [r7, #20]
        break;
 8006e06:	e00d      	b.n	8006e24 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8006e08:	68b9      	ldr	r1, [r7, #8]
 8006e0a:	481c      	ldr	r0, [pc, #112]	; (8006e7c <HAL_RCC_GetSysClockFreq+0xfc>)
 8006e0c:	f7f9 f9a2 	bl	8000154 <__udivsi3>
 8006e10:	0003      	movs	r3, r0
 8006e12:	0019      	movs	r1, r3
 8006e14:	4b18      	ldr	r3, [pc, #96]	; (8006e78 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006e16:	68db      	ldr	r3, [r3, #12]
 8006e18:	0a1b      	lsrs	r3, r3, #8
 8006e1a:	227f      	movs	r2, #127	; 0x7f
 8006e1c:	4013      	ands	r3, r2
 8006e1e:	434b      	muls	r3, r1
 8006e20:	617b      	str	r3, [r7, #20]
        break;
 8006e22:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8006e24:	4b14      	ldr	r3, [pc, #80]	; (8006e78 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006e26:	68db      	ldr	r3, [r3, #12]
 8006e28:	0f5b      	lsrs	r3, r3, #29
 8006e2a:	2207      	movs	r2, #7
 8006e2c:	4013      	ands	r3, r2
 8006e2e:	3301      	adds	r3, #1
 8006e30:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8006e32:	6879      	ldr	r1, [r7, #4]
 8006e34:	6978      	ldr	r0, [r7, #20]
 8006e36:	f7f9 f98d 	bl	8000154 <__udivsi3>
 8006e3a:	0003      	movs	r3, r0
 8006e3c:	613b      	str	r3, [r7, #16]
 8006e3e:	e015      	b.n	8006e6c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8006e40:	4b0d      	ldr	r3, [pc, #52]	; (8006e78 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006e42:	689b      	ldr	r3, [r3, #8]
 8006e44:	2238      	movs	r2, #56	; 0x38
 8006e46:	4013      	ands	r3, r2
 8006e48:	2b20      	cmp	r3, #32
 8006e4a:	d103      	bne.n	8006e54 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8006e4c:	2380      	movs	r3, #128	; 0x80
 8006e4e:	021b      	lsls	r3, r3, #8
 8006e50:	613b      	str	r3, [r7, #16]
 8006e52:	e00b      	b.n	8006e6c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8006e54:	4b08      	ldr	r3, [pc, #32]	; (8006e78 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006e56:	689b      	ldr	r3, [r3, #8]
 8006e58:	2238      	movs	r2, #56	; 0x38
 8006e5a:	4013      	ands	r3, r2
 8006e5c:	2b18      	cmp	r3, #24
 8006e5e:	d103      	bne.n	8006e68 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8006e60:	23fa      	movs	r3, #250	; 0xfa
 8006e62:	01db      	lsls	r3, r3, #7
 8006e64:	613b      	str	r3, [r7, #16]
 8006e66:	e001      	b.n	8006e6c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8006e68:	2300      	movs	r3, #0
 8006e6a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8006e6c:	693b      	ldr	r3, [r7, #16]
}
 8006e6e:	0018      	movs	r0, r3
 8006e70:	46bd      	mov	sp, r7
 8006e72:	b006      	add	sp, #24
 8006e74:	bd80      	pop	{r7, pc}
 8006e76:	46c0      	nop			; (mov r8, r8)
 8006e78:	40021000 	.word	0x40021000
 8006e7c:	00f42400 	.word	0x00f42400
 8006e80:	007a1200 	.word	0x007a1200

08006e84 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006e84:	b580      	push	{r7, lr}
 8006e86:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006e88:	4b02      	ldr	r3, [pc, #8]	; (8006e94 <HAL_RCC_GetHCLKFreq+0x10>)
 8006e8a:	681b      	ldr	r3, [r3, #0]
}
 8006e8c:	0018      	movs	r0, r3
 8006e8e:	46bd      	mov	sp, r7
 8006e90:	bd80      	pop	{r7, pc}
 8006e92:	46c0      	nop			; (mov r8, r8)
 8006e94:	20000000 	.word	0x20000000

08006e98 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006e98:	b5b0      	push	{r4, r5, r7, lr}
 8006e9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8006e9c:	f7ff fff2 	bl	8006e84 <HAL_RCC_GetHCLKFreq>
 8006ea0:	0004      	movs	r4, r0
 8006ea2:	f7ff faf9 	bl	8006498 <LL_RCC_GetAPB1Prescaler>
 8006ea6:	0003      	movs	r3, r0
 8006ea8:	0b1a      	lsrs	r2, r3, #12
 8006eaa:	4b05      	ldr	r3, [pc, #20]	; (8006ec0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006eac:	0092      	lsls	r2, r2, #2
 8006eae:	58d3      	ldr	r3, [r2, r3]
 8006eb0:	221f      	movs	r2, #31
 8006eb2:	4013      	ands	r3, r2
 8006eb4:	40dc      	lsrs	r4, r3
 8006eb6:	0023      	movs	r3, r4
}
 8006eb8:	0018      	movs	r0, r3
 8006eba:	46bd      	mov	sp, r7
 8006ebc:	bdb0      	pop	{r4, r5, r7, pc}
 8006ebe:	46c0      	nop			; (mov r8, r8)
 8006ec0:	0800f56c 	.word	0x0800f56c

08006ec4 <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006ec4:	b580      	push	{r7, lr}
 8006ec6:	b082      	sub	sp, #8
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	6078      	str	r0, [r7, #4]
 8006ecc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	2207      	movs	r2, #7
 8006ed2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006ed4:	4b0e      	ldr	r3, [pc, #56]	; (8006f10 <HAL_RCC_GetClockConfig+0x4c>)
 8006ed6:	689b      	ldr	r3, [r3, #8]
 8006ed8:	2207      	movs	r2, #7
 8006eda:	401a      	ands	r2, r3
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006ee0:	4b0b      	ldr	r3, [pc, #44]	; (8006f10 <HAL_RCC_GetClockConfig+0x4c>)
 8006ee2:	689a      	ldr	r2, [r3, #8]
 8006ee4:	23f0      	movs	r3, #240	; 0xf0
 8006ee6:	011b      	lsls	r3, r3, #4
 8006ee8:	401a      	ands	r2, r3
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);
 8006eee:	4b08      	ldr	r3, [pc, #32]	; (8006f10 <HAL_RCC_GetClockConfig+0x4c>)
 8006ef0:	689a      	ldr	r2, [r3, #8]
 8006ef2:	23e0      	movs	r3, #224	; 0xe0
 8006ef4:	01db      	lsls	r3, r3, #7
 8006ef6:	401a      	ands	r2, r3
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	60da      	str	r2, [r3, #12]


  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006efc:	4b05      	ldr	r3, [pc, #20]	; (8006f14 <HAL_RCC_GetClockConfig+0x50>)
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	2207      	movs	r2, #7
 8006f02:	401a      	ands	r2, r3
 8006f04:	683b      	ldr	r3, [r7, #0]
 8006f06:	601a      	str	r2, [r3, #0]
}
 8006f08:	46c0      	nop			; (mov r8, r8)
 8006f0a:	46bd      	mov	sp, r7
 8006f0c:	b002      	add	sp, #8
 8006f0e:	bd80      	pop	{r7, pc}
 8006f10:	40021000 	.word	0x40021000
 8006f14:	40022000 	.word	0x40022000

08006f18 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006f18:	b580      	push	{r7, lr}
 8006f1a:	b086      	sub	sp, #24
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8006f20:	2313      	movs	r3, #19
 8006f22:	18fb      	adds	r3, r7, r3
 8006f24:	2200      	movs	r2, #0
 8006f26:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006f28:	2312      	movs	r3, #18
 8006f2a:	18fb      	adds	r3, r7, r3
 8006f2c:	2200      	movs	r2, #0
 8006f2e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681a      	ldr	r2, [r3, #0]
 8006f34:	2380      	movs	r3, #128	; 0x80
 8006f36:	029b      	lsls	r3, r3, #10
 8006f38:	4013      	ands	r3, r2
 8006f3a:	d100      	bne.n	8006f3e <HAL_RCCEx_PeriphCLKConfig+0x26>
 8006f3c:	e0ad      	b.n	800709a <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006f3e:	2011      	movs	r0, #17
 8006f40:	183b      	adds	r3, r7, r0
 8006f42:	2200      	movs	r2, #0
 8006f44:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006f46:	4b47      	ldr	r3, [pc, #284]	; (8007064 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8006f48:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006f4a:	2380      	movs	r3, #128	; 0x80
 8006f4c:	055b      	lsls	r3, r3, #21
 8006f4e:	4013      	ands	r3, r2
 8006f50:	d110      	bne.n	8006f74 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006f52:	4b44      	ldr	r3, [pc, #272]	; (8007064 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8006f54:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006f56:	4b43      	ldr	r3, [pc, #268]	; (8007064 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8006f58:	2180      	movs	r1, #128	; 0x80
 8006f5a:	0549      	lsls	r1, r1, #21
 8006f5c:	430a      	orrs	r2, r1
 8006f5e:	63da      	str	r2, [r3, #60]	; 0x3c
 8006f60:	4b40      	ldr	r3, [pc, #256]	; (8007064 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8006f62:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006f64:	2380      	movs	r3, #128	; 0x80
 8006f66:	055b      	lsls	r3, r3, #21
 8006f68:	4013      	ands	r3, r2
 8006f6a:	60bb      	str	r3, [r7, #8]
 8006f6c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006f6e:	183b      	adds	r3, r7, r0
 8006f70:	2201      	movs	r2, #1
 8006f72:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006f74:	4b3c      	ldr	r3, [pc, #240]	; (8007068 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8006f76:	681a      	ldr	r2, [r3, #0]
 8006f78:	4b3b      	ldr	r3, [pc, #236]	; (8007068 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8006f7a:	2180      	movs	r1, #128	; 0x80
 8006f7c:	0049      	lsls	r1, r1, #1
 8006f7e:	430a      	orrs	r2, r1
 8006f80:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006f82:	f7fe f8bd 	bl	8005100 <HAL_GetTick>
 8006f86:	0003      	movs	r3, r0
 8006f88:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006f8a:	e00b      	b.n	8006fa4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006f8c:	f7fe f8b8 	bl	8005100 <HAL_GetTick>
 8006f90:	0002      	movs	r2, r0
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	1ad3      	subs	r3, r2, r3
 8006f96:	2b02      	cmp	r3, #2
 8006f98:	d904      	bls.n	8006fa4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8006f9a:	2313      	movs	r3, #19
 8006f9c:	18fb      	adds	r3, r7, r3
 8006f9e:	2203      	movs	r2, #3
 8006fa0:	701a      	strb	r2, [r3, #0]
        break;
 8006fa2:	e005      	b.n	8006fb0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006fa4:	4b30      	ldr	r3, [pc, #192]	; (8007068 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8006fa6:	681a      	ldr	r2, [r3, #0]
 8006fa8:	2380      	movs	r3, #128	; 0x80
 8006faa:	005b      	lsls	r3, r3, #1
 8006fac:	4013      	ands	r3, r2
 8006fae:	d0ed      	beq.n	8006f8c <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8006fb0:	2313      	movs	r3, #19
 8006fb2:	18fb      	adds	r3, r7, r3
 8006fb4:	781b      	ldrb	r3, [r3, #0]
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d15e      	bne.n	8007078 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006fba:	4b2a      	ldr	r3, [pc, #168]	; (8007064 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8006fbc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006fbe:	23c0      	movs	r3, #192	; 0xc0
 8006fc0:	009b      	lsls	r3, r3, #2
 8006fc2:	4013      	ands	r3, r2
 8006fc4:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006fc6:	697b      	ldr	r3, [r7, #20]
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d019      	beq.n	8007000 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fd0:	697a      	ldr	r2, [r7, #20]
 8006fd2:	429a      	cmp	r2, r3
 8006fd4:	d014      	beq.n	8007000 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006fd6:	4b23      	ldr	r3, [pc, #140]	; (8007064 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8006fd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006fda:	4a24      	ldr	r2, [pc, #144]	; (800706c <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8006fdc:	4013      	ands	r3, r2
 8006fde:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006fe0:	4b20      	ldr	r3, [pc, #128]	; (8007064 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8006fe2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006fe4:	4b1f      	ldr	r3, [pc, #124]	; (8007064 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8006fe6:	2180      	movs	r1, #128	; 0x80
 8006fe8:	0249      	lsls	r1, r1, #9
 8006fea:	430a      	orrs	r2, r1
 8006fec:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006fee:	4b1d      	ldr	r3, [pc, #116]	; (8007064 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8006ff0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006ff2:	4b1c      	ldr	r3, [pc, #112]	; (8007064 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8006ff4:	491e      	ldr	r1, [pc, #120]	; (8007070 <HAL_RCCEx_PeriphCLKConfig+0x158>)
 8006ff6:	400a      	ands	r2, r1
 8006ff8:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006ffa:	4b1a      	ldr	r3, [pc, #104]	; (8007064 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8006ffc:	697a      	ldr	r2, [r7, #20]
 8006ffe:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007000:	697b      	ldr	r3, [r7, #20]
 8007002:	2201      	movs	r2, #1
 8007004:	4013      	ands	r3, r2
 8007006:	d016      	beq.n	8007036 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007008:	f7fe f87a 	bl	8005100 <HAL_GetTick>
 800700c:	0003      	movs	r3, r0
 800700e:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007010:	e00c      	b.n	800702c <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007012:	f7fe f875 	bl	8005100 <HAL_GetTick>
 8007016:	0002      	movs	r2, r0
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	1ad3      	subs	r3, r2, r3
 800701c:	4a15      	ldr	r2, [pc, #84]	; (8007074 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800701e:	4293      	cmp	r3, r2
 8007020:	d904      	bls.n	800702c <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8007022:	2313      	movs	r3, #19
 8007024:	18fb      	adds	r3, r7, r3
 8007026:	2203      	movs	r2, #3
 8007028:	701a      	strb	r2, [r3, #0]
            break;
 800702a:	e004      	b.n	8007036 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800702c:	4b0d      	ldr	r3, [pc, #52]	; (8007064 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800702e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007030:	2202      	movs	r2, #2
 8007032:	4013      	ands	r3, r2
 8007034:	d0ed      	beq.n	8007012 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8007036:	2313      	movs	r3, #19
 8007038:	18fb      	adds	r3, r7, r3
 800703a:	781b      	ldrb	r3, [r3, #0]
 800703c:	2b00      	cmp	r3, #0
 800703e:	d10a      	bne.n	8007056 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007040:	4b08      	ldr	r3, [pc, #32]	; (8007064 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8007042:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007044:	4a09      	ldr	r2, [pc, #36]	; (800706c <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8007046:	4013      	ands	r3, r2
 8007048:	0019      	movs	r1, r3
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800704e:	4b05      	ldr	r3, [pc, #20]	; (8007064 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8007050:	430a      	orrs	r2, r1
 8007052:	65da      	str	r2, [r3, #92]	; 0x5c
 8007054:	e016      	b.n	8007084 <HAL_RCCEx_PeriphCLKConfig+0x16c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007056:	2312      	movs	r3, #18
 8007058:	18fb      	adds	r3, r7, r3
 800705a:	2213      	movs	r2, #19
 800705c:	18ba      	adds	r2, r7, r2
 800705e:	7812      	ldrb	r2, [r2, #0]
 8007060:	701a      	strb	r2, [r3, #0]
 8007062:	e00f      	b.n	8007084 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8007064:	40021000 	.word	0x40021000
 8007068:	40007000 	.word	0x40007000
 800706c:	fffffcff 	.word	0xfffffcff
 8007070:	fffeffff 	.word	0xfffeffff
 8007074:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007078:	2312      	movs	r3, #18
 800707a:	18fb      	adds	r3, r7, r3
 800707c:	2213      	movs	r2, #19
 800707e:	18ba      	adds	r2, r7, r2
 8007080:	7812      	ldrb	r2, [r2, #0]
 8007082:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007084:	2311      	movs	r3, #17
 8007086:	18fb      	adds	r3, r7, r3
 8007088:	781b      	ldrb	r3, [r3, #0]
 800708a:	2b01      	cmp	r3, #1
 800708c:	d105      	bne.n	800709a <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800708e:	4bb6      	ldr	r3, [pc, #728]	; (8007368 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007090:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007092:	4bb5      	ldr	r3, [pc, #724]	; (8007368 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007094:	49b5      	ldr	r1, [pc, #724]	; (800736c <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8007096:	400a      	ands	r2, r1
 8007098:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	2201      	movs	r2, #1
 80070a0:	4013      	ands	r3, r2
 80070a2:	d009      	beq.n	80070b8 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80070a4:	4bb0      	ldr	r3, [pc, #704]	; (8007368 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80070a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070a8:	2203      	movs	r2, #3
 80070aa:	4393      	bics	r3, r2
 80070ac:	0019      	movs	r1, r3
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	685a      	ldr	r2, [r3, #4]
 80070b2:	4bad      	ldr	r3, [pc, #692]	; (8007368 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80070b4:	430a      	orrs	r2, r1
 80070b6:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	2202      	movs	r2, #2
 80070be:	4013      	ands	r3, r2
 80070c0:	d009      	beq.n	80070d6 <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80070c2:	4ba9      	ldr	r3, [pc, #676]	; (8007368 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80070c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070c6:	220c      	movs	r2, #12
 80070c8:	4393      	bics	r3, r2
 80070ca:	0019      	movs	r1, r3
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	689a      	ldr	r2, [r3, #8]
 80070d0:	4ba5      	ldr	r3, [pc, #660]	; (8007368 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80070d2:	430a      	orrs	r2, r1
 80070d4:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	2204      	movs	r2, #4
 80070dc:	4013      	ands	r3, r2
 80070de:	d009      	beq.n	80070f4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80070e0:	4ba1      	ldr	r3, [pc, #644]	; (8007368 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80070e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070e4:	2230      	movs	r2, #48	; 0x30
 80070e6:	4393      	bics	r3, r2
 80070e8:	0019      	movs	r1, r3
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	68da      	ldr	r2, [r3, #12]
 80070ee:	4b9e      	ldr	r3, [pc, #632]	; (8007368 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80070f0:	430a      	orrs	r2, r1
 80070f2:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	2210      	movs	r2, #16
 80070fa:	4013      	ands	r3, r2
 80070fc:	d009      	beq.n	8007112 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80070fe:	4b9a      	ldr	r3, [pc, #616]	; (8007368 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007100:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007102:	4a9b      	ldr	r2, [pc, #620]	; (8007370 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8007104:	4013      	ands	r3, r2
 8007106:	0019      	movs	r1, r3
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	691a      	ldr	r2, [r3, #16]
 800710c:	4b96      	ldr	r3, [pc, #600]	; (8007368 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800710e:	430a      	orrs	r2, r1
 8007110:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART1 */

#if defined(LPUART2)
  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681a      	ldr	r2, [r3, #0]
 8007116:	2380      	movs	r3, #128	; 0x80
 8007118:	015b      	lsls	r3, r3, #5
 800711a:	4013      	ands	r3, r2
 800711c:	d009      	beq.n	8007132 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 800711e:	4b92      	ldr	r3, [pc, #584]	; (8007368 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007120:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007122:	4a94      	ldr	r2, [pc, #592]	; (8007374 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007124:	4013      	ands	r3, r2
 8007126:	0019      	movs	r1, r3
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	695a      	ldr	r2, [r3, #20]
 800712c:	4b8e      	ldr	r3, [pc, #568]	; (8007368 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800712e:	430a      	orrs	r2, r1
 8007130:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681a      	ldr	r2, [r3, #0]
 8007136:	2380      	movs	r3, #128	; 0x80
 8007138:	009b      	lsls	r3, r3, #2
 800713a:	4013      	ands	r3, r2
 800713c:	d009      	beq.n	8007152 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800713e:	4b8a      	ldr	r3, [pc, #552]	; (8007368 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007140:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007142:	4a8d      	ldr	r2, [pc, #564]	; (8007378 <HAL_RCCEx_PeriphCLKConfig+0x460>)
 8007144:	4013      	ands	r3, r2
 8007146:	0019      	movs	r1, r3
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800714c:	4b86      	ldr	r3, [pc, #536]	; (8007368 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800714e:	430a      	orrs	r2, r1
 8007150:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681a      	ldr	r2, [r3, #0]
 8007156:	2380      	movs	r3, #128	; 0x80
 8007158:	00db      	lsls	r3, r3, #3
 800715a:	4013      	ands	r3, r2
 800715c:	d009      	beq.n	8007172 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800715e:	4b82      	ldr	r3, [pc, #520]	; (8007368 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007160:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007162:	4a86      	ldr	r2, [pc, #536]	; (800737c <HAL_RCCEx_PeriphCLKConfig+0x464>)
 8007164:	4013      	ands	r3, r2
 8007166:	0019      	movs	r1, r3
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800716c:	4b7e      	ldr	r3, [pc, #504]	; (8007368 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800716e:	430a      	orrs	r2, r1
 8007170:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	2220      	movs	r2, #32
 8007178:	4013      	ands	r3, r2
 800717a:	d009      	beq.n	8007190 <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800717c:	4b7a      	ldr	r3, [pc, #488]	; (8007368 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800717e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007180:	4a7f      	ldr	r2, [pc, #508]	; (8007380 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8007182:	4013      	ands	r3, r2
 8007184:	0019      	movs	r1, r3
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	699a      	ldr	r2, [r3, #24]
 800718a:	4b77      	ldr	r3, [pc, #476]	; (8007368 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800718c:	430a      	orrs	r2, r1
 800718e:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	2240      	movs	r2, #64	; 0x40
 8007196:	4013      	ands	r3, r2
 8007198:	d009      	beq.n	80071ae <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800719a:	4b73      	ldr	r3, [pc, #460]	; (8007368 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800719c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800719e:	4a79      	ldr	r2, [pc, #484]	; (8007384 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 80071a0:	4013      	ands	r3, r2
 80071a2:	0019      	movs	r1, r3
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	69da      	ldr	r2, [r3, #28]
 80071a8:	4b6f      	ldr	r3, [pc, #444]	; (8007368 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80071aa:	430a      	orrs	r2, r1
 80071ac:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681a      	ldr	r2, [r3, #0]
 80071b2:	2380      	movs	r3, #128	; 0x80
 80071b4:	01db      	lsls	r3, r3, #7
 80071b6:	4013      	ands	r3, r2
 80071b8:	d015      	beq.n	80071e6 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80071ba:	4b6b      	ldr	r3, [pc, #428]	; (8007368 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80071bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071be:	009b      	lsls	r3, r3, #2
 80071c0:	0899      	lsrs	r1, r3, #2
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80071c6:	4b68      	ldr	r3, [pc, #416]	; (8007368 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80071c8:	430a      	orrs	r2, r1
 80071ca:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80071d0:	2380      	movs	r3, #128	; 0x80
 80071d2:	05db      	lsls	r3, r3, #23
 80071d4:	429a      	cmp	r2, r3
 80071d6:	d106      	bne.n	80071e6 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80071d8:	4b63      	ldr	r3, [pc, #396]	; (8007368 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80071da:	68da      	ldr	r2, [r3, #12]
 80071dc:	4b62      	ldr	r3, [pc, #392]	; (8007368 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80071de:	2180      	movs	r1, #128	; 0x80
 80071e0:	0249      	lsls	r1, r1, #9
 80071e2:	430a      	orrs	r2, r1
 80071e4:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681a      	ldr	r2, [r3, #0]
 80071ea:	2380      	movs	r3, #128	; 0x80
 80071ec:	031b      	lsls	r3, r3, #12
 80071ee:	4013      	ands	r3, r2
 80071f0:	d009      	beq.n	8007206 <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80071f2:	4b5d      	ldr	r3, [pc, #372]	; (8007368 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80071f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071f6:	2240      	movs	r2, #64	; 0x40
 80071f8:	4393      	bics	r3, r2
 80071fa:	0019      	movs	r1, r3
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007200:	4b59      	ldr	r3, [pc, #356]	; (8007368 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007202:	430a      	orrs	r2, r1
 8007204:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681a      	ldr	r2, [r3, #0]
 800720a:	2380      	movs	r3, #128	; 0x80
 800720c:	039b      	lsls	r3, r3, #14
 800720e:	4013      	ands	r3, r2
 8007210:	d016      	beq.n	8007240 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8007212:	4b55      	ldr	r3, [pc, #340]	; (8007368 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007214:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007216:	4a5c      	ldr	r2, [pc, #368]	; (8007388 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8007218:	4013      	ands	r3, r2
 800721a:	0019      	movs	r1, r3
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007220:	4b51      	ldr	r3, [pc, #324]	; (8007368 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007222:	430a      	orrs	r2, r1
 8007224:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800722a:	2380      	movs	r3, #128	; 0x80
 800722c:	03db      	lsls	r3, r3, #15
 800722e:	429a      	cmp	r2, r3
 8007230:	d106      	bne.n	8007240 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8007232:	4b4d      	ldr	r3, [pc, #308]	; (8007368 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007234:	68da      	ldr	r2, [r3, #12]
 8007236:	4b4c      	ldr	r3, [pc, #304]	; (8007368 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007238:	2180      	movs	r1, #128	; 0x80
 800723a:	0449      	lsls	r1, r1, #17
 800723c:	430a      	orrs	r2, r1
 800723e:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681a      	ldr	r2, [r3, #0]
 8007244:	2380      	movs	r3, #128	; 0x80
 8007246:	03db      	lsls	r3, r3, #15
 8007248:	4013      	ands	r3, r2
 800724a:	d016      	beq.n	800727a <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 800724c:	4b46      	ldr	r3, [pc, #280]	; (8007368 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800724e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007250:	4a4e      	ldr	r2, [pc, #312]	; (800738c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8007252:	4013      	ands	r3, r2
 8007254:	0019      	movs	r1, r3
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800725a:	4b43      	ldr	r3, [pc, #268]	; (8007368 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800725c:	430a      	orrs	r2, r1
 800725e:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007264:	2380      	movs	r3, #128	; 0x80
 8007266:	045b      	lsls	r3, r3, #17
 8007268:	429a      	cmp	r2, r3
 800726a:	d106      	bne.n	800727a <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800726c:	4b3e      	ldr	r3, [pc, #248]	; (8007368 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800726e:	68da      	ldr	r2, [r3, #12]
 8007270:	4b3d      	ldr	r3, [pc, #244]	; (8007368 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007272:	2180      	movs	r1, #128	; 0x80
 8007274:	0449      	lsls	r1, r1, #17
 8007276:	430a      	orrs	r2, r1
 8007278:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681a      	ldr	r2, [r3, #0]
 800727e:	2380      	movs	r3, #128	; 0x80
 8007280:	011b      	lsls	r3, r3, #4
 8007282:	4013      	ands	r3, r2
 8007284:	d014      	beq.n	80072b0 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8007286:	4b38      	ldr	r3, [pc, #224]	; (8007368 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007288:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800728a:	2203      	movs	r2, #3
 800728c:	4393      	bics	r3, r2
 800728e:	0019      	movs	r1, r3
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	6a1a      	ldr	r2, [r3, #32]
 8007294:	4b34      	ldr	r3, [pc, #208]	; (8007368 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007296:	430a      	orrs	r2, r1
 8007298:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	6a1b      	ldr	r3, [r3, #32]
 800729e:	2b01      	cmp	r3, #1
 80072a0:	d106      	bne.n	80072b0 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80072a2:	4b31      	ldr	r3, [pc, #196]	; (8007368 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80072a4:	68da      	ldr	r2, [r3, #12]
 80072a6:	4b30      	ldr	r3, [pc, #192]	; (8007368 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80072a8:	2180      	movs	r1, #128	; 0x80
 80072aa:	0249      	lsls	r1, r1, #9
 80072ac:	430a      	orrs	r2, r1
 80072ae:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681a      	ldr	r2, [r3, #0]
 80072b4:	2380      	movs	r3, #128	; 0x80
 80072b6:	019b      	lsls	r3, r3, #6
 80072b8:	4013      	ands	r3, r2
 80072ba:	d014      	beq.n	80072e6 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 80072bc:	4b2a      	ldr	r3, [pc, #168]	; (8007368 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80072be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072c0:	220c      	movs	r2, #12
 80072c2:	4393      	bics	r3, r2
 80072c4:	0019      	movs	r1, r3
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80072ca:	4b27      	ldr	r3, [pc, #156]	; (8007368 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80072cc:	430a      	orrs	r2, r1
 80072ce:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072d4:	2b04      	cmp	r3, #4
 80072d6:	d106      	bne.n	80072e6 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80072d8:	4b23      	ldr	r3, [pc, #140]	; (8007368 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80072da:	68da      	ldr	r2, [r3, #12]
 80072dc:	4b22      	ldr	r3, [pc, #136]	; (8007368 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80072de:	2180      	movs	r1, #128	; 0x80
 80072e0:	0249      	lsls	r1, r1, #9
 80072e2:	430a      	orrs	r2, r1
 80072e4:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681a      	ldr	r2, [r3, #0]
 80072ea:	2380      	movs	r3, #128	; 0x80
 80072ec:	045b      	lsls	r3, r3, #17
 80072ee:	4013      	ands	r3, r2
 80072f0:	d016      	beq.n	8007320 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80072f2:	4b1d      	ldr	r3, [pc, #116]	; (8007368 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80072f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072f6:	4a22      	ldr	r2, [pc, #136]	; (8007380 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80072f8:	4013      	ands	r3, r2
 80072fa:	0019      	movs	r1, r3
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007300:	4b19      	ldr	r3, [pc, #100]	; (8007368 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007302:	430a      	orrs	r2, r1
 8007304:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800730a:	2380      	movs	r3, #128	; 0x80
 800730c:	019b      	lsls	r3, r3, #6
 800730e:	429a      	cmp	r2, r3
 8007310:	d106      	bne.n	8007320 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8007312:	4b15      	ldr	r3, [pc, #84]	; (8007368 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007314:	68da      	ldr	r2, [r3, #12]
 8007316:	4b14      	ldr	r3, [pc, #80]	; (8007368 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007318:	2180      	movs	r1, #128	; 0x80
 800731a:	0449      	lsls	r1, r1, #17
 800731c:	430a      	orrs	r2, r1
 800731e:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681a      	ldr	r2, [r3, #0]
 8007324:	2380      	movs	r3, #128	; 0x80
 8007326:	049b      	lsls	r3, r3, #18
 8007328:	4013      	ands	r3, r2
 800732a:	d016      	beq.n	800735a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800732c:	4b0e      	ldr	r3, [pc, #56]	; (8007368 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800732e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007330:	4a10      	ldr	r2, [pc, #64]	; (8007374 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007332:	4013      	ands	r3, r2
 8007334:	0019      	movs	r1, r3
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800733a:	4b0b      	ldr	r3, [pc, #44]	; (8007368 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800733c:	430a      	orrs	r2, r1
 800733e:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007344:	2380      	movs	r3, #128	; 0x80
 8007346:	005b      	lsls	r3, r3, #1
 8007348:	429a      	cmp	r2, r3
 800734a:	d106      	bne.n	800735a <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800734c:	4b06      	ldr	r3, [pc, #24]	; (8007368 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800734e:	68da      	ldr	r2, [r3, #12]
 8007350:	4b05      	ldr	r3, [pc, #20]	; (8007368 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007352:	2180      	movs	r1, #128	; 0x80
 8007354:	0449      	lsls	r1, r1, #17
 8007356:	430a      	orrs	r2, r1
 8007358:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 800735a:	2312      	movs	r3, #18
 800735c:	18fb      	adds	r3, r7, r3
 800735e:	781b      	ldrb	r3, [r3, #0]
}
 8007360:	0018      	movs	r0, r3
 8007362:	46bd      	mov	sp, r7
 8007364:	b006      	add	sp, #24
 8007366:	bd80      	pop	{r7, pc}
 8007368:	40021000 	.word	0x40021000
 800736c:	efffffff 	.word	0xefffffff
 8007370:	fffff3ff 	.word	0xfffff3ff
 8007374:	fffffcff 	.word	0xfffffcff
 8007378:	fff3ffff 	.word	0xfff3ffff
 800737c:	ffcfffff 	.word	0xffcfffff
 8007380:	ffffcfff 	.word	0xffffcfff
 8007384:	ffff3fff 	.word	0xffff3fff
 8007388:	ffbfffff 	.word	0xffbfffff
 800738c:	feffffff 	.word	0xfeffffff

08007390 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007390:	b580      	push	{r7, lr}
 8007392:	b082      	sub	sp, #8
 8007394:	af00      	add	r7, sp, #0
 8007396:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	2b00      	cmp	r3, #0
 800739c:	d101      	bne.n	80073a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800739e:	2301      	movs	r3, #1
 80073a0:	e04a      	b.n	8007438 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	223d      	movs	r2, #61	; 0x3d
 80073a6:	5c9b      	ldrb	r3, [r3, r2]
 80073a8:	b2db      	uxtb	r3, r3
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d107      	bne.n	80073be <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	223c      	movs	r2, #60	; 0x3c
 80073b2:	2100      	movs	r1, #0
 80073b4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	0018      	movs	r0, r3
 80073ba:	f000 f841 	bl	8007440 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	223d      	movs	r2, #61	; 0x3d
 80073c2:	2102      	movs	r1, #2
 80073c4:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681a      	ldr	r2, [r3, #0]
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	3304      	adds	r3, #4
 80073ce:	0019      	movs	r1, r3
 80073d0:	0010      	movs	r0, r2
 80073d2:	f000 f9f1 	bl	80077b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	2248      	movs	r2, #72	; 0x48
 80073da:	2101      	movs	r1, #1
 80073dc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	223e      	movs	r2, #62	; 0x3e
 80073e2:	2101      	movs	r1, #1
 80073e4:	5499      	strb	r1, [r3, r2]
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	223f      	movs	r2, #63	; 0x3f
 80073ea:	2101      	movs	r1, #1
 80073ec:	5499      	strb	r1, [r3, r2]
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	2240      	movs	r2, #64	; 0x40
 80073f2:	2101      	movs	r1, #1
 80073f4:	5499      	strb	r1, [r3, r2]
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	2241      	movs	r2, #65	; 0x41
 80073fa:	2101      	movs	r1, #1
 80073fc:	5499      	strb	r1, [r3, r2]
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	2242      	movs	r2, #66	; 0x42
 8007402:	2101      	movs	r1, #1
 8007404:	5499      	strb	r1, [r3, r2]
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	2243      	movs	r2, #67	; 0x43
 800740a:	2101      	movs	r1, #1
 800740c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	2244      	movs	r2, #68	; 0x44
 8007412:	2101      	movs	r1, #1
 8007414:	5499      	strb	r1, [r3, r2]
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	2245      	movs	r2, #69	; 0x45
 800741a:	2101      	movs	r1, #1
 800741c:	5499      	strb	r1, [r3, r2]
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	2246      	movs	r2, #70	; 0x46
 8007422:	2101      	movs	r1, #1
 8007424:	5499      	strb	r1, [r3, r2]
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	2247      	movs	r2, #71	; 0x47
 800742a:	2101      	movs	r1, #1
 800742c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	223d      	movs	r2, #61	; 0x3d
 8007432:	2101      	movs	r1, #1
 8007434:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007436:	2300      	movs	r3, #0
}
 8007438:	0018      	movs	r0, r3
 800743a:	46bd      	mov	sp, r7
 800743c:	b002      	add	sp, #8
 800743e:	bd80      	pop	{r7, pc}

08007440 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8007440:	b580      	push	{r7, lr}
 8007442:	b082      	sub	sp, #8
 8007444:	af00      	add	r7, sp, #0
 8007446:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8007448:	46c0      	nop			; (mov r8, r8)
 800744a:	46bd      	mov	sp, r7
 800744c:	b002      	add	sp, #8
 800744e:	bd80      	pop	{r7, pc}

08007450 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007450:	b580      	push	{r7, lr}
 8007452:	b084      	sub	sp, #16
 8007454:	af00      	add	r7, sp, #0
 8007456:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	223d      	movs	r2, #61	; 0x3d
 800745c:	5c9b      	ldrb	r3, [r3, r2]
 800745e:	b2db      	uxtb	r3, r3
 8007460:	2b01      	cmp	r3, #1
 8007462:	d001      	beq.n	8007468 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007464:	2301      	movs	r3, #1
 8007466:	e047      	b.n	80074f8 <HAL_TIM_Base_Start_IT+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	223d      	movs	r2, #61	; 0x3d
 800746c:	2102      	movs	r1, #2
 800746e:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	68da      	ldr	r2, [r3, #12]
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	2101      	movs	r1, #1
 800747c:	430a      	orrs	r2, r1
 800747e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	4a1e      	ldr	r2, [pc, #120]	; (8007500 <HAL_TIM_Base_Start_IT+0xb0>)
 8007486:	4293      	cmp	r3, r2
 8007488:	d014      	beq.n	80074b4 <HAL_TIM_Base_Start_IT+0x64>
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681a      	ldr	r2, [r3, #0]
 800748e:	2380      	movs	r3, #128	; 0x80
 8007490:	05db      	lsls	r3, r3, #23
 8007492:	429a      	cmp	r2, r3
 8007494:	d00e      	beq.n	80074b4 <HAL_TIM_Base_Start_IT+0x64>
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	4a1a      	ldr	r2, [pc, #104]	; (8007504 <HAL_TIM_Base_Start_IT+0xb4>)
 800749c:	4293      	cmp	r3, r2
 800749e:	d009      	beq.n	80074b4 <HAL_TIM_Base_Start_IT+0x64>
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	4a18      	ldr	r2, [pc, #96]	; (8007508 <HAL_TIM_Base_Start_IT+0xb8>)
 80074a6:	4293      	cmp	r3, r2
 80074a8:	d004      	beq.n	80074b4 <HAL_TIM_Base_Start_IT+0x64>
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	4a17      	ldr	r2, [pc, #92]	; (800750c <HAL_TIM_Base_Start_IT+0xbc>)
 80074b0:	4293      	cmp	r3, r2
 80074b2:	d116      	bne.n	80074e2 <HAL_TIM_Base_Start_IT+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	689b      	ldr	r3, [r3, #8]
 80074ba:	4a15      	ldr	r2, [pc, #84]	; (8007510 <HAL_TIM_Base_Start_IT+0xc0>)
 80074bc:	4013      	ands	r3, r2
 80074be:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	2b06      	cmp	r3, #6
 80074c4:	d016      	beq.n	80074f4 <HAL_TIM_Base_Start_IT+0xa4>
 80074c6:	68fa      	ldr	r2, [r7, #12]
 80074c8:	2380      	movs	r3, #128	; 0x80
 80074ca:	025b      	lsls	r3, r3, #9
 80074cc:	429a      	cmp	r2, r3
 80074ce:	d011      	beq.n	80074f4 <HAL_TIM_Base_Start_IT+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	681a      	ldr	r2, [r3, #0]
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	2101      	movs	r1, #1
 80074dc:	430a      	orrs	r2, r1
 80074de:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80074e0:	e008      	b.n	80074f4 <HAL_TIM_Base_Start_IT+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	681a      	ldr	r2, [r3, #0]
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	2101      	movs	r1, #1
 80074ee:	430a      	orrs	r2, r1
 80074f0:	601a      	str	r2, [r3, #0]
 80074f2:	e000      	b.n	80074f6 <HAL_TIM_Base_Start_IT+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80074f4:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 80074f6:	2300      	movs	r3, #0
}
 80074f8:	0018      	movs	r0, r3
 80074fa:	46bd      	mov	sp, r7
 80074fc:	b004      	add	sp, #16
 80074fe:	bd80      	pop	{r7, pc}
 8007500:	40012c00 	.word	0x40012c00
 8007504:	40000400 	.word	0x40000400
 8007508:	40000800 	.word	0x40000800
 800750c:	40014000 	.word	0x40014000
 8007510:	00010007 	.word	0x00010007

08007514 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007514:	b580      	push	{r7, lr}
 8007516:	b082      	sub	sp, #8
 8007518:	af00      	add	r7, sp, #0
 800751a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	691b      	ldr	r3, [r3, #16]
 8007522:	2202      	movs	r2, #2
 8007524:	4013      	ands	r3, r2
 8007526:	2b02      	cmp	r3, #2
 8007528:	d124      	bne.n	8007574 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	68db      	ldr	r3, [r3, #12]
 8007530:	2202      	movs	r2, #2
 8007532:	4013      	ands	r3, r2
 8007534:	2b02      	cmp	r3, #2
 8007536:	d11d      	bne.n	8007574 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	2203      	movs	r2, #3
 800753e:	4252      	negs	r2, r2
 8007540:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	2201      	movs	r2, #1
 8007546:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	699b      	ldr	r3, [r3, #24]
 800754e:	2203      	movs	r2, #3
 8007550:	4013      	ands	r3, r2
 8007552:	d004      	beq.n	800755e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	0018      	movs	r0, r3
 8007558:	f000 f916 	bl	8007788 <HAL_TIM_IC_CaptureCallback>
 800755c:	e007      	b.n	800756e <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	0018      	movs	r0, r3
 8007562:	f000 f909 	bl	8007778 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	0018      	movs	r0, r3
 800756a:	f000 f915 	bl	8007798 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	2200      	movs	r2, #0
 8007572:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	691b      	ldr	r3, [r3, #16]
 800757a:	2204      	movs	r2, #4
 800757c:	4013      	ands	r3, r2
 800757e:	2b04      	cmp	r3, #4
 8007580:	d125      	bne.n	80075ce <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	68db      	ldr	r3, [r3, #12]
 8007588:	2204      	movs	r2, #4
 800758a:	4013      	ands	r3, r2
 800758c:	2b04      	cmp	r3, #4
 800758e:	d11e      	bne.n	80075ce <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	2205      	movs	r2, #5
 8007596:	4252      	negs	r2, r2
 8007598:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	2202      	movs	r2, #2
 800759e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	699a      	ldr	r2, [r3, #24]
 80075a6:	23c0      	movs	r3, #192	; 0xc0
 80075a8:	009b      	lsls	r3, r3, #2
 80075aa:	4013      	ands	r3, r2
 80075ac:	d004      	beq.n	80075b8 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	0018      	movs	r0, r3
 80075b2:	f000 f8e9 	bl	8007788 <HAL_TIM_IC_CaptureCallback>
 80075b6:	e007      	b.n	80075c8 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	0018      	movs	r0, r3
 80075bc:	f000 f8dc 	bl	8007778 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	0018      	movs	r0, r3
 80075c4:	f000 f8e8 	bl	8007798 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	2200      	movs	r2, #0
 80075cc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	691b      	ldr	r3, [r3, #16]
 80075d4:	2208      	movs	r2, #8
 80075d6:	4013      	ands	r3, r2
 80075d8:	2b08      	cmp	r3, #8
 80075da:	d124      	bne.n	8007626 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	68db      	ldr	r3, [r3, #12]
 80075e2:	2208      	movs	r2, #8
 80075e4:	4013      	ands	r3, r2
 80075e6:	2b08      	cmp	r3, #8
 80075e8:	d11d      	bne.n	8007626 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	2209      	movs	r2, #9
 80075f0:	4252      	negs	r2, r2
 80075f2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	2204      	movs	r2, #4
 80075f8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	69db      	ldr	r3, [r3, #28]
 8007600:	2203      	movs	r2, #3
 8007602:	4013      	ands	r3, r2
 8007604:	d004      	beq.n	8007610 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	0018      	movs	r0, r3
 800760a:	f000 f8bd 	bl	8007788 <HAL_TIM_IC_CaptureCallback>
 800760e:	e007      	b.n	8007620 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	0018      	movs	r0, r3
 8007614:	f000 f8b0 	bl	8007778 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	0018      	movs	r0, r3
 800761c:	f000 f8bc 	bl	8007798 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	2200      	movs	r2, #0
 8007624:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	691b      	ldr	r3, [r3, #16]
 800762c:	2210      	movs	r2, #16
 800762e:	4013      	ands	r3, r2
 8007630:	2b10      	cmp	r3, #16
 8007632:	d125      	bne.n	8007680 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	68db      	ldr	r3, [r3, #12]
 800763a:	2210      	movs	r2, #16
 800763c:	4013      	ands	r3, r2
 800763e:	2b10      	cmp	r3, #16
 8007640:	d11e      	bne.n	8007680 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	2211      	movs	r2, #17
 8007648:	4252      	negs	r2, r2
 800764a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	2208      	movs	r2, #8
 8007650:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	69da      	ldr	r2, [r3, #28]
 8007658:	23c0      	movs	r3, #192	; 0xc0
 800765a:	009b      	lsls	r3, r3, #2
 800765c:	4013      	ands	r3, r2
 800765e:	d004      	beq.n	800766a <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	0018      	movs	r0, r3
 8007664:	f000 f890 	bl	8007788 <HAL_TIM_IC_CaptureCallback>
 8007668:	e007      	b.n	800767a <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	0018      	movs	r0, r3
 800766e:	f000 f883 	bl	8007778 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	0018      	movs	r0, r3
 8007676:	f000 f88f 	bl	8007798 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	2200      	movs	r2, #0
 800767e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	691b      	ldr	r3, [r3, #16]
 8007686:	2201      	movs	r2, #1
 8007688:	4013      	ands	r3, r2
 800768a:	2b01      	cmp	r3, #1
 800768c:	d10f      	bne.n	80076ae <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	68db      	ldr	r3, [r3, #12]
 8007694:	2201      	movs	r2, #1
 8007696:	4013      	ands	r3, r2
 8007698:	2b01      	cmp	r3, #1
 800769a:	d108      	bne.n	80076ae <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	2202      	movs	r2, #2
 80076a2:	4252      	negs	r2, r2
 80076a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	0018      	movs	r0, r3
 80076aa:	f7fd f9a9 	bl	8004a00 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	691b      	ldr	r3, [r3, #16]
 80076b4:	2280      	movs	r2, #128	; 0x80
 80076b6:	4013      	ands	r3, r2
 80076b8:	2b80      	cmp	r3, #128	; 0x80
 80076ba:	d10f      	bne.n	80076dc <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	68db      	ldr	r3, [r3, #12]
 80076c2:	2280      	movs	r2, #128	; 0x80
 80076c4:	4013      	ands	r3, r2
 80076c6:	2b80      	cmp	r3, #128	; 0x80
 80076c8:	d108      	bne.n	80076dc <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	2281      	movs	r2, #129	; 0x81
 80076d0:	4252      	negs	r2, r2
 80076d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	0018      	movs	r0, r3
 80076d8:	f000 f900 	bl	80078dc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	691a      	ldr	r2, [r3, #16]
 80076e2:	2380      	movs	r3, #128	; 0x80
 80076e4:	005b      	lsls	r3, r3, #1
 80076e6:	401a      	ands	r2, r3
 80076e8:	2380      	movs	r3, #128	; 0x80
 80076ea:	005b      	lsls	r3, r3, #1
 80076ec:	429a      	cmp	r2, r3
 80076ee:	d10e      	bne.n	800770e <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	68db      	ldr	r3, [r3, #12]
 80076f6:	2280      	movs	r2, #128	; 0x80
 80076f8:	4013      	ands	r3, r2
 80076fa:	2b80      	cmp	r3, #128	; 0x80
 80076fc:	d107      	bne.n	800770e <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	4a1c      	ldr	r2, [pc, #112]	; (8007774 <HAL_TIM_IRQHandler+0x260>)
 8007704:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	0018      	movs	r0, r3
 800770a:	f000 f8ef 	bl	80078ec <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	691b      	ldr	r3, [r3, #16]
 8007714:	2240      	movs	r2, #64	; 0x40
 8007716:	4013      	ands	r3, r2
 8007718:	2b40      	cmp	r3, #64	; 0x40
 800771a:	d10f      	bne.n	800773c <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	68db      	ldr	r3, [r3, #12]
 8007722:	2240      	movs	r2, #64	; 0x40
 8007724:	4013      	ands	r3, r2
 8007726:	2b40      	cmp	r3, #64	; 0x40
 8007728:	d108      	bne.n	800773c <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	2241      	movs	r2, #65	; 0x41
 8007730:	4252      	negs	r2, r2
 8007732:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	0018      	movs	r0, r3
 8007738:	f000 f836 	bl	80077a8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	691b      	ldr	r3, [r3, #16]
 8007742:	2220      	movs	r2, #32
 8007744:	4013      	ands	r3, r2
 8007746:	2b20      	cmp	r3, #32
 8007748:	d10f      	bne.n	800776a <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	68db      	ldr	r3, [r3, #12]
 8007750:	2220      	movs	r2, #32
 8007752:	4013      	ands	r3, r2
 8007754:	2b20      	cmp	r3, #32
 8007756:	d108      	bne.n	800776a <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	2221      	movs	r2, #33	; 0x21
 800775e:	4252      	negs	r2, r2
 8007760:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	0018      	movs	r0, r3
 8007766:	f000 f8b1 	bl	80078cc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800776a:	46c0      	nop			; (mov r8, r8)
 800776c:	46bd      	mov	sp, r7
 800776e:	b002      	add	sp, #8
 8007770:	bd80      	pop	{r7, pc}
 8007772:	46c0      	nop			; (mov r8, r8)
 8007774:	fffffeff 	.word	0xfffffeff

08007778 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007778:	b580      	push	{r7, lr}
 800777a:	b082      	sub	sp, #8
 800777c:	af00      	add	r7, sp, #0
 800777e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007780:	46c0      	nop			; (mov r8, r8)
 8007782:	46bd      	mov	sp, r7
 8007784:	b002      	add	sp, #8
 8007786:	bd80      	pop	{r7, pc}

08007788 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007788:	b580      	push	{r7, lr}
 800778a:	b082      	sub	sp, #8
 800778c:	af00      	add	r7, sp, #0
 800778e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007790:	46c0      	nop			; (mov r8, r8)
 8007792:	46bd      	mov	sp, r7
 8007794:	b002      	add	sp, #8
 8007796:	bd80      	pop	{r7, pc}

08007798 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007798:	b580      	push	{r7, lr}
 800779a:	b082      	sub	sp, #8
 800779c:	af00      	add	r7, sp, #0
 800779e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80077a0:	46c0      	nop			; (mov r8, r8)
 80077a2:	46bd      	mov	sp, r7
 80077a4:	b002      	add	sp, #8
 80077a6:	bd80      	pop	{r7, pc}

080077a8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80077a8:	b580      	push	{r7, lr}
 80077aa:	b082      	sub	sp, #8
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80077b0:	46c0      	nop			; (mov r8, r8)
 80077b2:	46bd      	mov	sp, r7
 80077b4:	b002      	add	sp, #8
 80077b6:	bd80      	pop	{r7, pc}

080077b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80077b8:	b580      	push	{r7, lr}
 80077ba:	b084      	sub	sp, #16
 80077bc:	af00      	add	r7, sp, #0
 80077be:	6078      	str	r0, [r7, #4]
 80077c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	4a38      	ldr	r2, [pc, #224]	; (80078ac <TIM_Base_SetConfig+0xf4>)
 80077cc:	4293      	cmp	r3, r2
 80077ce:	d00c      	beq.n	80077ea <TIM_Base_SetConfig+0x32>
 80077d0:	687a      	ldr	r2, [r7, #4]
 80077d2:	2380      	movs	r3, #128	; 0x80
 80077d4:	05db      	lsls	r3, r3, #23
 80077d6:	429a      	cmp	r2, r3
 80077d8:	d007      	beq.n	80077ea <TIM_Base_SetConfig+0x32>
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	4a34      	ldr	r2, [pc, #208]	; (80078b0 <TIM_Base_SetConfig+0xf8>)
 80077de:	4293      	cmp	r3, r2
 80077e0:	d003      	beq.n	80077ea <TIM_Base_SetConfig+0x32>
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	4a33      	ldr	r2, [pc, #204]	; (80078b4 <TIM_Base_SetConfig+0xfc>)
 80077e6:	4293      	cmp	r3, r2
 80077e8:	d108      	bne.n	80077fc <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	2270      	movs	r2, #112	; 0x70
 80077ee:	4393      	bics	r3, r2
 80077f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80077f2:	683b      	ldr	r3, [r7, #0]
 80077f4:	685b      	ldr	r3, [r3, #4]
 80077f6:	68fa      	ldr	r2, [r7, #12]
 80077f8:	4313      	orrs	r3, r2
 80077fa:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	4a2b      	ldr	r2, [pc, #172]	; (80078ac <TIM_Base_SetConfig+0xf4>)
 8007800:	4293      	cmp	r3, r2
 8007802:	d01c      	beq.n	800783e <TIM_Base_SetConfig+0x86>
 8007804:	687a      	ldr	r2, [r7, #4]
 8007806:	2380      	movs	r3, #128	; 0x80
 8007808:	05db      	lsls	r3, r3, #23
 800780a:	429a      	cmp	r2, r3
 800780c:	d017      	beq.n	800783e <TIM_Base_SetConfig+0x86>
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	4a27      	ldr	r2, [pc, #156]	; (80078b0 <TIM_Base_SetConfig+0xf8>)
 8007812:	4293      	cmp	r3, r2
 8007814:	d013      	beq.n	800783e <TIM_Base_SetConfig+0x86>
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	4a26      	ldr	r2, [pc, #152]	; (80078b4 <TIM_Base_SetConfig+0xfc>)
 800781a:	4293      	cmp	r3, r2
 800781c:	d00f      	beq.n	800783e <TIM_Base_SetConfig+0x86>
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	4a25      	ldr	r2, [pc, #148]	; (80078b8 <TIM_Base_SetConfig+0x100>)
 8007822:	4293      	cmp	r3, r2
 8007824:	d00b      	beq.n	800783e <TIM_Base_SetConfig+0x86>
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	4a24      	ldr	r2, [pc, #144]	; (80078bc <TIM_Base_SetConfig+0x104>)
 800782a:	4293      	cmp	r3, r2
 800782c:	d007      	beq.n	800783e <TIM_Base_SetConfig+0x86>
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	4a23      	ldr	r2, [pc, #140]	; (80078c0 <TIM_Base_SetConfig+0x108>)
 8007832:	4293      	cmp	r3, r2
 8007834:	d003      	beq.n	800783e <TIM_Base_SetConfig+0x86>
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	4a22      	ldr	r2, [pc, #136]	; (80078c4 <TIM_Base_SetConfig+0x10c>)
 800783a:	4293      	cmp	r3, r2
 800783c:	d108      	bne.n	8007850 <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	4a21      	ldr	r2, [pc, #132]	; (80078c8 <TIM_Base_SetConfig+0x110>)
 8007842:	4013      	ands	r3, r2
 8007844:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007846:	683b      	ldr	r3, [r7, #0]
 8007848:	68db      	ldr	r3, [r3, #12]
 800784a:	68fa      	ldr	r2, [r7, #12]
 800784c:	4313      	orrs	r3, r2
 800784e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	2280      	movs	r2, #128	; 0x80
 8007854:	4393      	bics	r3, r2
 8007856:	001a      	movs	r2, r3
 8007858:	683b      	ldr	r3, [r7, #0]
 800785a:	695b      	ldr	r3, [r3, #20]
 800785c:	4313      	orrs	r3, r2
 800785e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	68fa      	ldr	r2, [r7, #12]
 8007864:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007866:	683b      	ldr	r3, [r7, #0]
 8007868:	689a      	ldr	r2, [r3, #8]
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800786e:	683b      	ldr	r3, [r7, #0]
 8007870:	681a      	ldr	r2, [r3, #0]
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	4a0c      	ldr	r2, [pc, #48]	; (80078ac <TIM_Base_SetConfig+0xf4>)
 800787a:	4293      	cmp	r3, r2
 800787c:	d00b      	beq.n	8007896 <TIM_Base_SetConfig+0xde>
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	4a0e      	ldr	r2, [pc, #56]	; (80078bc <TIM_Base_SetConfig+0x104>)
 8007882:	4293      	cmp	r3, r2
 8007884:	d007      	beq.n	8007896 <TIM_Base_SetConfig+0xde>
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	4a0d      	ldr	r2, [pc, #52]	; (80078c0 <TIM_Base_SetConfig+0x108>)
 800788a:	4293      	cmp	r3, r2
 800788c:	d003      	beq.n	8007896 <TIM_Base_SetConfig+0xde>
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	4a0c      	ldr	r2, [pc, #48]	; (80078c4 <TIM_Base_SetConfig+0x10c>)
 8007892:	4293      	cmp	r3, r2
 8007894:	d103      	bne.n	800789e <TIM_Base_SetConfig+0xe6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007896:	683b      	ldr	r3, [r7, #0]
 8007898:	691a      	ldr	r2, [r3, #16]
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	2201      	movs	r2, #1
 80078a2:	615a      	str	r2, [r3, #20]
}
 80078a4:	46c0      	nop			; (mov r8, r8)
 80078a6:	46bd      	mov	sp, r7
 80078a8:	b004      	add	sp, #16
 80078aa:	bd80      	pop	{r7, pc}
 80078ac:	40012c00 	.word	0x40012c00
 80078b0:	40000400 	.word	0x40000400
 80078b4:	40000800 	.word	0x40000800
 80078b8:	40002000 	.word	0x40002000
 80078bc:	40014000 	.word	0x40014000
 80078c0:	40014400 	.word	0x40014400
 80078c4:	40014800 	.word	0x40014800
 80078c8:	fffffcff 	.word	0xfffffcff

080078cc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80078cc:	b580      	push	{r7, lr}
 80078ce:	b082      	sub	sp, #8
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80078d4:	46c0      	nop			; (mov r8, r8)
 80078d6:	46bd      	mov	sp, r7
 80078d8:	b002      	add	sp, #8
 80078da:	bd80      	pop	{r7, pc}

080078dc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80078dc:	b580      	push	{r7, lr}
 80078de:	b082      	sub	sp, #8
 80078e0:	af00      	add	r7, sp, #0
 80078e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80078e4:	46c0      	nop			; (mov r8, r8)
 80078e6:	46bd      	mov	sp, r7
 80078e8:	b002      	add	sp, #8
 80078ea:	bd80      	pop	{r7, pc}

080078ec <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80078ec:	b580      	push	{r7, lr}
 80078ee:	b082      	sub	sp, #8
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80078f4:	46c0      	nop			; (mov r8, r8)
 80078f6:	46bd      	mov	sp, r7
 80078f8:	b002      	add	sp, #8
 80078fa:	bd80      	pop	{r7, pc}

080078fc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80078fc:	b580      	push	{r7, lr}
 80078fe:	b082      	sub	sp, #8
 8007900:	af00      	add	r7, sp, #0
 8007902:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	2b00      	cmp	r3, #0
 8007908:	d101      	bne.n	800790e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800790a:	2301      	movs	r3, #1
 800790c:	e046      	b.n	800799c <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	2288      	movs	r2, #136	; 0x88
 8007912:	589b      	ldr	r3, [r3, r2]
 8007914:	2b00      	cmp	r3, #0
 8007916:	d107      	bne.n	8007928 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	2284      	movs	r2, #132	; 0x84
 800791c:	2100      	movs	r1, #0
 800791e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	0018      	movs	r0, r3
 8007924:	f7fd f93c 	bl	8004ba0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	2288      	movs	r2, #136	; 0x88
 800792c:	2124      	movs	r1, #36	; 0x24
 800792e:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	681a      	ldr	r2, [r3, #0]
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	2101      	movs	r1, #1
 800793c:	438a      	bics	r2, r1
 800793e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	0018      	movs	r0, r3
 8007944:	f000 fc8a 	bl	800825c <UART_SetConfig>
 8007948:	0003      	movs	r3, r0
 800794a:	2b01      	cmp	r3, #1
 800794c:	d101      	bne.n	8007952 <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 800794e:	2301      	movs	r3, #1
 8007950:	e024      	b.n	800799c <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007956:	2b00      	cmp	r3, #0
 8007958:	d003      	beq.n	8007962 <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	0018      	movs	r0, r3
 800795e:	f000 ffd3 	bl	8008908 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	685a      	ldr	r2, [r3, #4]
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	490d      	ldr	r1, [pc, #52]	; (80079a4 <HAL_UART_Init+0xa8>)
 800796e:	400a      	ands	r2, r1
 8007970:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	689a      	ldr	r2, [r3, #8]
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	212a      	movs	r1, #42	; 0x2a
 800797e:	438a      	bics	r2, r1
 8007980:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	681a      	ldr	r2, [r3, #0]
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	2101      	movs	r1, #1
 800798e:	430a      	orrs	r2, r1
 8007990:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	0018      	movs	r0, r3
 8007996:	f001 f86b 	bl	8008a70 <UART_CheckIdleState>
 800799a:	0003      	movs	r3, r0
}
 800799c:	0018      	movs	r0, r3
 800799e:	46bd      	mov	sp, r7
 80079a0:	b002      	add	sp, #8
 80079a2:	bd80      	pop	{r7, pc}
 80079a4:	ffffb7ff 	.word	0xffffb7ff

080079a8 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80079a8:	b580      	push	{r7, lr}
 80079aa:	b08c      	sub	sp, #48	; 0x30
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	60f8      	str	r0, [r7, #12]
 80079b0:	60b9      	str	r1, [r7, #8]
 80079b2:	1dbb      	adds	r3, r7, #6
 80079b4:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	2288      	movs	r2, #136	; 0x88
 80079ba:	589b      	ldr	r3, [r3, r2]
 80079bc:	2b20      	cmp	r3, #32
 80079be:	d000      	beq.n	80079c2 <HAL_UART_Transmit_IT+0x1a>
 80079c0:	e08d      	b.n	8007ade <HAL_UART_Transmit_IT+0x136>
  {
    if ((pData == NULL) || (Size == 0U))
 80079c2:	68bb      	ldr	r3, [r7, #8]
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d003      	beq.n	80079d0 <HAL_UART_Transmit_IT+0x28>
 80079c8:	1dbb      	adds	r3, r7, #6
 80079ca:	881b      	ldrh	r3, [r3, #0]
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d101      	bne.n	80079d4 <HAL_UART_Transmit_IT+0x2c>
    {
      return HAL_ERROR;
 80079d0:	2301      	movs	r3, #1
 80079d2:	e085      	b.n	8007ae0 <HAL_UART_Transmit_IT+0x138>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	689a      	ldr	r2, [r3, #8]
 80079d8:	2380      	movs	r3, #128	; 0x80
 80079da:	015b      	lsls	r3, r3, #5
 80079dc:	429a      	cmp	r2, r3
 80079de:	d109      	bne.n	80079f4 <HAL_UART_Transmit_IT+0x4c>
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	691b      	ldr	r3, [r3, #16]
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d105      	bne.n	80079f4 <HAL_UART_Transmit_IT+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80079e8:	68bb      	ldr	r3, [r7, #8]
 80079ea:	2201      	movs	r2, #1
 80079ec:	4013      	ands	r3, r2
 80079ee:	d001      	beq.n	80079f4 <HAL_UART_Transmit_IT+0x4c>
      {
        return  HAL_ERROR;
 80079f0:	2301      	movs	r3, #1
 80079f2:	e075      	b.n	8007ae0 <HAL_UART_Transmit_IT+0x138>
      }
    }

    huart->pTxBuffPtr  = pData;
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	68ba      	ldr	r2, [r7, #8]
 80079f8:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	1dba      	adds	r2, r7, #6
 80079fe:	2154      	movs	r1, #84	; 0x54
 8007a00:	8812      	ldrh	r2, [r2, #0]
 8007a02:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	1dba      	adds	r2, r7, #6
 8007a08:	2156      	movs	r1, #86	; 0x56
 8007a0a:	8812      	ldrh	r2, [r2, #0]
 8007a0c:	525a      	strh	r2, [r3, r1]
    huart->TxISR       = NULL;
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	2200      	movs	r2, #0
 8007a12:	679a      	str	r2, [r3, #120]	; 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	2290      	movs	r2, #144	; 0x90
 8007a18:	2100      	movs	r1, #0
 8007a1a:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	2288      	movs	r2, #136	; 0x88
 8007a20:	2121      	movs	r1, #33	; 0x21
 8007a22:	5099      	str	r1, [r3, r2]

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8007a28:	2380      	movs	r3, #128	; 0x80
 8007a2a:	059b      	lsls	r3, r3, #22
 8007a2c:	429a      	cmp	r2, r3
 8007a2e:	d12a      	bne.n	8007a86 <HAL_UART_Transmit_IT+0xde>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	689a      	ldr	r2, [r3, #8]
 8007a34:	2380      	movs	r3, #128	; 0x80
 8007a36:	015b      	lsls	r3, r3, #5
 8007a38:	429a      	cmp	r2, r3
 8007a3a:	d107      	bne.n	8007a4c <HAL_UART_Transmit_IT+0xa4>
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	691b      	ldr	r3, [r3, #16]
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d103      	bne.n	8007a4c <HAL_UART_Transmit_IT+0xa4>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	4a28      	ldr	r2, [pc, #160]	; (8007ae8 <HAL_UART_Transmit_IT+0x140>)
 8007a48:	679a      	str	r2, [r3, #120]	; 0x78
 8007a4a:	e002      	b.n	8007a52 <HAL_UART_Transmit_IT+0xaa>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	4a27      	ldr	r2, [pc, #156]	; (8007aec <HAL_UART_Transmit_IT+0x144>)
 8007a50:	679a      	str	r2, [r3, #120]	; 0x78
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007a52:	f3ef 8310 	mrs	r3, PRIMASK
 8007a56:	61fb      	str	r3, [r7, #28]
  return(result);
 8007a58:	69fb      	ldr	r3, [r7, #28]
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8007a5a:	62bb      	str	r3, [r7, #40]	; 0x28
 8007a5c:	2301      	movs	r3, #1
 8007a5e:	623b      	str	r3, [r7, #32]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007a60:	6a3b      	ldr	r3, [r7, #32]
 8007a62:	f383 8810 	msr	PRIMASK, r3
}
 8007a66:	46c0      	nop			; (mov r8, r8)
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	689a      	ldr	r2, [r3, #8]
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	2180      	movs	r1, #128	; 0x80
 8007a74:	0409      	lsls	r1, r1, #16
 8007a76:	430a      	orrs	r2, r1
 8007a78:	609a      	str	r2, [r3, #8]
 8007a7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a7c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a80:	f383 8810 	msr	PRIMASK, r3
}
 8007a84:	e029      	b.n	8007ada <HAL_UART_Transmit_IT+0x132>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	689a      	ldr	r2, [r3, #8]
 8007a8a:	2380      	movs	r3, #128	; 0x80
 8007a8c:	015b      	lsls	r3, r3, #5
 8007a8e:	429a      	cmp	r2, r3
 8007a90:	d107      	bne.n	8007aa2 <HAL_UART_Transmit_IT+0xfa>
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	691b      	ldr	r3, [r3, #16]
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d103      	bne.n	8007aa2 <HAL_UART_Transmit_IT+0xfa>
      {
        huart->TxISR = UART_TxISR_16BIT;
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	4a14      	ldr	r2, [pc, #80]	; (8007af0 <HAL_UART_Transmit_IT+0x148>)
 8007a9e:	679a      	str	r2, [r3, #120]	; 0x78
 8007aa0:	e002      	b.n	8007aa8 <HAL_UART_Transmit_IT+0x100>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	4a13      	ldr	r2, [pc, #76]	; (8007af4 <HAL_UART_Transmit_IT+0x14c>)
 8007aa6:	679a      	str	r2, [r3, #120]	; 0x78
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007aa8:	f3ef 8310 	mrs	r3, PRIMASK
 8007aac:	613b      	str	r3, [r7, #16]
  return(result);
 8007aae:	693b      	ldr	r3, [r7, #16]
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8007ab0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007ab2:	2301      	movs	r3, #1
 8007ab4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007ab6:	697b      	ldr	r3, [r7, #20]
 8007ab8:	f383 8810 	msr	PRIMASK, r3
}
 8007abc:	46c0      	nop			; (mov r8, r8)
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	681a      	ldr	r2, [r3, #0]
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	2180      	movs	r1, #128	; 0x80
 8007aca:	430a      	orrs	r2, r1
 8007acc:	601a      	str	r2, [r3, #0]
 8007ace:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ad0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007ad2:	69bb      	ldr	r3, [r7, #24]
 8007ad4:	f383 8810 	msr	PRIMASK, r3
}
 8007ad8:	46c0      	nop			; (mov r8, r8)
    }

    return HAL_OK;
 8007ada:	2300      	movs	r3, #0
 8007adc:	e000      	b.n	8007ae0 <HAL_UART_Transmit_IT+0x138>
  }
  else
  {
    return HAL_BUSY;
 8007ade:	2302      	movs	r3, #2
  }
}
 8007ae0:	0018      	movs	r0, r3
 8007ae2:	46bd      	mov	sp, r7
 8007ae4:	b00c      	add	sp, #48	; 0x30
 8007ae6:	bd80      	pop	{r7, pc}
 8007ae8:	0800923d 	.word	0x0800923d
 8007aec:	08009151 	.word	0x08009151
 8007af0:	08009093 	.word	0x08009093
 8007af4:	08008fdf 	.word	0x08008fdf

08007af8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007af8:	b580      	push	{r7, lr}
 8007afa:	b088      	sub	sp, #32
 8007afc:	af00      	add	r7, sp, #0
 8007afe:	60f8      	str	r0, [r7, #12]
 8007b00:	60b9      	str	r1, [r7, #8]
 8007b02:	1dbb      	adds	r3, r7, #6
 8007b04:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	228c      	movs	r2, #140	; 0x8c
 8007b0a:	589b      	ldr	r3, [r3, r2]
 8007b0c:	2b20      	cmp	r3, #32
 8007b0e:	d14f      	bne.n	8007bb0 <HAL_UART_Receive_IT+0xb8>
  {
    if ((pData == NULL) || (Size == 0U))
 8007b10:	68bb      	ldr	r3, [r7, #8]
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d003      	beq.n	8007b1e <HAL_UART_Receive_IT+0x26>
 8007b16:	1dbb      	adds	r3, r7, #6
 8007b18:	881b      	ldrh	r3, [r3, #0]
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d101      	bne.n	8007b22 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8007b1e:	2301      	movs	r3, #1
 8007b20:	e047      	b.n	8007bb2 <HAL_UART_Receive_IT+0xba>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	689a      	ldr	r2, [r3, #8]
 8007b26:	2380      	movs	r3, #128	; 0x80
 8007b28:	015b      	lsls	r3, r3, #5
 8007b2a:	429a      	cmp	r2, r3
 8007b2c:	d109      	bne.n	8007b42 <HAL_UART_Receive_IT+0x4a>
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	691b      	ldr	r3, [r3, #16]
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d105      	bne.n	8007b42 <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8007b36:	68bb      	ldr	r3, [r7, #8]
 8007b38:	2201      	movs	r2, #1
 8007b3a:	4013      	ands	r3, r2
 8007b3c:	d001      	beq.n	8007b42 <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 8007b3e:	2301      	movs	r3, #1
 8007b40:	e037      	b.n	8007bb2 <HAL_UART_Receive_IT+0xba>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	2200      	movs	r2, #0
 8007b46:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	4a1b      	ldr	r2, [pc, #108]	; (8007bbc <HAL_UART_Receive_IT+0xc4>)
 8007b4e:	4293      	cmp	r3, r2
 8007b50:	d025      	beq.n	8007b9e <HAL_UART_Receive_IT+0xa6>
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	4a1a      	ldr	r2, [pc, #104]	; (8007bc0 <HAL_UART_Receive_IT+0xc8>)
 8007b58:	4293      	cmp	r3, r2
 8007b5a:	d020      	beq.n	8007b9e <HAL_UART_Receive_IT+0xa6>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	685a      	ldr	r2, [r3, #4]
 8007b62:	2380      	movs	r3, #128	; 0x80
 8007b64:	041b      	lsls	r3, r3, #16
 8007b66:	4013      	ands	r3, r2
 8007b68:	d019      	beq.n	8007b9e <HAL_UART_Receive_IT+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007b6a:	f3ef 8310 	mrs	r3, PRIMASK
 8007b6e:	613b      	str	r3, [r7, #16]
  return(result);
 8007b70:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007b72:	61fb      	str	r3, [r7, #28]
 8007b74:	2301      	movs	r3, #1
 8007b76:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007b78:	697b      	ldr	r3, [r7, #20]
 8007b7a:	f383 8810 	msr	PRIMASK, r3
}
 8007b7e:	46c0      	nop			; (mov r8, r8)
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	681a      	ldr	r2, [r3, #0]
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	2180      	movs	r1, #128	; 0x80
 8007b8c:	04c9      	lsls	r1, r1, #19
 8007b8e:	430a      	orrs	r2, r1
 8007b90:	601a      	str	r2, [r3, #0]
 8007b92:	69fb      	ldr	r3, [r7, #28]
 8007b94:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007b96:	69bb      	ldr	r3, [r7, #24]
 8007b98:	f383 8810 	msr	PRIMASK, r3
}
 8007b9c:	46c0      	nop			; (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007b9e:	1dbb      	adds	r3, r7, #6
 8007ba0:	881a      	ldrh	r2, [r3, #0]
 8007ba2:	68b9      	ldr	r1, [r7, #8]
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	0018      	movs	r0, r3
 8007ba8:	f001 f878 	bl	8008c9c <UART_Start_Receive_IT>
 8007bac:	0003      	movs	r3, r0
 8007bae:	e000      	b.n	8007bb2 <HAL_UART_Receive_IT+0xba>
  }
  else
  {
    return HAL_BUSY;
 8007bb0:	2302      	movs	r3, #2
  }
}
 8007bb2:	0018      	movs	r0, r3
 8007bb4:	46bd      	mov	sp, r7
 8007bb6:	b008      	add	sp, #32
 8007bb8:	bd80      	pop	{r7, pc}
 8007bba:	46c0      	nop			; (mov r8, r8)
 8007bbc:	40008000 	.word	0x40008000
 8007bc0:	40008400 	.word	0x40008400

08007bc4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007bc4:	b5b0      	push	{r4, r5, r7, lr}
 8007bc6:	b0aa      	sub	sp, #168	; 0xa8
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	69db      	ldr	r3, [r3, #28]
 8007bd2:	22a4      	movs	r2, #164	; 0xa4
 8007bd4:	18b9      	adds	r1, r7, r2
 8007bd6:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	20a0      	movs	r0, #160	; 0xa0
 8007be0:	1839      	adds	r1, r7, r0
 8007be2:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	689b      	ldr	r3, [r3, #8]
 8007bea:	249c      	movs	r4, #156	; 0x9c
 8007bec:	1939      	adds	r1, r7, r4
 8007bee:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007bf0:	0011      	movs	r1, r2
 8007bf2:	18bb      	adds	r3, r7, r2
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	4aa2      	ldr	r2, [pc, #648]	; (8007e80 <HAL_UART_IRQHandler+0x2bc>)
 8007bf8:	4013      	ands	r3, r2
 8007bfa:	2298      	movs	r2, #152	; 0x98
 8007bfc:	18bd      	adds	r5, r7, r2
 8007bfe:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 8007c00:	18bb      	adds	r3, r7, r2
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d11a      	bne.n	8007c3e <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007c08:	187b      	adds	r3, r7, r1
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	2220      	movs	r2, #32
 8007c0e:	4013      	ands	r3, r2
 8007c10:	d015      	beq.n	8007c3e <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007c12:	183b      	adds	r3, r7, r0
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	2220      	movs	r2, #32
 8007c18:	4013      	ands	r3, r2
 8007c1a:	d105      	bne.n	8007c28 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007c1c:	193b      	adds	r3, r7, r4
 8007c1e:	681a      	ldr	r2, [r3, #0]
 8007c20:	2380      	movs	r3, #128	; 0x80
 8007c22:	055b      	lsls	r3, r3, #21
 8007c24:	4013      	ands	r3, r2
 8007c26:	d00a      	beq.n	8007c3e <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d100      	bne.n	8007c32 <HAL_UART_IRQHandler+0x6e>
 8007c30:	e2dc      	b.n	80081ec <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c36:	687a      	ldr	r2, [r7, #4]
 8007c38:	0010      	movs	r0, r2
 8007c3a:	4798      	blx	r3
      }
      return;
 8007c3c:	e2d6      	b.n	80081ec <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007c3e:	2398      	movs	r3, #152	; 0x98
 8007c40:	18fb      	adds	r3, r7, r3
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d100      	bne.n	8007c4a <HAL_UART_IRQHandler+0x86>
 8007c48:	e122      	b.n	8007e90 <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8007c4a:	239c      	movs	r3, #156	; 0x9c
 8007c4c:	18fb      	adds	r3, r7, r3
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	4a8c      	ldr	r2, [pc, #560]	; (8007e84 <HAL_UART_IRQHandler+0x2c0>)
 8007c52:	4013      	ands	r3, r2
 8007c54:	d106      	bne.n	8007c64 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8007c56:	23a0      	movs	r3, #160	; 0xa0
 8007c58:	18fb      	adds	r3, r7, r3
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	4a8a      	ldr	r2, [pc, #552]	; (8007e88 <HAL_UART_IRQHandler+0x2c4>)
 8007c5e:	4013      	ands	r3, r2
 8007c60:	d100      	bne.n	8007c64 <HAL_UART_IRQHandler+0xa0>
 8007c62:	e115      	b.n	8007e90 <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007c64:	23a4      	movs	r3, #164	; 0xa4
 8007c66:	18fb      	adds	r3, r7, r3
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	2201      	movs	r2, #1
 8007c6c:	4013      	ands	r3, r2
 8007c6e:	d012      	beq.n	8007c96 <HAL_UART_IRQHandler+0xd2>
 8007c70:	23a0      	movs	r3, #160	; 0xa0
 8007c72:	18fb      	adds	r3, r7, r3
 8007c74:	681a      	ldr	r2, [r3, #0]
 8007c76:	2380      	movs	r3, #128	; 0x80
 8007c78:	005b      	lsls	r3, r3, #1
 8007c7a:	4013      	ands	r3, r2
 8007c7c:	d00b      	beq.n	8007c96 <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	2201      	movs	r2, #1
 8007c84:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	2290      	movs	r2, #144	; 0x90
 8007c8a:	589b      	ldr	r3, [r3, r2]
 8007c8c:	2201      	movs	r2, #1
 8007c8e:	431a      	orrs	r2, r3
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	2190      	movs	r1, #144	; 0x90
 8007c94:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007c96:	23a4      	movs	r3, #164	; 0xa4
 8007c98:	18fb      	adds	r3, r7, r3
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	2202      	movs	r2, #2
 8007c9e:	4013      	ands	r3, r2
 8007ca0:	d011      	beq.n	8007cc6 <HAL_UART_IRQHandler+0x102>
 8007ca2:	239c      	movs	r3, #156	; 0x9c
 8007ca4:	18fb      	adds	r3, r7, r3
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	2201      	movs	r2, #1
 8007caa:	4013      	ands	r3, r2
 8007cac:	d00b      	beq.n	8007cc6 <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	2202      	movs	r2, #2
 8007cb4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	2290      	movs	r2, #144	; 0x90
 8007cba:	589b      	ldr	r3, [r3, r2]
 8007cbc:	2204      	movs	r2, #4
 8007cbe:	431a      	orrs	r2, r3
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	2190      	movs	r1, #144	; 0x90
 8007cc4:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007cc6:	23a4      	movs	r3, #164	; 0xa4
 8007cc8:	18fb      	adds	r3, r7, r3
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	2204      	movs	r2, #4
 8007cce:	4013      	ands	r3, r2
 8007cd0:	d011      	beq.n	8007cf6 <HAL_UART_IRQHandler+0x132>
 8007cd2:	239c      	movs	r3, #156	; 0x9c
 8007cd4:	18fb      	adds	r3, r7, r3
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	2201      	movs	r2, #1
 8007cda:	4013      	ands	r3, r2
 8007cdc:	d00b      	beq.n	8007cf6 <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	2204      	movs	r2, #4
 8007ce4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	2290      	movs	r2, #144	; 0x90
 8007cea:	589b      	ldr	r3, [r3, r2]
 8007cec:	2202      	movs	r2, #2
 8007cee:	431a      	orrs	r2, r3
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	2190      	movs	r1, #144	; 0x90
 8007cf4:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007cf6:	23a4      	movs	r3, #164	; 0xa4
 8007cf8:	18fb      	adds	r3, r7, r3
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	2208      	movs	r2, #8
 8007cfe:	4013      	ands	r3, r2
 8007d00:	d017      	beq.n	8007d32 <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007d02:	23a0      	movs	r3, #160	; 0xa0
 8007d04:	18fb      	adds	r3, r7, r3
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	2220      	movs	r2, #32
 8007d0a:	4013      	ands	r3, r2
 8007d0c:	d105      	bne.n	8007d1a <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8007d0e:	239c      	movs	r3, #156	; 0x9c
 8007d10:	18fb      	adds	r3, r7, r3
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	4a5b      	ldr	r2, [pc, #364]	; (8007e84 <HAL_UART_IRQHandler+0x2c0>)
 8007d16:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007d18:	d00b      	beq.n	8007d32 <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	2208      	movs	r2, #8
 8007d20:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	2290      	movs	r2, #144	; 0x90
 8007d26:	589b      	ldr	r3, [r3, r2]
 8007d28:	2208      	movs	r2, #8
 8007d2a:	431a      	orrs	r2, r3
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	2190      	movs	r1, #144	; 0x90
 8007d30:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007d32:	23a4      	movs	r3, #164	; 0xa4
 8007d34:	18fb      	adds	r3, r7, r3
 8007d36:	681a      	ldr	r2, [r3, #0]
 8007d38:	2380      	movs	r3, #128	; 0x80
 8007d3a:	011b      	lsls	r3, r3, #4
 8007d3c:	4013      	ands	r3, r2
 8007d3e:	d013      	beq.n	8007d68 <HAL_UART_IRQHandler+0x1a4>
 8007d40:	23a0      	movs	r3, #160	; 0xa0
 8007d42:	18fb      	adds	r3, r7, r3
 8007d44:	681a      	ldr	r2, [r3, #0]
 8007d46:	2380      	movs	r3, #128	; 0x80
 8007d48:	04db      	lsls	r3, r3, #19
 8007d4a:	4013      	ands	r3, r2
 8007d4c:	d00c      	beq.n	8007d68 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	2280      	movs	r2, #128	; 0x80
 8007d54:	0112      	lsls	r2, r2, #4
 8007d56:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	2290      	movs	r2, #144	; 0x90
 8007d5c:	589b      	ldr	r3, [r3, r2]
 8007d5e:	2220      	movs	r2, #32
 8007d60:	431a      	orrs	r2, r3
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	2190      	movs	r1, #144	; 0x90
 8007d66:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	2290      	movs	r2, #144	; 0x90
 8007d6c:	589b      	ldr	r3, [r3, r2]
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d100      	bne.n	8007d74 <HAL_UART_IRQHandler+0x1b0>
 8007d72:	e23d      	b.n	80081f0 <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007d74:	23a4      	movs	r3, #164	; 0xa4
 8007d76:	18fb      	adds	r3, r7, r3
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	2220      	movs	r2, #32
 8007d7c:	4013      	ands	r3, r2
 8007d7e:	d015      	beq.n	8007dac <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007d80:	23a0      	movs	r3, #160	; 0xa0
 8007d82:	18fb      	adds	r3, r7, r3
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	2220      	movs	r2, #32
 8007d88:	4013      	ands	r3, r2
 8007d8a:	d106      	bne.n	8007d9a <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007d8c:	239c      	movs	r3, #156	; 0x9c
 8007d8e:	18fb      	adds	r3, r7, r3
 8007d90:	681a      	ldr	r2, [r3, #0]
 8007d92:	2380      	movs	r3, #128	; 0x80
 8007d94:	055b      	lsls	r3, r3, #21
 8007d96:	4013      	ands	r3, r2
 8007d98:	d008      	beq.n	8007dac <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d004      	beq.n	8007dac <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007da6:	687a      	ldr	r2, [r7, #4]
 8007da8:	0010      	movs	r0, r2
 8007daa:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	2290      	movs	r2, #144	; 0x90
 8007db0:	589b      	ldr	r3, [r3, r2]
 8007db2:	2194      	movs	r1, #148	; 0x94
 8007db4:	187a      	adds	r2, r7, r1
 8007db6:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	689b      	ldr	r3, [r3, #8]
 8007dbe:	2240      	movs	r2, #64	; 0x40
 8007dc0:	4013      	ands	r3, r2
 8007dc2:	2b40      	cmp	r3, #64	; 0x40
 8007dc4:	d004      	beq.n	8007dd0 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007dc6:	187b      	adds	r3, r7, r1
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	2228      	movs	r2, #40	; 0x28
 8007dcc:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007dce:	d04c      	beq.n	8007e6a <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	0018      	movs	r0, r3
 8007dd4:	f001 f886 	bl	8008ee4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	689b      	ldr	r3, [r3, #8]
 8007dde:	2240      	movs	r2, #64	; 0x40
 8007de0:	4013      	ands	r3, r2
 8007de2:	2b40      	cmp	r3, #64	; 0x40
 8007de4:	d13c      	bne.n	8007e60 <HAL_UART_IRQHandler+0x29c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007de6:	f3ef 8310 	mrs	r3, PRIMASK
 8007dea:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8007dec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007dee:	2090      	movs	r0, #144	; 0x90
 8007df0:	183a      	adds	r2, r7, r0
 8007df2:	6013      	str	r3, [r2, #0]
 8007df4:	2301      	movs	r3, #1
 8007df6:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007df8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007dfa:	f383 8810 	msr	PRIMASK, r3
}
 8007dfe:	46c0      	nop			; (mov r8, r8)
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	689a      	ldr	r2, [r3, #8]
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	2140      	movs	r1, #64	; 0x40
 8007e0c:	438a      	bics	r2, r1
 8007e0e:	609a      	str	r2, [r3, #8]
 8007e10:	183b      	adds	r3, r7, r0
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007e16:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007e18:	f383 8810 	msr	PRIMASK, r3
}
 8007e1c:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	2280      	movs	r2, #128	; 0x80
 8007e22:	589b      	ldr	r3, [r3, r2]
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d016      	beq.n	8007e56 <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	2280      	movs	r2, #128	; 0x80
 8007e2c:	589b      	ldr	r3, [r3, r2]
 8007e2e:	4a17      	ldr	r2, [pc, #92]	; (8007e8c <HAL_UART_IRQHandler+0x2c8>)
 8007e30:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	2280      	movs	r2, #128	; 0x80
 8007e36:	589b      	ldr	r3, [r3, r2]
 8007e38:	0018      	movs	r0, r3
 8007e3a:	f7fd fa8f 	bl	800535c <HAL_DMA_Abort_IT>
 8007e3e:	1e03      	subs	r3, r0, #0
 8007e40:	d01c      	beq.n	8007e7c <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	2280      	movs	r2, #128	; 0x80
 8007e46:	589b      	ldr	r3, [r3, r2]
 8007e48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e4a:	687a      	ldr	r2, [r7, #4]
 8007e4c:	2180      	movs	r1, #128	; 0x80
 8007e4e:	5852      	ldr	r2, [r2, r1]
 8007e50:	0010      	movs	r0, r2
 8007e52:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e54:	e012      	b.n	8007e7c <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	0018      	movs	r0, r3
 8007e5a:	f7fc fc01 	bl	8004660 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e5e:	e00d      	b.n	8007e7c <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	0018      	movs	r0, r3
 8007e64:	f7fc fbfc 	bl	8004660 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e68:	e008      	b.n	8007e7c <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	0018      	movs	r0, r3
 8007e6e:	f7fc fbf7 	bl	8004660 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	2290      	movs	r2, #144	; 0x90
 8007e76:	2100      	movs	r1, #0
 8007e78:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8007e7a:	e1b9      	b.n	80081f0 <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e7c:	46c0      	nop			; (mov r8, r8)
    return;
 8007e7e:	e1b7      	b.n	80081f0 <HAL_UART_IRQHandler+0x62c>
 8007e80:	0000080f 	.word	0x0000080f
 8007e84:	10000001 	.word	0x10000001
 8007e88:	04000120 	.word	0x04000120
 8007e8c:	08008fb1 	.word	0x08008fb1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007e94:	2b01      	cmp	r3, #1
 8007e96:	d000      	beq.n	8007e9a <HAL_UART_IRQHandler+0x2d6>
 8007e98:	e13e      	b.n	8008118 <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007e9a:	23a4      	movs	r3, #164	; 0xa4
 8007e9c:	18fb      	adds	r3, r7, r3
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	2210      	movs	r2, #16
 8007ea2:	4013      	ands	r3, r2
 8007ea4:	d100      	bne.n	8007ea8 <HAL_UART_IRQHandler+0x2e4>
 8007ea6:	e137      	b.n	8008118 <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007ea8:	23a0      	movs	r3, #160	; 0xa0
 8007eaa:	18fb      	adds	r3, r7, r3
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	2210      	movs	r2, #16
 8007eb0:	4013      	ands	r3, r2
 8007eb2:	d100      	bne.n	8007eb6 <HAL_UART_IRQHandler+0x2f2>
 8007eb4:	e130      	b.n	8008118 <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	2210      	movs	r2, #16
 8007ebc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	689b      	ldr	r3, [r3, #8]
 8007ec4:	2240      	movs	r2, #64	; 0x40
 8007ec6:	4013      	ands	r3, r2
 8007ec8:	2b40      	cmp	r3, #64	; 0x40
 8007eca:	d000      	beq.n	8007ece <HAL_UART_IRQHandler+0x30a>
 8007ecc:	e0a4      	b.n	8008018 <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	2280      	movs	r2, #128	; 0x80
 8007ed2:	589b      	ldr	r3, [r3, r2]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	685a      	ldr	r2, [r3, #4]
 8007ed8:	217e      	movs	r1, #126	; 0x7e
 8007eda:	187b      	adds	r3, r7, r1
 8007edc:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8007ede:	187b      	adds	r3, r7, r1
 8007ee0:	881b      	ldrh	r3, [r3, #0]
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d100      	bne.n	8007ee8 <HAL_UART_IRQHandler+0x324>
 8007ee6:	e185      	b.n	80081f4 <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	225c      	movs	r2, #92	; 0x5c
 8007eec:	5a9b      	ldrh	r3, [r3, r2]
 8007eee:	187a      	adds	r2, r7, r1
 8007ef0:	8812      	ldrh	r2, [r2, #0]
 8007ef2:	429a      	cmp	r2, r3
 8007ef4:	d300      	bcc.n	8007ef8 <HAL_UART_IRQHandler+0x334>
 8007ef6:	e17d      	b.n	80081f4 <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	187a      	adds	r2, r7, r1
 8007efc:	215e      	movs	r1, #94	; 0x5e
 8007efe:	8812      	ldrh	r2, [r2, #0]
 8007f00:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	2280      	movs	r2, #128	; 0x80
 8007f06:	589b      	ldr	r3, [r3, r2]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	2220      	movs	r2, #32
 8007f0e:	4013      	ands	r3, r2
 8007f10:	d170      	bne.n	8007ff4 <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007f12:	f3ef 8310 	mrs	r3, PRIMASK
 8007f16:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8007f18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007f1a:	67bb      	str	r3, [r7, #120]	; 0x78
 8007f1c:	2301      	movs	r3, #1
 8007f1e:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007f20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f22:	f383 8810 	msr	PRIMASK, r3
}
 8007f26:	46c0      	nop			; (mov r8, r8)
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	681a      	ldr	r2, [r3, #0]
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	49b4      	ldr	r1, [pc, #720]	; (8008204 <HAL_UART_IRQHandler+0x640>)
 8007f34:	400a      	ands	r2, r1
 8007f36:	601a      	str	r2, [r3, #0]
 8007f38:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007f3a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007f3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f3e:	f383 8810 	msr	PRIMASK, r3
}
 8007f42:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007f44:	f3ef 8310 	mrs	r3, PRIMASK
 8007f48:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8007f4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f4c:	677b      	str	r3, [r7, #116]	; 0x74
 8007f4e:	2301      	movs	r3, #1
 8007f50:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007f52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007f54:	f383 8810 	msr	PRIMASK, r3
}
 8007f58:	46c0      	nop			; (mov r8, r8)
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	689a      	ldr	r2, [r3, #8]
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	2101      	movs	r1, #1
 8007f66:	438a      	bics	r2, r1
 8007f68:	609a      	str	r2, [r3, #8]
 8007f6a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007f6c:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007f6e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007f70:	f383 8810 	msr	PRIMASK, r3
}
 8007f74:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007f76:	f3ef 8310 	mrs	r3, PRIMASK
 8007f7a:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8007f7c:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007f7e:	673b      	str	r3, [r7, #112]	; 0x70
 8007f80:	2301      	movs	r3, #1
 8007f82:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007f84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007f86:	f383 8810 	msr	PRIMASK, r3
}
 8007f8a:	46c0      	nop			; (mov r8, r8)
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	689a      	ldr	r2, [r3, #8]
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	2140      	movs	r1, #64	; 0x40
 8007f98:	438a      	bics	r2, r1
 8007f9a:	609a      	str	r2, [r3, #8]
 8007f9c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007f9e:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007fa0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007fa2:	f383 8810 	msr	PRIMASK, r3
}
 8007fa6:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	228c      	movs	r2, #140	; 0x8c
 8007fac:	2120      	movs	r1, #32
 8007fae:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	2200      	movs	r2, #0
 8007fb4:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007fb6:	f3ef 8310 	mrs	r3, PRIMASK
 8007fba:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8007fbc:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007fbe:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007fc0:	2301      	movs	r3, #1
 8007fc2:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007fc4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007fc6:	f383 8810 	msr	PRIMASK, r3
}
 8007fca:	46c0      	nop			; (mov r8, r8)
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	681a      	ldr	r2, [r3, #0]
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	2110      	movs	r1, #16
 8007fd8:	438a      	bics	r2, r1
 8007fda:	601a      	str	r2, [r3, #0]
 8007fdc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007fde:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007fe0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007fe2:	f383 8810 	msr	PRIMASK, r3
}
 8007fe6:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	2280      	movs	r2, #128	; 0x80
 8007fec:	589b      	ldr	r3, [r3, r2]
 8007fee:	0018      	movs	r0, r3
 8007ff0:	f7fd f954 	bl	800529c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	2202      	movs	r2, #2
 8007ff8:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	225c      	movs	r2, #92	; 0x5c
 8007ffe:	5a9a      	ldrh	r2, [r3, r2]
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	215e      	movs	r1, #94	; 0x5e
 8008004:	5a5b      	ldrh	r3, [r3, r1]
 8008006:	b29b      	uxth	r3, r3
 8008008:	1ad3      	subs	r3, r2, r3
 800800a:	b29a      	uxth	r2, r3
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	0011      	movs	r1, r2
 8008010:	0018      	movs	r0, r3
 8008012:	f000 f905 	bl	8008220 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008016:	e0ed      	b.n	80081f4 <HAL_UART_IRQHandler+0x630>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	225c      	movs	r2, #92	; 0x5c
 800801c:	5a99      	ldrh	r1, [r3, r2]
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	225e      	movs	r2, #94	; 0x5e
 8008022:	5a9b      	ldrh	r3, [r3, r2]
 8008024:	b29a      	uxth	r2, r3
 8008026:	208e      	movs	r0, #142	; 0x8e
 8008028:	183b      	adds	r3, r7, r0
 800802a:	1a8a      	subs	r2, r1, r2
 800802c:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	225e      	movs	r2, #94	; 0x5e
 8008032:	5a9b      	ldrh	r3, [r3, r2]
 8008034:	b29b      	uxth	r3, r3
 8008036:	2b00      	cmp	r3, #0
 8008038:	d100      	bne.n	800803c <HAL_UART_IRQHandler+0x478>
 800803a:	e0dd      	b.n	80081f8 <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 800803c:	183b      	adds	r3, r7, r0
 800803e:	881b      	ldrh	r3, [r3, #0]
 8008040:	2b00      	cmp	r3, #0
 8008042:	d100      	bne.n	8008046 <HAL_UART_IRQHandler+0x482>
 8008044:	e0d8      	b.n	80081f8 <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008046:	f3ef 8310 	mrs	r3, PRIMASK
 800804a:	60fb      	str	r3, [r7, #12]
  return(result);
 800804c:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800804e:	2488      	movs	r4, #136	; 0x88
 8008050:	193a      	adds	r2, r7, r4
 8008052:	6013      	str	r3, [r2, #0]
 8008054:	2301      	movs	r3, #1
 8008056:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008058:	693b      	ldr	r3, [r7, #16]
 800805a:	f383 8810 	msr	PRIMASK, r3
}
 800805e:	46c0      	nop			; (mov r8, r8)
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	681a      	ldr	r2, [r3, #0]
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	4967      	ldr	r1, [pc, #412]	; (8008208 <HAL_UART_IRQHandler+0x644>)
 800806c:	400a      	ands	r2, r1
 800806e:	601a      	str	r2, [r3, #0]
 8008070:	193b      	adds	r3, r7, r4
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008076:	697b      	ldr	r3, [r7, #20]
 8008078:	f383 8810 	msr	PRIMASK, r3
}
 800807c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800807e:	f3ef 8310 	mrs	r3, PRIMASK
 8008082:	61bb      	str	r3, [r7, #24]
  return(result);
 8008084:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008086:	2484      	movs	r4, #132	; 0x84
 8008088:	193a      	adds	r2, r7, r4
 800808a:	6013      	str	r3, [r2, #0]
 800808c:	2301      	movs	r3, #1
 800808e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008090:	69fb      	ldr	r3, [r7, #28]
 8008092:	f383 8810 	msr	PRIMASK, r3
}
 8008096:	46c0      	nop			; (mov r8, r8)
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	689a      	ldr	r2, [r3, #8]
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	495a      	ldr	r1, [pc, #360]	; (800820c <HAL_UART_IRQHandler+0x648>)
 80080a4:	400a      	ands	r2, r1
 80080a6:	609a      	str	r2, [r3, #8]
 80080a8:	193b      	adds	r3, r7, r4
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80080ae:	6a3b      	ldr	r3, [r7, #32]
 80080b0:	f383 8810 	msr	PRIMASK, r3
}
 80080b4:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	228c      	movs	r2, #140	; 0x8c
 80080ba:	2120      	movs	r1, #32
 80080bc:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	2200      	movs	r2, #0
 80080c2:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	2200      	movs	r2, #0
 80080c8:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80080ca:	f3ef 8310 	mrs	r3, PRIMASK
 80080ce:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80080d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80080d2:	2480      	movs	r4, #128	; 0x80
 80080d4:	193a      	adds	r2, r7, r4
 80080d6:	6013      	str	r3, [r2, #0]
 80080d8:	2301      	movs	r3, #1
 80080da:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80080dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080de:	f383 8810 	msr	PRIMASK, r3
}
 80080e2:	46c0      	nop			; (mov r8, r8)
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	681a      	ldr	r2, [r3, #0]
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	2110      	movs	r1, #16
 80080f0:	438a      	bics	r2, r1
 80080f2:	601a      	str	r2, [r3, #0]
 80080f4:	193b      	adds	r3, r7, r4
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80080fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080fc:	f383 8810 	msr	PRIMASK, r3
}
 8008100:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	2202      	movs	r2, #2
 8008106:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008108:	183b      	adds	r3, r7, r0
 800810a:	881a      	ldrh	r2, [r3, #0]
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	0011      	movs	r1, r2
 8008110:	0018      	movs	r0, r3
 8008112:	f000 f885 	bl	8008220 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008116:	e06f      	b.n	80081f8 <HAL_UART_IRQHandler+0x634>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008118:	23a4      	movs	r3, #164	; 0xa4
 800811a:	18fb      	adds	r3, r7, r3
 800811c:	681a      	ldr	r2, [r3, #0]
 800811e:	2380      	movs	r3, #128	; 0x80
 8008120:	035b      	lsls	r3, r3, #13
 8008122:	4013      	ands	r3, r2
 8008124:	d010      	beq.n	8008148 <HAL_UART_IRQHandler+0x584>
 8008126:	239c      	movs	r3, #156	; 0x9c
 8008128:	18fb      	adds	r3, r7, r3
 800812a:	681a      	ldr	r2, [r3, #0]
 800812c:	2380      	movs	r3, #128	; 0x80
 800812e:	03db      	lsls	r3, r3, #15
 8008130:	4013      	ands	r3, r2
 8008132:	d009      	beq.n	8008148 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	2280      	movs	r2, #128	; 0x80
 800813a:	0352      	lsls	r2, r2, #13
 800813c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	0018      	movs	r0, r3
 8008142:	f001 fd81 	bl	8009c48 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008146:	e05a      	b.n	80081fe <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8008148:	23a4      	movs	r3, #164	; 0xa4
 800814a:	18fb      	adds	r3, r7, r3
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	2280      	movs	r2, #128	; 0x80
 8008150:	4013      	ands	r3, r2
 8008152:	d016      	beq.n	8008182 <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8008154:	23a0      	movs	r3, #160	; 0xa0
 8008156:	18fb      	adds	r3, r7, r3
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	2280      	movs	r2, #128	; 0x80
 800815c:	4013      	ands	r3, r2
 800815e:	d106      	bne.n	800816e <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8008160:	239c      	movs	r3, #156	; 0x9c
 8008162:	18fb      	adds	r3, r7, r3
 8008164:	681a      	ldr	r2, [r3, #0]
 8008166:	2380      	movs	r3, #128	; 0x80
 8008168:	041b      	lsls	r3, r3, #16
 800816a:	4013      	ands	r3, r2
 800816c:	d009      	beq.n	8008182 <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008172:	2b00      	cmp	r3, #0
 8008174:	d042      	beq.n	80081fc <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800817a:	687a      	ldr	r2, [r7, #4]
 800817c:	0010      	movs	r0, r2
 800817e:	4798      	blx	r3
    }
    return;
 8008180:	e03c      	b.n	80081fc <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008182:	23a4      	movs	r3, #164	; 0xa4
 8008184:	18fb      	adds	r3, r7, r3
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	2240      	movs	r2, #64	; 0x40
 800818a:	4013      	ands	r3, r2
 800818c:	d00a      	beq.n	80081a4 <HAL_UART_IRQHandler+0x5e0>
 800818e:	23a0      	movs	r3, #160	; 0xa0
 8008190:	18fb      	adds	r3, r7, r3
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	2240      	movs	r2, #64	; 0x40
 8008196:	4013      	ands	r3, r2
 8008198:	d004      	beq.n	80081a4 <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	0018      	movs	r0, r3
 800819e:	f001 f8c7 	bl	8009330 <UART_EndTransmit_IT>
    return;
 80081a2:	e02c      	b.n	80081fe <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80081a4:	23a4      	movs	r3, #164	; 0xa4
 80081a6:	18fb      	adds	r3, r7, r3
 80081a8:	681a      	ldr	r2, [r3, #0]
 80081aa:	2380      	movs	r3, #128	; 0x80
 80081ac:	041b      	lsls	r3, r3, #16
 80081ae:	4013      	ands	r3, r2
 80081b0:	d00b      	beq.n	80081ca <HAL_UART_IRQHandler+0x606>
 80081b2:	23a0      	movs	r3, #160	; 0xa0
 80081b4:	18fb      	adds	r3, r7, r3
 80081b6:	681a      	ldr	r2, [r3, #0]
 80081b8:	2380      	movs	r3, #128	; 0x80
 80081ba:	05db      	lsls	r3, r3, #23
 80081bc:	4013      	ands	r3, r2
 80081be:	d004      	beq.n	80081ca <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	0018      	movs	r0, r3
 80081c4:	f001 fd50 	bl	8009c68 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80081c8:	e019      	b.n	80081fe <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80081ca:	23a4      	movs	r3, #164	; 0xa4
 80081cc:	18fb      	adds	r3, r7, r3
 80081ce:	681a      	ldr	r2, [r3, #0]
 80081d0:	2380      	movs	r3, #128	; 0x80
 80081d2:	045b      	lsls	r3, r3, #17
 80081d4:	4013      	ands	r3, r2
 80081d6:	d012      	beq.n	80081fe <HAL_UART_IRQHandler+0x63a>
 80081d8:	23a0      	movs	r3, #160	; 0xa0
 80081da:	18fb      	adds	r3, r7, r3
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	2b00      	cmp	r3, #0
 80081e0:	da0d      	bge.n	80081fe <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	0018      	movs	r0, r3
 80081e6:	f001 fd37 	bl	8009c58 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80081ea:	e008      	b.n	80081fe <HAL_UART_IRQHandler+0x63a>
      return;
 80081ec:	46c0      	nop			; (mov r8, r8)
 80081ee:	e006      	b.n	80081fe <HAL_UART_IRQHandler+0x63a>
    return;
 80081f0:	46c0      	nop			; (mov r8, r8)
 80081f2:	e004      	b.n	80081fe <HAL_UART_IRQHandler+0x63a>
      return;
 80081f4:	46c0      	nop			; (mov r8, r8)
 80081f6:	e002      	b.n	80081fe <HAL_UART_IRQHandler+0x63a>
      return;
 80081f8:	46c0      	nop			; (mov r8, r8)
 80081fa:	e000      	b.n	80081fe <HAL_UART_IRQHandler+0x63a>
    return;
 80081fc:	46c0      	nop			; (mov r8, r8)
  }
}
 80081fe:	46bd      	mov	sp, r7
 8008200:	b02a      	add	sp, #168	; 0xa8
 8008202:	bdb0      	pop	{r4, r5, r7, pc}
 8008204:	fffffeff 	.word	0xfffffeff
 8008208:	fffffedf 	.word	0xfffffedf
 800820c:	effffffe 	.word	0xeffffffe

08008210 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008210:	b580      	push	{r7, lr}
 8008212:	b082      	sub	sp, #8
 8008214:	af00      	add	r7, sp, #0
 8008216:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008218:	46c0      	nop			; (mov r8, r8)
 800821a:	46bd      	mov	sp, r7
 800821c:	b002      	add	sp, #8
 800821e:	bd80      	pop	{r7, pc}

08008220 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008220:	b580      	push	{r7, lr}
 8008222:	b082      	sub	sp, #8
 8008224:	af00      	add	r7, sp, #0
 8008226:	6078      	str	r0, [r7, #4]
 8008228:	000a      	movs	r2, r1
 800822a:	1cbb      	adds	r3, r7, #2
 800822c:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800822e:	46c0      	nop			; (mov r8, r8)
 8008230:	46bd      	mov	sp, r7
 8008232:	b002      	add	sp, #8
 8008234:	bd80      	pop	{r7, pc}

08008236 <HAL_UART_GetState>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(const UART_HandleTypeDef *huart)
{
 8008236:	b580      	push	{r7, lr}
 8008238:	b084      	sub	sp, #16
 800823a:	af00      	add	r7, sp, #0
 800823c:	6078      	str	r0, [r7, #4]
  uint32_t temp1;
  uint32_t temp2;
  temp1 = huart->gState;
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	2288      	movs	r2, #136	; 0x88
 8008242:	589b      	ldr	r3, [r3, r2]
 8008244:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	228c      	movs	r2, #140	; 0x8c
 800824a:	589b      	ldr	r3, [r3, r2]
 800824c:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 800824e:	68fa      	ldr	r2, [r7, #12]
 8008250:	68bb      	ldr	r3, [r7, #8]
 8008252:	4313      	orrs	r3, r2
}
 8008254:	0018      	movs	r0, r3
 8008256:	46bd      	mov	sp, r7
 8008258:	b004      	add	sp, #16
 800825a:	bd80      	pop	{r7, pc}

0800825c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800825c:	b5b0      	push	{r4, r5, r7, lr}
 800825e:	b090      	sub	sp, #64	; 0x40
 8008260:	af00      	add	r7, sp, #0
 8008262:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008264:	231a      	movs	r3, #26
 8008266:	2220      	movs	r2, #32
 8008268:	189b      	adds	r3, r3, r2
 800826a:	19db      	adds	r3, r3, r7
 800826c:	2200      	movs	r2, #0
 800826e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008272:	689a      	ldr	r2, [r3, #8]
 8008274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008276:	691b      	ldr	r3, [r3, #16]
 8008278:	431a      	orrs	r2, r3
 800827a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800827c:	695b      	ldr	r3, [r3, #20]
 800827e:	431a      	orrs	r2, r3
 8008280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008282:	69db      	ldr	r3, [r3, #28]
 8008284:	4313      	orrs	r3, r2
 8008286:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	4ac1      	ldr	r2, [pc, #772]	; (8008594 <UART_SetConfig+0x338>)
 8008290:	4013      	ands	r3, r2
 8008292:	0019      	movs	r1, r3
 8008294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008296:	681a      	ldr	r2, [r3, #0]
 8008298:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800829a:	430b      	orrs	r3, r1
 800829c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800829e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	685b      	ldr	r3, [r3, #4]
 80082a4:	4abc      	ldr	r2, [pc, #752]	; (8008598 <UART_SetConfig+0x33c>)
 80082a6:	4013      	ands	r3, r2
 80082a8:	0018      	movs	r0, r3
 80082aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082ac:	68d9      	ldr	r1, [r3, #12]
 80082ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082b0:	681a      	ldr	r2, [r3, #0]
 80082b2:	0003      	movs	r3, r0
 80082b4:	430b      	orrs	r3, r1
 80082b6:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80082b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082ba:	699b      	ldr	r3, [r3, #24]
 80082bc:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80082be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	4ab6      	ldr	r2, [pc, #728]	; (800859c <UART_SetConfig+0x340>)
 80082c4:	4293      	cmp	r3, r2
 80082c6:	d009      	beq.n	80082dc <UART_SetConfig+0x80>
 80082c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	4ab4      	ldr	r2, [pc, #720]	; (80085a0 <UART_SetConfig+0x344>)
 80082ce:	4293      	cmp	r3, r2
 80082d0:	d004      	beq.n	80082dc <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80082d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082d4:	6a1b      	ldr	r3, [r3, #32]
 80082d6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80082d8:	4313      	orrs	r3, r2
 80082da:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80082dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	689b      	ldr	r3, [r3, #8]
 80082e2:	4ab0      	ldr	r2, [pc, #704]	; (80085a4 <UART_SetConfig+0x348>)
 80082e4:	4013      	ands	r3, r2
 80082e6:	0019      	movs	r1, r3
 80082e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082ea:	681a      	ldr	r2, [r3, #0]
 80082ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80082ee:	430b      	orrs	r3, r1
 80082f0:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80082f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082f8:	220f      	movs	r2, #15
 80082fa:	4393      	bics	r3, r2
 80082fc:	0018      	movs	r0, r3
 80082fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008300:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8008302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008304:	681a      	ldr	r2, [r3, #0]
 8008306:	0003      	movs	r3, r0
 8008308:	430b      	orrs	r3, r1
 800830a:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800830c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	4aa5      	ldr	r2, [pc, #660]	; (80085a8 <UART_SetConfig+0x34c>)
 8008312:	4293      	cmp	r3, r2
 8008314:	d131      	bne.n	800837a <UART_SetConfig+0x11e>
 8008316:	4ba5      	ldr	r3, [pc, #660]	; (80085ac <UART_SetConfig+0x350>)
 8008318:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800831a:	2203      	movs	r2, #3
 800831c:	4013      	ands	r3, r2
 800831e:	2b03      	cmp	r3, #3
 8008320:	d01d      	beq.n	800835e <UART_SetConfig+0x102>
 8008322:	d823      	bhi.n	800836c <UART_SetConfig+0x110>
 8008324:	2b02      	cmp	r3, #2
 8008326:	d00c      	beq.n	8008342 <UART_SetConfig+0xe6>
 8008328:	d820      	bhi.n	800836c <UART_SetConfig+0x110>
 800832a:	2b00      	cmp	r3, #0
 800832c:	d002      	beq.n	8008334 <UART_SetConfig+0xd8>
 800832e:	2b01      	cmp	r3, #1
 8008330:	d00e      	beq.n	8008350 <UART_SetConfig+0xf4>
 8008332:	e01b      	b.n	800836c <UART_SetConfig+0x110>
 8008334:	231b      	movs	r3, #27
 8008336:	2220      	movs	r2, #32
 8008338:	189b      	adds	r3, r3, r2
 800833a:	19db      	adds	r3, r3, r7
 800833c:	2200      	movs	r2, #0
 800833e:	701a      	strb	r2, [r3, #0]
 8008340:	e154      	b.n	80085ec <UART_SetConfig+0x390>
 8008342:	231b      	movs	r3, #27
 8008344:	2220      	movs	r2, #32
 8008346:	189b      	adds	r3, r3, r2
 8008348:	19db      	adds	r3, r3, r7
 800834a:	2202      	movs	r2, #2
 800834c:	701a      	strb	r2, [r3, #0]
 800834e:	e14d      	b.n	80085ec <UART_SetConfig+0x390>
 8008350:	231b      	movs	r3, #27
 8008352:	2220      	movs	r2, #32
 8008354:	189b      	adds	r3, r3, r2
 8008356:	19db      	adds	r3, r3, r7
 8008358:	2204      	movs	r2, #4
 800835a:	701a      	strb	r2, [r3, #0]
 800835c:	e146      	b.n	80085ec <UART_SetConfig+0x390>
 800835e:	231b      	movs	r3, #27
 8008360:	2220      	movs	r2, #32
 8008362:	189b      	adds	r3, r3, r2
 8008364:	19db      	adds	r3, r3, r7
 8008366:	2208      	movs	r2, #8
 8008368:	701a      	strb	r2, [r3, #0]
 800836a:	e13f      	b.n	80085ec <UART_SetConfig+0x390>
 800836c:	231b      	movs	r3, #27
 800836e:	2220      	movs	r2, #32
 8008370:	189b      	adds	r3, r3, r2
 8008372:	19db      	adds	r3, r3, r7
 8008374:	2210      	movs	r2, #16
 8008376:	701a      	strb	r2, [r3, #0]
 8008378:	e138      	b.n	80085ec <UART_SetConfig+0x390>
 800837a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	4a8c      	ldr	r2, [pc, #560]	; (80085b0 <UART_SetConfig+0x354>)
 8008380:	4293      	cmp	r3, r2
 8008382:	d131      	bne.n	80083e8 <UART_SetConfig+0x18c>
 8008384:	4b89      	ldr	r3, [pc, #548]	; (80085ac <UART_SetConfig+0x350>)
 8008386:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008388:	220c      	movs	r2, #12
 800838a:	4013      	ands	r3, r2
 800838c:	2b0c      	cmp	r3, #12
 800838e:	d01d      	beq.n	80083cc <UART_SetConfig+0x170>
 8008390:	d823      	bhi.n	80083da <UART_SetConfig+0x17e>
 8008392:	2b08      	cmp	r3, #8
 8008394:	d00c      	beq.n	80083b0 <UART_SetConfig+0x154>
 8008396:	d820      	bhi.n	80083da <UART_SetConfig+0x17e>
 8008398:	2b00      	cmp	r3, #0
 800839a:	d002      	beq.n	80083a2 <UART_SetConfig+0x146>
 800839c:	2b04      	cmp	r3, #4
 800839e:	d00e      	beq.n	80083be <UART_SetConfig+0x162>
 80083a0:	e01b      	b.n	80083da <UART_SetConfig+0x17e>
 80083a2:	231b      	movs	r3, #27
 80083a4:	2220      	movs	r2, #32
 80083a6:	189b      	adds	r3, r3, r2
 80083a8:	19db      	adds	r3, r3, r7
 80083aa:	2200      	movs	r2, #0
 80083ac:	701a      	strb	r2, [r3, #0]
 80083ae:	e11d      	b.n	80085ec <UART_SetConfig+0x390>
 80083b0:	231b      	movs	r3, #27
 80083b2:	2220      	movs	r2, #32
 80083b4:	189b      	adds	r3, r3, r2
 80083b6:	19db      	adds	r3, r3, r7
 80083b8:	2202      	movs	r2, #2
 80083ba:	701a      	strb	r2, [r3, #0]
 80083bc:	e116      	b.n	80085ec <UART_SetConfig+0x390>
 80083be:	231b      	movs	r3, #27
 80083c0:	2220      	movs	r2, #32
 80083c2:	189b      	adds	r3, r3, r2
 80083c4:	19db      	adds	r3, r3, r7
 80083c6:	2204      	movs	r2, #4
 80083c8:	701a      	strb	r2, [r3, #0]
 80083ca:	e10f      	b.n	80085ec <UART_SetConfig+0x390>
 80083cc:	231b      	movs	r3, #27
 80083ce:	2220      	movs	r2, #32
 80083d0:	189b      	adds	r3, r3, r2
 80083d2:	19db      	adds	r3, r3, r7
 80083d4:	2208      	movs	r2, #8
 80083d6:	701a      	strb	r2, [r3, #0]
 80083d8:	e108      	b.n	80085ec <UART_SetConfig+0x390>
 80083da:	231b      	movs	r3, #27
 80083dc:	2220      	movs	r2, #32
 80083de:	189b      	adds	r3, r3, r2
 80083e0:	19db      	adds	r3, r3, r7
 80083e2:	2210      	movs	r2, #16
 80083e4:	701a      	strb	r2, [r3, #0]
 80083e6:	e101      	b.n	80085ec <UART_SetConfig+0x390>
 80083e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	4a71      	ldr	r2, [pc, #452]	; (80085b4 <UART_SetConfig+0x358>)
 80083ee:	4293      	cmp	r3, r2
 80083f0:	d131      	bne.n	8008456 <UART_SetConfig+0x1fa>
 80083f2:	4b6e      	ldr	r3, [pc, #440]	; (80085ac <UART_SetConfig+0x350>)
 80083f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80083f6:	2230      	movs	r2, #48	; 0x30
 80083f8:	4013      	ands	r3, r2
 80083fa:	2b30      	cmp	r3, #48	; 0x30
 80083fc:	d01d      	beq.n	800843a <UART_SetConfig+0x1de>
 80083fe:	d823      	bhi.n	8008448 <UART_SetConfig+0x1ec>
 8008400:	2b20      	cmp	r3, #32
 8008402:	d00c      	beq.n	800841e <UART_SetConfig+0x1c2>
 8008404:	d820      	bhi.n	8008448 <UART_SetConfig+0x1ec>
 8008406:	2b00      	cmp	r3, #0
 8008408:	d002      	beq.n	8008410 <UART_SetConfig+0x1b4>
 800840a:	2b10      	cmp	r3, #16
 800840c:	d00e      	beq.n	800842c <UART_SetConfig+0x1d0>
 800840e:	e01b      	b.n	8008448 <UART_SetConfig+0x1ec>
 8008410:	231b      	movs	r3, #27
 8008412:	2220      	movs	r2, #32
 8008414:	189b      	adds	r3, r3, r2
 8008416:	19db      	adds	r3, r3, r7
 8008418:	2200      	movs	r2, #0
 800841a:	701a      	strb	r2, [r3, #0]
 800841c:	e0e6      	b.n	80085ec <UART_SetConfig+0x390>
 800841e:	231b      	movs	r3, #27
 8008420:	2220      	movs	r2, #32
 8008422:	189b      	adds	r3, r3, r2
 8008424:	19db      	adds	r3, r3, r7
 8008426:	2202      	movs	r2, #2
 8008428:	701a      	strb	r2, [r3, #0]
 800842a:	e0df      	b.n	80085ec <UART_SetConfig+0x390>
 800842c:	231b      	movs	r3, #27
 800842e:	2220      	movs	r2, #32
 8008430:	189b      	adds	r3, r3, r2
 8008432:	19db      	adds	r3, r3, r7
 8008434:	2204      	movs	r2, #4
 8008436:	701a      	strb	r2, [r3, #0]
 8008438:	e0d8      	b.n	80085ec <UART_SetConfig+0x390>
 800843a:	231b      	movs	r3, #27
 800843c:	2220      	movs	r2, #32
 800843e:	189b      	adds	r3, r3, r2
 8008440:	19db      	adds	r3, r3, r7
 8008442:	2208      	movs	r2, #8
 8008444:	701a      	strb	r2, [r3, #0]
 8008446:	e0d1      	b.n	80085ec <UART_SetConfig+0x390>
 8008448:	231b      	movs	r3, #27
 800844a:	2220      	movs	r2, #32
 800844c:	189b      	adds	r3, r3, r2
 800844e:	19db      	adds	r3, r3, r7
 8008450:	2210      	movs	r2, #16
 8008452:	701a      	strb	r2, [r3, #0]
 8008454:	e0ca      	b.n	80085ec <UART_SetConfig+0x390>
 8008456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	4a57      	ldr	r2, [pc, #348]	; (80085b8 <UART_SetConfig+0x35c>)
 800845c:	4293      	cmp	r3, r2
 800845e:	d106      	bne.n	800846e <UART_SetConfig+0x212>
 8008460:	231b      	movs	r3, #27
 8008462:	2220      	movs	r2, #32
 8008464:	189b      	adds	r3, r3, r2
 8008466:	19db      	adds	r3, r3, r7
 8008468:	2200      	movs	r2, #0
 800846a:	701a      	strb	r2, [r3, #0]
 800846c:	e0be      	b.n	80085ec <UART_SetConfig+0x390>
 800846e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	4a52      	ldr	r2, [pc, #328]	; (80085bc <UART_SetConfig+0x360>)
 8008474:	4293      	cmp	r3, r2
 8008476:	d106      	bne.n	8008486 <UART_SetConfig+0x22a>
 8008478:	231b      	movs	r3, #27
 800847a:	2220      	movs	r2, #32
 800847c:	189b      	adds	r3, r3, r2
 800847e:	19db      	adds	r3, r3, r7
 8008480:	2200      	movs	r2, #0
 8008482:	701a      	strb	r2, [r3, #0]
 8008484:	e0b2      	b.n	80085ec <UART_SetConfig+0x390>
 8008486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	4a4d      	ldr	r2, [pc, #308]	; (80085c0 <UART_SetConfig+0x364>)
 800848c:	4293      	cmp	r3, r2
 800848e:	d106      	bne.n	800849e <UART_SetConfig+0x242>
 8008490:	231b      	movs	r3, #27
 8008492:	2220      	movs	r2, #32
 8008494:	189b      	adds	r3, r3, r2
 8008496:	19db      	adds	r3, r3, r7
 8008498:	2200      	movs	r2, #0
 800849a:	701a      	strb	r2, [r3, #0]
 800849c:	e0a6      	b.n	80085ec <UART_SetConfig+0x390>
 800849e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	4a3e      	ldr	r2, [pc, #248]	; (800859c <UART_SetConfig+0x340>)
 80084a4:	4293      	cmp	r3, r2
 80084a6:	d13e      	bne.n	8008526 <UART_SetConfig+0x2ca>
 80084a8:	4b40      	ldr	r3, [pc, #256]	; (80085ac <UART_SetConfig+0x350>)
 80084aa:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80084ac:	23c0      	movs	r3, #192	; 0xc0
 80084ae:	011b      	lsls	r3, r3, #4
 80084b0:	4013      	ands	r3, r2
 80084b2:	22c0      	movs	r2, #192	; 0xc0
 80084b4:	0112      	lsls	r2, r2, #4
 80084b6:	4293      	cmp	r3, r2
 80084b8:	d027      	beq.n	800850a <UART_SetConfig+0x2ae>
 80084ba:	22c0      	movs	r2, #192	; 0xc0
 80084bc:	0112      	lsls	r2, r2, #4
 80084be:	4293      	cmp	r3, r2
 80084c0:	d82a      	bhi.n	8008518 <UART_SetConfig+0x2bc>
 80084c2:	2280      	movs	r2, #128	; 0x80
 80084c4:	0112      	lsls	r2, r2, #4
 80084c6:	4293      	cmp	r3, r2
 80084c8:	d011      	beq.n	80084ee <UART_SetConfig+0x292>
 80084ca:	2280      	movs	r2, #128	; 0x80
 80084cc:	0112      	lsls	r2, r2, #4
 80084ce:	4293      	cmp	r3, r2
 80084d0:	d822      	bhi.n	8008518 <UART_SetConfig+0x2bc>
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d004      	beq.n	80084e0 <UART_SetConfig+0x284>
 80084d6:	2280      	movs	r2, #128	; 0x80
 80084d8:	00d2      	lsls	r2, r2, #3
 80084da:	4293      	cmp	r3, r2
 80084dc:	d00e      	beq.n	80084fc <UART_SetConfig+0x2a0>
 80084de:	e01b      	b.n	8008518 <UART_SetConfig+0x2bc>
 80084e0:	231b      	movs	r3, #27
 80084e2:	2220      	movs	r2, #32
 80084e4:	189b      	adds	r3, r3, r2
 80084e6:	19db      	adds	r3, r3, r7
 80084e8:	2200      	movs	r2, #0
 80084ea:	701a      	strb	r2, [r3, #0]
 80084ec:	e07e      	b.n	80085ec <UART_SetConfig+0x390>
 80084ee:	231b      	movs	r3, #27
 80084f0:	2220      	movs	r2, #32
 80084f2:	189b      	adds	r3, r3, r2
 80084f4:	19db      	adds	r3, r3, r7
 80084f6:	2202      	movs	r2, #2
 80084f8:	701a      	strb	r2, [r3, #0]
 80084fa:	e077      	b.n	80085ec <UART_SetConfig+0x390>
 80084fc:	231b      	movs	r3, #27
 80084fe:	2220      	movs	r2, #32
 8008500:	189b      	adds	r3, r3, r2
 8008502:	19db      	adds	r3, r3, r7
 8008504:	2204      	movs	r2, #4
 8008506:	701a      	strb	r2, [r3, #0]
 8008508:	e070      	b.n	80085ec <UART_SetConfig+0x390>
 800850a:	231b      	movs	r3, #27
 800850c:	2220      	movs	r2, #32
 800850e:	189b      	adds	r3, r3, r2
 8008510:	19db      	adds	r3, r3, r7
 8008512:	2208      	movs	r2, #8
 8008514:	701a      	strb	r2, [r3, #0]
 8008516:	e069      	b.n	80085ec <UART_SetConfig+0x390>
 8008518:	231b      	movs	r3, #27
 800851a:	2220      	movs	r2, #32
 800851c:	189b      	adds	r3, r3, r2
 800851e:	19db      	adds	r3, r3, r7
 8008520:	2210      	movs	r2, #16
 8008522:	701a      	strb	r2, [r3, #0]
 8008524:	e062      	b.n	80085ec <UART_SetConfig+0x390>
 8008526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	4a1d      	ldr	r2, [pc, #116]	; (80085a0 <UART_SetConfig+0x344>)
 800852c:	4293      	cmp	r3, r2
 800852e:	d157      	bne.n	80085e0 <UART_SetConfig+0x384>
 8008530:	4b1e      	ldr	r3, [pc, #120]	; (80085ac <UART_SetConfig+0x350>)
 8008532:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008534:	23c0      	movs	r3, #192	; 0xc0
 8008536:	009b      	lsls	r3, r3, #2
 8008538:	4013      	ands	r3, r2
 800853a:	22c0      	movs	r2, #192	; 0xc0
 800853c:	0092      	lsls	r2, r2, #2
 800853e:	4293      	cmp	r3, r2
 8008540:	d040      	beq.n	80085c4 <UART_SetConfig+0x368>
 8008542:	22c0      	movs	r2, #192	; 0xc0
 8008544:	0092      	lsls	r2, r2, #2
 8008546:	4293      	cmp	r3, r2
 8008548:	d843      	bhi.n	80085d2 <UART_SetConfig+0x376>
 800854a:	2280      	movs	r2, #128	; 0x80
 800854c:	0092      	lsls	r2, r2, #2
 800854e:	4293      	cmp	r3, r2
 8008550:	d011      	beq.n	8008576 <UART_SetConfig+0x31a>
 8008552:	2280      	movs	r2, #128	; 0x80
 8008554:	0092      	lsls	r2, r2, #2
 8008556:	4293      	cmp	r3, r2
 8008558:	d83b      	bhi.n	80085d2 <UART_SetConfig+0x376>
 800855a:	2b00      	cmp	r3, #0
 800855c:	d004      	beq.n	8008568 <UART_SetConfig+0x30c>
 800855e:	2280      	movs	r2, #128	; 0x80
 8008560:	0052      	lsls	r2, r2, #1
 8008562:	4293      	cmp	r3, r2
 8008564:	d00e      	beq.n	8008584 <UART_SetConfig+0x328>
 8008566:	e034      	b.n	80085d2 <UART_SetConfig+0x376>
 8008568:	231b      	movs	r3, #27
 800856a:	2220      	movs	r2, #32
 800856c:	189b      	adds	r3, r3, r2
 800856e:	19db      	adds	r3, r3, r7
 8008570:	2200      	movs	r2, #0
 8008572:	701a      	strb	r2, [r3, #0]
 8008574:	e03a      	b.n	80085ec <UART_SetConfig+0x390>
 8008576:	231b      	movs	r3, #27
 8008578:	2220      	movs	r2, #32
 800857a:	189b      	adds	r3, r3, r2
 800857c:	19db      	adds	r3, r3, r7
 800857e:	2202      	movs	r2, #2
 8008580:	701a      	strb	r2, [r3, #0]
 8008582:	e033      	b.n	80085ec <UART_SetConfig+0x390>
 8008584:	231b      	movs	r3, #27
 8008586:	2220      	movs	r2, #32
 8008588:	189b      	adds	r3, r3, r2
 800858a:	19db      	adds	r3, r3, r7
 800858c:	2204      	movs	r2, #4
 800858e:	701a      	strb	r2, [r3, #0]
 8008590:	e02c      	b.n	80085ec <UART_SetConfig+0x390>
 8008592:	46c0      	nop			; (mov r8, r8)
 8008594:	cfff69f3 	.word	0xcfff69f3
 8008598:	ffffcfff 	.word	0xffffcfff
 800859c:	40008000 	.word	0x40008000
 80085a0:	40008400 	.word	0x40008400
 80085a4:	11fff4ff 	.word	0x11fff4ff
 80085a8:	40013800 	.word	0x40013800
 80085ac:	40021000 	.word	0x40021000
 80085b0:	40004400 	.word	0x40004400
 80085b4:	40004800 	.word	0x40004800
 80085b8:	40004c00 	.word	0x40004c00
 80085bc:	40005000 	.word	0x40005000
 80085c0:	40013c00 	.word	0x40013c00
 80085c4:	231b      	movs	r3, #27
 80085c6:	2220      	movs	r2, #32
 80085c8:	189b      	adds	r3, r3, r2
 80085ca:	19db      	adds	r3, r3, r7
 80085cc:	2208      	movs	r2, #8
 80085ce:	701a      	strb	r2, [r3, #0]
 80085d0:	e00c      	b.n	80085ec <UART_SetConfig+0x390>
 80085d2:	231b      	movs	r3, #27
 80085d4:	2220      	movs	r2, #32
 80085d6:	189b      	adds	r3, r3, r2
 80085d8:	19db      	adds	r3, r3, r7
 80085da:	2210      	movs	r2, #16
 80085dc:	701a      	strb	r2, [r3, #0]
 80085de:	e005      	b.n	80085ec <UART_SetConfig+0x390>
 80085e0:	231b      	movs	r3, #27
 80085e2:	2220      	movs	r2, #32
 80085e4:	189b      	adds	r3, r3, r2
 80085e6:	19db      	adds	r3, r3, r7
 80085e8:	2210      	movs	r2, #16
 80085ea:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80085ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	4ac1      	ldr	r2, [pc, #772]	; (80088f8 <UART_SetConfig+0x69c>)
 80085f2:	4293      	cmp	r3, r2
 80085f4:	d005      	beq.n	8008602 <UART_SetConfig+0x3a6>
 80085f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	4ac0      	ldr	r2, [pc, #768]	; (80088fc <UART_SetConfig+0x6a0>)
 80085fc:	4293      	cmp	r3, r2
 80085fe:	d000      	beq.n	8008602 <UART_SetConfig+0x3a6>
 8008600:	e093      	b.n	800872a <UART_SetConfig+0x4ce>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008602:	231b      	movs	r3, #27
 8008604:	2220      	movs	r2, #32
 8008606:	189b      	adds	r3, r3, r2
 8008608:	19db      	adds	r3, r3, r7
 800860a:	781b      	ldrb	r3, [r3, #0]
 800860c:	2b08      	cmp	r3, #8
 800860e:	d015      	beq.n	800863c <UART_SetConfig+0x3e0>
 8008610:	dc18      	bgt.n	8008644 <UART_SetConfig+0x3e8>
 8008612:	2b04      	cmp	r3, #4
 8008614:	d00d      	beq.n	8008632 <UART_SetConfig+0x3d6>
 8008616:	dc15      	bgt.n	8008644 <UART_SetConfig+0x3e8>
 8008618:	2b00      	cmp	r3, #0
 800861a:	d002      	beq.n	8008622 <UART_SetConfig+0x3c6>
 800861c:	2b02      	cmp	r3, #2
 800861e:	d005      	beq.n	800862c <UART_SetConfig+0x3d0>
 8008620:	e010      	b.n	8008644 <UART_SetConfig+0x3e8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008622:	f7fe fc39 	bl	8006e98 <HAL_RCC_GetPCLK1Freq>
 8008626:	0003      	movs	r3, r0
 8008628:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800862a:	e014      	b.n	8008656 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800862c:	4bb4      	ldr	r3, [pc, #720]	; (8008900 <UART_SetConfig+0x6a4>)
 800862e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008630:	e011      	b.n	8008656 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008632:	f7fe fba5 	bl	8006d80 <HAL_RCC_GetSysClockFreq>
 8008636:	0003      	movs	r3, r0
 8008638:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800863a:	e00c      	b.n	8008656 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800863c:	2380      	movs	r3, #128	; 0x80
 800863e:	021b      	lsls	r3, r3, #8
 8008640:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008642:	e008      	b.n	8008656 <UART_SetConfig+0x3fa>
      default:
        pclk = 0U;
 8008644:	2300      	movs	r3, #0
 8008646:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8008648:	231a      	movs	r3, #26
 800864a:	2220      	movs	r2, #32
 800864c:	189b      	adds	r3, r3, r2
 800864e:	19db      	adds	r3, r3, r7
 8008650:	2201      	movs	r2, #1
 8008652:	701a      	strb	r2, [r3, #0]
        break;
 8008654:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008656:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008658:	2b00      	cmp	r3, #0
 800865a:	d100      	bne.n	800865e <UART_SetConfig+0x402>
 800865c:	e135      	b.n	80088ca <UART_SetConfig+0x66e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800865e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008660:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008662:	4ba8      	ldr	r3, [pc, #672]	; (8008904 <UART_SetConfig+0x6a8>)
 8008664:	0052      	lsls	r2, r2, #1
 8008666:	5ad3      	ldrh	r3, [r2, r3]
 8008668:	0019      	movs	r1, r3
 800866a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800866c:	f7f7 fd72 	bl	8000154 <__udivsi3>
 8008670:	0003      	movs	r3, r0
 8008672:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008676:	685a      	ldr	r2, [r3, #4]
 8008678:	0013      	movs	r3, r2
 800867a:	005b      	lsls	r3, r3, #1
 800867c:	189b      	adds	r3, r3, r2
 800867e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008680:	429a      	cmp	r2, r3
 8008682:	d305      	bcc.n	8008690 <UART_SetConfig+0x434>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008686:	685b      	ldr	r3, [r3, #4]
 8008688:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800868a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800868c:	429a      	cmp	r2, r3
 800868e:	d906      	bls.n	800869e <UART_SetConfig+0x442>
      {
        ret = HAL_ERROR;
 8008690:	231a      	movs	r3, #26
 8008692:	2220      	movs	r2, #32
 8008694:	189b      	adds	r3, r3, r2
 8008696:	19db      	adds	r3, r3, r7
 8008698:	2201      	movs	r2, #1
 800869a:	701a      	strb	r2, [r3, #0]
 800869c:	e044      	b.n	8008728 <UART_SetConfig+0x4cc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800869e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086a0:	61bb      	str	r3, [r7, #24]
 80086a2:	2300      	movs	r3, #0
 80086a4:	61fb      	str	r3, [r7, #28]
 80086a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80086aa:	4b96      	ldr	r3, [pc, #600]	; (8008904 <UART_SetConfig+0x6a8>)
 80086ac:	0052      	lsls	r2, r2, #1
 80086ae:	5ad3      	ldrh	r3, [r2, r3]
 80086b0:	613b      	str	r3, [r7, #16]
 80086b2:	2300      	movs	r3, #0
 80086b4:	617b      	str	r3, [r7, #20]
 80086b6:	693a      	ldr	r2, [r7, #16]
 80086b8:	697b      	ldr	r3, [r7, #20]
 80086ba:	69b8      	ldr	r0, [r7, #24]
 80086bc:	69f9      	ldr	r1, [r7, #28]
 80086be:	f7f7 ff37 	bl	8000530 <__aeabi_uldivmod>
 80086c2:	0002      	movs	r2, r0
 80086c4:	000b      	movs	r3, r1
 80086c6:	0e11      	lsrs	r1, r2, #24
 80086c8:	021d      	lsls	r5, r3, #8
 80086ca:	430d      	orrs	r5, r1
 80086cc:	0214      	lsls	r4, r2, #8
 80086ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086d0:	685b      	ldr	r3, [r3, #4]
 80086d2:	085b      	lsrs	r3, r3, #1
 80086d4:	60bb      	str	r3, [r7, #8]
 80086d6:	2300      	movs	r3, #0
 80086d8:	60fb      	str	r3, [r7, #12]
 80086da:	68b8      	ldr	r0, [r7, #8]
 80086dc:	68f9      	ldr	r1, [r7, #12]
 80086de:	1900      	adds	r0, r0, r4
 80086e0:	4169      	adcs	r1, r5
 80086e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086e4:	685b      	ldr	r3, [r3, #4]
 80086e6:	603b      	str	r3, [r7, #0]
 80086e8:	2300      	movs	r3, #0
 80086ea:	607b      	str	r3, [r7, #4]
 80086ec:	683a      	ldr	r2, [r7, #0]
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	f7f7 ff1e 	bl	8000530 <__aeabi_uldivmod>
 80086f4:	0002      	movs	r2, r0
 80086f6:	000b      	movs	r3, r1
 80086f8:	0013      	movs	r3, r2
 80086fa:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80086fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80086fe:	23c0      	movs	r3, #192	; 0xc0
 8008700:	009b      	lsls	r3, r3, #2
 8008702:	429a      	cmp	r2, r3
 8008704:	d309      	bcc.n	800871a <UART_SetConfig+0x4be>
 8008706:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008708:	2380      	movs	r3, #128	; 0x80
 800870a:	035b      	lsls	r3, r3, #13
 800870c:	429a      	cmp	r2, r3
 800870e:	d204      	bcs.n	800871a <UART_SetConfig+0x4be>
        {
          huart->Instance->BRR = usartdiv;
 8008710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008716:	60da      	str	r2, [r3, #12]
 8008718:	e006      	b.n	8008728 <UART_SetConfig+0x4cc>
        }
        else
        {
          ret = HAL_ERROR;
 800871a:	231a      	movs	r3, #26
 800871c:	2220      	movs	r2, #32
 800871e:	189b      	adds	r3, r3, r2
 8008720:	19db      	adds	r3, r3, r7
 8008722:	2201      	movs	r2, #1
 8008724:	701a      	strb	r2, [r3, #0]
    if (pclk != 0U)
 8008726:	e0d0      	b.n	80088ca <UART_SetConfig+0x66e>
 8008728:	e0cf      	b.n	80088ca <UART_SetConfig+0x66e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800872a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800872c:	69da      	ldr	r2, [r3, #28]
 800872e:	2380      	movs	r3, #128	; 0x80
 8008730:	021b      	lsls	r3, r3, #8
 8008732:	429a      	cmp	r2, r3
 8008734:	d000      	beq.n	8008738 <UART_SetConfig+0x4dc>
 8008736:	e070      	b.n	800881a <UART_SetConfig+0x5be>
  {
    switch (clocksource)
 8008738:	231b      	movs	r3, #27
 800873a:	2220      	movs	r2, #32
 800873c:	189b      	adds	r3, r3, r2
 800873e:	19db      	adds	r3, r3, r7
 8008740:	781b      	ldrb	r3, [r3, #0]
 8008742:	2b08      	cmp	r3, #8
 8008744:	d015      	beq.n	8008772 <UART_SetConfig+0x516>
 8008746:	dc18      	bgt.n	800877a <UART_SetConfig+0x51e>
 8008748:	2b04      	cmp	r3, #4
 800874a:	d00d      	beq.n	8008768 <UART_SetConfig+0x50c>
 800874c:	dc15      	bgt.n	800877a <UART_SetConfig+0x51e>
 800874e:	2b00      	cmp	r3, #0
 8008750:	d002      	beq.n	8008758 <UART_SetConfig+0x4fc>
 8008752:	2b02      	cmp	r3, #2
 8008754:	d005      	beq.n	8008762 <UART_SetConfig+0x506>
 8008756:	e010      	b.n	800877a <UART_SetConfig+0x51e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008758:	f7fe fb9e 	bl	8006e98 <HAL_RCC_GetPCLK1Freq>
 800875c:	0003      	movs	r3, r0
 800875e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008760:	e014      	b.n	800878c <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008762:	4b67      	ldr	r3, [pc, #412]	; (8008900 <UART_SetConfig+0x6a4>)
 8008764:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008766:	e011      	b.n	800878c <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008768:	f7fe fb0a 	bl	8006d80 <HAL_RCC_GetSysClockFreq>
 800876c:	0003      	movs	r3, r0
 800876e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008770:	e00c      	b.n	800878c <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008772:	2380      	movs	r3, #128	; 0x80
 8008774:	021b      	lsls	r3, r3, #8
 8008776:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008778:	e008      	b.n	800878c <UART_SetConfig+0x530>
      default:
        pclk = 0U;
 800877a:	2300      	movs	r3, #0
 800877c:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 800877e:	231a      	movs	r3, #26
 8008780:	2220      	movs	r2, #32
 8008782:	189b      	adds	r3, r3, r2
 8008784:	19db      	adds	r3, r3, r7
 8008786:	2201      	movs	r2, #1
 8008788:	701a      	strb	r2, [r3, #0]
        break;
 800878a:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800878c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800878e:	2b00      	cmp	r3, #0
 8008790:	d100      	bne.n	8008794 <UART_SetConfig+0x538>
 8008792:	e09a      	b.n	80088ca <UART_SetConfig+0x66e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008796:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008798:	4b5a      	ldr	r3, [pc, #360]	; (8008904 <UART_SetConfig+0x6a8>)
 800879a:	0052      	lsls	r2, r2, #1
 800879c:	5ad3      	ldrh	r3, [r2, r3]
 800879e:	0019      	movs	r1, r3
 80087a0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80087a2:	f7f7 fcd7 	bl	8000154 <__udivsi3>
 80087a6:	0003      	movs	r3, r0
 80087a8:	005a      	lsls	r2, r3, #1
 80087aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087ac:	685b      	ldr	r3, [r3, #4]
 80087ae:	085b      	lsrs	r3, r3, #1
 80087b0:	18d2      	adds	r2, r2, r3
 80087b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087b4:	685b      	ldr	r3, [r3, #4]
 80087b6:	0019      	movs	r1, r3
 80087b8:	0010      	movs	r0, r2
 80087ba:	f7f7 fccb 	bl	8000154 <__udivsi3>
 80087be:	0003      	movs	r3, r0
 80087c0:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80087c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087c4:	2b0f      	cmp	r3, #15
 80087c6:	d921      	bls.n	800880c <UART_SetConfig+0x5b0>
 80087c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80087ca:	2380      	movs	r3, #128	; 0x80
 80087cc:	025b      	lsls	r3, r3, #9
 80087ce:	429a      	cmp	r2, r3
 80087d0:	d21c      	bcs.n	800880c <UART_SetConfig+0x5b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80087d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087d4:	b29a      	uxth	r2, r3
 80087d6:	200e      	movs	r0, #14
 80087d8:	2420      	movs	r4, #32
 80087da:	1903      	adds	r3, r0, r4
 80087dc:	19db      	adds	r3, r3, r7
 80087de:	210f      	movs	r1, #15
 80087e0:	438a      	bics	r2, r1
 80087e2:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80087e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087e6:	085b      	lsrs	r3, r3, #1
 80087e8:	b29b      	uxth	r3, r3
 80087ea:	2207      	movs	r2, #7
 80087ec:	4013      	ands	r3, r2
 80087ee:	b299      	uxth	r1, r3
 80087f0:	1903      	adds	r3, r0, r4
 80087f2:	19db      	adds	r3, r3, r7
 80087f4:	1902      	adds	r2, r0, r4
 80087f6:	19d2      	adds	r2, r2, r7
 80087f8:	8812      	ldrh	r2, [r2, #0]
 80087fa:	430a      	orrs	r2, r1
 80087fc:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80087fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	1902      	adds	r2, r0, r4
 8008804:	19d2      	adds	r2, r2, r7
 8008806:	8812      	ldrh	r2, [r2, #0]
 8008808:	60da      	str	r2, [r3, #12]
 800880a:	e05e      	b.n	80088ca <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 800880c:	231a      	movs	r3, #26
 800880e:	2220      	movs	r2, #32
 8008810:	189b      	adds	r3, r3, r2
 8008812:	19db      	adds	r3, r3, r7
 8008814:	2201      	movs	r2, #1
 8008816:	701a      	strb	r2, [r3, #0]
 8008818:	e057      	b.n	80088ca <UART_SetConfig+0x66e>
      }
    }
  }
  else
  {
    switch (clocksource)
 800881a:	231b      	movs	r3, #27
 800881c:	2220      	movs	r2, #32
 800881e:	189b      	adds	r3, r3, r2
 8008820:	19db      	adds	r3, r3, r7
 8008822:	781b      	ldrb	r3, [r3, #0]
 8008824:	2b08      	cmp	r3, #8
 8008826:	d015      	beq.n	8008854 <UART_SetConfig+0x5f8>
 8008828:	dc18      	bgt.n	800885c <UART_SetConfig+0x600>
 800882a:	2b04      	cmp	r3, #4
 800882c:	d00d      	beq.n	800884a <UART_SetConfig+0x5ee>
 800882e:	dc15      	bgt.n	800885c <UART_SetConfig+0x600>
 8008830:	2b00      	cmp	r3, #0
 8008832:	d002      	beq.n	800883a <UART_SetConfig+0x5de>
 8008834:	2b02      	cmp	r3, #2
 8008836:	d005      	beq.n	8008844 <UART_SetConfig+0x5e8>
 8008838:	e010      	b.n	800885c <UART_SetConfig+0x600>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800883a:	f7fe fb2d 	bl	8006e98 <HAL_RCC_GetPCLK1Freq>
 800883e:	0003      	movs	r3, r0
 8008840:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008842:	e014      	b.n	800886e <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008844:	4b2e      	ldr	r3, [pc, #184]	; (8008900 <UART_SetConfig+0x6a4>)
 8008846:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008848:	e011      	b.n	800886e <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800884a:	f7fe fa99 	bl	8006d80 <HAL_RCC_GetSysClockFreq>
 800884e:	0003      	movs	r3, r0
 8008850:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008852:	e00c      	b.n	800886e <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008854:	2380      	movs	r3, #128	; 0x80
 8008856:	021b      	lsls	r3, r3, #8
 8008858:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800885a:	e008      	b.n	800886e <UART_SetConfig+0x612>
      default:
        pclk = 0U;
 800885c:	2300      	movs	r3, #0
 800885e:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8008860:	231a      	movs	r3, #26
 8008862:	2220      	movs	r2, #32
 8008864:	189b      	adds	r3, r3, r2
 8008866:	19db      	adds	r3, r3, r7
 8008868:	2201      	movs	r2, #1
 800886a:	701a      	strb	r2, [r3, #0]
        break;
 800886c:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800886e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008870:	2b00      	cmp	r3, #0
 8008872:	d02a      	beq.n	80088ca <UART_SetConfig+0x66e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008876:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008878:	4b22      	ldr	r3, [pc, #136]	; (8008904 <UART_SetConfig+0x6a8>)
 800887a:	0052      	lsls	r2, r2, #1
 800887c:	5ad3      	ldrh	r3, [r2, r3]
 800887e:	0019      	movs	r1, r3
 8008880:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8008882:	f7f7 fc67 	bl	8000154 <__udivsi3>
 8008886:	0003      	movs	r3, r0
 8008888:	001a      	movs	r2, r3
 800888a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800888c:	685b      	ldr	r3, [r3, #4]
 800888e:	085b      	lsrs	r3, r3, #1
 8008890:	18d2      	adds	r2, r2, r3
 8008892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008894:	685b      	ldr	r3, [r3, #4]
 8008896:	0019      	movs	r1, r3
 8008898:	0010      	movs	r0, r2
 800889a:	f7f7 fc5b 	bl	8000154 <__udivsi3>
 800889e:	0003      	movs	r3, r0
 80088a0:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80088a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088a4:	2b0f      	cmp	r3, #15
 80088a6:	d90a      	bls.n	80088be <UART_SetConfig+0x662>
 80088a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80088aa:	2380      	movs	r3, #128	; 0x80
 80088ac:	025b      	lsls	r3, r3, #9
 80088ae:	429a      	cmp	r2, r3
 80088b0:	d205      	bcs.n	80088be <UART_SetConfig+0x662>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80088b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088b4:	b29a      	uxth	r2, r3
 80088b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	60da      	str	r2, [r3, #12]
 80088bc:	e005      	b.n	80088ca <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 80088be:	231a      	movs	r3, #26
 80088c0:	2220      	movs	r2, #32
 80088c2:	189b      	adds	r3, r3, r2
 80088c4:	19db      	adds	r3, r3, r7
 80088c6:	2201      	movs	r2, #1
 80088c8:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80088ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088cc:	226a      	movs	r2, #106	; 0x6a
 80088ce:	2101      	movs	r1, #1
 80088d0:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 80088d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088d4:	2268      	movs	r2, #104	; 0x68
 80088d6:	2101      	movs	r1, #1
 80088d8:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80088da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088dc:	2200      	movs	r2, #0
 80088de:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80088e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088e2:	2200      	movs	r2, #0
 80088e4:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80088e6:	231a      	movs	r3, #26
 80088e8:	2220      	movs	r2, #32
 80088ea:	189b      	adds	r3, r3, r2
 80088ec:	19db      	adds	r3, r3, r7
 80088ee:	781b      	ldrb	r3, [r3, #0]
}
 80088f0:	0018      	movs	r0, r3
 80088f2:	46bd      	mov	sp, r7
 80088f4:	b010      	add	sp, #64	; 0x40
 80088f6:	bdb0      	pop	{r4, r5, r7, pc}
 80088f8:	40008000 	.word	0x40008000
 80088fc:	40008400 	.word	0x40008400
 8008900:	00f42400 	.word	0x00f42400
 8008904:	0800f58c 	.word	0x0800f58c

08008908 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008908:	b580      	push	{r7, lr}
 800890a:	b082      	sub	sp, #8
 800890c:	af00      	add	r7, sp, #0
 800890e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008914:	2201      	movs	r2, #1
 8008916:	4013      	ands	r3, r2
 8008918:	d00b      	beq.n	8008932 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	685b      	ldr	r3, [r3, #4]
 8008920:	4a4a      	ldr	r2, [pc, #296]	; (8008a4c <UART_AdvFeatureConfig+0x144>)
 8008922:	4013      	ands	r3, r2
 8008924:	0019      	movs	r1, r3
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	430a      	orrs	r2, r1
 8008930:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008936:	2202      	movs	r2, #2
 8008938:	4013      	ands	r3, r2
 800893a:	d00b      	beq.n	8008954 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	685b      	ldr	r3, [r3, #4]
 8008942:	4a43      	ldr	r2, [pc, #268]	; (8008a50 <UART_AdvFeatureConfig+0x148>)
 8008944:	4013      	ands	r3, r2
 8008946:	0019      	movs	r1, r3
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	430a      	orrs	r2, r1
 8008952:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008958:	2204      	movs	r2, #4
 800895a:	4013      	ands	r3, r2
 800895c:	d00b      	beq.n	8008976 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	685b      	ldr	r3, [r3, #4]
 8008964:	4a3b      	ldr	r2, [pc, #236]	; (8008a54 <UART_AdvFeatureConfig+0x14c>)
 8008966:	4013      	ands	r3, r2
 8008968:	0019      	movs	r1, r3
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	430a      	orrs	r2, r1
 8008974:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800897a:	2208      	movs	r2, #8
 800897c:	4013      	ands	r3, r2
 800897e:	d00b      	beq.n	8008998 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	685b      	ldr	r3, [r3, #4]
 8008986:	4a34      	ldr	r2, [pc, #208]	; (8008a58 <UART_AdvFeatureConfig+0x150>)
 8008988:	4013      	ands	r3, r2
 800898a:	0019      	movs	r1, r3
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	430a      	orrs	r2, r1
 8008996:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800899c:	2210      	movs	r2, #16
 800899e:	4013      	ands	r3, r2
 80089a0:	d00b      	beq.n	80089ba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	689b      	ldr	r3, [r3, #8]
 80089a8:	4a2c      	ldr	r2, [pc, #176]	; (8008a5c <UART_AdvFeatureConfig+0x154>)
 80089aa:	4013      	ands	r3, r2
 80089ac:	0019      	movs	r1, r3
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	430a      	orrs	r2, r1
 80089b8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089be:	2220      	movs	r2, #32
 80089c0:	4013      	ands	r3, r2
 80089c2:	d00b      	beq.n	80089dc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	689b      	ldr	r3, [r3, #8]
 80089ca:	4a25      	ldr	r2, [pc, #148]	; (8008a60 <UART_AdvFeatureConfig+0x158>)
 80089cc:	4013      	ands	r3, r2
 80089ce:	0019      	movs	r1, r3
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	430a      	orrs	r2, r1
 80089da:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089e0:	2240      	movs	r2, #64	; 0x40
 80089e2:	4013      	ands	r3, r2
 80089e4:	d01d      	beq.n	8008a22 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	685b      	ldr	r3, [r3, #4]
 80089ec:	4a1d      	ldr	r2, [pc, #116]	; (8008a64 <UART_AdvFeatureConfig+0x15c>)
 80089ee:	4013      	ands	r3, r2
 80089f0:	0019      	movs	r1, r3
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	430a      	orrs	r2, r1
 80089fc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008a02:	2380      	movs	r3, #128	; 0x80
 8008a04:	035b      	lsls	r3, r3, #13
 8008a06:	429a      	cmp	r2, r3
 8008a08:	d10b      	bne.n	8008a22 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	685b      	ldr	r3, [r3, #4]
 8008a10:	4a15      	ldr	r2, [pc, #84]	; (8008a68 <UART_AdvFeatureConfig+0x160>)
 8008a12:	4013      	ands	r3, r2
 8008a14:	0019      	movs	r1, r3
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	430a      	orrs	r2, r1
 8008a20:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a26:	2280      	movs	r2, #128	; 0x80
 8008a28:	4013      	ands	r3, r2
 8008a2a:	d00b      	beq.n	8008a44 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	685b      	ldr	r3, [r3, #4]
 8008a32:	4a0e      	ldr	r2, [pc, #56]	; (8008a6c <UART_AdvFeatureConfig+0x164>)
 8008a34:	4013      	ands	r3, r2
 8008a36:	0019      	movs	r1, r3
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	430a      	orrs	r2, r1
 8008a42:	605a      	str	r2, [r3, #4]
  }
}
 8008a44:	46c0      	nop			; (mov r8, r8)
 8008a46:	46bd      	mov	sp, r7
 8008a48:	b002      	add	sp, #8
 8008a4a:	bd80      	pop	{r7, pc}
 8008a4c:	fffdffff 	.word	0xfffdffff
 8008a50:	fffeffff 	.word	0xfffeffff
 8008a54:	fffbffff 	.word	0xfffbffff
 8008a58:	ffff7fff 	.word	0xffff7fff
 8008a5c:	ffffefff 	.word	0xffffefff
 8008a60:	ffffdfff 	.word	0xffffdfff
 8008a64:	ffefffff 	.word	0xffefffff
 8008a68:	ff9fffff 	.word	0xff9fffff
 8008a6c:	fff7ffff 	.word	0xfff7ffff

08008a70 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008a70:	b580      	push	{r7, lr}
 8008a72:	b086      	sub	sp, #24
 8008a74:	af02      	add	r7, sp, #8
 8008a76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	2290      	movs	r2, #144	; 0x90
 8008a7c:	2100      	movs	r1, #0
 8008a7e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008a80:	f7fc fb3e 	bl	8005100 <HAL_GetTick>
 8008a84:	0003      	movs	r3, r0
 8008a86:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	2208      	movs	r2, #8
 8008a90:	4013      	ands	r3, r2
 8008a92:	2b08      	cmp	r3, #8
 8008a94:	d10c      	bne.n	8008ab0 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	2280      	movs	r2, #128	; 0x80
 8008a9a:	0391      	lsls	r1, r2, #14
 8008a9c:	6878      	ldr	r0, [r7, #4]
 8008a9e:	4a1a      	ldr	r2, [pc, #104]	; (8008b08 <UART_CheckIdleState+0x98>)
 8008aa0:	9200      	str	r2, [sp, #0]
 8008aa2:	2200      	movs	r2, #0
 8008aa4:	f000 f832 	bl	8008b0c <UART_WaitOnFlagUntilTimeout>
 8008aa8:	1e03      	subs	r3, r0, #0
 8008aaa:	d001      	beq.n	8008ab0 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008aac:	2303      	movs	r3, #3
 8008aae:	e026      	b.n	8008afe <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	2204      	movs	r2, #4
 8008ab8:	4013      	ands	r3, r2
 8008aba:	2b04      	cmp	r3, #4
 8008abc:	d10c      	bne.n	8008ad8 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	2280      	movs	r2, #128	; 0x80
 8008ac2:	03d1      	lsls	r1, r2, #15
 8008ac4:	6878      	ldr	r0, [r7, #4]
 8008ac6:	4a10      	ldr	r2, [pc, #64]	; (8008b08 <UART_CheckIdleState+0x98>)
 8008ac8:	9200      	str	r2, [sp, #0]
 8008aca:	2200      	movs	r2, #0
 8008acc:	f000 f81e 	bl	8008b0c <UART_WaitOnFlagUntilTimeout>
 8008ad0:	1e03      	subs	r3, r0, #0
 8008ad2:	d001      	beq.n	8008ad8 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008ad4:	2303      	movs	r3, #3
 8008ad6:	e012      	b.n	8008afe <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	2288      	movs	r2, #136	; 0x88
 8008adc:	2120      	movs	r1, #32
 8008ade:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	228c      	movs	r2, #140	; 0x8c
 8008ae4:	2120      	movs	r1, #32
 8008ae6:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	2200      	movs	r2, #0
 8008aec:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	2200      	movs	r2, #0
 8008af2:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	2284      	movs	r2, #132	; 0x84
 8008af8:	2100      	movs	r1, #0
 8008afa:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008afc:	2300      	movs	r3, #0
}
 8008afe:	0018      	movs	r0, r3
 8008b00:	46bd      	mov	sp, r7
 8008b02:	b004      	add	sp, #16
 8008b04:	bd80      	pop	{r7, pc}
 8008b06:	46c0      	nop			; (mov r8, r8)
 8008b08:	01ffffff 	.word	0x01ffffff

08008b0c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008b0c:	b580      	push	{r7, lr}
 8008b0e:	b094      	sub	sp, #80	; 0x50
 8008b10:	af00      	add	r7, sp, #0
 8008b12:	60f8      	str	r0, [r7, #12]
 8008b14:	60b9      	str	r1, [r7, #8]
 8008b16:	603b      	str	r3, [r7, #0]
 8008b18:	1dfb      	adds	r3, r7, #7
 8008b1a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008b1c:	e0a7      	b.n	8008c6e <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008b1e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008b20:	3301      	adds	r3, #1
 8008b22:	d100      	bne.n	8008b26 <UART_WaitOnFlagUntilTimeout+0x1a>
 8008b24:	e0a3      	b.n	8008c6e <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008b26:	f7fc faeb 	bl	8005100 <HAL_GetTick>
 8008b2a:	0002      	movs	r2, r0
 8008b2c:	683b      	ldr	r3, [r7, #0]
 8008b2e:	1ad3      	subs	r3, r2, r3
 8008b30:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008b32:	429a      	cmp	r2, r3
 8008b34:	d302      	bcc.n	8008b3c <UART_WaitOnFlagUntilTimeout+0x30>
 8008b36:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d13f      	bne.n	8008bbc <UART_WaitOnFlagUntilTimeout+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008b3c:	f3ef 8310 	mrs	r3, PRIMASK
 8008b40:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8008b42:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008b44:	647b      	str	r3, [r7, #68]	; 0x44
 8008b46:	2301      	movs	r3, #1
 8008b48:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008b4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b4c:	f383 8810 	msr	PRIMASK, r3
}
 8008b50:	46c0      	nop			; (mov r8, r8)
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	681a      	ldr	r2, [r3, #0]
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	494e      	ldr	r1, [pc, #312]	; (8008c98 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8008b5e:	400a      	ands	r2, r1
 8008b60:	601a      	str	r2, [r3, #0]
 8008b62:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008b64:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008b66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b68:	f383 8810 	msr	PRIMASK, r3
}
 8008b6c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008b6e:	f3ef 8310 	mrs	r3, PRIMASK
 8008b72:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8008b74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b76:	643b      	str	r3, [r7, #64]	; 0x40
 8008b78:	2301      	movs	r3, #1
 8008b7a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008b7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b7e:	f383 8810 	msr	PRIMASK, r3
}
 8008b82:	46c0      	nop			; (mov r8, r8)
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	689a      	ldr	r2, [r3, #8]
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	2101      	movs	r1, #1
 8008b90:	438a      	bics	r2, r1
 8008b92:	609a      	str	r2, [r3, #8]
 8008b94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008b96:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008b98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b9a:	f383 8810 	msr	PRIMASK, r3
}
 8008b9e:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	2288      	movs	r2, #136	; 0x88
 8008ba4:	2120      	movs	r1, #32
 8008ba6:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	228c      	movs	r2, #140	; 0x8c
 8008bac:	2120      	movs	r1, #32
 8008bae:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	2284      	movs	r2, #132	; 0x84
 8008bb4:	2100      	movs	r1, #0
 8008bb6:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8008bb8:	2303      	movs	r3, #3
 8008bba:	e069      	b.n	8008c90 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	2204      	movs	r2, #4
 8008bc4:	4013      	ands	r3, r2
 8008bc6:	d052      	beq.n	8008c6e <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	69da      	ldr	r2, [r3, #28]
 8008bce:	2380      	movs	r3, #128	; 0x80
 8008bd0:	011b      	lsls	r3, r3, #4
 8008bd2:	401a      	ands	r2, r3
 8008bd4:	2380      	movs	r3, #128	; 0x80
 8008bd6:	011b      	lsls	r3, r3, #4
 8008bd8:	429a      	cmp	r2, r3
 8008bda:	d148      	bne.n	8008c6e <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	2280      	movs	r2, #128	; 0x80
 8008be2:	0112      	lsls	r2, r2, #4
 8008be4:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008be6:	f3ef 8310 	mrs	r3, PRIMASK
 8008bea:	613b      	str	r3, [r7, #16]
  return(result);
 8008bec:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008bee:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008bf0:	2301      	movs	r3, #1
 8008bf2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008bf4:	697b      	ldr	r3, [r7, #20]
 8008bf6:	f383 8810 	msr	PRIMASK, r3
}
 8008bfa:	46c0      	nop			; (mov r8, r8)
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	681a      	ldr	r2, [r3, #0]
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	4924      	ldr	r1, [pc, #144]	; (8008c98 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8008c08:	400a      	ands	r2, r1
 8008c0a:	601a      	str	r2, [r3, #0]
 8008c0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008c0e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008c10:	69bb      	ldr	r3, [r7, #24]
 8008c12:	f383 8810 	msr	PRIMASK, r3
}
 8008c16:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008c18:	f3ef 8310 	mrs	r3, PRIMASK
 8008c1c:	61fb      	str	r3, [r7, #28]
  return(result);
 8008c1e:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c20:	64bb      	str	r3, [r7, #72]	; 0x48
 8008c22:	2301      	movs	r3, #1
 8008c24:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008c26:	6a3b      	ldr	r3, [r7, #32]
 8008c28:	f383 8810 	msr	PRIMASK, r3
}
 8008c2c:	46c0      	nop			; (mov r8, r8)
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	689a      	ldr	r2, [r3, #8]
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	2101      	movs	r1, #1
 8008c3a:	438a      	bics	r2, r1
 8008c3c:	609a      	str	r2, [r3, #8]
 8008c3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008c40:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c44:	f383 8810 	msr	PRIMASK, r3
}
 8008c48:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	2288      	movs	r2, #136	; 0x88
 8008c4e:	2120      	movs	r1, #32
 8008c50:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	228c      	movs	r2, #140	; 0x8c
 8008c56:	2120      	movs	r1, #32
 8008c58:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	2290      	movs	r2, #144	; 0x90
 8008c5e:	2120      	movs	r1, #32
 8008c60:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	2284      	movs	r2, #132	; 0x84
 8008c66:	2100      	movs	r1, #0
 8008c68:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8008c6a:	2303      	movs	r3, #3
 8008c6c:	e010      	b.n	8008c90 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	69db      	ldr	r3, [r3, #28]
 8008c74:	68ba      	ldr	r2, [r7, #8]
 8008c76:	4013      	ands	r3, r2
 8008c78:	68ba      	ldr	r2, [r7, #8]
 8008c7a:	1ad3      	subs	r3, r2, r3
 8008c7c:	425a      	negs	r2, r3
 8008c7e:	4153      	adcs	r3, r2
 8008c80:	b2db      	uxtb	r3, r3
 8008c82:	001a      	movs	r2, r3
 8008c84:	1dfb      	adds	r3, r7, #7
 8008c86:	781b      	ldrb	r3, [r3, #0]
 8008c88:	429a      	cmp	r2, r3
 8008c8a:	d100      	bne.n	8008c8e <UART_WaitOnFlagUntilTimeout+0x182>
 8008c8c:	e747      	b.n	8008b1e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008c8e:	2300      	movs	r3, #0
}
 8008c90:	0018      	movs	r0, r3
 8008c92:	46bd      	mov	sp, r7
 8008c94:	b014      	add	sp, #80	; 0x50
 8008c96:	bd80      	pop	{r7, pc}
 8008c98:	fffffe5f 	.word	0xfffffe5f

08008c9c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008c9c:	b580      	push	{r7, lr}
 8008c9e:	b098      	sub	sp, #96	; 0x60
 8008ca0:	af00      	add	r7, sp, #0
 8008ca2:	60f8      	str	r0, [r7, #12]
 8008ca4:	60b9      	str	r1, [r7, #8]
 8008ca6:	1dbb      	adds	r3, r7, #6
 8008ca8:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	68ba      	ldr	r2, [r7, #8]
 8008cae:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	1dba      	adds	r2, r7, #6
 8008cb4:	215c      	movs	r1, #92	; 0x5c
 8008cb6:	8812      	ldrh	r2, [r2, #0]
 8008cb8:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	1dba      	adds	r2, r7, #6
 8008cbe:	215e      	movs	r1, #94	; 0x5e
 8008cc0:	8812      	ldrh	r2, [r2, #0]
 8008cc2:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	2200      	movs	r2, #0
 8008cc8:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	689a      	ldr	r2, [r3, #8]
 8008cce:	2380      	movs	r3, #128	; 0x80
 8008cd0:	015b      	lsls	r3, r3, #5
 8008cd2:	429a      	cmp	r2, r3
 8008cd4:	d10d      	bne.n	8008cf2 <UART_Start_Receive_IT+0x56>
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	691b      	ldr	r3, [r3, #16]
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d104      	bne.n	8008ce8 <UART_Start_Receive_IT+0x4c>
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	2260      	movs	r2, #96	; 0x60
 8008ce2:	497b      	ldr	r1, [pc, #492]	; (8008ed0 <UART_Start_Receive_IT+0x234>)
 8008ce4:	5299      	strh	r1, [r3, r2]
 8008ce6:	e02e      	b.n	8008d46 <UART_Start_Receive_IT+0xaa>
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	2260      	movs	r2, #96	; 0x60
 8008cec:	21ff      	movs	r1, #255	; 0xff
 8008cee:	5299      	strh	r1, [r3, r2]
 8008cf0:	e029      	b.n	8008d46 <UART_Start_Receive_IT+0xaa>
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	689b      	ldr	r3, [r3, #8]
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d10d      	bne.n	8008d16 <UART_Start_Receive_IT+0x7a>
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	691b      	ldr	r3, [r3, #16]
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d104      	bne.n	8008d0c <UART_Start_Receive_IT+0x70>
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	2260      	movs	r2, #96	; 0x60
 8008d06:	21ff      	movs	r1, #255	; 0xff
 8008d08:	5299      	strh	r1, [r3, r2]
 8008d0a:	e01c      	b.n	8008d46 <UART_Start_Receive_IT+0xaa>
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	2260      	movs	r2, #96	; 0x60
 8008d10:	217f      	movs	r1, #127	; 0x7f
 8008d12:	5299      	strh	r1, [r3, r2]
 8008d14:	e017      	b.n	8008d46 <UART_Start_Receive_IT+0xaa>
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	689a      	ldr	r2, [r3, #8]
 8008d1a:	2380      	movs	r3, #128	; 0x80
 8008d1c:	055b      	lsls	r3, r3, #21
 8008d1e:	429a      	cmp	r2, r3
 8008d20:	d10d      	bne.n	8008d3e <UART_Start_Receive_IT+0xa2>
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	691b      	ldr	r3, [r3, #16]
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d104      	bne.n	8008d34 <UART_Start_Receive_IT+0x98>
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	2260      	movs	r2, #96	; 0x60
 8008d2e:	217f      	movs	r1, #127	; 0x7f
 8008d30:	5299      	strh	r1, [r3, r2]
 8008d32:	e008      	b.n	8008d46 <UART_Start_Receive_IT+0xaa>
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	2260      	movs	r2, #96	; 0x60
 8008d38:	213f      	movs	r1, #63	; 0x3f
 8008d3a:	5299      	strh	r1, [r3, r2]
 8008d3c:	e003      	b.n	8008d46 <UART_Start_Receive_IT+0xaa>
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	2260      	movs	r2, #96	; 0x60
 8008d42:	2100      	movs	r1, #0
 8008d44:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	2290      	movs	r2, #144	; 0x90
 8008d4a:	2100      	movs	r1, #0
 8008d4c:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	228c      	movs	r2, #140	; 0x8c
 8008d52:	2122      	movs	r1, #34	; 0x22
 8008d54:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008d56:	f3ef 8310 	mrs	r3, PRIMASK
 8008d5a:	643b      	str	r3, [r7, #64]	; 0x40
  return(result);
 8008d5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d5e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008d60:	2301      	movs	r3, #1
 8008d62:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008d64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008d66:	f383 8810 	msr	PRIMASK, r3
}
 8008d6a:	46c0      	nop			; (mov r8, r8)
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	689a      	ldr	r2, [r3, #8]
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	2101      	movs	r1, #1
 8008d78:	430a      	orrs	r2, r1
 8008d7a:	609a      	str	r2, [r3, #8]
 8008d7c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008d7e:	64bb      	str	r3, [r7, #72]	; 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008d80:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008d82:	f383 8810 	msr	PRIMASK, r3
}
 8008d86:	46c0      	nop			; (mov r8, r8)

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8008d8c:	2380      	movs	r3, #128	; 0x80
 8008d8e:	059b      	lsls	r3, r3, #22
 8008d90:	429a      	cmp	r2, r3
 8008d92:	d150      	bne.n	8008e36 <UART_Start_Receive_IT+0x19a>
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	2268      	movs	r2, #104	; 0x68
 8008d98:	5a9b      	ldrh	r3, [r3, r2]
 8008d9a:	1dba      	adds	r2, r7, #6
 8008d9c:	8812      	ldrh	r2, [r2, #0]
 8008d9e:	429a      	cmp	r2, r3
 8008da0:	d349      	bcc.n	8008e36 <UART_Start_Receive_IT+0x19a>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	689a      	ldr	r2, [r3, #8]
 8008da6:	2380      	movs	r3, #128	; 0x80
 8008da8:	015b      	lsls	r3, r3, #5
 8008daa:	429a      	cmp	r2, r3
 8008dac:	d107      	bne.n	8008dbe <UART_Start_Receive_IT+0x122>
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	691b      	ldr	r3, [r3, #16]
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d103      	bne.n	8008dbe <UART_Start_Receive_IT+0x122>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	4a46      	ldr	r2, [pc, #280]	; (8008ed4 <UART_Start_Receive_IT+0x238>)
 8008dba:	675a      	str	r2, [r3, #116]	; 0x74
 8008dbc:	e002      	b.n	8008dc4 <UART_Start_Receive_IT+0x128>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	4a45      	ldr	r2, [pc, #276]	; (8008ed8 <UART_Start_Receive_IT+0x23c>)
 8008dc2:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	691b      	ldr	r3, [r3, #16]
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d019      	beq.n	8008e00 <UART_Start_Receive_IT+0x164>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008dcc:	f3ef 8310 	mrs	r3, PRIMASK
 8008dd0:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8008dd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008dd4:	65bb      	str	r3, [r7, #88]	; 0x58
 8008dd6:	2301      	movs	r3, #1
 8008dd8:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008dda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ddc:	f383 8810 	msr	PRIMASK, r3
}
 8008de0:	46c0      	nop			; (mov r8, r8)
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	681a      	ldr	r2, [r3, #0]
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	2180      	movs	r1, #128	; 0x80
 8008dee:	0049      	lsls	r1, r1, #1
 8008df0:	430a      	orrs	r2, r1
 8008df2:	601a      	str	r2, [r3, #0]
 8008df4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008df6:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008df8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008dfa:	f383 8810 	msr	PRIMASK, r3
}
 8008dfe:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008e00:	f3ef 8310 	mrs	r3, PRIMASK
 8008e04:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8008e06:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008e08:	657b      	str	r3, [r7, #84]	; 0x54
 8008e0a:	2301      	movs	r3, #1
 8008e0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008e0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e10:	f383 8810 	msr	PRIMASK, r3
}
 8008e14:	46c0      	nop			; (mov r8, r8)
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	689a      	ldr	r2, [r3, #8]
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	2180      	movs	r1, #128	; 0x80
 8008e22:	0549      	lsls	r1, r1, #21
 8008e24:	430a      	orrs	r2, r1
 8008e26:	609a      	str	r2, [r3, #8]
 8008e28:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008e2a:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008e2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e2e:	f383 8810 	msr	PRIMASK, r3
}
 8008e32:	46c0      	nop			; (mov r8, r8)
 8008e34:	e047      	b.n	8008ec6 <UART_Start_Receive_IT+0x22a>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	689a      	ldr	r2, [r3, #8]
 8008e3a:	2380      	movs	r3, #128	; 0x80
 8008e3c:	015b      	lsls	r3, r3, #5
 8008e3e:	429a      	cmp	r2, r3
 8008e40:	d107      	bne.n	8008e52 <UART_Start_Receive_IT+0x1b6>
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	691b      	ldr	r3, [r3, #16]
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d103      	bne.n	8008e52 <UART_Start_Receive_IT+0x1b6>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	4a23      	ldr	r2, [pc, #140]	; (8008edc <UART_Start_Receive_IT+0x240>)
 8008e4e:	675a      	str	r2, [r3, #116]	; 0x74
 8008e50:	e002      	b.n	8008e58 <UART_Start_Receive_IT+0x1bc>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	4a22      	ldr	r2, [pc, #136]	; (8008ee0 <UART_Start_Receive_IT+0x244>)
 8008e56:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	691b      	ldr	r3, [r3, #16]
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d019      	beq.n	8008e94 <UART_Start_Receive_IT+0x1f8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008e60:	f3ef 8310 	mrs	r3, PRIMASK
 8008e64:	61fb      	str	r3, [r7, #28]
  return(result);
 8008e66:	69fb      	ldr	r3, [r7, #28]
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8008e68:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008e6a:	2301      	movs	r3, #1
 8008e6c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008e6e:	6a3b      	ldr	r3, [r7, #32]
 8008e70:	f383 8810 	msr	PRIMASK, r3
}
 8008e74:	46c0      	nop			; (mov r8, r8)
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	681a      	ldr	r2, [r3, #0]
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	2190      	movs	r1, #144	; 0x90
 8008e82:	0049      	lsls	r1, r1, #1
 8008e84:	430a      	orrs	r2, r1
 8008e86:	601a      	str	r2, [r3, #0]
 8008e88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008e8a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e8e:	f383 8810 	msr	PRIMASK, r3
}
 8008e92:	e018      	b.n	8008ec6 <UART_Start_Receive_IT+0x22a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008e94:	f3ef 8310 	mrs	r3, PRIMASK
 8008e98:	613b      	str	r3, [r7, #16]
  return(result);
 8008e9a:	693b      	ldr	r3, [r7, #16]
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008e9c:	653b      	str	r3, [r7, #80]	; 0x50
 8008e9e:	2301      	movs	r3, #1
 8008ea0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008ea2:	697b      	ldr	r3, [r7, #20]
 8008ea4:	f383 8810 	msr	PRIMASK, r3
}
 8008ea8:	46c0      	nop			; (mov r8, r8)
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	681a      	ldr	r2, [r3, #0]
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	2120      	movs	r1, #32
 8008eb6:	430a      	orrs	r2, r1
 8008eb8:	601a      	str	r2, [r3, #0]
 8008eba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008ebc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008ebe:	69bb      	ldr	r3, [r7, #24]
 8008ec0:	f383 8810 	msr	PRIMASK, r3
}
 8008ec4:	46c0      	nop			; (mov r8, r8)
    }
  }
  return HAL_OK;
 8008ec6:	2300      	movs	r3, #0
}
 8008ec8:	0018      	movs	r0, r3
 8008eca:	46bd      	mov	sp, r7
 8008ecc:	b018      	add	sp, #96	; 0x60
 8008ece:	bd80      	pop	{r7, pc}
 8008ed0:	000001ff 	.word	0x000001ff
 8008ed4:	0800995d 	.word	0x0800995d
 8008ed8:	08009671 	.word	0x08009671
 8008edc:	080094fd 	.word	0x080094fd
 8008ee0:	08009389 	.word	0x08009389

08008ee4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008ee4:	b580      	push	{r7, lr}
 8008ee6:	b08e      	sub	sp, #56	; 0x38
 8008ee8:	af00      	add	r7, sp, #0
 8008eea:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008eec:	f3ef 8310 	mrs	r3, PRIMASK
 8008ef0:	617b      	str	r3, [r7, #20]
  return(result);
 8008ef2:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008ef4:	637b      	str	r3, [r7, #52]	; 0x34
 8008ef6:	2301      	movs	r3, #1
 8008ef8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008efa:	69bb      	ldr	r3, [r7, #24]
 8008efc:	f383 8810 	msr	PRIMASK, r3
}
 8008f00:	46c0      	nop			; (mov r8, r8)
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	681a      	ldr	r2, [r3, #0]
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	4926      	ldr	r1, [pc, #152]	; (8008fa8 <UART_EndRxTransfer+0xc4>)
 8008f0e:	400a      	ands	r2, r1
 8008f10:	601a      	str	r2, [r3, #0]
 8008f12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f14:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008f16:	69fb      	ldr	r3, [r7, #28]
 8008f18:	f383 8810 	msr	PRIMASK, r3
}
 8008f1c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008f1e:	f3ef 8310 	mrs	r3, PRIMASK
 8008f22:	623b      	str	r3, [r7, #32]
  return(result);
 8008f24:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008f26:	633b      	str	r3, [r7, #48]	; 0x30
 8008f28:	2301      	movs	r3, #1
 8008f2a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f2e:	f383 8810 	msr	PRIMASK, r3
}
 8008f32:	46c0      	nop			; (mov r8, r8)
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	689a      	ldr	r2, [r3, #8]
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	491b      	ldr	r1, [pc, #108]	; (8008fac <UART_EndRxTransfer+0xc8>)
 8008f40:	400a      	ands	r2, r1
 8008f42:	609a      	str	r2, [r3, #8]
 8008f44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f46:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008f48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f4a:	f383 8810 	msr	PRIMASK, r3
}
 8008f4e:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008f54:	2b01      	cmp	r3, #1
 8008f56:	d118      	bne.n	8008f8a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008f58:	f3ef 8310 	mrs	r3, PRIMASK
 8008f5c:	60bb      	str	r3, [r7, #8]
  return(result);
 8008f5e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008f60:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008f62:	2301      	movs	r3, #1
 8008f64:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	f383 8810 	msr	PRIMASK, r3
}
 8008f6c:	46c0      	nop			; (mov r8, r8)
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	681a      	ldr	r2, [r3, #0]
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	2110      	movs	r1, #16
 8008f7a:	438a      	bics	r2, r1
 8008f7c:	601a      	str	r2, [r3, #0]
 8008f7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f80:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008f82:	693b      	ldr	r3, [r7, #16]
 8008f84:	f383 8810 	msr	PRIMASK, r3
}
 8008f88:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	228c      	movs	r2, #140	; 0x8c
 8008f8e:	2120      	movs	r1, #32
 8008f90:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	2200      	movs	r2, #0
 8008f96:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	2200      	movs	r2, #0
 8008f9c:	675a      	str	r2, [r3, #116]	; 0x74
}
 8008f9e:	46c0      	nop			; (mov r8, r8)
 8008fa0:	46bd      	mov	sp, r7
 8008fa2:	b00e      	add	sp, #56	; 0x38
 8008fa4:	bd80      	pop	{r7, pc}
 8008fa6:	46c0      	nop			; (mov r8, r8)
 8008fa8:	fffffedf 	.word	0xfffffedf
 8008fac:	effffffe 	.word	0xeffffffe

08008fb0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008fb0:	b580      	push	{r7, lr}
 8008fb2:	b084      	sub	sp, #16
 8008fb4:	af00      	add	r7, sp, #0
 8008fb6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fbc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	225e      	movs	r2, #94	; 0x5e
 8008fc2:	2100      	movs	r1, #0
 8008fc4:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	2256      	movs	r2, #86	; 0x56
 8008fca:	2100      	movs	r1, #0
 8008fcc:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	0018      	movs	r0, r3
 8008fd2:	f7fb fb45 	bl	8004660 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008fd6:	46c0      	nop			; (mov r8, r8)
 8008fd8:	46bd      	mov	sp, r7
 8008fda:	b004      	add	sp, #16
 8008fdc:	bd80      	pop	{r7, pc}

08008fde <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008fde:	b580      	push	{r7, lr}
 8008fe0:	b08a      	sub	sp, #40	; 0x28
 8008fe2:	af00      	add	r7, sp, #0
 8008fe4:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	2288      	movs	r2, #136	; 0x88
 8008fea:	589b      	ldr	r3, [r3, r2]
 8008fec:	2b21      	cmp	r3, #33	; 0x21
 8008fee:	d14c      	bne.n	800908a <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	2256      	movs	r2, #86	; 0x56
 8008ff4:	5a9b      	ldrh	r3, [r3, r2]
 8008ff6:	b29b      	uxth	r3, r3
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d132      	bne.n	8009062 <UART_TxISR_8BIT+0x84>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008ffc:	f3ef 8310 	mrs	r3, PRIMASK
 8009000:	60bb      	str	r3, [r7, #8]
  return(result);
 8009002:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8009004:	627b      	str	r3, [r7, #36]	; 0x24
 8009006:	2301      	movs	r3, #1
 8009008:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	f383 8810 	msr	PRIMASK, r3
}
 8009010:	46c0      	nop			; (mov r8, r8)
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	681a      	ldr	r2, [r3, #0]
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	2180      	movs	r1, #128	; 0x80
 800901e:	438a      	bics	r2, r1
 8009020:	601a      	str	r2, [r3, #0]
 8009022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009024:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009026:	693b      	ldr	r3, [r7, #16]
 8009028:	f383 8810 	msr	PRIMASK, r3
}
 800902c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800902e:	f3ef 8310 	mrs	r3, PRIMASK
 8009032:	617b      	str	r3, [r7, #20]
  return(result);
 8009034:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009036:	623b      	str	r3, [r7, #32]
 8009038:	2301      	movs	r3, #1
 800903a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800903c:	69bb      	ldr	r3, [r7, #24]
 800903e:	f383 8810 	msr	PRIMASK, r3
}
 8009042:	46c0      	nop			; (mov r8, r8)
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	681a      	ldr	r2, [r3, #0]
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	2140      	movs	r1, #64	; 0x40
 8009050:	430a      	orrs	r2, r1
 8009052:	601a      	str	r2, [r3, #0]
 8009054:	6a3b      	ldr	r3, [r7, #32]
 8009056:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009058:	69fb      	ldr	r3, [r7, #28]
 800905a:	f383 8810 	msr	PRIMASK, r3
}
 800905e:	46c0      	nop			; (mov r8, r8)
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8009060:	e013      	b.n	800908a <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009066:	781a      	ldrb	r2, [r3, #0]
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009072:	1c5a      	adds	r2, r3, #1
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	2256      	movs	r2, #86	; 0x56
 800907c:	5a9b      	ldrh	r3, [r3, r2]
 800907e:	b29b      	uxth	r3, r3
 8009080:	3b01      	subs	r3, #1
 8009082:	b299      	uxth	r1, r3
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	2256      	movs	r2, #86	; 0x56
 8009088:	5299      	strh	r1, [r3, r2]
}
 800908a:	46c0      	nop			; (mov r8, r8)
 800908c:	46bd      	mov	sp, r7
 800908e:	b00a      	add	sp, #40	; 0x28
 8009090:	bd80      	pop	{r7, pc}

08009092 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8009092:	b580      	push	{r7, lr}
 8009094:	b08c      	sub	sp, #48	; 0x30
 8009096:	af00      	add	r7, sp, #0
 8009098:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	2288      	movs	r2, #136	; 0x88
 800909e:	589b      	ldr	r3, [r3, r2]
 80090a0:	2b21      	cmp	r3, #33	; 0x21
 80090a2:	d151      	bne.n	8009148 <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	2256      	movs	r2, #86	; 0x56
 80090a8:	5a9b      	ldrh	r3, [r3, r2]
 80090aa:	b29b      	uxth	r3, r3
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d132      	bne.n	8009116 <UART_TxISR_16BIT+0x84>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80090b0:	f3ef 8310 	mrs	r3, PRIMASK
 80090b4:	60fb      	str	r3, [r7, #12]
  return(result);
 80090b6:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80090b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80090ba:	2301      	movs	r3, #1
 80090bc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80090be:	693b      	ldr	r3, [r7, #16]
 80090c0:	f383 8810 	msr	PRIMASK, r3
}
 80090c4:	46c0      	nop			; (mov r8, r8)
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	681a      	ldr	r2, [r3, #0]
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	2180      	movs	r1, #128	; 0x80
 80090d2:	438a      	bics	r2, r1
 80090d4:	601a      	str	r2, [r3, #0]
 80090d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090d8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80090da:	697b      	ldr	r3, [r7, #20]
 80090dc:	f383 8810 	msr	PRIMASK, r3
}
 80090e0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80090e2:	f3ef 8310 	mrs	r3, PRIMASK
 80090e6:	61bb      	str	r3, [r7, #24]
  return(result);
 80090e8:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80090ea:	627b      	str	r3, [r7, #36]	; 0x24
 80090ec:	2301      	movs	r3, #1
 80090ee:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80090f0:	69fb      	ldr	r3, [r7, #28]
 80090f2:	f383 8810 	msr	PRIMASK, r3
}
 80090f6:	46c0      	nop			; (mov r8, r8)
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	681a      	ldr	r2, [r3, #0]
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	2140      	movs	r1, #64	; 0x40
 8009104:	430a      	orrs	r2, r1
 8009106:	601a      	str	r2, [r3, #0]
 8009108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800910a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800910c:	6a3b      	ldr	r3, [r7, #32]
 800910e:	f383 8810 	msr	PRIMASK, r3
}
 8009112:	46c0      	nop			; (mov r8, r8)
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8009114:	e018      	b.n	8009148 <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800911a:	62fb      	str	r3, [r7, #44]	; 0x2c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800911c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800911e:	881b      	ldrh	r3, [r3, #0]
 8009120:	001a      	movs	r2, r3
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	05d2      	lsls	r2, r2, #23
 8009128:	0dd2      	lsrs	r2, r2, #23
 800912a:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009130:	1c9a      	adds	r2, r3, #2
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	2256      	movs	r2, #86	; 0x56
 800913a:	5a9b      	ldrh	r3, [r3, r2]
 800913c:	b29b      	uxth	r3, r3
 800913e:	3b01      	subs	r3, #1
 8009140:	b299      	uxth	r1, r3
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	2256      	movs	r2, #86	; 0x56
 8009146:	5299      	strh	r1, [r3, r2]
}
 8009148:	46c0      	nop			; (mov r8, r8)
 800914a:	46bd      	mov	sp, r7
 800914c:	b00c      	add	sp, #48	; 0x30
 800914e:	bd80      	pop	{r7, pc}

08009150 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009150:	b580      	push	{r7, lr}
 8009152:	b08c      	sub	sp, #48	; 0x30
 8009154:	af00      	add	r7, sp, #0
 8009156:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	2288      	movs	r2, #136	; 0x88
 800915c:	589b      	ldr	r3, [r3, r2]
 800915e:	2b21      	cmp	r3, #33	; 0x21
 8009160:	d165      	bne.n	800922e <UART_TxISR_8BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8009162:	232e      	movs	r3, #46	; 0x2e
 8009164:	18fb      	adds	r3, r7, r3
 8009166:	687a      	ldr	r2, [r7, #4]
 8009168:	216a      	movs	r1, #106	; 0x6a
 800916a:	5a52      	ldrh	r2, [r2, r1]
 800916c:	801a      	strh	r2, [r3, #0]
 800916e:	e059      	b.n	8009224 <UART_TxISR_8BIT_FIFOEN+0xd4>
    {
      if (huart->TxXferCount == 0U)
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	2256      	movs	r2, #86	; 0x56
 8009174:	5a9b      	ldrh	r3, [r3, r2]
 8009176:	b29b      	uxth	r3, r3
 8009178:	2b00      	cmp	r3, #0
 800917a:	d133      	bne.n	80091e4 <UART_TxISR_8BIT_FIFOEN+0x94>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800917c:	f3ef 8310 	mrs	r3, PRIMASK
 8009180:	60fb      	str	r3, [r7, #12]
  return(result);
 8009182:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8009184:	62bb      	str	r3, [r7, #40]	; 0x28
 8009186:	2301      	movs	r3, #1
 8009188:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800918a:	693b      	ldr	r3, [r7, #16]
 800918c:	f383 8810 	msr	PRIMASK, r3
}
 8009190:	46c0      	nop			; (mov r8, r8)
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	689a      	ldr	r2, [r3, #8]
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	4926      	ldr	r1, [pc, #152]	; (8009238 <UART_TxISR_8BIT_FIFOEN+0xe8>)
 800919e:	400a      	ands	r2, r1
 80091a0:	609a      	str	r2, [r3, #8]
 80091a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091a4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80091a6:	697b      	ldr	r3, [r7, #20]
 80091a8:	f383 8810 	msr	PRIMASK, r3
}
 80091ac:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80091ae:	f3ef 8310 	mrs	r3, PRIMASK
 80091b2:	61bb      	str	r3, [r7, #24]
  return(result);
 80091b4:	69bb      	ldr	r3, [r7, #24]

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80091b6:	627b      	str	r3, [r7, #36]	; 0x24
 80091b8:	2301      	movs	r3, #1
 80091ba:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80091bc:	69fb      	ldr	r3, [r7, #28]
 80091be:	f383 8810 	msr	PRIMASK, r3
}
 80091c2:	46c0      	nop			; (mov r8, r8)
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	681a      	ldr	r2, [r3, #0]
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	2140      	movs	r1, #64	; 0x40
 80091d0:	430a      	orrs	r2, r1
 80091d2:	601a      	str	r2, [r3, #0]
 80091d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091d6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80091d8:	6a3b      	ldr	r3, [r7, #32]
 80091da:	f383 8810 	msr	PRIMASK, r3
}
 80091de:	46c0      	nop			; (mov r8, r8)

        break; /* force exit loop */
 80091e0:	46c0      	nop			; (mov r8, r8)
      {
        /* Nothing to do */
      }
    }
  }
}
 80091e2:	e024      	b.n	800922e <UART_TxISR_8BIT_FIFOEN+0xde>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	69db      	ldr	r3, [r3, #28]
 80091ea:	2280      	movs	r2, #128	; 0x80
 80091ec:	4013      	ands	r3, r2
 80091ee:	d013      	beq.n	8009218 <UART_TxISR_8BIT_FIFOEN+0xc8>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80091f4:	781a      	ldrb	r2, [r3, #0]
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009200:	1c5a      	adds	r2, r3, #1
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	2256      	movs	r2, #86	; 0x56
 800920a:	5a9b      	ldrh	r3, [r3, r2]
 800920c:	b29b      	uxth	r3, r3
 800920e:	3b01      	subs	r3, #1
 8009210:	b299      	uxth	r1, r3
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	2256      	movs	r2, #86	; 0x56
 8009216:	5299      	strh	r1, [r3, r2]
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8009218:	212e      	movs	r1, #46	; 0x2e
 800921a:	187b      	adds	r3, r7, r1
 800921c:	881a      	ldrh	r2, [r3, #0]
 800921e:	187b      	adds	r3, r7, r1
 8009220:	3a01      	subs	r2, #1
 8009222:	801a      	strh	r2, [r3, #0]
 8009224:	232e      	movs	r3, #46	; 0x2e
 8009226:	18fb      	adds	r3, r7, r3
 8009228:	881b      	ldrh	r3, [r3, #0]
 800922a:	2b00      	cmp	r3, #0
 800922c:	d1a0      	bne.n	8009170 <UART_TxISR_8BIT_FIFOEN+0x20>
}
 800922e:	46c0      	nop			; (mov r8, r8)
 8009230:	46bd      	mov	sp, r7
 8009232:	b00c      	add	sp, #48	; 0x30
 8009234:	bd80      	pop	{r7, pc}
 8009236:	46c0      	nop			; (mov r8, r8)
 8009238:	ff7fffff 	.word	0xff7fffff

0800923c <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800923c:	b580      	push	{r7, lr}
 800923e:	b08c      	sub	sp, #48	; 0x30
 8009240:	af00      	add	r7, sp, #0
 8009242:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	2288      	movs	r2, #136	; 0x88
 8009248:	589b      	ldr	r3, [r3, r2]
 800924a:	2b21      	cmp	r3, #33	; 0x21
 800924c:	d16a      	bne.n	8009324 <UART_TxISR_16BIT_FIFOEN+0xe8>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800924e:	232e      	movs	r3, #46	; 0x2e
 8009250:	18fb      	adds	r3, r7, r3
 8009252:	687a      	ldr	r2, [r7, #4]
 8009254:	216a      	movs	r1, #106	; 0x6a
 8009256:	5a52      	ldrh	r2, [r2, r1]
 8009258:	801a      	strh	r2, [r3, #0]
 800925a:	e05e      	b.n	800931a <UART_TxISR_16BIT_FIFOEN+0xde>
    {
      if (huart->TxXferCount == 0U)
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	2256      	movs	r2, #86	; 0x56
 8009260:	5a9b      	ldrh	r3, [r3, r2]
 8009262:	b29b      	uxth	r3, r3
 8009264:	2b00      	cmp	r3, #0
 8009266:	d133      	bne.n	80092d0 <UART_TxISR_16BIT_FIFOEN+0x94>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009268:	f3ef 8310 	mrs	r3, PRIMASK
 800926c:	60bb      	str	r3, [r7, #8]
  return(result);
 800926e:	68bb      	ldr	r3, [r7, #8]
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8009270:	627b      	str	r3, [r7, #36]	; 0x24
 8009272:	2301      	movs	r3, #1
 8009274:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	f383 8810 	msr	PRIMASK, r3
}
 800927c:	46c0      	nop			; (mov r8, r8)
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	689a      	ldr	r2, [r3, #8]
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	4928      	ldr	r1, [pc, #160]	; (800932c <UART_TxISR_16BIT_FIFOEN+0xf0>)
 800928a:	400a      	ands	r2, r1
 800928c:	609a      	str	r2, [r3, #8]
 800928e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009290:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009292:	693b      	ldr	r3, [r7, #16]
 8009294:	f383 8810 	msr	PRIMASK, r3
}
 8009298:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800929a:	f3ef 8310 	mrs	r3, PRIMASK
 800929e:	617b      	str	r3, [r7, #20]
  return(result);
 80092a0:	697b      	ldr	r3, [r7, #20]

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80092a2:	623b      	str	r3, [r7, #32]
 80092a4:	2301      	movs	r3, #1
 80092a6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80092a8:	69bb      	ldr	r3, [r7, #24]
 80092aa:	f383 8810 	msr	PRIMASK, r3
}
 80092ae:	46c0      	nop			; (mov r8, r8)
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	681a      	ldr	r2, [r3, #0]
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	2140      	movs	r1, #64	; 0x40
 80092bc:	430a      	orrs	r2, r1
 80092be:	601a      	str	r2, [r3, #0]
 80092c0:	6a3b      	ldr	r3, [r7, #32]
 80092c2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80092c4:	69fb      	ldr	r3, [r7, #28]
 80092c6:	f383 8810 	msr	PRIMASK, r3
}
 80092ca:	46c0      	nop			; (mov r8, r8)

        break; /* force exit loop */
 80092cc:	46c0      	nop			; (mov r8, r8)
      {
        /* Nothing to do */
      }
    }
  }
}
 80092ce:	e029      	b.n	8009324 <UART_TxISR_16BIT_FIFOEN+0xe8>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	69db      	ldr	r3, [r3, #28]
 80092d6:	2280      	movs	r2, #128	; 0x80
 80092d8:	4013      	ands	r3, r2
 80092da:	d018      	beq.n	800930e <UART_TxISR_16BIT_FIFOEN+0xd2>
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80092e0:	62bb      	str	r3, [r7, #40]	; 0x28
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80092e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092e4:	881b      	ldrh	r3, [r3, #0]
 80092e6:	001a      	movs	r2, r3
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	05d2      	lsls	r2, r2, #23
 80092ee:	0dd2      	lsrs	r2, r2, #23
 80092f0:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80092f6:	1c9a      	adds	r2, r3, #2
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	2256      	movs	r2, #86	; 0x56
 8009300:	5a9b      	ldrh	r3, [r3, r2]
 8009302:	b29b      	uxth	r3, r3
 8009304:	3b01      	subs	r3, #1
 8009306:	b299      	uxth	r1, r3
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	2256      	movs	r2, #86	; 0x56
 800930c:	5299      	strh	r1, [r3, r2]
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800930e:	212e      	movs	r1, #46	; 0x2e
 8009310:	187b      	adds	r3, r7, r1
 8009312:	881a      	ldrh	r2, [r3, #0]
 8009314:	187b      	adds	r3, r7, r1
 8009316:	3a01      	subs	r2, #1
 8009318:	801a      	strh	r2, [r3, #0]
 800931a:	232e      	movs	r3, #46	; 0x2e
 800931c:	18fb      	adds	r3, r7, r3
 800931e:	881b      	ldrh	r3, [r3, #0]
 8009320:	2b00      	cmp	r3, #0
 8009322:	d19b      	bne.n	800925c <UART_TxISR_16BIT_FIFOEN+0x20>
}
 8009324:	46c0      	nop			; (mov r8, r8)
 8009326:	46bd      	mov	sp, r7
 8009328:	b00c      	add	sp, #48	; 0x30
 800932a:	bd80      	pop	{r7, pc}
 800932c:	ff7fffff 	.word	0xff7fffff

08009330 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009330:	b580      	push	{r7, lr}
 8009332:	b086      	sub	sp, #24
 8009334:	af00      	add	r7, sp, #0
 8009336:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009338:	f3ef 8310 	mrs	r3, PRIMASK
 800933c:	60bb      	str	r3, [r7, #8]
  return(result);
 800933e:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009340:	617b      	str	r3, [r7, #20]
 8009342:	2301      	movs	r3, #1
 8009344:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	f383 8810 	msr	PRIMASK, r3
}
 800934c:	46c0      	nop			; (mov r8, r8)
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	681a      	ldr	r2, [r3, #0]
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	2140      	movs	r1, #64	; 0x40
 800935a:	438a      	bics	r2, r1
 800935c:	601a      	str	r2, [r3, #0]
 800935e:	697b      	ldr	r3, [r7, #20]
 8009360:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009362:	693b      	ldr	r3, [r7, #16]
 8009364:	f383 8810 	msr	PRIMASK, r3
}
 8009368:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	2288      	movs	r2, #136	; 0x88
 800936e:	2120      	movs	r1, #32
 8009370:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	2200      	movs	r2, #0
 8009376:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	0018      	movs	r0, r3
 800937c:	f7fe ff48 	bl	8008210 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009380:	46c0      	nop			; (mov r8, r8)
 8009382:	46bd      	mov	sp, r7
 8009384:	b006      	add	sp, #24
 8009386:	bd80      	pop	{r7, pc}

08009388 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8009388:	b580      	push	{r7, lr}
 800938a:	b090      	sub	sp, #64	; 0x40
 800938c:	af00      	add	r7, sp, #0
 800938e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8009390:	203e      	movs	r0, #62	; 0x3e
 8009392:	183b      	adds	r3, r7, r0
 8009394:	687a      	ldr	r2, [r7, #4]
 8009396:	2160      	movs	r1, #96	; 0x60
 8009398:	5a52      	ldrh	r2, [r2, r1]
 800939a:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	228c      	movs	r2, #140	; 0x8c
 80093a0:	589b      	ldr	r3, [r3, r2]
 80093a2:	2b22      	cmp	r3, #34	; 0x22
 80093a4:	d000      	beq.n	80093a8 <UART_RxISR_8BIT+0x20>
 80093a6:	e09a      	b.n	80094de <UART_RxISR_8BIT+0x156>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80093ae:	213c      	movs	r1, #60	; 0x3c
 80093b0:	187b      	adds	r3, r7, r1
 80093b2:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80093b4:	187b      	adds	r3, r7, r1
 80093b6:	881b      	ldrh	r3, [r3, #0]
 80093b8:	b2da      	uxtb	r2, r3
 80093ba:	183b      	adds	r3, r7, r0
 80093bc:	881b      	ldrh	r3, [r3, #0]
 80093be:	b2d9      	uxtb	r1, r3
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80093c4:	400a      	ands	r2, r1
 80093c6:	b2d2      	uxtb	r2, r2
 80093c8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80093ce:	1c5a      	adds	r2, r3, #1
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	225e      	movs	r2, #94	; 0x5e
 80093d8:	5a9b      	ldrh	r3, [r3, r2]
 80093da:	b29b      	uxth	r3, r3
 80093dc:	3b01      	subs	r3, #1
 80093de:	b299      	uxth	r1, r3
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	225e      	movs	r2, #94	; 0x5e
 80093e4:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	225e      	movs	r2, #94	; 0x5e
 80093ea:	5a9b      	ldrh	r3, [r3, r2]
 80093ec:	b29b      	uxth	r3, r3
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d000      	beq.n	80093f4 <UART_RxISR_8BIT+0x6c>
 80093f2:	e07c      	b.n	80094ee <UART_RxISR_8BIT+0x166>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80093f4:	f3ef 8310 	mrs	r3, PRIMASK
 80093f8:	61bb      	str	r3, [r7, #24]
  return(result);
 80093fa:	69bb      	ldr	r3, [r7, #24]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80093fc:	63bb      	str	r3, [r7, #56]	; 0x38
 80093fe:	2301      	movs	r3, #1
 8009400:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009402:	69fb      	ldr	r3, [r7, #28]
 8009404:	f383 8810 	msr	PRIMASK, r3
}
 8009408:	46c0      	nop			; (mov r8, r8)
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	681a      	ldr	r2, [r3, #0]
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	4938      	ldr	r1, [pc, #224]	; (80094f8 <UART_RxISR_8BIT+0x170>)
 8009416:	400a      	ands	r2, r1
 8009418:	601a      	str	r2, [r3, #0]
 800941a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800941c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800941e:	6a3b      	ldr	r3, [r7, #32]
 8009420:	f383 8810 	msr	PRIMASK, r3
}
 8009424:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009426:	f3ef 8310 	mrs	r3, PRIMASK
 800942a:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800942c:	6a7b      	ldr	r3, [r7, #36]	; 0x24

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800942e:	637b      	str	r3, [r7, #52]	; 0x34
 8009430:	2301      	movs	r3, #1
 8009432:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009434:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009436:	f383 8810 	msr	PRIMASK, r3
}
 800943a:	46c0      	nop			; (mov r8, r8)
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	689a      	ldr	r2, [r3, #8]
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	2101      	movs	r1, #1
 8009448:	438a      	bics	r2, r1
 800944a:	609a      	str	r2, [r3, #8]
 800944c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800944e:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009450:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009452:	f383 8810 	msr	PRIMASK, r3
}
 8009456:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	228c      	movs	r2, #140	; 0x8c
 800945c:	2120      	movs	r1, #32
 800945e:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	2200      	movs	r2, #0
 8009464:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	2200      	movs	r2, #0
 800946a:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009470:	2b01      	cmp	r3, #1
 8009472:	d12f      	bne.n	80094d4 <UART_RxISR_8BIT+0x14c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	2200      	movs	r2, #0
 8009478:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800947a:	f3ef 8310 	mrs	r3, PRIMASK
 800947e:	60fb      	str	r3, [r7, #12]
  return(result);
 8009480:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009482:	633b      	str	r3, [r7, #48]	; 0x30
 8009484:	2301      	movs	r3, #1
 8009486:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009488:	693b      	ldr	r3, [r7, #16]
 800948a:	f383 8810 	msr	PRIMASK, r3
}
 800948e:	46c0      	nop			; (mov r8, r8)
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	681a      	ldr	r2, [r3, #0]
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	2110      	movs	r1, #16
 800949c:	438a      	bics	r2, r1
 800949e:	601a      	str	r2, [r3, #0]
 80094a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094a2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80094a4:	697b      	ldr	r3, [r7, #20]
 80094a6:	f383 8810 	msr	PRIMASK, r3
}
 80094aa:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	69db      	ldr	r3, [r3, #28]
 80094b2:	2210      	movs	r2, #16
 80094b4:	4013      	ands	r3, r2
 80094b6:	2b10      	cmp	r3, #16
 80094b8:	d103      	bne.n	80094c2 <UART_RxISR_8BIT+0x13a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	2210      	movs	r2, #16
 80094c0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	225c      	movs	r2, #92	; 0x5c
 80094c6:	5a9a      	ldrh	r2, [r3, r2]
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	0011      	movs	r1, r2
 80094cc:	0018      	movs	r0, r3
 80094ce:	f7fe fea7 	bl	8008220 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80094d2:	e00c      	b.n	80094ee <UART_RxISR_8BIT+0x166>
        HAL_UART_RxCpltCallback(huart);
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	0018      	movs	r0, r3
 80094d8:	f7fb f896 	bl	8004608 <HAL_UART_RxCpltCallback>
}
 80094dc:	e007      	b.n	80094ee <UART_RxISR_8BIT+0x166>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	699a      	ldr	r2, [r3, #24]
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	2108      	movs	r1, #8
 80094ea:	430a      	orrs	r2, r1
 80094ec:	619a      	str	r2, [r3, #24]
}
 80094ee:	46c0      	nop			; (mov r8, r8)
 80094f0:	46bd      	mov	sp, r7
 80094f2:	b010      	add	sp, #64	; 0x40
 80094f4:	bd80      	pop	{r7, pc}
 80094f6:	46c0      	nop			; (mov r8, r8)
 80094f8:	fffffedf 	.word	0xfffffedf

080094fc <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80094fc:	b580      	push	{r7, lr}
 80094fe:	b090      	sub	sp, #64	; 0x40
 8009500:	af00      	add	r7, sp, #0
 8009502:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8009504:	203e      	movs	r0, #62	; 0x3e
 8009506:	183b      	adds	r3, r7, r0
 8009508:	687a      	ldr	r2, [r7, #4]
 800950a:	2160      	movs	r1, #96	; 0x60
 800950c:	5a52      	ldrh	r2, [r2, r1]
 800950e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	228c      	movs	r2, #140	; 0x8c
 8009514:	589b      	ldr	r3, [r3, r2]
 8009516:	2b22      	cmp	r3, #34	; 0x22
 8009518:	d000      	beq.n	800951c <UART_RxISR_16BIT+0x20>
 800951a:	e09a      	b.n	8009652 <UART_RxISR_16BIT+0x156>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009522:	213c      	movs	r1, #60	; 0x3c
 8009524:	187b      	adds	r3, r7, r1
 8009526:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800952c:	63bb      	str	r3, [r7, #56]	; 0x38
    *tmp = (uint16_t)(uhdata & uhMask);
 800952e:	187b      	adds	r3, r7, r1
 8009530:	183a      	adds	r2, r7, r0
 8009532:	881b      	ldrh	r3, [r3, #0]
 8009534:	8812      	ldrh	r2, [r2, #0]
 8009536:	4013      	ands	r3, r2
 8009538:	b29a      	uxth	r2, r3
 800953a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800953c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009542:	1c9a      	adds	r2, r3, #2
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	225e      	movs	r2, #94	; 0x5e
 800954c:	5a9b      	ldrh	r3, [r3, r2]
 800954e:	b29b      	uxth	r3, r3
 8009550:	3b01      	subs	r3, #1
 8009552:	b299      	uxth	r1, r3
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	225e      	movs	r2, #94	; 0x5e
 8009558:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	225e      	movs	r2, #94	; 0x5e
 800955e:	5a9b      	ldrh	r3, [r3, r2]
 8009560:	b29b      	uxth	r3, r3
 8009562:	2b00      	cmp	r3, #0
 8009564:	d000      	beq.n	8009568 <UART_RxISR_16BIT+0x6c>
 8009566:	e07c      	b.n	8009662 <UART_RxISR_16BIT+0x166>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009568:	f3ef 8310 	mrs	r3, PRIMASK
 800956c:	617b      	str	r3, [r7, #20]
  return(result);
 800956e:	697b      	ldr	r3, [r7, #20]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009570:	637b      	str	r3, [r7, #52]	; 0x34
 8009572:	2301      	movs	r3, #1
 8009574:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009576:	69bb      	ldr	r3, [r7, #24]
 8009578:	f383 8810 	msr	PRIMASK, r3
}
 800957c:	46c0      	nop			; (mov r8, r8)
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	681a      	ldr	r2, [r3, #0]
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	4938      	ldr	r1, [pc, #224]	; (800966c <UART_RxISR_16BIT+0x170>)
 800958a:	400a      	ands	r2, r1
 800958c:	601a      	str	r2, [r3, #0]
 800958e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009590:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009592:	69fb      	ldr	r3, [r7, #28]
 8009594:	f383 8810 	msr	PRIMASK, r3
}
 8009598:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800959a:	f3ef 8310 	mrs	r3, PRIMASK
 800959e:	623b      	str	r3, [r7, #32]
  return(result);
 80095a0:	6a3b      	ldr	r3, [r7, #32]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80095a2:	633b      	str	r3, [r7, #48]	; 0x30
 80095a4:	2301      	movs	r3, #1
 80095a6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80095a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095aa:	f383 8810 	msr	PRIMASK, r3
}
 80095ae:	46c0      	nop			; (mov r8, r8)
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	689a      	ldr	r2, [r3, #8]
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	2101      	movs	r1, #1
 80095bc:	438a      	bics	r2, r1
 80095be:	609a      	str	r2, [r3, #8]
 80095c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095c2:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80095c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095c6:	f383 8810 	msr	PRIMASK, r3
}
 80095ca:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	228c      	movs	r2, #140	; 0x8c
 80095d0:	2120      	movs	r1, #32
 80095d2:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	2200      	movs	r2, #0
 80095d8:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	2200      	movs	r2, #0
 80095de:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80095e4:	2b01      	cmp	r3, #1
 80095e6:	d12f      	bne.n	8009648 <UART_RxISR_16BIT+0x14c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	2200      	movs	r2, #0
 80095ec:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80095ee:	f3ef 8310 	mrs	r3, PRIMASK
 80095f2:	60bb      	str	r3, [r7, #8]
  return(result);
 80095f4:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80095f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80095f8:	2301      	movs	r3, #1
 80095fa:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	f383 8810 	msr	PRIMASK, r3
}
 8009602:	46c0      	nop			; (mov r8, r8)
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	681a      	ldr	r2, [r3, #0]
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	2110      	movs	r1, #16
 8009610:	438a      	bics	r2, r1
 8009612:	601a      	str	r2, [r3, #0]
 8009614:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009616:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009618:	693b      	ldr	r3, [r7, #16]
 800961a:	f383 8810 	msr	PRIMASK, r3
}
 800961e:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	69db      	ldr	r3, [r3, #28]
 8009626:	2210      	movs	r2, #16
 8009628:	4013      	ands	r3, r2
 800962a:	2b10      	cmp	r3, #16
 800962c:	d103      	bne.n	8009636 <UART_RxISR_16BIT+0x13a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	2210      	movs	r2, #16
 8009634:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	225c      	movs	r2, #92	; 0x5c
 800963a:	5a9a      	ldrh	r2, [r3, r2]
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	0011      	movs	r1, r2
 8009640:	0018      	movs	r0, r3
 8009642:	f7fe fded 	bl	8008220 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009646:	e00c      	b.n	8009662 <UART_RxISR_16BIT+0x166>
        HAL_UART_RxCpltCallback(huart);
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	0018      	movs	r0, r3
 800964c:	f7fa ffdc 	bl	8004608 <HAL_UART_RxCpltCallback>
}
 8009650:	e007      	b.n	8009662 <UART_RxISR_16BIT+0x166>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	699a      	ldr	r2, [r3, #24]
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	2108      	movs	r1, #8
 800965e:	430a      	orrs	r2, r1
 8009660:	619a      	str	r2, [r3, #24]
}
 8009662:	46c0      	nop			; (mov r8, r8)
 8009664:	46bd      	mov	sp, r7
 8009666:	b010      	add	sp, #64	; 0x40
 8009668:	bd80      	pop	{r7, pc}
 800966a:	46c0      	nop			; (mov r8, r8)
 800966c:	fffffedf 	.word	0xfffffedf

08009670 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009670:	b580      	push	{r7, lr}
 8009672:	b09c      	sub	sp, #112	; 0x70
 8009674:	af00      	add	r7, sp, #0
 8009676:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8009678:	236a      	movs	r3, #106	; 0x6a
 800967a:	18fb      	adds	r3, r7, r3
 800967c:	687a      	ldr	r2, [r7, #4]
 800967e:	2160      	movs	r1, #96	; 0x60
 8009680:	5a52      	ldrh	r2, [r2, r1]
 8009682:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	69db      	ldr	r3, [r3, #28]
 800968a:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	689b      	ldr	r3, [r3, #8]
 800969a:	663b      	str	r3, [r7, #96]	; 0x60

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	228c      	movs	r2, #140	; 0x8c
 80096a0:	589b      	ldr	r3, [r3, r2]
 80096a2:	2b22      	cmp	r3, #34	; 0x22
 80096a4:	d000      	beq.n	80096a8 <UART_RxISR_8BIT_FIFOEN+0x38>
 80096a6:	e144      	b.n	8009932 <UART_RxISR_8BIT_FIFOEN+0x2c2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80096a8:	235e      	movs	r3, #94	; 0x5e
 80096aa:	18fb      	adds	r3, r7, r3
 80096ac:	687a      	ldr	r2, [r7, #4]
 80096ae:	2168      	movs	r1, #104	; 0x68
 80096b0:	5a52      	ldrh	r2, [r2, r1]
 80096b2:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80096b4:	e0eb      	b.n	800988e <UART_RxISR_8BIT_FIFOEN+0x21e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80096bc:	215c      	movs	r1, #92	; 0x5c
 80096be:	187b      	adds	r3, r7, r1
 80096c0:	801a      	strh	r2, [r3, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80096c2:	187b      	adds	r3, r7, r1
 80096c4:	881b      	ldrh	r3, [r3, #0]
 80096c6:	b2da      	uxtb	r2, r3
 80096c8:	236a      	movs	r3, #106	; 0x6a
 80096ca:	18fb      	adds	r3, r7, r3
 80096cc:	881b      	ldrh	r3, [r3, #0]
 80096ce:	b2d9      	uxtb	r1, r3
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80096d4:	400a      	ands	r2, r1
 80096d6:	b2d2      	uxtb	r2, r2
 80096d8:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80096de:	1c5a      	adds	r2, r3, #1
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	225e      	movs	r2, #94	; 0x5e
 80096e8:	5a9b      	ldrh	r3, [r3, r2]
 80096ea:	b29b      	uxth	r3, r3
 80096ec:	3b01      	subs	r3, #1
 80096ee:	b299      	uxth	r1, r3
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	225e      	movs	r2, #94	; 0x5e
 80096f4:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	69db      	ldr	r3, [r3, #28]
 80096fc:	66fb      	str	r3, [r7, #108]	; 0x6c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80096fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009700:	2207      	movs	r2, #7
 8009702:	4013      	ands	r3, r2
 8009704:	d049      	beq.n	800979a <UART_RxISR_8BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009706:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009708:	2201      	movs	r2, #1
 800970a:	4013      	ands	r3, r2
 800970c:	d010      	beq.n	8009730 <UART_RxISR_8BIT_FIFOEN+0xc0>
 800970e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8009710:	2380      	movs	r3, #128	; 0x80
 8009712:	005b      	lsls	r3, r3, #1
 8009714:	4013      	ands	r3, r2
 8009716:	d00b      	beq.n	8009730 <UART_RxISR_8BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	2201      	movs	r2, #1
 800971e:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	2290      	movs	r2, #144	; 0x90
 8009724:	589b      	ldr	r3, [r3, r2]
 8009726:	2201      	movs	r2, #1
 8009728:	431a      	orrs	r2, r3
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	2190      	movs	r1, #144	; 0x90
 800972e:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009730:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009732:	2202      	movs	r2, #2
 8009734:	4013      	ands	r3, r2
 8009736:	d00f      	beq.n	8009758 <UART_RxISR_8BIT_FIFOEN+0xe8>
 8009738:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800973a:	2201      	movs	r2, #1
 800973c:	4013      	ands	r3, r2
 800973e:	d00b      	beq.n	8009758 <UART_RxISR_8BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	2202      	movs	r2, #2
 8009746:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	2290      	movs	r2, #144	; 0x90
 800974c:	589b      	ldr	r3, [r3, r2]
 800974e:	2204      	movs	r2, #4
 8009750:	431a      	orrs	r2, r3
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	2190      	movs	r1, #144	; 0x90
 8009756:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009758:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800975a:	2204      	movs	r2, #4
 800975c:	4013      	ands	r3, r2
 800975e:	d00f      	beq.n	8009780 <UART_RxISR_8BIT_FIFOEN+0x110>
 8009760:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009762:	2201      	movs	r2, #1
 8009764:	4013      	ands	r3, r2
 8009766:	d00b      	beq.n	8009780 <UART_RxISR_8BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	2204      	movs	r2, #4
 800976e:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	2290      	movs	r2, #144	; 0x90
 8009774:	589b      	ldr	r3, [r3, r2]
 8009776:	2202      	movs	r2, #2
 8009778:	431a      	orrs	r2, r3
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	2190      	movs	r1, #144	; 0x90
 800977e:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	2290      	movs	r2, #144	; 0x90
 8009784:	589b      	ldr	r3, [r3, r2]
 8009786:	2b00      	cmp	r3, #0
 8009788:	d007      	beq.n	800979a <UART_RxISR_8BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	0018      	movs	r0, r3
 800978e:	f7fa ff67 	bl	8004660 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	2290      	movs	r2, #144	; 0x90
 8009796:	2100      	movs	r1, #0
 8009798:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	225e      	movs	r2, #94	; 0x5e
 800979e:	5a9b      	ldrh	r3, [r3, r2]
 80097a0:	b29b      	uxth	r3, r3
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d173      	bne.n	800988e <UART_RxISR_8BIT_FIFOEN+0x21e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80097a6:	f3ef 8310 	mrs	r3, PRIMASK
 80097aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 80097ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80097ae:	65bb      	str	r3, [r7, #88]	; 0x58
 80097b0:	2301      	movs	r3, #1
 80097b2:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80097b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097b6:	f383 8810 	msr	PRIMASK, r3
}
 80097ba:	46c0      	nop			; (mov r8, r8)
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	681a      	ldr	r2, [r3, #0]
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	4961      	ldr	r1, [pc, #388]	; (800994c <UART_RxISR_8BIT_FIFOEN+0x2dc>)
 80097c8:	400a      	ands	r2, r1
 80097ca:	601a      	str	r2, [r3, #0]
 80097cc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80097ce:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80097d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80097d2:	f383 8810 	msr	PRIMASK, r3
}
 80097d6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80097d8:	f3ef 8310 	mrs	r3, PRIMASK
 80097dc:	63bb      	str	r3, [r7, #56]	; 0x38
  return(result);
 80097de:	6bbb      	ldr	r3, [r7, #56]	; 0x38

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80097e0:	657b      	str	r3, [r7, #84]	; 0x54
 80097e2:	2301      	movs	r3, #1
 80097e4:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80097e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80097e8:	f383 8810 	msr	PRIMASK, r3
}
 80097ec:	46c0      	nop			; (mov r8, r8)
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	689a      	ldr	r2, [r3, #8]
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	4955      	ldr	r1, [pc, #340]	; (8009950 <UART_RxISR_8BIT_FIFOEN+0x2e0>)
 80097fa:	400a      	ands	r2, r1
 80097fc:	609a      	str	r2, [r3, #8]
 80097fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009800:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009802:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009804:	f383 8810 	msr	PRIMASK, r3
}
 8009808:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	228c      	movs	r2, #140	; 0x8c
 800980e:	2120      	movs	r1, #32
 8009810:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	2200      	movs	r2, #0
 8009816:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	2200      	movs	r2, #0
 800981c:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009822:	2b01      	cmp	r3, #1
 8009824:	d12f      	bne.n	8009886 <UART_RxISR_8BIT_FIFOEN+0x216>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	2200      	movs	r2, #0
 800982a:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800982c:	f3ef 8310 	mrs	r3, PRIMASK
 8009830:	623b      	str	r3, [r7, #32]
  return(result);
 8009832:	6a3b      	ldr	r3, [r7, #32]

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009834:	653b      	str	r3, [r7, #80]	; 0x50
 8009836:	2301      	movs	r3, #1
 8009838:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800983a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800983c:	f383 8810 	msr	PRIMASK, r3
}
 8009840:	46c0      	nop			; (mov r8, r8)
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	681a      	ldr	r2, [r3, #0]
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	2110      	movs	r1, #16
 800984e:	438a      	bics	r2, r1
 8009850:	601a      	str	r2, [r3, #0]
 8009852:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009854:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009856:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009858:	f383 8810 	msr	PRIMASK, r3
}
 800985c:	46c0      	nop			; (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	69db      	ldr	r3, [r3, #28]
 8009864:	2210      	movs	r2, #16
 8009866:	4013      	ands	r3, r2
 8009868:	2b10      	cmp	r3, #16
 800986a:	d103      	bne.n	8009874 <UART_RxISR_8BIT_FIFOEN+0x204>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	2210      	movs	r2, #16
 8009872:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	225c      	movs	r2, #92	; 0x5c
 8009878:	5a9a      	ldrh	r2, [r3, r2]
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	0011      	movs	r1, r2
 800987e:	0018      	movs	r0, r3
 8009880:	f7fe fcce 	bl	8008220 <HAL_UARTEx_RxEventCallback>
 8009884:	e003      	b.n	800988e <UART_RxISR_8BIT_FIFOEN+0x21e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	0018      	movs	r0, r3
 800988a:	f7fa febd 	bl	8004608 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800988e:	235e      	movs	r3, #94	; 0x5e
 8009890:	18fb      	adds	r3, r7, r3
 8009892:	881b      	ldrh	r3, [r3, #0]
 8009894:	2b00      	cmp	r3, #0
 8009896:	d004      	beq.n	80098a2 <UART_RxISR_8BIT_FIFOEN+0x232>
 8009898:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800989a:	2220      	movs	r2, #32
 800989c:	4013      	ands	r3, r2
 800989e:	d000      	beq.n	80098a2 <UART_RxISR_8BIT_FIFOEN+0x232>
 80098a0:	e709      	b.n	80096b6 <UART_RxISR_8BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80098a2:	204e      	movs	r0, #78	; 0x4e
 80098a4:	183b      	adds	r3, r7, r0
 80098a6:	687a      	ldr	r2, [r7, #4]
 80098a8:	215e      	movs	r1, #94	; 0x5e
 80098aa:	5a52      	ldrh	r2, [r2, r1]
 80098ac:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80098ae:	0001      	movs	r1, r0
 80098b0:	187b      	adds	r3, r7, r1
 80098b2:	881b      	ldrh	r3, [r3, #0]
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d044      	beq.n	8009942 <UART_RxISR_8BIT_FIFOEN+0x2d2>
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	2268      	movs	r2, #104	; 0x68
 80098bc:	5a9b      	ldrh	r3, [r3, r2]
 80098be:	187a      	adds	r2, r7, r1
 80098c0:	8812      	ldrh	r2, [r2, #0]
 80098c2:	429a      	cmp	r2, r3
 80098c4:	d23d      	bcs.n	8009942 <UART_RxISR_8BIT_FIFOEN+0x2d2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80098c6:	f3ef 8310 	mrs	r3, PRIMASK
 80098ca:	60bb      	str	r3, [r7, #8]
  return(result);
 80098cc:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80098ce:	64bb      	str	r3, [r7, #72]	; 0x48
 80098d0:	2301      	movs	r3, #1
 80098d2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	f383 8810 	msr	PRIMASK, r3
}
 80098da:	46c0      	nop			; (mov r8, r8)
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	689a      	ldr	r2, [r3, #8]
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	491b      	ldr	r1, [pc, #108]	; (8009954 <UART_RxISR_8BIT_FIFOEN+0x2e4>)
 80098e8:	400a      	ands	r2, r1
 80098ea:	609a      	str	r2, [r3, #8]
 80098ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80098ee:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80098f0:	693b      	ldr	r3, [r7, #16]
 80098f2:	f383 8810 	msr	PRIMASK, r3
}
 80098f6:	46c0      	nop			; (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	4a17      	ldr	r2, [pc, #92]	; (8009958 <UART_RxISR_8BIT_FIFOEN+0x2e8>)
 80098fc:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80098fe:	f3ef 8310 	mrs	r3, PRIMASK
 8009902:	617b      	str	r3, [r7, #20]
  return(result);
 8009904:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009906:	647b      	str	r3, [r7, #68]	; 0x44
 8009908:	2301      	movs	r3, #1
 800990a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800990c:	69bb      	ldr	r3, [r7, #24]
 800990e:	f383 8810 	msr	PRIMASK, r3
}
 8009912:	46c0      	nop			; (mov r8, r8)
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	681a      	ldr	r2, [r3, #0]
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	2120      	movs	r1, #32
 8009920:	430a      	orrs	r2, r1
 8009922:	601a      	str	r2, [r3, #0]
 8009924:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009926:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009928:	69fb      	ldr	r3, [r7, #28]
 800992a:	f383 8810 	msr	PRIMASK, r3
}
 800992e:	46c0      	nop			; (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009930:	e007      	b.n	8009942 <UART_RxISR_8BIT_FIFOEN+0x2d2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	699a      	ldr	r2, [r3, #24]
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	2108      	movs	r1, #8
 800993e:	430a      	orrs	r2, r1
 8009940:	619a      	str	r2, [r3, #24]
}
 8009942:	46c0      	nop			; (mov r8, r8)
 8009944:	46bd      	mov	sp, r7
 8009946:	b01c      	add	sp, #112	; 0x70
 8009948:	bd80      	pop	{r7, pc}
 800994a:	46c0      	nop			; (mov r8, r8)
 800994c:	fffffeff 	.word	0xfffffeff
 8009950:	effffffe 	.word	0xeffffffe
 8009954:	efffffff 	.word	0xefffffff
 8009958:	08009389 	.word	0x08009389

0800995c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800995c:	b580      	push	{r7, lr}
 800995e:	b09e      	sub	sp, #120	; 0x78
 8009960:	af00      	add	r7, sp, #0
 8009962:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8009964:	2372      	movs	r3, #114	; 0x72
 8009966:	18fb      	adds	r3, r7, r3
 8009968:	687a      	ldr	r2, [r7, #4]
 800996a:	2160      	movs	r1, #96	; 0x60
 800996c:	5a52      	ldrh	r2, [r2, r1]
 800996e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	69db      	ldr	r3, [r3, #28]
 8009976:	677b      	str	r3, [r7, #116]	; 0x74
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	689b      	ldr	r3, [r3, #8]
 8009986:	66bb      	str	r3, [r7, #104]	; 0x68

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	228c      	movs	r2, #140	; 0x8c
 800998c:	589b      	ldr	r3, [r3, r2]
 800998e:	2b22      	cmp	r3, #34	; 0x22
 8009990:	d000      	beq.n	8009994 <UART_RxISR_16BIT_FIFOEN+0x38>
 8009992:	e144      	b.n	8009c1e <UART_RxISR_16BIT_FIFOEN+0x2c2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009994:	2366      	movs	r3, #102	; 0x66
 8009996:	18fb      	adds	r3, r7, r3
 8009998:	687a      	ldr	r2, [r7, #4]
 800999a:	2168      	movs	r1, #104	; 0x68
 800999c:	5a52      	ldrh	r2, [r2, r1]
 800999e:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80099a0:	e0eb      	b.n	8009b7a <UART_RxISR_16BIT_FIFOEN+0x21e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80099a8:	2164      	movs	r1, #100	; 0x64
 80099aa:	187b      	adds	r3, r7, r1
 80099ac:	801a      	strh	r2, [r3, #0]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80099b2:	663b      	str	r3, [r7, #96]	; 0x60
      *tmp = (uint16_t)(uhdata & uhMask);
 80099b4:	187b      	adds	r3, r7, r1
 80099b6:	2272      	movs	r2, #114	; 0x72
 80099b8:	18ba      	adds	r2, r7, r2
 80099ba:	881b      	ldrh	r3, [r3, #0]
 80099bc:	8812      	ldrh	r2, [r2, #0]
 80099be:	4013      	ands	r3, r2
 80099c0:	b29a      	uxth	r2, r3
 80099c2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80099c4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80099ca:	1c9a      	adds	r2, r3, #2
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	225e      	movs	r2, #94	; 0x5e
 80099d4:	5a9b      	ldrh	r3, [r3, r2]
 80099d6:	b29b      	uxth	r3, r3
 80099d8:	3b01      	subs	r3, #1
 80099da:	b299      	uxth	r1, r3
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	225e      	movs	r2, #94	; 0x5e
 80099e0:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	69db      	ldr	r3, [r3, #28]
 80099e8:	677b      	str	r3, [r7, #116]	; 0x74

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80099ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80099ec:	2207      	movs	r2, #7
 80099ee:	4013      	ands	r3, r2
 80099f0:	d049      	beq.n	8009a86 <UART_RxISR_16BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80099f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80099f4:	2201      	movs	r2, #1
 80099f6:	4013      	ands	r3, r2
 80099f8:	d010      	beq.n	8009a1c <UART_RxISR_16BIT_FIFOEN+0xc0>
 80099fa:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80099fc:	2380      	movs	r3, #128	; 0x80
 80099fe:	005b      	lsls	r3, r3, #1
 8009a00:	4013      	ands	r3, r2
 8009a02:	d00b      	beq.n	8009a1c <UART_RxISR_16BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	2201      	movs	r2, #1
 8009a0a:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	2290      	movs	r2, #144	; 0x90
 8009a10:	589b      	ldr	r3, [r3, r2]
 8009a12:	2201      	movs	r2, #1
 8009a14:	431a      	orrs	r2, r3
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	2190      	movs	r1, #144	; 0x90
 8009a1a:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009a1c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009a1e:	2202      	movs	r2, #2
 8009a20:	4013      	ands	r3, r2
 8009a22:	d00f      	beq.n	8009a44 <UART_RxISR_16BIT_FIFOEN+0xe8>
 8009a24:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009a26:	2201      	movs	r2, #1
 8009a28:	4013      	ands	r3, r2
 8009a2a:	d00b      	beq.n	8009a44 <UART_RxISR_16BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	2202      	movs	r2, #2
 8009a32:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	2290      	movs	r2, #144	; 0x90
 8009a38:	589b      	ldr	r3, [r3, r2]
 8009a3a:	2204      	movs	r2, #4
 8009a3c:	431a      	orrs	r2, r3
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	2190      	movs	r1, #144	; 0x90
 8009a42:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009a44:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009a46:	2204      	movs	r2, #4
 8009a48:	4013      	ands	r3, r2
 8009a4a:	d00f      	beq.n	8009a6c <UART_RxISR_16BIT_FIFOEN+0x110>
 8009a4c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009a4e:	2201      	movs	r2, #1
 8009a50:	4013      	ands	r3, r2
 8009a52:	d00b      	beq.n	8009a6c <UART_RxISR_16BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	2204      	movs	r2, #4
 8009a5a:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	2290      	movs	r2, #144	; 0x90
 8009a60:	589b      	ldr	r3, [r3, r2]
 8009a62:	2202      	movs	r2, #2
 8009a64:	431a      	orrs	r2, r3
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	2190      	movs	r1, #144	; 0x90
 8009a6a:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	2290      	movs	r2, #144	; 0x90
 8009a70:	589b      	ldr	r3, [r3, r2]
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d007      	beq.n	8009a86 <UART_RxISR_16BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	0018      	movs	r0, r3
 8009a7a:	f7fa fdf1 	bl	8004660 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	2290      	movs	r2, #144	; 0x90
 8009a82:	2100      	movs	r1, #0
 8009a84:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	225e      	movs	r2, #94	; 0x5e
 8009a8a:	5a9b      	ldrh	r3, [r3, r2]
 8009a8c:	b29b      	uxth	r3, r3
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d173      	bne.n	8009b7a <UART_RxISR_16BIT_FIFOEN+0x21e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009a92:	f3ef 8310 	mrs	r3, PRIMASK
 8009a96:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8009a98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009a9a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009a9c:	2301      	movs	r3, #1
 8009a9e:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009aa0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009aa2:	f383 8810 	msr	PRIMASK, r3
}
 8009aa6:	46c0      	nop			; (mov r8, r8)
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	681a      	ldr	r2, [r3, #0]
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	4961      	ldr	r1, [pc, #388]	; (8009c38 <UART_RxISR_16BIT_FIFOEN+0x2dc>)
 8009ab4:	400a      	ands	r2, r1
 8009ab6:	601a      	str	r2, [r3, #0]
 8009ab8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009aba:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009abc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009abe:	f383 8810 	msr	PRIMASK, r3
}
 8009ac2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009ac4:	f3ef 8310 	mrs	r3, PRIMASK
 8009ac8:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8009aca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009acc:	65bb      	str	r3, [r7, #88]	; 0x58
 8009ace:	2301      	movs	r3, #1
 8009ad0:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009ad2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009ad4:	f383 8810 	msr	PRIMASK, r3
}
 8009ad8:	46c0      	nop			; (mov r8, r8)
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	689a      	ldr	r2, [r3, #8]
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	4955      	ldr	r1, [pc, #340]	; (8009c3c <UART_RxISR_16BIT_FIFOEN+0x2e0>)
 8009ae6:	400a      	ands	r2, r1
 8009ae8:	609a      	str	r2, [r3, #8]
 8009aea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009aec:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009aee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009af0:	f383 8810 	msr	PRIMASK, r3
}
 8009af4:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	228c      	movs	r2, #140	; 0x8c
 8009afa:	2120      	movs	r1, #32
 8009afc:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	2200      	movs	r2, #0
 8009b02:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	2200      	movs	r2, #0
 8009b08:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009b0e:	2b01      	cmp	r3, #1
 8009b10:	d12f      	bne.n	8009b72 <UART_RxISR_16BIT_FIFOEN+0x216>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	2200      	movs	r2, #0
 8009b16:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009b18:	f3ef 8310 	mrs	r3, PRIMASK
 8009b1c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8009b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009b20:	657b      	str	r3, [r7, #84]	; 0x54
 8009b22:	2301      	movs	r3, #1
 8009b24:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009b26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b28:	f383 8810 	msr	PRIMASK, r3
}
 8009b2c:	46c0      	nop			; (mov r8, r8)
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	681a      	ldr	r2, [r3, #0]
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	2110      	movs	r1, #16
 8009b3a:	438a      	bics	r2, r1
 8009b3c:	601a      	str	r2, [r3, #0]
 8009b3e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009b40:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009b42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b44:	f383 8810 	msr	PRIMASK, r3
}
 8009b48:	46c0      	nop			; (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	69db      	ldr	r3, [r3, #28]
 8009b50:	2210      	movs	r2, #16
 8009b52:	4013      	ands	r3, r2
 8009b54:	2b10      	cmp	r3, #16
 8009b56:	d103      	bne.n	8009b60 <UART_RxISR_16BIT_FIFOEN+0x204>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	2210      	movs	r2, #16
 8009b5e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	225c      	movs	r2, #92	; 0x5c
 8009b64:	5a9a      	ldrh	r2, [r3, r2]
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	0011      	movs	r1, r2
 8009b6a:	0018      	movs	r0, r3
 8009b6c:	f7fe fb58 	bl	8008220 <HAL_UARTEx_RxEventCallback>
 8009b70:	e003      	b.n	8009b7a <UART_RxISR_16BIT_FIFOEN+0x21e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	0018      	movs	r0, r3
 8009b76:	f7fa fd47 	bl	8004608 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009b7a:	2366      	movs	r3, #102	; 0x66
 8009b7c:	18fb      	adds	r3, r7, r3
 8009b7e:	881b      	ldrh	r3, [r3, #0]
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d004      	beq.n	8009b8e <UART_RxISR_16BIT_FIFOEN+0x232>
 8009b84:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009b86:	2220      	movs	r2, #32
 8009b88:	4013      	ands	r3, r2
 8009b8a:	d000      	beq.n	8009b8e <UART_RxISR_16BIT_FIFOEN+0x232>
 8009b8c:	e709      	b.n	80099a2 <UART_RxISR_16BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009b8e:	2052      	movs	r0, #82	; 0x52
 8009b90:	183b      	adds	r3, r7, r0
 8009b92:	687a      	ldr	r2, [r7, #4]
 8009b94:	215e      	movs	r1, #94	; 0x5e
 8009b96:	5a52      	ldrh	r2, [r2, r1]
 8009b98:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009b9a:	0001      	movs	r1, r0
 8009b9c:	187b      	adds	r3, r7, r1
 8009b9e:	881b      	ldrh	r3, [r3, #0]
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d044      	beq.n	8009c2e <UART_RxISR_16BIT_FIFOEN+0x2d2>
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	2268      	movs	r2, #104	; 0x68
 8009ba8:	5a9b      	ldrh	r3, [r3, r2]
 8009baa:	187a      	adds	r2, r7, r1
 8009bac:	8812      	ldrh	r2, [r2, #0]
 8009bae:	429a      	cmp	r2, r3
 8009bb0:	d23d      	bcs.n	8009c2e <UART_RxISR_16BIT_FIFOEN+0x2d2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009bb2:	f3ef 8310 	mrs	r3, PRIMASK
 8009bb6:	60fb      	str	r3, [r7, #12]
  return(result);
 8009bb8:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009bba:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009bbc:	2301      	movs	r3, #1
 8009bbe:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009bc0:	693b      	ldr	r3, [r7, #16]
 8009bc2:	f383 8810 	msr	PRIMASK, r3
}
 8009bc6:	46c0      	nop			; (mov r8, r8)
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	689a      	ldr	r2, [r3, #8]
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	491b      	ldr	r1, [pc, #108]	; (8009c40 <UART_RxISR_16BIT_FIFOEN+0x2e4>)
 8009bd4:	400a      	ands	r2, r1
 8009bd6:	609a      	str	r2, [r3, #8]
 8009bd8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009bda:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009bdc:	697b      	ldr	r3, [r7, #20]
 8009bde:	f383 8810 	msr	PRIMASK, r3
}
 8009be2:	46c0      	nop			; (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	4a17      	ldr	r2, [pc, #92]	; (8009c44 <UART_RxISR_16BIT_FIFOEN+0x2e8>)
 8009be8:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009bea:	f3ef 8310 	mrs	r3, PRIMASK
 8009bee:	61bb      	str	r3, [r7, #24]
  return(result);
 8009bf0:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009bf2:	64bb      	str	r3, [r7, #72]	; 0x48
 8009bf4:	2301      	movs	r3, #1
 8009bf6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009bf8:	69fb      	ldr	r3, [r7, #28]
 8009bfa:	f383 8810 	msr	PRIMASK, r3
}
 8009bfe:	46c0      	nop			; (mov r8, r8)
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	681a      	ldr	r2, [r3, #0]
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	2120      	movs	r1, #32
 8009c0c:	430a      	orrs	r2, r1
 8009c0e:	601a      	str	r2, [r3, #0]
 8009c10:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009c12:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009c14:	6a3b      	ldr	r3, [r7, #32]
 8009c16:	f383 8810 	msr	PRIMASK, r3
}
 8009c1a:	46c0      	nop			; (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009c1c:	e007      	b.n	8009c2e <UART_RxISR_16BIT_FIFOEN+0x2d2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	699a      	ldr	r2, [r3, #24]
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	2108      	movs	r1, #8
 8009c2a:	430a      	orrs	r2, r1
 8009c2c:	619a      	str	r2, [r3, #24]
}
 8009c2e:	46c0      	nop			; (mov r8, r8)
 8009c30:	46bd      	mov	sp, r7
 8009c32:	b01e      	add	sp, #120	; 0x78
 8009c34:	bd80      	pop	{r7, pc}
 8009c36:	46c0      	nop			; (mov r8, r8)
 8009c38:	fffffeff 	.word	0xfffffeff
 8009c3c:	effffffe 	.word	0xeffffffe
 8009c40:	efffffff 	.word	0xefffffff
 8009c44:	080094fd 	.word	0x080094fd

08009c48 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009c48:	b580      	push	{r7, lr}
 8009c4a:	b082      	sub	sp, #8
 8009c4c:	af00      	add	r7, sp, #0
 8009c4e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009c50:	46c0      	nop			; (mov r8, r8)
 8009c52:	46bd      	mov	sp, r7
 8009c54:	b002      	add	sp, #8
 8009c56:	bd80      	pop	{r7, pc}

08009c58 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8009c58:	b580      	push	{r7, lr}
 8009c5a:	b082      	sub	sp, #8
 8009c5c:	af00      	add	r7, sp, #0
 8009c5e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009c60:	46c0      	nop			; (mov r8, r8)
 8009c62:	46bd      	mov	sp, r7
 8009c64:	b002      	add	sp, #8
 8009c66:	bd80      	pop	{r7, pc}

08009c68 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8009c68:	b580      	push	{r7, lr}
 8009c6a:	b082      	sub	sp, #8
 8009c6c:	af00      	add	r7, sp, #0
 8009c6e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009c70:	46c0      	nop			; (mov r8, r8)
 8009c72:	46bd      	mov	sp, r7
 8009c74:	b002      	add	sp, #8
 8009c76:	bd80      	pop	{r7, pc}

08009c78 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009c78:	b580      	push	{r7, lr}
 8009c7a:	b084      	sub	sp, #16
 8009c7c:	af00      	add	r7, sp, #0
 8009c7e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	2284      	movs	r2, #132	; 0x84
 8009c84:	5c9b      	ldrb	r3, [r3, r2]
 8009c86:	2b01      	cmp	r3, #1
 8009c88:	d101      	bne.n	8009c8e <HAL_UARTEx_DisableFifoMode+0x16>
 8009c8a:	2302      	movs	r3, #2
 8009c8c:	e027      	b.n	8009cde <HAL_UARTEx_DisableFifoMode+0x66>
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	2284      	movs	r2, #132	; 0x84
 8009c92:	2101      	movs	r1, #1
 8009c94:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	2288      	movs	r2, #136	; 0x88
 8009c9a:	2124      	movs	r1, #36	; 0x24
 8009c9c:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	681a      	ldr	r2, [r3, #0]
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	2101      	movs	r1, #1
 8009cb2:	438a      	bics	r2, r1
 8009cb4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	4a0b      	ldr	r2, [pc, #44]	; (8009ce8 <HAL_UARTEx_DisableFifoMode+0x70>)
 8009cba:	4013      	ands	r3, r2
 8009cbc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	2200      	movs	r2, #0
 8009cc2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	68fa      	ldr	r2, [r7, #12]
 8009cca:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	2288      	movs	r2, #136	; 0x88
 8009cd0:	2120      	movs	r1, #32
 8009cd2:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	2284      	movs	r2, #132	; 0x84
 8009cd8:	2100      	movs	r1, #0
 8009cda:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009cdc:	2300      	movs	r3, #0
}
 8009cde:	0018      	movs	r0, r3
 8009ce0:	46bd      	mov	sp, r7
 8009ce2:	b004      	add	sp, #16
 8009ce4:	bd80      	pop	{r7, pc}
 8009ce6:	46c0      	nop			; (mov r8, r8)
 8009ce8:	dfffffff 	.word	0xdfffffff

08009cec <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009cec:	b580      	push	{r7, lr}
 8009cee:	b084      	sub	sp, #16
 8009cf0:	af00      	add	r7, sp, #0
 8009cf2:	6078      	str	r0, [r7, #4]
 8009cf4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	2284      	movs	r2, #132	; 0x84
 8009cfa:	5c9b      	ldrb	r3, [r3, r2]
 8009cfc:	2b01      	cmp	r3, #1
 8009cfe:	d101      	bne.n	8009d04 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009d00:	2302      	movs	r3, #2
 8009d02:	e02e      	b.n	8009d62 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	2284      	movs	r2, #132	; 0x84
 8009d08:	2101      	movs	r1, #1
 8009d0a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	2288      	movs	r2, #136	; 0x88
 8009d10:	2124      	movs	r1, #36	; 0x24
 8009d12:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	681a      	ldr	r2, [r3, #0]
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	2101      	movs	r1, #1
 8009d28:	438a      	bics	r2, r1
 8009d2a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	689b      	ldr	r3, [r3, #8]
 8009d32:	00db      	lsls	r3, r3, #3
 8009d34:	08d9      	lsrs	r1, r3, #3
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	683a      	ldr	r2, [r7, #0]
 8009d3c:	430a      	orrs	r2, r1
 8009d3e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	0018      	movs	r0, r3
 8009d44:	f000 f854 	bl	8009df0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	68fa      	ldr	r2, [r7, #12]
 8009d4e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	2288      	movs	r2, #136	; 0x88
 8009d54:	2120      	movs	r1, #32
 8009d56:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	2284      	movs	r2, #132	; 0x84
 8009d5c:	2100      	movs	r1, #0
 8009d5e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009d60:	2300      	movs	r3, #0
}
 8009d62:	0018      	movs	r0, r3
 8009d64:	46bd      	mov	sp, r7
 8009d66:	b004      	add	sp, #16
 8009d68:	bd80      	pop	{r7, pc}
	...

08009d6c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009d6c:	b580      	push	{r7, lr}
 8009d6e:	b084      	sub	sp, #16
 8009d70:	af00      	add	r7, sp, #0
 8009d72:	6078      	str	r0, [r7, #4]
 8009d74:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	2284      	movs	r2, #132	; 0x84
 8009d7a:	5c9b      	ldrb	r3, [r3, r2]
 8009d7c:	2b01      	cmp	r3, #1
 8009d7e:	d101      	bne.n	8009d84 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009d80:	2302      	movs	r3, #2
 8009d82:	e02f      	b.n	8009de4 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	2284      	movs	r2, #132	; 0x84
 8009d88:	2101      	movs	r1, #1
 8009d8a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	2288      	movs	r2, #136	; 0x88
 8009d90:	2124      	movs	r1, #36	; 0x24
 8009d92:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	681a      	ldr	r2, [r3, #0]
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	2101      	movs	r1, #1
 8009da8:	438a      	bics	r2, r1
 8009daa:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	689b      	ldr	r3, [r3, #8]
 8009db2:	4a0e      	ldr	r2, [pc, #56]	; (8009dec <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8009db4:	4013      	ands	r3, r2
 8009db6:	0019      	movs	r1, r3
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	683a      	ldr	r2, [r7, #0]
 8009dbe:	430a      	orrs	r2, r1
 8009dc0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	0018      	movs	r0, r3
 8009dc6:	f000 f813 	bl	8009df0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	68fa      	ldr	r2, [r7, #12]
 8009dd0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	2288      	movs	r2, #136	; 0x88
 8009dd6:	2120      	movs	r1, #32
 8009dd8:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	2284      	movs	r2, #132	; 0x84
 8009dde:	2100      	movs	r1, #0
 8009de0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009de2:	2300      	movs	r3, #0
}
 8009de4:	0018      	movs	r0, r3
 8009de6:	46bd      	mov	sp, r7
 8009de8:	b004      	add	sp, #16
 8009dea:	bd80      	pop	{r7, pc}
 8009dec:	f1ffffff 	.word	0xf1ffffff

08009df0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009df0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009df2:	b085      	sub	sp, #20
 8009df4:	af00      	add	r7, sp, #0
 8009df6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d108      	bne.n	8009e12 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	226a      	movs	r2, #106	; 0x6a
 8009e04:	2101      	movs	r1, #1
 8009e06:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	2268      	movs	r2, #104	; 0x68
 8009e0c:	2101      	movs	r1, #1
 8009e0e:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009e10:	e043      	b.n	8009e9a <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009e12:	260f      	movs	r6, #15
 8009e14:	19bb      	adds	r3, r7, r6
 8009e16:	2208      	movs	r2, #8
 8009e18:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009e1a:	200e      	movs	r0, #14
 8009e1c:	183b      	adds	r3, r7, r0
 8009e1e:	2208      	movs	r2, #8
 8009e20:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	689b      	ldr	r3, [r3, #8]
 8009e28:	0e5b      	lsrs	r3, r3, #25
 8009e2a:	b2da      	uxtb	r2, r3
 8009e2c:	240d      	movs	r4, #13
 8009e2e:	193b      	adds	r3, r7, r4
 8009e30:	2107      	movs	r1, #7
 8009e32:	400a      	ands	r2, r1
 8009e34:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	689b      	ldr	r3, [r3, #8]
 8009e3c:	0f5b      	lsrs	r3, r3, #29
 8009e3e:	b2da      	uxtb	r2, r3
 8009e40:	250c      	movs	r5, #12
 8009e42:	197b      	adds	r3, r7, r5
 8009e44:	2107      	movs	r1, #7
 8009e46:	400a      	ands	r2, r1
 8009e48:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009e4a:	183b      	adds	r3, r7, r0
 8009e4c:	781b      	ldrb	r3, [r3, #0]
 8009e4e:	197a      	adds	r2, r7, r5
 8009e50:	7812      	ldrb	r2, [r2, #0]
 8009e52:	4914      	ldr	r1, [pc, #80]	; (8009ea4 <UARTEx_SetNbDataToProcess+0xb4>)
 8009e54:	5c8a      	ldrb	r2, [r1, r2]
 8009e56:	435a      	muls	r2, r3
 8009e58:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8009e5a:	197b      	adds	r3, r7, r5
 8009e5c:	781b      	ldrb	r3, [r3, #0]
 8009e5e:	4a12      	ldr	r2, [pc, #72]	; (8009ea8 <UARTEx_SetNbDataToProcess+0xb8>)
 8009e60:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009e62:	0019      	movs	r1, r3
 8009e64:	f7f6 fa00 	bl	8000268 <__divsi3>
 8009e68:	0003      	movs	r3, r0
 8009e6a:	b299      	uxth	r1, r3
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	226a      	movs	r2, #106	; 0x6a
 8009e70:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009e72:	19bb      	adds	r3, r7, r6
 8009e74:	781b      	ldrb	r3, [r3, #0]
 8009e76:	193a      	adds	r2, r7, r4
 8009e78:	7812      	ldrb	r2, [r2, #0]
 8009e7a:	490a      	ldr	r1, [pc, #40]	; (8009ea4 <UARTEx_SetNbDataToProcess+0xb4>)
 8009e7c:	5c8a      	ldrb	r2, [r1, r2]
 8009e7e:	435a      	muls	r2, r3
 8009e80:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8009e82:	193b      	adds	r3, r7, r4
 8009e84:	781b      	ldrb	r3, [r3, #0]
 8009e86:	4a08      	ldr	r2, [pc, #32]	; (8009ea8 <UARTEx_SetNbDataToProcess+0xb8>)
 8009e88:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009e8a:	0019      	movs	r1, r3
 8009e8c:	f7f6 f9ec 	bl	8000268 <__divsi3>
 8009e90:	0003      	movs	r3, r0
 8009e92:	b299      	uxth	r1, r3
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	2268      	movs	r2, #104	; 0x68
 8009e98:	5299      	strh	r1, [r3, r2]
}
 8009e9a:	46c0      	nop			; (mov r8, r8)
 8009e9c:	46bd      	mov	sp, r7
 8009e9e:	b005      	add	sp, #20
 8009ea0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009ea2:	46c0      	nop			; (mov r8, r8)
 8009ea4:	0800f5a4 	.word	0x0800f5a4
 8009ea8:	0800f5ac 	.word	0x0800f5ac

08009eac <__NVIC_SetPriority>:
{
 8009eac:	b590      	push	{r4, r7, lr}
 8009eae:	b083      	sub	sp, #12
 8009eb0:	af00      	add	r7, sp, #0
 8009eb2:	0002      	movs	r2, r0
 8009eb4:	6039      	str	r1, [r7, #0]
 8009eb6:	1dfb      	adds	r3, r7, #7
 8009eb8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8009eba:	1dfb      	adds	r3, r7, #7
 8009ebc:	781b      	ldrb	r3, [r3, #0]
 8009ebe:	2b7f      	cmp	r3, #127	; 0x7f
 8009ec0:	d828      	bhi.n	8009f14 <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8009ec2:	4a2f      	ldr	r2, [pc, #188]	; (8009f80 <__NVIC_SetPriority+0xd4>)
 8009ec4:	1dfb      	adds	r3, r7, #7
 8009ec6:	781b      	ldrb	r3, [r3, #0]
 8009ec8:	b25b      	sxtb	r3, r3
 8009eca:	089b      	lsrs	r3, r3, #2
 8009ecc:	33c0      	adds	r3, #192	; 0xc0
 8009ece:	009b      	lsls	r3, r3, #2
 8009ed0:	589b      	ldr	r3, [r3, r2]
 8009ed2:	1dfa      	adds	r2, r7, #7
 8009ed4:	7812      	ldrb	r2, [r2, #0]
 8009ed6:	0011      	movs	r1, r2
 8009ed8:	2203      	movs	r2, #3
 8009eda:	400a      	ands	r2, r1
 8009edc:	00d2      	lsls	r2, r2, #3
 8009ede:	21ff      	movs	r1, #255	; 0xff
 8009ee0:	4091      	lsls	r1, r2
 8009ee2:	000a      	movs	r2, r1
 8009ee4:	43d2      	mvns	r2, r2
 8009ee6:	401a      	ands	r2, r3
 8009ee8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8009eea:	683b      	ldr	r3, [r7, #0]
 8009eec:	019b      	lsls	r3, r3, #6
 8009eee:	22ff      	movs	r2, #255	; 0xff
 8009ef0:	401a      	ands	r2, r3
 8009ef2:	1dfb      	adds	r3, r7, #7
 8009ef4:	781b      	ldrb	r3, [r3, #0]
 8009ef6:	0018      	movs	r0, r3
 8009ef8:	2303      	movs	r3, #3
 8009efa:	4003      	ands	r3, r0
 8009efc:	00db      	lsls	r3, r3, #3
 8009efe:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8009f00:	481f      	ldr	r0, [pc, #124]	; (8009f80 <__NVIC_SetPriority+0xd4>)
 8009f02:	1dfb      	adds	r3, r7, #7
 8009f04:	781b      	ldrb	r3, [r3, #0]
 8009f06:	b25b      	sxtb	r3, r3
 8009f08:	089b      	lsrs	r3, r3, #2
 8009f0a:	430a      	orrs	r2, r1
 8009f0c:	33c0      	adds	r3, #192	; 0xc0
 8009f0e:	009b      	lsls	r3, r3, #2
 8009f10:	501a      	str	r2, [r3, r0]
}
 8009f12:	e031      	b.n	8009f78 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8009f14:	4a1b      	ldr	r2, [pc, #108]	; (8009f84 <__NVIC_SetPriority+0xd8>)
 8009f16:	1dfb      	adds	r3, r7, #7
 8009f18:	781b      	ldrb	r3, [r3, #0]
 8009f1a:	0019      	movs	r1, r3
 8009f1c:	230f      	movs	r3, #15
 8009f1e:	400b      	ands	r3, r1
 8009f20:	3b08      	subs	r3, #8
 8009f22:	089b      	lsrs	r3, r3, #2
 8009f24:	3306      	adds	r3, #6
 8009f26:	009b      	lsls	r3, r3, #2
 8009f28:	18d3      	adds	r3, r2, r3
 8009f2a:	3304      	adds	r3, #4
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	1dfa      	adds	r2, r7, #7
 8009f30:	7812      	ldrb	r2, [r2, #0]
 8009f32:	0011      	movs	r1, r2
 8009f34:	2203      	movs	r2, #3
 8009f36:	400a      	ands	r2, r1
 8009f38:	00d2      	lsls	r2, r2, #3
 8009f3a:	21ff      	movs	r1, #255	; 0xff
 8009f3c:	4091      	lsls	r1, r2
 8009f3e:	000a      	movs	r2, r1
 8009f40:	43d2      	mvns	r2, r2
 8009f42:	401a      	ands	r2, r3
 8009f44:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8009f46:	683b      	ldr	r3, [r7, #0]
 8009f48:	019b      	lsls	r3, r3, #6
 8009f4a:	22ff      	movs	r2, #255	; 0xff
 8009f4c:	401a      	ands	r2, r3
 8009f4e:	1dfb      	adds	r3, r7, #7
 8009f50:	781b      	ldrb	r3, [r3, #0]
 8009f52:	0018      	movs	r0, r3
 8009f54:	2303      	movs	r3, #3
 8009f56:	4003      	ands	r3, r0
 8009f58:	00db      	lsls	r3, r3, #3
 8009f5a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8009f5c:	4809      	ldr	r0, [pc, #36]	; (8009f84 <__NVIC_SetPriority+0xd8>)
 8009f5e:	1dfb      	adds	r3, r7, #7
 8009f60:	781b      	ldrb	r3, [r3, #0]
 8009f62:	001c      	movs	r4, r3
 8009f64:	230f      	movs	r3, #15
 8009f66:	4023      	ands	r3, r4
 8009f68:	3b08      	subs	r3, #8
 8009f6a:	089b      	lsrs	r3, r3, #2
 8009f6c:	430a      	orrs	r2, r1
 8009f6e:	3306      	adds	r3, #6
 8009f70:	009b      	lsls	r3, r3, #2
 8009f72:	18c3      	adds	r3, r0, r3
 8009f74:	3304      	adds	r3, #4
 8009f76:	601a      	str	r2, [r3, #0]
}
 8009f78:	46c0      	nop			; (mov r8, r8)
 8009f7a:	46bd      	mov	sp, r7
 8009f7c:	b003      	add	sp, #12
 8009f7e:	bd90      	pop	{r4, r7, pc}
 8009f80:	e000e100 	.word	0xe000e100
 8009f84:	e000ed00 	.word	0xe000ed00

08009f88 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8009f88:	b580      	push	{r7, lr}
 8009f8a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8009f8c:	4b05      	ldr	r3, [pc, #20]	; (8009fa4 <SysTick_Handler+0x1c>)
 8009f8e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8009f90:	f001 fbbe 	bl	800b710 <xTaskGetSchedulerState>
 8009f94:	0003      	movs	r3, r0
 8009f96:	2b01      	cmp	r3, #1
 8009f98:	d001      	beq.n	8009f9e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8009f9a:	f002 f88d 	bl	800c0b8 <xPortSysTickHandler>
  }
}
 8009f9e:	46c0      	nop			; (mov r8, r8)
 8009fa0:	46bd      	mov	sp, r7
 8009fa2:	bd80      	pop	{r7, pc}
 8009fa4:	e000e010 	.word	0xe000e010

08009fa8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8009fa8:	b580      	push	{r7, lr}
 8009faa:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8009fac:	2305      	movs	r3, #5
 8009fae:	425b      	negs	r3, r3
 8009fb0:	2100      	movs	r1, #0
 8009fb2:	0018      	movs	r0, r3
 8009fb4:	f7ff ff7a 	bl	8009eac <__NVIC_SetPriority>
#endif
}
 8009fb8:	46c0      	nop			; (mov r8, r8)
 8009fba:	46bd      	mov	sp, r7
 8009fbc:	bd80      	pop	{r7, pc}
	...

08009fc0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8009fc0:	b580      	push	{r7, lr}
 8009fc2:	b082      	sub	sp, #8
 8009fc4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009fc6:	f3ef 8305 	mrs	r3, IPSR
 8009fca:	603b      	str	r3, [r7, #0]
  return(result);
 8009fcc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d003      	beq.n	8009fda <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8009fd2:	2306      	movs	r3, #6
 8009fd4:	425b      	negs	r3, r3
 8009fd6:	607b      	str	r3, [r7, #4]
 8009fd8:	e00c      	b.n	8009ff4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8009fda:	4b09      	ldr	r3, [pc, #36]	; (800a000 <osKernelInitialize+0x40>)
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d105      	bne.n	8009fee <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8009fe2:	4b07      	ldr	r3, [pc, #28]	; (800a000 <osKernelInitialize+0x40>)
 8009fe4:	2201      	movs	r2, #1
 8009fe6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8009fe8:	2300      	movs	r3, #0
 8009fea:	607b      	str	r3, [r7, #4]
 8009fec:	e002      	b.n	8009ff4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8009fee:	2301      	movs	r3, #1
 8009ff0:	425b      	negs	r3, r3
 8009ff2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009ff4:	687b      	ldr	r3, [r7, #4]
}
 8009ff6:	0018      	movs	r0, r3
 8009ff8:	46bd      	mov	sp, r7
 8009ffa:	b002      	add	sp, #8
 8009ffc:	bd80      	pop	{r7, pc}
 8009ffe:	46c0      	nop			; (mov r8, r8)
 800a000:	20000f00 	.word	0x20000f00

0800a004 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800a004:	b580      	push	{r7, lr}
 800a006:	b082      	sub	sp, #8
 800a008:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a00a:	f3ef 8305 	mrs	r3, IPSR
 800a00e:	603b      	str	r3, [r7, #0]
  return(result);
 800a010:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a012:	2b00      	cmp	r3, #0
 800a014:	d003      	beq.n	800a01e <osKernelStart+0x1a>
    stat = osErrorISR;
 800a016:	2306      	movs	r3, #6
 800a018:	425b      	negs	r3, r3
 800a01a:	607b      	str	r3, [r7, #4]
 800a01c:	e010      	b.n	800a040 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800a01e:	4b0b      	ldr	r3, [pc, #44]	; (800a04c <osKernelStart+0x48>)
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	2b01      	cmp	r3, #1
 800a024:	d109      	bne.n	800a03a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800a026:	f7ff ffbf 	bl	8009fa8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800a02a:	4b08      	ldr	r3, [pc, #32]	; (800a04c <osKernelStart+0x48>)
 800a02c:	2202      	movs	r2, #2
 800a02e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800a030:	f000 ff84 	bl	800af3c <vTaskStartScheduler>
      stat = osOK;
 800a034:	2300      	movs	r3, #0
 800a036:	607b      	str	r3, [r7, #4]
 800a038:	e002      	b.n	800a040 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800a03a:	2301      	movs	r3, #1
 800a03c:	425b      	negs	r3, r3
 800a03e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a040:	687b      	ldr	r3, [r7, #4]
}
 800a042:	0018      	movs	r0, r3
 800a044:	46bd      	mov	sp, r7
 800a046:	b002      	add	sp, #8
 800a048:	bd80      	pop	{r7, pc}
 800a04a:	46c0      	nop			; (mov r8, r8)
 800a04c:	20000f00 	.word	0x20000f00

0800a050 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800a050:	b5b0      	push	{r4, r5, r7, lr}
 800a052:	b08e      	sub	sp, #56	; 0x38
 800a054:	af04      	add	r7, sp, #16
 800a056:	60f8      	str	r0, [r7, #12]
 800a058:	60b9      	str	r1, [r7, #8]
 800a05a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800a05c:	2300      	movs	r3, #0
 800a05e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a060:	f3ef 8305 	mrs	r3, IPSR
 800a064:	617b      	str	r3, [r7, #20]
  return(result);
 800a066:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d000      	beq.n	800a06e <osThreadNew+0x1e>
 800a06c:	e081      	b.n	800a172 <osThreadNew+0x122>
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	2b00      	cmp	r3, #0
 800a072:	d100      	bne.n	800a076 <osThreadNew+0x26>
 800a074:	e07d      	b.n	800a172 <osThreadNew+0x122>
    stack = configMINIMAL_STACK_SIZE;
 800a076:	2380      	movs	r3, #128	; 0x80
 800a078:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800a07a:	2318      	movs	r3, #24
 800a07c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800a07e:	2300      	movs	r3, #0
 800a080:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800a082:	2301      	movs	r3, #1
 800a084:	425b      	negs	r3, r3
 800a086:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d044      	beq.n	800a118 <osThreadNew+0xc8>
      if (attr->name != NULL) {
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	2b00      	cmp	r3, #0
 800a094:	d002      	beq.n	800a09c <osThreadNew+0x4c>
        name = attr->name;
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	699b      	ldr	r3, [r3, #24]
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d002      	beq.n	800a0aa <osThreadNew+0x5a>
        prio = (UBaseType_t)attr->priority;
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	699b      	ldr	r3, [r3, #24]
 800a0a8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800a0aa:	69fb      	ldr	r3, [r7, #28]
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	d007      	beq.n	800a0c0 <osThreadNew+0x70>
 800a0b0:	69fb      	ldr	r3, [r7, #28]
 800a0b2:	2b38      	cmp	r3, #56	; 0x38
 800a0b4:	d804      	bhi.n	800a0c0 <osThreadNew+0x70>
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	685b      	ldr	r3, [r3, #4]
 800a0ba:	2201      	movs	r2, #1
 800a0bc:	4013      	ands	r3, r2
 800a0be:	d001      	beq.n	800a0c4 <osThreadNew+0x74>
        return (NULL);
 800a0c0:	2300      	movs	r3, #0
 800a0c2:	e057      	b.n	800a174 <osThreadNew+0x124>
      }

      if (attr->stack_size > 0U) {
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	695b      	ldr	r3, [r3, #20]
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d003      	beq.n	800a0d4 <osThreadNew+0x84>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	695b      	ldr	r3, [r3, #20]
 800a0d0:	089b      	lsrs	r3, r3, #2
 800a0d2:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	689b      	ldr	r3, [r3, #8]
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d00e      	beq.n	800a0fa <osThreadNew+0xaa>
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	68db      	ldr	r3, [r3, #12]
 800a0e0:	2ba7      	cmp	r3, #167	; 0xa7
 800a0e2:	d90a      	bls.n	800a0fa <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d006      	beq.n	800a0fa <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	695b      	ldr	r3, [r3, #20]
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d002      	beq.n	800a0fa <osThreadNew+0xaa>
        mem = 1;
 800a0f4:	2301      	movs	r3, #1
 800a0f6:	61bb      	str	r3, [r7, #24]
 800a0f8:	e010      	b.n	800a11c <osThreadNew+0xcc>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	689b      	ldr	r3, [r3, #8]
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d10c      	bne.n	800a11c <osThreadNew+0xcc>
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	68db      	ldr	r3, [r3, #12]
 800a106:	2b00      	cmp	r3, #0
 800a108:	d108      	bne.n	800a11c <osThreadNew+0xcc>
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	691b      	ldr	r3, [r3, #16]
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d104      	bne.n	800a11c <osThreadNew+0xcc>
          mem = 0;
 800a112:	2300      	movs	r3, #0
 800a114:	61bb      	str	r3, [r7, #24]
 800a116:	e001      	b.n	800a11c <osThreadNew+0xcc>
        }
      }
    }
    else {
      mem = 0;
 800a118:	2300      	movs	r3, #0
 800a11a:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800a11c:	69bb      	ldr	r3, [r7, #24]
 800a11e:	2b01      	cmp	r3, #1
 800a120:	d112      	bne.n	800a148 <osThreadNew+0xf8>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	691a      	ldr	r2, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	689b      	ldr	r3, [r3, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a12a:	68bd      	ldr	r5, [r7, #8]
 800a12c:	6a3c      	ldr	r4, [r7, #32]
 800a12e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a130:	68f8      	ldr	r0, [r7, #12]
 800a132:	9302      	str	r3, [sp, #8]
 800a134:	9201      	str	r2, [sp, #4]
 800a136:	69fb      	ldr	r3, [r7, #28]
 800a138:	9300      	str	r3, [sp, #0]
 800a13a:	002b      	movs	r3, r5
 800a13c:	0022      	movs	r2, r4
 800a13e:	f000 fd3e 	bl	800abbe <xTaskCreateStatic>
 800a142:	0003      	movs	r3, r0
 800a144:	613b      	str	r3, [r7, #16]
 800a146:	e014      	b.n	800a172 <osThreadNew+0x122>
      #endif
    }
    else {
      if (mem == 0) {
 800a148:	69bb      	ldr	r3, [r7, #24]
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d111      	bne.n	800a172 <osThreadNew+0x122>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800a14e:	6a3b      	ldr	r3, [r7, #32]
 800a150:	b29a      	uxth	r2, r3
 800a152:	68bc      	ldr	r4, [r7, #8]
 800a154:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a156:	68f8      	ldr	r0, [r7, #12]
 800a158:	2310      	movs	r3, #16
 800a15a:	18fb      	adds	r3, r7, r3
 800a15c:	9301      	str	r3, [sp, #4]
 800a15e:	69fb      	ldr	r3, [r7, #28]
 800a160:	9300      	str	r3, [sp, #0]
 800a162:	0023      	movs	r3, r4
 800a164:	f000 fd6f 	bl	800ac46 <xTaskCreate>
 800a168:	0003      	movs	r3, r0
 800a16a:	2b01      	cmp	r3, #1
 800a16c:	d001      	beq.n	800a172 <osThreadNew+0x122>
            hTask = NULL;
 800a16e:	2300      	movs	r3, #0
 800a170:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800a172:	693b      	ldr	r3, [r7, #16]
}
 800a174:	0018      	movs	r0, r3
 800a176:	46bd      	mov	sp, r7
 800a178:	b00a      	add	sp, #40	; 0x28
 800a17a:	bdb0      	pop	{r4, r5, r7, pc}

0800a17c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800a17c:	b580      	push	{r7, lr}
 800a17e:	b084      	sub	sp, #16
 800a180:	af00      	add	r7, sp, #0
 800a182:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a184:	f3ef 8305 	mrs	r3, IPSR
 800a188:	60bb      	str	r3, [r7, #8]
  return(result);
 800a18a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d003      	beq.n	800a198 <osDelay+0x1c>
    stat = osErrorISR;
 800a190:	2306      	movs	r3, #6
 800a192:	425b      	negs	r3, r3
 800a194:	60fb      	str	r3, [r7, #12]
 800a196:	e008      	b.n	800a1aa <osDelay+0x2e>
  }
  else {
    stat = osOK;
 800a198:	2300      	movs	r3, #0
 800a19a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d003      	beq.n	800a1aa <osDelay+0x2e>
      vTaskDelay(ticks);
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	0018      	movs	r0, r3
 800a1a6:	f000 fea3 	bl	800aef0 <vTaskDelay>
    }
  }

  return (stat);
 800a1aa:	68fb      	ldr	r3, [r7, #12]
}
 800a1ac:	0018      	movs	r0, r3
 800a1ae:	46bd      	mov	sp, r7
 800a1b0:	b004      	add	sp, #16
 800a1b2:	bd80      	pop	{r7, pc}

0800a1b4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800a1b4:	b580      	push	{r7, lr}
 800a1b6:	b084      	sub	sp, #16
 800a1b8:	af00      	add	r7, sp, #0
 800a1ba:	60f8      	str	r0, [r7, #12]
 800a1bc:	60b9      	str	r1, [r7, #8]
 800a1be:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	4a06      	ldr	r2, [pc, #24]	; (800a1dc <vApplicationGetIdleTaskMemory+0x28>)
 800a1c4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800a1c6:	68bb      	ldr	r3, [r7, #8]
 800a1c8:	4a05      	ldr	r2, [pc, #20]	; (800a1e0 <vApplicationGetIdleTaskMemory+0x2c>)
 800a1ca:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	2280      	movs	r2, #128	; 0x80
 800a1d0:	601a      	str	r2, [r3, #0]
}
 800a1d2:	46c0      	nop			; (mov r8, r8)
 800a1d4:	46bd      	mov	sp, r7
 800a1d6:	b004      	add	sp, #16
 800a1d8:	bd80      	pop	{r7, pc}
 800a1da:	46c0      	nop			; (mov r8, r8)
 800a1dc:	20000f04 	.word	0x20000f04
 800a1e0:	20000fac 	.word	0x20000fac

0800a1e4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800a1e4:	b580      	push	{r7, lr}
 800a1e6:	b084      	sub	sp, #16
 800a1e8:	af00      	add	r7, sp, #0
 800a1ea:	60f8      	str	r0, [r7, #12]
 800a1ec:	60b9      	str	r1, [r7, #8]
 800a1ee:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	4a06      	ldr	r2, [pc, #24]	; (800a20c <vApplicationGetTimerTaskMemory+0x28>)
 800a1f4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800a1f6:	68bb      	ldr	r3, [r7, #8]
 800a1f8:	4a05      	ldr	r2, [pc, #20]	; (800a210 <vApplicationGetTimerTaskMemory+0x2c>)
 800a1fa:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	2280      	movs	r2, #128	; 0x80
 800a200:	0052      	lsls	r2, r2, #1
 800a202:	601a      	str	r2, [r3, #0]
}
 800a204:	46c0      	nop			; (mov r8, r8)
 800a206:	46bd      	mov	sp, r7
 800a208:	b004      	add	sp, #16
 800a20a:	bd80      	pop	{r7, pc}
 800a20c:	200011ac 	.word	0x200011ac
 800a210:	20001254 	.word	0x20001254

0800a214 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a214:	b580      	push	{r7, lr}
 800a216:	b082      	sub	sp, #8
 800a218:	af00      	add	r7, sp, #0
 800a21a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	3308      	adds	r3, #8
 800a220:	001a      	movs	r2, r3
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	2201      	movs	r2, #1
 800a22a:	4252      	negs	r2, r2
 800a22c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	3308      	adds	r3, #8
 800a232:	001a      	movs	r2, r3
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	3308      	adds	r3, #8
 800a23c:	001a      	movs	r2, r3
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	2200      	movs	r2, #0
 800a246:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a248:	46c0      	nop			; (mov r8, r8)
 800a24a:	46bd      	mov	sp, r7
 800a24c:	b002      	add	sp, #8
 800a24e:	bd80      	pop	{r7, pc}

0800a250 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a250:	b580      	push	{r7, lr}
 800a252:	b082      	sub	sp, #8
 800a254:	af00      	add	r7, sp, #0
 800a256:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	2200      	movs	r2, #0
 800a25c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a25e:	46c0      	nop			; (mov r8, r8)
 800a260:	46bd      	mov	sp, r7
 800a262:	b002      	add	sp, #8
 800a264:	bd80      	pop	{r7, pc}

0800a266 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a266:	b580      	push	{r7, lr}
 800a268:	b084      	sub	sp, #16
 800a26a:	af00      	add	r7, sp, #0
 800a26c:	6078      	str	r0, [r7, #4]
 800a26e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	685b      	ldr	r3, [r3, #4]
 800a274:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a276:	683b      	ldr	r3, [r7, #0]
 800a278:	68fa      	ldr	r2, [r7, #12]
 800a27a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	689a      	ldr	r2, [r3, #8]
 800a280:	683b      	ldr	r3, [r7, #0]
 800a282:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	689b      	ldr	r3, [r3, #8]
 800a288:	683a      	ldr	r2, [r7, #0]
 800a28a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	683a      	ldr	r2, [r7, #0]
 800a290:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a292:	683b      	ldr	r3, [r7, #0]
 800a294:	687a      	ldr	r2, [r7, #4]
 800a296:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	1c5a      	adds	r2, r3, #1
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	601a      	str	r2, [r3, #0]
}
 800a2a2:	46c0      	nop			; (mov r8, r8)
 800a2a4:	46bd      	mov	sp, r7
 800a2a6:	b004      	add	sp, #16
 800a2a8:	bd80      	pop	{r7, pc}

0800a2aa <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a2aa:	b580      	push	{r7, lr}
 800a2ac:	b084      	sub	sp, #16
 800a2ae:	af00      	add	r7, sp, #0
 800a2b0:	6078      	str	r0, [r7, #4]
 800a2b2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a2b4:	683b      	ldr	r3, [r7, #0]
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a2ba:	68bb      	ldr	r3, [r7, #8]
 800a2bc:	3301      	adds	r3, #1
 800a2be:	d103      	bne.n	800a2c8 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	691b      	ldr	r3, [r3, #16]
 800a2c4:	60fb      	str	r3, [r7, #12]
 800a2c6:	e00c      	b.n	800a2e2 <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	3308      	adds	r3, #8
 800a2cc:	60fb      	str	r3, [r7, #12]
 800a2ce:	e002      	b.n	800a2d6 <vListInsert+0x2c>
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	685b      	ldr	r3, [r3, #4]
 800a2d4:	60fb      	str	r3, [r7, #12]
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	685b      	ldr	r3, [r3, #4]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	68ba      	ldr	r2, [r7, #8]
 800a2de:	429a      	cmp	r2, r3
 800a2e0:	d2f6      	bcs.n	800a2d0 <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	685a      	ldr	r2, [r3, #4]
 800a2e6:	683b      	ldr	r3, [r7, #0]
 800a2e8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a2ea:	683b      	ldr	r3, [r7, #0]
 800a2ec:	685b      	ldr	r3, [r3, #4]
 800a2ee:	683a      	ldr	r2, [r7, #0]
 800a2f0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a2f2:	683b      	ldr	r3, [r7, #0]
 800a2f4:	68fa      	ldr	r2, [r7, #12]
 800a2f6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	683a      	ldr	r2, [r7, #0]
 800a2fc:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800a2fe:	683b      	ldr	r3, [r7, #0]
 800a300:	687a      	ldr	r2, [r7, #4]
 800a302:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	1c5a      	adds	r2, r3, #1
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	601a      	str	r2, [r3, #0]
}
 800a30e:	46c0      	nop			; (mov r8, r8)
 800a310:	46bd      	mov	sp, r7
 800a312:	b004      	add	sp, #16
 800a314:	bd80      	pop	{r7, pc}

0800a316 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a316:	b580      	push	{r7, lr}
 800a318:	b084      	sub	sp, #16
 800a31a:	af00      	add	r7, sp, #0
 800a31c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	691b      	ldr	r3, [r3, #16]
 800a322:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	685b      	ldr	r3, [r3, #4]
 800a328:	687a      	ldr	r2, [r7, #4]
 800a32a:	6892      	ldr	r2, [r2, #8]
 800a32c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	689b      	ldr	r3, [r3, #8]
 800a332:	687a      	ldr	r2, [r7, #4]
 800a334:	6852      	ldr	r2, [r2, #4]
 800a336:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	685b      	ldr	r3, [r3, #4]
 800a33c:	687a      	ldr	r2, [r7, #4]
 800a33e:	429a      	cmp	r2, r3
 800a340:	d103      	bne.n	800a34a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	689a      	ldr	r2, [r3, #8]
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	2200      	movs	r2, #0
 800a34e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	1e5a      	subs	r2, r3, #1
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	681b      	ldr	r3, [r3, #0]
}
 800a35e:	0018      	movs	r0, r3
 800a360:	46bd      	mov	sp, r7
 800a362:	b004      	add	sp, #16
 800a364:	bd80      	pop	{r7, pc}

0800a366 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a366:	b580      	push	{r7, lr}
 800a368:	b084      	sub	sp, #16
 800a36a:	af00      	add	r7, sp, #0
 800a36c:	6078      	str	r0, [r7, #4]
 800a36e:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	2b00      	cmp	r3, #0
 800a378:	d101      	bne.n	800a37e <xQueueGenericReset+0x18>
 800a37a:	b672      	cpsid	i
 800a37c:	e7fe      	b.n	800a37c <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
 800a37e:	f001 fe3f 	bl	800c000 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	681a      	ldr	r2, [r3, #0]
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a38e:	434b      	muls	r3, r1
 800a390:	18d2      	adds	r2, r2, r3
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	2200      	movs	r2, #0
 800a39a:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	681a      	ldr	r2, [r3, #0]
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	681a      	ldr	r2, [r3, #0]
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a3ac:	1e59      	subs	r1, r3, #1
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3b2:	434b      	muls	r3, r1
 800a3b4:	18d2      	adds	r2, r2, r3
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	2244      	movs	r2, #68	; 0x44
 800a3be:	21ff      	movs	r1, #255	; 0xff
 800a3c0:	5499      	strb	r1, [r3, r2]
		pxQueue->cTxLock = queueUNLOCKED;
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	2245      	movs	r2, #69	; 0x45
 800a3c6:	21ff      	movs	r1, #255	; 0xff
 800a3c8:	5499      	strb	r1, [r3, r2]

		if( xNewQueue == pdFALSE )
 800a3ca:	683b      	ldr	r3, [r7, #0]
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d10d      	bne.n	800a3ec <xQueueGenericReset+0x86>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	691b      	ldr	r3, [r3, #16]
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d013      	beq.n	800a400 <xQueueGenericReset+0x9a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	3310      	adds	r3, #16
 800a3dc:	0018      	movs	r0, r3
 800a3de:	f000 ffff 	bl	800b3e0 <xTaskRemoveFromEventList>
 800a3e2:	1e03      	subs	r3, r0, #0
 800a3e4:	d00c      	beq.n	800a400 <xQueueGenericReset+0x9a>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a3e6:	f001 fdfb 	bl	800bfe0 <vPortYield>
 800a3ea:	e009      	b.n	800a400 <xQueueGenericReset+0x9a>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	3310      	adds	r3, #16
 800a3f0:	0018      	movs	r0, r3
 800a3f2:	f7ff ff0f 	bl	800a214 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	3324      	adds	r3, #36	; 0x24
 800a3fa:	0018      	movs	r0, r3
 800a3fc:	f7ff ff0a 	bl	800a214 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a400:	f001 fe10 	bl	800c024 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a404:	2301      	movs	r3, #1
}
 800a406:	0018      	movs	r0, r3
 800a408:	46bd      	mov	sp, r7
 800a40a:	b004      	add	sp, #16
 800a40c:	bd80      	pop	{r7, pc}

0800a40e <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a40e:	b590      	push	{r4, r7, lr}
 800a410:	b089      	sub	sp, #36	; 0x24
 800a412:	af02      	add	r7, sp, #8
 800a414:	60f8      	str	r0, [r7, #12]
 800a416:	60b9      	str	r1, [r7, #8]
 800a418:	607a      	str	r2, [r7, #4]
 800a41a:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d101      	bne.n	800a426 <xQueueGenericCreateStatic+0x18>
 800a422:	b672      	cpsid	i
 800a424:	e7fe      	b.n	800a424 <xQueueGenericCreateStatic+0x16>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a426:	683b      	ldr	r3, [r7, #0]
 800a428:	2b00      	cmp	r3, #0
 800a42a:	d101      	bne.n	800a430 <xQueueGenericCreateStatic+0x22>
 800a42c:	b672      	cpsid	i
 800a42e:	e7fe      	b.n	800a42e <xQueueGenericCreateStatic+0x20>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	2b00      	cmp	r3, #0
 800a434:	d002      	beq.n	800a43c <xQueueGenericCreateStatic+0x2e>
 800a436:	68bb      	ldr	r3, [r7, #8]
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d001      	beq.n	800a440 <xQueueGenericCreateStatic+0x32>
 800a43c:	2301      	movs	r3, #1
 800a43e:	e000      	b.n	800a442 <xQueueGenericCreateStatic+0x34>
 800a440:	2300      	movs	r3, #0
 800a442:	2b00      	cmp	r3, #0
 800a444:	d101      	bne.n	800a44a <xQueueGenericCreateStatic+0x3c>
 800a446:	b672      	cpsid	i
 800a448:	e7fe      	b.n	800a448 <xQueueGenericCreateStatic+0x3a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d102      	bne.n	800a456 <xQueueGenericCreateStatic+0x48>
 800a450:	68bb      	ldr	r3, [r7, #8]
 800a452:	2b00      	cmp	r3, #0
 800a454:	d101      	bne.n	800a45a <xQueueGenericCreateStatic+0x4c>
 800a456:	2301      	movs	r3, #1
 800a458:	e000      	b.n	800a45c <xQueueGenericCreateStatic+0x4e>
 800a45a:	2300      	movs	r3, #0
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d101      	bne.n	800a464 <xQueueGenericCreateStatic+0x56>
 800a460:	b672      	cpsid	i
 800a462:	e7fe      	b.n	800a462 <xQueueGenericCreateStatic+0x54>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a464:	2350      	movs	r3, #80	; 0x50
 800a466:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a468:	693b      	ldr	r3, [r7, #16]
 800a46a:	2b50      	cmp	r3, #80	; 0x50
 800a46c:	d001      	beq.n	800a472 <xQueueGenericCreateStatic+0x64>
 800a46e:	b672      	cpsid	i
 800a470:	e7fe      	b.n	800a470 <xQueueGenericCreateStatic+0x62>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a472:	693b      	ldr	r3, [r7, #16]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a474:	683b      	ldr	r3, [r7, #0]
 800a476:	617b      	str	r3, [r7, #20]

		if( pxNewQueue != NULL )
 800a478:	697b      	ldr	r3, [r7, #20]
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d00e      	beq.n	800a49c <xQueueGenericCreateStatic+0x8e>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a47e:	697b      	ldr	r3, [r7, #20]
 800a480:	2246      	movs	r2, #70	; 0x46
 800a482:	2101      	movs	r1, #1
 800a484:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a486:	2328      	movs	r3, #40	; 0x28
 800a488:	18fb      	adds	r3, r7, r3
 800a48a:	781c      	ldrb	r4, [r3, #0]
 800a48c:	687a      	ldr	r2, [r7, #4]
 800a48e:	68b9      	ldr	r1, [r7, #8]
 800a490:	68f8      	ldr	r0, [r7, #12]
 800a492:	697b      	ldr	r3, [r7, #20]
 800a494:	9300      	str	r3, [sp, #0]
 800a496:	0023      	movs	r3, r4
 800a498:	f000 f805 	bl	800a4a6 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a49c:	697b      	ldr	r3, [r7, #20]
	}
 800a49e:	0018      	movs	r0, r3
 800a4a0:	46bd      	mov	sp, r7
 800a4a2:	b007      	add	sp, #28
 800a4a4:	bd90      	pop	{r4, r7, pc}

0800a4a6 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a4a6:	b580      	push	{r7, lr}
 800a4a8:	b084      	sub	sp, #16
 800a4aa:	af00      	add	r7, sp, #0
 800a4ac:	60f8      	str	r0, [r7, #12]
 800a4ae:	60b9      	str	r1, [r7, #8]
 800a4b0:	607a      	str	r2, [r7, #4]
 800a4b2:	001a      	movs	r2, r3
 800a4b4:	1cfb      	adds	r3, r7, #3
 800a4b6:	701a      	strb	r2, [r3, #0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a4b8:	68bb      	ldr	r3, [r7, #8]
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d103      	bne.n	800a4c6 <prvInitialiseNewQueue+0x20>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a4be:	69bb      	ldr	r3, [r7, #24]
 800a4c0:	69ba      	ldr	r2, [r7, #24]
 800a4c2:	601a      	str	r2, [r3, #0]
 800a4c4:	e002      	b.n	800a4cc <prvInitialiseNewQueue+0x26>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a4c6:	69bb      	ldr	r3, [r7, #24]
 800a4c8:	687a      	ldr	r2, [r7, #4]
 800a4ca:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a4cc:	69bb      	ldr	r3, [r7, #24]
 800a4ce:	68fa      	ldr	r2, [r7, #12]
 800a4d0:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a4d2:	69bb      	ldr	r3, [r7, #24]
 800a4d4:	68ba      	ldr	r2, [r7, #8]
 800a4d6:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a4d8:	69bb      	ldr	r3, [r7, #24]
 800a4da:	2101      	movs	r1, #1
 800a4dc:	0018      	movs	r0, r3
 800a4de:	f7ff ff42 	bl	800a366 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800a4e2:	69bb      	ldr	r3, [r7, #24]
 800a4e4:	1cfa      	adds	r2, r7, #3
 800a4e6:	214c      	movs	r1, #76	; 0x4c
 800a4e8:	7812      	ldrb	r2, [r2, #0]
 800a4ea:	545a      	strb	r2, [r3, r1]
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a4ec:	46c0      	nop			; (mov r8, r8)
 800a4ee:	46bd      	mov	sp, r7
 800a4f0:	b004      	add	sp, #16
 800a4f2:	bd80      	pop	{r7, pc}

0800a4f4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a4f4:	b580      	push	{r7, lr}
 800a4f6:	b08a      	sub	sp, #40	; 0x28
 800a4f8:	af00      	add	r7, sp, #0
 800a4fa:	60f8      	str	r0, [r7, #12]
 800a4fc:	60b9      	str	r1, [r7, #8]
 800a4fe:	607a      	str	r2, [r7, #4]
 800a500:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a502:	2300      	movs	r3, #0
 800a504:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 800a50a:	6a3b      	ldr	r3, [r7, #32]
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d101      	bne.n	800a514 <xQueueGenericSend+0x20>
 800a510:	b672      	cpsid	i
 800a512:	e7fe      	b.n	800a512 <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a514:	68bb      	ldr	r3, [r7, #8]
 800a516:	2b00      	cmp	r3, #0
 800a518:	d103      	bne.n	800a522 <xQueueGenericSend+0x2e>
 800a51a:	6a3b      	ldr	r3, [r7, #32]
 800a51c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d101      	bne.n	800a526 <xQueueGenericSend+0x32>
 800a522:	2301      	movs	r3, #1
 800a524:	e000      	b.n	800a528 <xQueueGenericSend+0x34>
 800a526:	2300      	movs	r3, #0
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d101      	bne.n	800a530 <xQueueGenericSend+0x3c>
 800a52c:	b672      	cpsid	i
 800a52e:	e7fe      	b.n	800a52e <xQueueGenericSend+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a530:	683b      	ldr	r3, [r7, #0]
 800a532:	2b02      	cmp	r3, #2
 800a534:	d103      	bne.n	800a53e <xQueueGenericSend+0x4a>
 800a536:	6a3b      	ldr	r3, [r7, #32]
 800a538:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a53a:	2b01      	cmp	r3, #1
 800a53c:	d101      	bne.n	800a542 <xQueueGenericSend+0x4e>
 800a53e:	2301      	movs	r3, #1
 800a540:	e000      	b.n	800a544 <xQueueGenericSend+0x50>
 800a542:	2300      	movs	r3, #0
 800a544:	2b00      	cmp	r3, #0
 800a546:	d101      	bne.n	800a54c <xQueueGenericSend+0x58>
 800a548:	b672      	cpsid	i
 800a54a:	e7fe      	b.n	800a54a <xQueueGenericSend+0x56>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a54c:	f001 f8e0 	bl	800b710 <xTaskGetSchedulerState>
 800a550:	1e03      	subs	r3, r0, #0
 800a552:	d102      	bne.n	800a55a <xQueueGenericSend+0x66>
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	2b00      	cmp	r3, #0
 800a558:	d101      	bne.n	800a55e <xQueueGenericSend+0x6a>
 800a55a:	2301      	movs	r3, #1
 800a55c:	e000      	b.n	800a560 <xQueueGenericSend+0x6c>
 800a55e:	2300      	movs	r3, #0
 800a560:	2b00      	cmp	r3, #0
 800a562:	d101      	bne.n	800a568 <xQueueGenericSend+0x74>
 800a564:	b672      	cpsid	i
 800a566:	e7fe      	b.n	800a566 <xQueueGenericSend+0x72>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a568:	f001 fd4a 	bl	800c000 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a56c:	6a3b      	ldr	r3, [r7, #32]
 800a56e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a570:	6a3b      	ldr	r3, [r7, #32]
 800a572:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a574:	429a      	cmp	r2, r3
 800a576:	d302      	bcc.n	800a57e <xQueueGenericSend+0x8a>
 800a578:	683b      	ldr	r3, [r7, #0]
 800a57a:	2b02      	cmp	r3, #2
 800a57c:	d11e      	bne.n	800a5bc <xQueueGenericSend+0xc8>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a57e:	683a      	ldr	r2, [r7, #0]
 800a580:	68b9      	ldr	r1, [r7, #8]
 800a582:	6a3b      	ldr	r3, [r7, #32]
 800a584:	0018      	movs	r0, r3
 800a586:	f000 f9a2 	bl	800a8ce <prvCopyDataToQueue>
 800a58a:	0003      	movs	r3, r0
 800a58c:	61fb      	str	r3, [r7, #28]

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a58e:	6a3b      	ldr	r3, [r7, #32]
 800a590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a592:	2b00      	cmp	r3, #0
 800a594:	d009      	beq.n	800a5aa <xQueueGenericSend+0xb6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a596:	6a3b      	ldr	r3, [r7, #32]
 800a598:	3324      	adds	r3, #36	; 0x24
 800a59a:	0018      	movs	r0, r3
 800a59c:	f000 ff20 	bl	800b3e0 <xTaskRemoveFromEventList>
 800a5a0:	1e03      	subs	r3, r0, #0
 800a5a2:	d007      	beq.n	800a5b4 <xQueueGenericSend+0xc0>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a5a4:	f001 fd1c 	bl	800bfe0 <vPortYield>
 800a5a8:	e004      	b.n	800a5b4 <xQueueGenericSend+0xc0>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a5aa:	69fb      	ldr	r3, [r7, #28]
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d001      	beq.n	800a5b4 <xQueueGenericSend+0xc0>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a5b0:	f001 fd16 	bl	800bfe0 <vPortYield>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a5b4:	f001 fd36 	bl	800c024 <vPortExitCritical>
				return pdPASS;
 800a5b8:	2301      	movs	r3, #1
 800a5ba:	e05b      	b.n	800a674 <xQueueGenericSend+0x180>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d103      	bne.n	800a5ca <xQueueGenericSend+0xd6>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a5c2:	f001 fd2f 	bl	800c024 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a5c6:	2300      	movs	r3, #0
 800a5c8:	e054      	b.n	800a674 <xQueueGenericSend+0x180>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a5ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d106      	bne.n	800a5de <xQueueGenericSend+0xea>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a5d0:	2314      	movs	r3, #20
 800a5d2:	18fb      	adds	r3, r7, r3
 800a5d4:	0018      	movs	r0, r3
 800a5d6:	f000 ff5f 	bl	800b498 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a5da:	2301      	movs	r3, #1
 800a5dc:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a5de:	f001 fd21 	bl	800c024 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a5e2:	f000 fd09 	bl	800aff8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a5e6:	f001 fd0b 	bl	800c000 <vPortEnterCritical>
 800a5ea:	6a3b      	ldr	r3, [r7, #32]
 800a5ec:	2244      	movs	r2, #68	; 0x44
 800a5ee:	5c9b      	ldrb	r3, [r3, r2]
 800a5f0:	b25b      	sxtb	r3, r3
 800a5f2:	3301      	adds	r3, #1
 800a5f4:	d103      	bne.n	800a5fe <xQueueGenericSend+0x10a>
 800a5f6:	6a3b      	ldr	r3, [r7, #32]
 800a5f8:	2244      	movs	r2, #68	; 0x44
 800a5fa:	2100      	movs	r1, #0
 800a5fc:	5499      	strb	r1, [r3, r2]
 800a5fe:	6a3b      	ldr	r3, [r7, #32]
 800a600:	2245      	movs	r2, #69	; 0x45
 800a602:	5c9b      	ldrb	r3, [r3, r2]
 800a604:	b25b      	sxtb	r3, r3
 800a606:	3301      	adds	r3, #1
 800a608:	d103      	bne.n	800a612 <xQueueGenericSend+0x11e>
 800a60a:	6a3b      	ldr	r3, [r7, #32]
 800a60c:	2245      	movs	r2, #69	; 0x45
 800a60e:	2100      	movs	r1, #0
 800a610:	5499      	strb	r1, [r3, r2]
 800a612:	f001 fd07 	bl	800c024 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a616:	1d3a      	adds	r2, r7, #4
 800a618:	2314      	movs	r3, #20
 800a61a:	18fb      	adds	r3, r7, r3
 800a61c:	0011      	movs	r1, r2
 800a61e:	0018      	movs	r0, r3
 800a620:	f000 ff4e 	bl	800b4c0 <xTaskCheckForTimeOut>
 800a624:	1e03      	subs	r3, r0, #0
 800a626:	d11e      	bne.n	800a666 <xQueueGenericSend+0x172>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a628:	6a3b      	ldr	r3, [r7, #32]
 800a62a:	0018      	movs	r0, r3
 800a62c:	f000 fa54 	bl	800aad8 <prvIsQueueFull>
 800a630:	1e03      	subs	r3, r0, #0
 800a632:	d011      	beq.n	800a658 <xQueueGenericSend+0x164>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a634:	6a3b      	ldr	r3, [r7, #32]
 800a636:	3310      	adds	r3, #16
 800a638:	687a      	ldr	r2, [r7, #4]
 800a63a:	0011      	movs	r1, r2
 800a63c:	0018      	movs	r0, r3
 800a63e:	f000 fe8b 	bl	800b358 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a642:	6a3b      	ldr	r3, [r7, #32]
 800a644:	0018      	movs	r0, r3
 800a646:	f000 f9d3 	bl	800a9f0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a64a:	f000 fce1 	bl	800b010 <xTaskResumeAll>
 800a64e:	1e03      	subs	r3, r0, #0
 800a650:	d18a      	bne.n	800a568 <xQueueGenericSend+0x74>
				{
					portYIELD_WITHIN_API();
 800a652:	f001 fcc5 	bl	800bfe0 <vPortYield>
 800a656:	e787      	b.n	800a568 <xQueueGenericSend+0x74>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a658:	6a3b      	ldr	r3, [r7, #32]
 800a65a:	0018      	movs	r0, r3
 800a65c:	f000 f9c8 	bl	800a9f0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a660:	f000 fcd6 	bl	800b010 <xTaskResumeAll>
 800a664:	e780      	b.n	800a568 <xQueueGenericSend+0x74>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a666:	6a3b      	ldr	r3, [r7, #32]
 800a668:	0018      	movs	r0, r3
 800a66a:	f000 f9c1 	bl	800a9f0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a66e:	f000 fccf 	bl	800b010 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a672:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a674:	0018      	movs	r0, r3
 800a676:	46bd      	mov	sp, r7
 800a678:	b00a      	add	sp, #40	; 0x28
 800a67a:	bd80      	pop	{r7, pc}

0800a67c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a67c:	b590      	push	{r4, r7, lr}
 800a67e:	b08b      	sub	sp, #44	; 0x2c
 800a680:	af00      	add	r7, sp, #0
 800a682:	60f8      	str	r0, [r7, #12]
 800a684:	60b9      	str	r1, [r7, #8]
 800a686:	607a      	str	r2, [r7, #4]
 800a688:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 800a68e:	6a3b      	ldr	r3, [r7, #32]
 800a690:	2b00      	cmp	r3, #0
 800a692:	d101      	bne.n	800a698 <xQueueGenericSendFromISR+0x1c>
 800a694:	b672      	cpsid	i
 800a696:	e7fe      	b.n	800a696 <xQueueGenericSendFromISR+0x1a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a698:	68bb      	ldr	r3, [r7, #8]
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d103      	bne.n	800a6a6 <xQueueGenericSendFromISR+0x2a>
 800a69e:	6a3b      	ldr	r3, [r7, #32]
 800a6a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d101      	bne.n	800a6aa <xQueueGenericSendFromISR+0x2e>
 800a6a6:	2301      	movs	r3, #1
 800a6a8:	e000      	b.n	800a6ac <xQueueGenericSendFromISR+0x30>
 800a6aa:	2300      	movs	r3, #0
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	d101      	bne.n	800a6b4 <xQueueGenericSendFromISR+0x38>
 800a6b0:	b672      	cpsid	i
 800a6b2:	e7fe      	b.n	800a6b2 <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a6b4:	683b      	ldr	r3, [r7, #0]
 800a6b6:	2b02      	cmp	r3, #2
 800a6b8:	d103      	bne.n	800a6c2 <xQueueGenericSendFromISR+0x46>
 800a6ba:	6a3b      	ldr	r3, [r7, #32]
 800a6bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a6be:	2b01      	cmp	r3, #1
 800a6c0:	d101      	bne.n	800a6c6 <xQueueGenericSendFromISR+0x4a>
 800a6c2:	2301      	movs	r3, #1
 800a6c4:	e000      	b.n	800a6c8 <xQueueGenericSendFromISR+0x4c>
 800a6c6:	2300      	movs	r3, #0
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	d101      	bne.n	800a6d0 <xQueueGenericSendFromISR+0x54>
 800a6cc:	b672      	cpsid	i
 800a6ce:	e7fe      	b.n	800a6ce <xQueueGenericSendFromISR+0x52>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a6d0:	f001 fcc0 	bl	800c054 <ulSetInterruptMaskFromISR>
 800a6d4:	0003      	movs	r3, r0
 800a6d6:	61fb      	str	r3, [r7, #28]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a6d8:	6a3b      	ldr	r3, [r7, #32]
 800a6da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a6dc:	6a3b      	ldr	r3, [r7, #32]
 800a6de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a6e0:	429a      	cmp	r2, r3
 800a6e2:	d302      	bcc.n	800a6ea <xQueueGenericSendFromISR+0x6e>
 800a6e4:	683b      	ldr	r3, [r7, #0]
 800a6e6:	2b02      	cmp	r3, #2
 800a6e8:	d131      	bne.n	800a74e <xQueueGenericSendFromISR+0xd2>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a6ea:	241b      	movs	r4, #27
 800a6ec:	193b      	adds	r3, r7, r4
 800a6ee:	6a3a      	ldr	r2, [r7, #32]
 800a6f0:	2145      	movs	r1, #69	; 0x45
 800a6f2:	5c52      	ldrb	r2, [r2, r1]
 800a6f4:	701a      	strb	r2, [r3, #0]
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a6f6:	6a3b      	ldr	r3, [r7, #32]
 800a6f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6fa:	617b      	str	r3, [r7, #20]
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a6fc:	683a      	ldr	r2, [r7, #0]
 800a6fe:	68b9      	ldr	r1, [r7, #8]
 800a700:	6a3b      	ldr	r3, [r7, #32]
 800a702:	0018      	movs	r0, r3
 800a704:	f000 f8e3 	bl	800a8ce <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a708:	193b      	adds	r3, r7, r4
 800a70a:	781b      	ldrb	r3, [r3, #0]
 800a70c:	b25b      	sxtb	r3, r3
 800a70e:	3301      	adds	r3, #1
 800a710:	d111      	bne.n	800a736 <xQueueGenericSendFromISR+0xba>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a712:	6a3b      	ldr	r3, [r7, #32]
 800a714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a716:	2b00      	cmp	r3, #0
 800a718:	d016      	beq.n	800a748 <xQueueGenericSendFromISR+0xcc>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a71a:	6a3b      	ldr	r3, [r7, #32]
 800a71c:	3324      	adds	r3, #36	; 0x24
 800a71e:	0018      	movs	r0, r3
 800a720:	f000 fe5e 	bl	800b3e0 <xTaskRemoveFromEventList>
 800a724:	1e03      	subs	r3, r0, #0
 800a726:	d00f      	beq.n	800a748 <xQueueGenericSendFromISR+0xcc>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d00c      	beq.n	800a748 <xQueueGenericSendFromISR+0xcc>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	2201      	movs	r2, #1
 800a732:	601a      	str	r2, [r3, #0]
 800a734:	e008      	b.n	800a748 <xQueueGenericSendFromISR+0xcc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a736:	231b      	movs	r3, #27
 800a738:	18fb      	adds	r3, r7, r3
 800a73a:	781b      	ldrb	r3, [r3, #0]
 800a73c:	3301      	adds	r3, #1
 800a73e:	b2db      	uxtb	r3, r3
 800a740:	b259      	sxtb	r1, r3
 800a742:	6a3b      	ldr	r3, [r7, #32]
 800a744:	2245      	movs	r2, #69	; 0x45
 800a746:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
 800a748:	2301      	movs	r3, #1
 800a74a:	627b      	str	r3, [r7, #36]	; 0x24
		{
 800a74c:	e001      	b.n	800a752 <xQueueGenericSendFromISR+0xd6>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a74e:	2300      	movs	r3, #0
 800a750:	627b      	str	r3, [r7, #36]	; 0x24
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800a752:	69fb      	ldr	r3, [r7, #28]
 800a754:	0018      	movs	r0, r3
 800a756:	f001 fc83 	bl	800c060 <vClearInterruptMaskFromISR>

	return xReturn;
 800a75a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a75c:	0018      	movs	r0, r3
 800a75e:	46bd      	mov	sp, r7
 800a760:	b00b      	add	sp, #44	; 0x2c
 800a762:	bd90      	pop	{r4, r7, pc}

0800a764 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a764:	b580      	push	{r7, lr}
 800a766:	b08a      	sub	sp, #40	; 0x28
 800a768:	af00      	add	r7, sp, #0
 800a76a:	60f8      	str	r0, [r7, #12]
 800a76c:	60b9      	str	r1, [r7, #8]
 800a76e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a770:	2300      	movs	r3, #0
 800a772:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a778:	6a3b      	ldr	r3, [r7, #32]
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d101      	bne.n	800a782 <xQueueReceive+0x1e>
 800a77e:	b672      	cpsid	i
 800a780:	e7fe      	b.n	800a780 <xQueueReceive+0x1c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a782:	68bb      	ldr	r3, [r7, #8]
 800a784:	2b00      	cmp	r3, #0
 800a786:	d103      	bne.n	800a790 <xQueueReceive+0x2c>
 800a788:	6a3b      	ldr	r3, [r7, #32]
 800a78a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d101      	bne.n	800a794 <xQueueReceive+0x30>
 800a790:	2301      	movs	r3, #1
 800a792:	e000      	b.n	800a796 <xQueueReceive+0x32>
 800a794:	2300      	movs	r3, #0
 800a796:	2b00      	cmp	r3, #0
 800a798:	d101      	bne.n	800a79e <xQueueReceive+0x3a>
 800a79a:	b672      	cpsid	i
 800a79c:	e7fe      	b.n	800a79c <xQueueReceive+0x38>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a79e:	f000 ffb7 	bl	800b710 <xTaskGetSchedulerState>
 800a7a2:	1e03      	subs	r3, r0, #0
 800a7a4:	d102      	bne.n	800a7ac <xQueueReceive+0x48>
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	d101      	bne.n	800a7b0 <xQueueReceive+0x4c>
 800a7ac:	2301      	movs	r3, #1
 800a7ae:	e000      	b.n	800a7b2 <xQueueReceive+0x4e>
 800a7b0:	2300      	movs	r3, #0
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	d101      	bne.n	800a7ba <xQueueReceive+0x56>
 800a7b6:	b672      	cpsid	i
 800a7b8:	e7fe      	b.n	800a7b8 <xQueueReceive+0x54>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a7ba:	f001 fc21 	bl	800c000 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a7be:	6a3b      	ldr	r3, [r7, #32]
 800a7c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7c2:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a7c4:	69fb      	ldr	r3, [r7, #28]
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d01a      	beq.n	800a800 <xQueueReceive+0x9c>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a7ca:	68ba      	ldr	r2, [r7, #8]
 800a7cc:	6a3b      	ldr	r3, [r7, #32]
 800a7ce:	0011      	movs	r1, r2
 800a7d0:	0018      	movs	r0, r3
 800a7d2:	f000 f8e7 	bl	800a9a4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a7d6:	69fb      	ldr	r3, [r7, #28]
 800a7d8:	1e5a      	subs	r2, r3, #1
 800a7da:	6a3b      	ldr	r3, [r7, #32]
 800a7dc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a7de:	6a3b      	ldr	r3, [r7, #32]
 800a7e0:	691b      	ldr	r3, [r3, #16]
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d008      	beq.n	800a7f8 <xQueueReceive+0x94>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a7e6:	6a3b      	ldr	r3, [r7, #32]
 800a7e8:	3310      	adds	r3, #16
 800a7ea:	0018      	movs	r0, r3
 800a7ec:	f000 fdf8 	bl	800b3e0 <xTaskRemoveFromEventList>
 800a7f0:	1e03      	subs	r3, r0, #0
 800a7f2:	d001      	beq.n	800a7f8 <xQueueReceive+0x94>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a7f4:	f001 fbf4 	bl	800bfe0 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a7f8:	f001 fc14 	bl	800c024 <vPortExitCritical>
				return pdPASS;
 800a7fc:	2301      	movs	r3, #1
 800a7fe:	e062      	b.n	800a8c6 <xQueueReceive+0x162>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	2b00      	cmp	r3, #0
 800a804:	d103      	bne.n	800a80e <xQueueReceive+0xaa>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a806:	f001 fc0d 	bl	800c024 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a80a:	2300      	movs	r3, #0
 800a80c:	e05b      	b.n	800a8c6 <xQueueReceive+0x162>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a80e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a810:	2b00      	cmp	r3, #0
 800a812:	d106      	bne.n	800a822 <xQueueReceive+0xbe>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a814:	2314      	movs	r3, #20
 800a816:	18fb      	adds	r3, r7, r3
 800a818:	0018      	movs	r0, r3
 800a81a:	f000 fe3d 	bl	800b498 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a81e:	2301      	movs	r3, #1
 800a820:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a822:	f001 fbff 	bl	800c024 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a826:	f000 fbe7 	bl	800aff8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a82a:	f001 fbe9 	bl	800c000 <vPortEnterCritical>
 800a82e:	6a3b      	ldr	r3, [r7, #32]
 800a830:	2244      	movs	r2, #68	; 0x44
 800a832:	5c9b      	ldrb	r3, [r3, r2]
 800a834:	b25b      	sxtb	r3, r3
 800a836:	3301      	adds	r3, #1
 800a838:	d103      	bne.n	800a842 <xQueueReceive+0xde>
 800a83a:	6a3b      	ldr	r3, [r7, #32]
 800a83c:	2244      	movs	r2, #68	; 0x44
 800a83e:	2100      	movs	r1, #0
 800a840:	5499      	strb	r1, [r3, r2]
 800a842:	6a3b      	ldr	r3, [r7, #32]
 800a844:	2245      	movs	r2, #69	; 0x45
 800a846:	5c9b      	ldrb	r3, [r3, r2]
 800a848:	b25b      	sxtb	r3, r3
 800a84a:	3301      	adds	r3, #1
 800a84c:	d103      	bne.n	800a856 <xQueueReceive+0xf2>
 800a84e:	6a3b      	ldr	r3, [r7, #32]
 800a850:	2245      	movs	r2, #69	; 0x45
 800a852:	2100      	movs	r1, #0
 800a854:	5499      	strb	r1, [r3, r2]
 800a856:	f001 fbe5 	bl	800c024 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a85a:	1d3a      	adds	r2, r7, #4
 800a85c:	2314      	movs	r3, #20
 800a85e:	18fb      	adds	r3, r7, r3
 800a860:	0011      	movs	r1, r2
 800a862:	0018      	movs	r0, r3
 800a864:	f000 fe2c 	bl	800b4c0 <xTaskCheckForTimeOut>
 800a868:	1e03      	subs	r3, r0, #0
 800a86a:	d11e      	bne.n	800a8aa <xQueueReceive+0x146>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a86c:	6a3b      	ldr	r3, [r7, #32]
 800a86e:	0018      	movs	r0, r3
 800a870:	f000 f91c 	bl	800aaac <prvIsQueueEmpty>
 800a874:	1e03      	subs	r3, r0, #0
 800a876:	d011      	beq.n	800a89c <xQueueReceive+0x138>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a878:	6a3b      	ldr	r3, [r7, #32]
 800a87a:	3324      	adds	r3, #36	; 0x24
 800a87c:	687a      	ldr	r2, [r7, #4]
 800a87e:	0011      	movs	r1, r2
 800a880:	0018      	movs	r0, r3
 800a882:	f000 fd69 	bl	800b358 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a886:	6a3b      	ldr	r3, [r7, #32]
 800a888:	0018      	movs	r0, r3
 800a88a:	f000 f8b1 	bl	800a9f0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a88e:	f000 fbbf 	bl	800b010 <xTaskResumeAll>
 800a892:	1e03      	subs	r3, r0, #0
 800a894:	d191      	bne.n	800a7ba <xQueueReceive+0x56>
				{
					portYIELD_WITHIN_API();
 800a896:	f001 fba3 	bl	800bfe0 <vPortYield>
 800a89a:	e78e      	b.n	800a7ba <xQueueReceive+0x56>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a89c:	6a3b      	ldr	r3, [r7, #32]
 800a89e:	0018      	movs	r0, r3
 800a8a0:	f000 f8a6 	bl	800a9f0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a8a4:	f000 fbb4 	bl	800b010 <xTaskResumeAll>
 800a8a8:	e787      	b.n	800a7ba <xQueueReceive+0x56>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a8aa:	6a3b      	ldr	r3, [r7, #32]
 800a8ac:	0018      	movs	r0, r3
 800a8ae:	f000 f89f 	bl	800a9f0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a8b2:	f000 fbad 	bl	800b010 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a8b6:	6a3b      	ldr	r3, [r7, #32]
 800a8b8:	0018      	movs	r0, r3
 800a8ba:	f000 f8f7 	bl	800aaac <prvIsQueueEmpty>
 800a8be:	1e03      	subs	r3, r0, #0
 800a8c0:	d100      	bne.n	800a8c4 <xQueueReceive+0x160>
 800a8c2:	e77a      	b.n	800a7ba <xQueueReceive+0x56>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a8c4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a8c6:	0018      	movs	r0, r3
 800a8c8:	46bd      	mov	sp, r7
 800a8ca:	b00a      	add	sp, #40	; 0x28
 800a8cc:	bd80      	pop	{r7, pc}

0800a8ce <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a8ce:	b580      	push	{r7, lr}
 800a8d0:	b086      	sub	sp, #24
 800a8d2:	af00      	add	r7, sp, #0
 800a8d4:	60f8      	str	r0, [r7, #12]
 800a8d6:	60b9      	str	r1, [r7, #8]
 800a8d8:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a8da:	2300      	movs	r3, #0
 800a8dc:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a8de:	68fb      	ldr	r3, [r7, #12]
 800a8e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8e2:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a8e4:	68fb      	ldr	r3, [r7, #12]
 800a8e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d10e      	bne.n	800a90a <prvCopyDataToQueue+0x3c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d14e      	bne.n	800a992 <prvCopyDataToQueue+0xc4>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	689b      	ldr	r3, [r3, #8]
 800a8f8:	0018      	movs	r0, r3
 800a8fa:	f000 ff25 	bl	800b748 <xTaskPriorityDisinherit>
 800a8fe:	0003      	movs	r3, r0
 800a900:	617b      	str	r3, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	2200      	movs	r2, #0
 800a906:	609a      	str	r2, [r3, #8]
 800a908:	e043      	b.n	800a992 <prvCopyDataToQueue+0xc4>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	d119      	bne.n	800a944 <prvCopyDataToQueue+0x76>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	6858      	ldr	r0, [r3, #4]
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a918:	68bb      	ldr	r3, [r7, #8]
 800a91a:	0019      	movs	r1, r3
 800a91c:	f002 fe01 	bl	800d522 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	685a      	ldr	r2, [r3, #4]
 800a924:	68fb      	ldr	r3, [r7, #12]
 800a926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a928:	18d2      	adds	r2, r2, r3
 800a92a:	68fb      	ldr	r3, [r7, #12]
 800a92c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	685a      	ldr	r2, [r3, #4]
 800a932:	68fb      	ldr	r3, [r7, #12]
 800a934:	689b      	ldr	r3, [r3, #8]
 800a936:	429a      	cmp	r2, r3
 800a938:	d32b      	bcc.n	800a992 <prvCopyDataToQueue+0xc4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	681a      	ldr	r2, [r3, #0]
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	605a      	str	r2, [r3, #4]
 800a942:	e026      	b.n	800a992 <prvCopyDataToQueue+0xc4>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	68d8      	ldr	r0, [r3, #12]
 800a948:	68fb      	ldr	r3, [r7, #12]
 800a94a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a94c:	68bb      	ldr	r3, [r7, #8]
 800a94e:	0019      	movs	r1, r3
 800a950:	f002 fde7 	bl	800d522 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	68da      	ldr	r2, [r3, #12]
 800a958:	68fb      	ldr	r3, [r7, #12]
 800a95a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a95c:	425b      	negs	r3, r3
 800a95e:	18d2      	adds	r2, r2, r3
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a964:	68fb      	ldr	r3, [r7, #12]
 800a966:	68da      	ldr	r2, [r3, #12]
 800a968:	68fb      	ldr	r3, [r7, #12]
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	429a      	cmp	r2, r3
 800a96e:	d207      	bcs.n	800a980 <prvCopyDataToQueue+0xb2>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	689a      	ldr	r2, [r3, #8]
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a978:	425b      	negs	r3, r3
 800a97a:	18d2      	adds	r2, r2, r3
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	2b02      	cmp	r3, #2
 800a984:	d105      	bne.n	800a992 <prvCopyDataToQueue+0xc4>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a986:	693b      	ldr	r3, [r7, #16]
 800a988:	2b00      	cmp	r3, #0
 800a98a:	d002      	beq.n	800a992 <prvCopyDataToQueue+0xc4>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a98c:	693b      	ldr	r3, [r7, #16]
 800a98e:	3b01      	subs	r3, #1
 800a990:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a992:	693b      	ldr	r3, [r7, #16]
 800a994:	1c5a      	adds	r2, r3, #1
 800a996:	68fb      	ldr	r3, [r7, #12]
 800a998:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800a99a:	697b      	ldr	r3, [r7, #20]
}
 800a99c:	0018      	movs	r0, r3
 800a99e:	46bd      	mov	sp, r7
 800a9a0:	b006      	add	sp, #24
 800a9a2:	bd80      	pop	{r7, pc}

0800a9a4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a9a4:	b580      	push	{r7, lr}
 800a9a6:	b082      	sub	sp, #8
 800a9a8:	af00      	add	r7, sp, #0
 800a9aa:	6078      	str	r0, [r7, #4]
 800a9ac:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	d018      	beq.n	800a9e8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	68da      	ldr	r2, [r3, #12]
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9be:	18d2      	adds	r2, r2, r3
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	68da      	ldr	r2, [r3, #12]
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	689b      	ldr	r3, [r3, #8]
 800a9cc:	429a      	cmp	r2, r3
 800a9ce:	d303      	bcc.n	800a9d8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	681a      	ldr	r2, [r3, #0]
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	68d9      	ldr	r1, [r3, #12]
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a9e0:	683b      	ldr	r3, [r7, #0]
 800a9e2:	0018      	movs	r0, r3
 800a9e4:	f002 fd9d 	bl	800d522 <memcpy>
	}
}
 800a9e8:	46c0      	nop			; (mov r8, r8)
 800a9ea:	46bd      	mov	sp, r7
 800a9ec:	b002      	add	sp, #8
 800a9ee:	bd80      	pop	{r7, pc}

0800a9f0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a9f0:	b580      	push	{r7, lr}
 800a9f2:	b084      	sub	sp, #16
 800a9f4:	af00      	add	r7, sp, #0
 800a9f6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a9f8:	f001 fb02 	bl	800c000 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a9fc:	230f      	movs	r3, #15
 800a9fe:	18fb      	adds	r3, r7, r3
 800aa00:	687a      	ldr	r2, [r7, #4]
 800aa02:	2145      	movs	r1, #69	; 0x45
 800aa04:	5c52      	ldrb	r2, [r2, r1]
 800aa06:	701a      	strb	r2, [r3, #0]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800aa08:	e013      	b.n	800aa32 <prvUnlockQueue+0x42>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d016      	beq.n	800aa40 <prvUnlockQueue+0x50>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	3324      	adds	r3, #36	; 0x24
 800aa16:	0018      	movs	r0, r3
 800aa18:	f000 fce2 	bl	800b3e0 <xTaskRemoveFromEventList>
 800aa1c:	1e03      	subs	r3, r0, #0
 800aa1e:	d001      	beq.n	800aa24 <prvUnlockQueue+0x34>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800aa20:	f000 fd9e 	bl	800b560 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800aa24:	210f      	movs	r1, #15
 800aa26:	187b      	adds	r3, r7, r1
 800aa28:	781b      	ldrb	r3, [r3, #0]
 800aa2a:	3b01      	subs	r3, #1
 800aa2c:	b2da      	uxtb	r2, r3
 800aa2e:	187b      	adds	r3, r7, r1
 800aa30:	701a      	strb	r2, [r3, #0]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800aa32:	230f      	movs	r3, #15
 800aa34:	18fb      	adds	r3, r7, r3
 800aa36:	781b      	ldrb	r3, [r3, #0]
 800aa38:	b25b      	sxtb	r3, r3
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	dce5      	bgt.n	800aa0a <prvUnlockQueue+0x1a>
 800aa3e:	e000      	b.n	800aa42 <prvUnlockQueue+0x52>
					break;
 800aa40:	46c0      	nop			; (mov r8, r8)
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	2245      	movs	r2, #69	; 0x45
 800aa46:	21ff      	movs	r1, #255	; 0xff
 800aa48:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 800aa4a:	f001 faeb 	bl	800c024 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800aa4e:	f001 fad7 	bl	800c000 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800aa52:	230e      	movs	r3, #14
 800aa54:	18fb      	adds	r3, r7, r3
 800aa56:	687a      	ldr	r2, [r7, #4]
 800aa58:	2144      	movs	r1, #68	; 0x44
 800aa5a:	5c52      	ldrb	r2, [r2, r1]
 800aa5c:	701a      	strb	r2, [r3, #0]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800aa5e:	e013      	b.n	800aa88 <prvUnlockQueue+0x98>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	691b      	ldr	r3, [r3, #16]
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d016      	beq.n	800aa96 <prvUnlockQueue+0xa6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	3310      	adds	r3, #16
 800aa6c:	0018      	movs	r0, r3
 800aa6e:	f000 fcb7 	bl	800b3e0 <xTaskRemoveFromEventList>
 800aa72:	1e03      	subs	r3, r0, #0
 800aa74:	d001      	beq.n	800aa7a <prvUnlockQueue+0x8a>
				{
					vTaskMissedYield();
 800aa76:	f000 fd73 	bl	800b560 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800aa7a:	210e      	movs	r1, #14
 800aa7c:	187b      	adds	r3, r7, r1
 800aa7e:	781b      	ldrb	r3, [r3, #0]
 800aa80:	3b01      	subs	r3, #1
 800aa82:	b2da      	uxtb	r2, r3
 800aa84:	187b      	adds	r3, r7, r1
 800aa86:	701a      	strb	r2, [r3, #0]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800aa88:	230e      	movs	r3, #14
 800aa8a:	18fb      	adds	r3, r7, r3
 800aa8c:	781b      	ldrb	r3, [r3, #0]
 800aa8e:	b25b      	sxtb	r3, r3
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	dce5      	bgt.n	800aa60 <prvUnlockQueue+0x70>
 800aa94:	e000      	b.n	800aa98 <prvUnlockQueue+0xa8>
			}
			else
			{
				break;
 800aa96:	46c0      	nop			; (mov r8, r8)
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	2244      	movs	r2, #68	; 0x44
 800aa9c:	21ff      	movs	r1, #255	; 0xff
 800aa9e:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 800aaa0:	f001 fac0 	bl	800c024 <vPortExitCritical>
}
 800aaa4:	46c0      	nop			; (mov r8, r8)
 800aaa6:	46bd      	mov	sp, r7
 800aaa8:	b004      	add	sp, #16
 800aaaa:	bd80      	pop	{r7, pc}

0800aaac <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800aaac:	b580      	push	{r7, lr}
 800aaae:	b084      	sub	sp, #16
 800aab0:	af00      	add	r7, sp, #0
 800aab2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800aab4:	f001 faa4 	bl	800c000 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	d102      	bne.n	800aac6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800aac0:	2301      	movs	r3, #1
 800aac2:	60fb      	str	r3, [r7, #12]
 800aac4:	e001      	b.n	800aaca <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800aac6:	2300      	movs	r3, #0
 800aac8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800aaca:	f001 faab 	bl	800c024 <vPortExitCritical>

	return xReturn;
 800aace:	68fb      	ldr	r3, [r7, #12]
}
 800aad0:	0018      	movs	r0, r3
 800aad2:	46bd      	mov	sp, r7
 800aad4:	b004      	add	sp, #16
 800aad6:	bd80      	pop	{r7, pc}

0800aad8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800aad8:	b580      	push	{r7, lr}
 800aada:	b084      	sub	sp, #16
 800aadc:	af00      	add	r7, sp, #0
 800aade:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800aae0:	f001 fa8e 	bl	800c000 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aaec:	429a      	cmp	r2, r3
 800aaee:	d102      	bne.n	800aaf6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800aaf0:	2301      	movs	r3, #1
 800aaf2:	60fb      	str	r3, [r7, #12]
 800aaf4:	e001      	b.n	800aafa <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800aaf6:	2300      	movs	r3, #0
 800aaf8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800aafa:	f001 fa93 	bl	800c024 <vPortExitCritical>

	return xReturn;
 800aafe:	68fb      	ldr	r3, [r7, #12]
}
 800ab00:	0018      	movs	r0, r3
 800ab02:	46bd      	mov	sp, r7
 800ab04:	b004      	add	sp, #16
 800ab06:	bd80      	pop	{r7, pc}

0800ab08 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800ab08:	b580      	push	{r7, lr}
 800ab0a:	b084      	sub	sp, #16
 800ab0c:	af00      	add	r7, sp, #0
 800ab0e:	6078      	str	r0, [r7, #4]
 800ab10:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ab12:	2300      	movs	r3, #0
 800ab14:	60fb      	str	r3, [r7, #12]
 800ab16:	e015      	b.n	800ab44 <vQueueAddToRegistry+0x3c>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800ab18:	4b0e      	ldr	r3, [pc, #56]	; (800ab54 <vQueueAddToRegistry+0x4c>)
 800ab1a:	68fa      	ldr	r2, [r7, #12]
 800ab1c:	00d2      	lsls	r2, r2, #3
 800ab1e:	58d3      	ldr	r3, [r2, r3]
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d10c      	bne.n	800ab3e <vQueueAddToRegistry+0x36>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800ab24:	4b0b      	ldr	r3, [pc, #44]	; (800ab54 <vQueueAddToRegistry+0x4c>)
 800ab26:	68fa      	ldr	r2, [r7, #12]
 800ab28:	00d2      	lsls	r2, r2, #3
 800ab2a:	6839      	ldr	r1, [r7, #0]
 800ab2c:	50d1      	str	r1, [r2, r3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800ab2e:	4a09      	ldr	r2, [pc, #36]	; (800ab54 <vQueueAddToRegistry+0x4c>)
 800ab30:	68fb      	ldr	r3, [r7, #12]
 800ab32:	00db      	lsls	r3, r3, #3
 800ab34:	18d3      	adds	r3, r2, r3
 800ab36:	3304      	adds	r3, #4
 800ab38:	687a      	ldr	r2, [r7, #4]
 800ab3a:	601a      	str	r2, [r3, #0]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800ab3c:	e006      	b.n	800ab4c <vQueueAddToRegistry+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ab3e:	68fb      	ldr	r3, [r7, #12]
 800ab40:	3301      	adds	r3, #1
 800ab42:	60fb      	str	r3, [r7, #12]
 800ab44:	68fb      	ldr	r3, [r7, #12]
 800ab46:	2b07      	cmp	r3, #7
 800ab48:	d9e6      	bls.n	800ab18 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800ab4a:	46c0      	nop			; (mov r8, r8)
 800ab4c:	46c0      	nop			; (mov r8, r8)
 800ab4e:	46bd      	mov	sp, r7
 800ab50:	b004      	add	sp, #16
 800ab52:	bd80      	pop	{r7, pc}
 800ab54:	20001654 	.word	0x20001654

0800ab58 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ab58:	b580      	push	{r7, lr}
 800ab5a:	b086      	sub	sp, #24
 800ab5c:	af00      	add	r7, sp, #0
 800ab5e:	60f8      	str	r0, [r7, #12]
 800ab60:	60b9      	str	r1, [r7, #8]
 800ab62:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800ab64:	68fb      	ldr	r3, [r7, #12]
 800ab66:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800ab68:	f001 fa4a 	bl	800c000 <vPortEnterCritical>
 800ab6c:	697b      	ldr	r3, [r7, #20]
 800ab6e:	2244      	movs	r2, #68	; 0x44
 800ab70:	5c9b      	ldrb	r3, [r3, r2]
 800ab72:	b25b      	sxtb	r3, r3
 800ab74:	3301      	adds	r3, #1
 800ab76:	d103      	bne.n	800ab80 <vQueueWaitForMessageRestricted+0x28>
 800ab78:	697b      	ldr	r3, [r7, #20]
 800ab7a:	2244      	movs	r2, #68	; 0x44
 800ab7c:	2100      	movs	r1, #0
 800ab7e:	5499      	strb	r1, [r3, r2]
 800ab80:	697b      	ldr	r3, [r7, #20]
 800ab82:	2245      	movs	r2, #69	; 0x45
 800ab84:	5c9b      	ldrb	r3, [r3, r2]
 800ab86:	b25b      	sxtb	r3, r3
 800ab88:	3301      	adds	r3, #1
 800ab8a:	d103      	bne.n	800ab94 <vQueueWaitForMessageRestricted+0x3c>
 800ab8c:	697b      	ldr	r3, [r7, #20]
 800ab8e:	2245      	movs	r2, #69	; 0x45
 800ab90:	2100      	movs	r1, #0
 800ab92:	5499      	strb	r1, [r3, r2]
 800ab94:	f001 fa46 	bl	800c024 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800ab98:	697b      	ldr	r3, [r7, #20]
 800ab9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	d106      	bne.n	800abae <vQueueWaitForMessageRestricted+0x56>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800aba0:	697b      	ldr	r3, [r7, #20]
 800aba2:	3324      	adds	r3, #36	; 0x24
 800aba4:	687a      	ldr	r2, [r7, #4]
 800aba6:	68b9      	ldr	r1, [r7, #8]
 800aba8:	0018      	movs	r0, r3
 800abaa:	f000 fbf3 	bl	800b394 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800abae:	697b      	ldr	r3, [r7, #20]
 800abb0:	0018      	movs	r0, r3
 800abb2:	f7ff ff1d 	bl	800a9f0 <prvUnlockQueue>
	}
 800abb6:	46c0      	nop			; (mov r8, r8)
 800abb8:	46bd      	mov	sp, r7
 800abba:	b006      	add	sp, #24
 800abbc:	bd80      	pop	{r7, pc}

0800abbe <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800abbe:	b590      	push	{r4, r7, lr}
 800abc0:	b08d      	sub	sp, #52	; 0x34
 800abc2:	af04      	add	r7, sp, #16
 800abc4:	60f8      	str	r0, [r7, #12]
 800abc6:	60b9      	str	r1, [r7, #8]
 800abc8:	607a      	str	r2, [r7, #4]
 800abca:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800abcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800abce:	2b00      	cmp	r3, #0
 800abd0:	d101      	bne.n	800abd6 <xTaskCreateStatic+0x18>
 800abd2:	b672      	cpsid	i
 800abd4:	e7fe      	b.n	800abd4 <xTaskCreateStatic+0x16>
		configASSERT( pxTaskBuffer != NULL );
 800abd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d101      	bne.n	800abe0 <xTaskCreateStatic+0x22>
 800abdc:	b672      	cpsid	i
 800abde:	e7fe      	b.n	800abde <xTaskCreateStatic+0x20>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800abe0:	23a8      	movs	r3, #168	; 0xa8
 800abe2:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 800abe4:	697b      	ldr	r3, [r7, #20]
 800abe6:	2ba8      	cmp	r3, #168	; 0xa8
 800abe8:	d001      	beq.n	800abee <xTaskCreateStatic+0x30>
 800abea:	b672      	cpsid	i
 800abec:	e7fe      	b.n	800abec <xTaskCreateStatic+0x2e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800abee:	697b      	ldr	r3, [r7, #20]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800abf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	d020      	beq.n	800ac38 <xTaskCreateStatic+0x7a>
 800abf6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d01d      	beq.n	800ac38 <xTaskCreateStatic+0x7a>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800abfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abfe:	61fb      	str	r3, [r7, #28]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800ac00:	69fb      	ldr	r3, [r7, #28]
 800ac02:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ac04:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800ac06:	69fb      	ldr	r3, [r7, #28]
 800ac08:	22a5      	movs	r2, #165	; 0xa5
 800ac0a:	2102      	movs	r1, #2
 800ac0c:	5499      	strb	r1, [r3, r2]
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800ac0e:	683c      	ldr	r4, [r7, #0]
 800ac10:	687a      	ldr	r2, [r7, #4]
 800ac12:	68b9      	ldr	r1, [r7, #8]
 800ac14:	68f8      	ldr	r0, [r7, #12]
 800ac16:	2300      	movs	r3, #0
 800ac18:	9303      	str	r3, [sp, #12]
 800ac1a:	69fb      	ldr	r3, [r7, #28]
 800ac1c:	9302      	str	r3, [sp, #8]
 800ac1e:	2318      	movs	r3, #24
 800ac20:	18fb      	adds	r3, r7, r3
 800ac22:	9301      	str	r3, [sp, #4]
 800ac24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac26:	9300      	str	r3, [sp, #0]
 800ac28:	0023      	movs	r3, r4
 800ac2a:	f000 f859 	bl	800ace0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ac2e:	69fb      	ldr	r3, [r7, #28]
 800ac30:	0018      	movs	r0, r3
 800ac32:	f000 f8f5 	bl	800ae20 <prvAddNewTaskToReadyList>
 800ac36:	e001      	b.n	800ac3c <xTaskCreateStatic+0x7e>
		}
		else
		{
			xReturn = NULL;
 800ac38:	2300      	movs	r3, #0
 800ac3a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800ac3c:	69bb      	ldr	r3, [r7, #24]
	}
 800ac3e:	0018      	movs	r0, r3
 800ac40:	46bd      	mov	sp, r7
 800ac42:	b009      	add	sp, #36	; 0x24
 800ac44:	bd90      	pop	{r4, r7, pc}

0800ac46 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800ac46:	b590      	push	{r4, r7, lr}
 800ac48:	b08d      	sub	sp, #52	; 0x34
 800ac4a:	af04      	add	r7, sp, #16
 800ac4c:	60f8      	str	r0, [r7, #12]
 800ac4e:	60b9      	str	r1, [r7, #8]
 800ac50:	603b      	str	r3, [r7, #0]
 800ac52:	1dbb      	adds	r3, r7, #6
 800ac54:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800ac56:	1dbb      	adds	r3, r7, #6
 800ac58:	881b      	ldrh	r3, [r3, #0]
 800ac5a:	009b      	lsls	r3, r3, #2
 800ac5c:	0018      	movs	r0, r3
 800ac5e:	f001 fa67 	bl	800c130 <pvPortMalloc>
 800ac62:	0003      	movs	r3, r0
 800ac64:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
 800ac66:	697b      	ldr	r3, [r7, #20]
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	d010      	beq.n	800ac8e <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800ac6c:	20a8      	movs	r0, #168	; 0xa8
 800ac6e:	f001 fa5f 	bl	800c130 <pvPortMalloc>
 800ac72:	0003      	movs	r3, r0
 800ac74:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
 800ac76:	69fb      	ldr	r3, [r7, #28]
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d003      	beq.n	800ac84 <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800ac7c:	69fb      	ldr	r3, [r7, #28]
 800ac7e:	697a      	ldr	r2, [r7, #20]
 800ac80:	631a      	str	r2, [r3, #48]	; 0x30
 800ac82:	e006      	b.n	800ac92 <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800ac84:	697b      	ldr	r3, [r7, #20]
 800ac86:	0018      	movs	r0, r3
 800ac88:	f001 fafe 	bl	800c288 <vPortFree>
 800ac8c:	e001      	b.n	800ac92 <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800ac8e:	2300      	movs	r3, #0
 800ac90:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800ac92:	69fb      	ldr	r3, [r7, #28]
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	d01a      	beq.n	800acce <xTaskCreate+0x88>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800ac98:	69fb      	ldr	r3, [r7, #28]
 800ac9a:	22a5      	movs	r2, #165	; 0xa5
 800ac9c:	2100      	movs	r1, #0
 800ac9e:	5499      	strb	r1, [r3, r2]
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800aca0:	1dbb      	adds	r3, r7, #6
 800aca2:	881a      	ldrh	r2, [r3, #0]
 800aca4:	683c      	ldr	r4, [r7, #0]
 800aca6:	68b9      	ldr	r1, [r7, #8]
 800aca8:	68f8      	ldr	r0, [r7, #12]
 800acaa:	2300      	movs	r3, #0
 800acac:	9303      	str	r3, [sp, #12]
 800acae:	69fb      	ldr	r3, [r7, #28]
 800acb0:	9302      	str	r3, [sp, #8]
 800acb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800acb4:	9301      	str	r3, [sp, #4]
 800acb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acb8:	9300      	str	r3, [sp, #0]
 800acba:	0023      	movs	r3, r4
 800acbc:	f000 f810 	bl	800ace0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800acc0:	69fb      	ldr	r3, [r7, #28]
 800acc2:	0018      	movs	r0, r3
 800acc4:	f000 f8ac 	bl	800ae20 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800acc8:	2301      	movs	r3, #1
 800acca:	61bb      	str	r3, [r7, #24]
 800accc:	e002      	b.n	800acd4 <xTaskCreate+0x8e>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800acce:	2301      	movs	r3, #1
 800acd0:	425b      	negs	r3, r3
 800acd2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800acd4:	69bb      	ldr	r3, [r7, #24]
	}
 800acd6:	0018      	movs	r0, r3
 800acd8:	46bd      	mov	sp, r7
 800acda:	b009      	add	sp, #36	; 0x24
 800acdc:	bd90      	pop	{r4, r7, pc}
	...

0800ace0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800ace0:	b580      	push	{r7, lr}
 800ace2:	b086      	sub	sp, #24
 800ace4:	af00      	add	r7, sp, #0
 800ace6:	60f8      	str	r0, [r7, #12]
 800ace8:	60b9      	str	r1, [r7, #8]
 800acea:	607a      	str	r2, [r7, #4]
 800acec:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800acee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acf0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	009b      	lsls	r3, r3, #2
 800acf6:	001a      	movs	r2, r3
 800acf8:	21a5      	movs	r1, #165	; 0xa5
 800acfa:	f002 fb1f 	bl	800d33c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800acfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad00:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	4942      	ldr	r1, [pc, #264]	; (800ae10 <prvInitialiseNewTask+0x130>)
 800ad06:	468c      	mov	ip, r1
 800ad08:	4463      	add	r3, ip
 800ad0a:	009b      	lsls	r3, r3, #2
 800ad0c:	18d3      	adds	r3, r2, r3
 800ad0e:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800ad10:	693b      	ldr	r3, [r7, #16]
 800ad12:	2207      	movs	r2, #7
 800ad14:	4393      	bics	r3, r2
 800ad16:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800ad18:	693b      	ldr	r3, [r7, #16]
 800ad1a:	2207      	movs	r2, #7
 800ad1c:	4013      	ands	r3, r2
 800ad1e:	d001      	beq.n	800ad24 <prvInitialiseNewTask+0x44>
 800ad20:	b672      	cpsid	i
 800ad22:	e7fe      	b.n	800ad22 <prvInitialiseNewTask+0x42>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800ad24:	68bb      	ldr	r3, [r7, #8]
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d020      	beq.n	800ad6c <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ad2a:	2300      	movs	r3, #0
 800ad2c:	617b      	str	r3, [r7, #20]
 800ad2e:	e013      	b.n	800ad58 <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800ad30:	68ba      	ldr	r2, [r7, #8]
 800ad32:	697b      	ldr	r3, [r7, #20]
 800ad34:	18d3      	adds	r3, r2, r3
 800ad36:	7818      	ldrb	r0, [r3, #0]
 800ad38:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ad3a:	2134      	movs	r1, #52	; 0x34
 800ad3c:	697b      	ldr	r3, [r7, #20]
 800ad3e:	18d3      	adds	r3, r2, r3
 800ad40:	185b      	adds	r3, r3, r1
 800ad42:	1c02      	adds	r2, r0, #0
 800ad44:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800ad46:	68ba      	ldr	r2, [r7, #8]
 800ad48:	697b      	ldr	r3, [r7, #20]
 800ad4a:	18d3      	adds	r3, r2, r3
 800ad4c:	781b      	ldrb	r3, [r3, #0]
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	d006      	beq.n	800ad60 <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ad52:	697b      	ldr	r3, [r7, #20]
 800ad54:	3301      	adds	r3, #1
 800ad56:	617b      	str	r3, [r7, #20]
 800ad58:	697b      	ldr	r3, [r7, #20]
 800ad5a:	2b0f      	cmp	r3, #15
 800ad5c:	d9e8      	bls.n	800ad30 <prvInitialiseNewTask+0x50>
 800ad5e:	e000      	b.n	800ad62 <prvInitialiseNewTask+0x82>
			{
				break;
 800ad60:	46c0      	nop			; (mov r8, r8)
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800ad62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad64:	2243      	movs	r2, #67	; 0x43
 800ad66:	2100      	movs	r1, #0
 800ad68:	5499      	strb	r1, [r3, r2]
 800ad6a:	e003      	b.n	800ad74 <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800ad6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad6e:	2234      	movs	r2, #52	; 0x34
 800ad70:	2100      	movs	r1, #0
 800ad72:	5499      	strb	r1, [r3, r2]
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800ad74:	6a3b      	ldr	r3, [r7, #32]
 800ad76:	2b37      	cmp	r3, #55	; 0x37
 800ad78:	d901      	bls.n	800ad7e <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800ad7a:	2337      	movs	r3, #55	; 0x37
 800ad7c:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800ad7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad80:	6a3a      	ldr	r2, [r7, #32]
 800ad82:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800ad84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad86:	6a3a      	ldr	r2, [r7, #32]
 800ad88:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800ad8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad8c:	2200      	movs	r2, #0
 800ad8e:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800ad90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad92:	3304      	adds	r3, #4
 800ad94:	0018      	movs	r0, r3
 800ad96:	f7ff fa5b 	bl	800a250 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800ad9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad9c:	3318      	adds	r3, #24
 800ad9e:	0018      	movs	r0, r3
 800ada0:	f7ff fa56 	bl	800a250 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800ada4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ada6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ada8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800adaa:	6a3b      	ldr	r3, [r7, #32]
 800adac:	2238      	movs	r2, #56	; 0x38
 800adae:	1ad2      	subs	r2, r2, r3
 800adb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adb2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800adb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adb6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800adb8:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800adba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adbc:	22a0      	movs	r2, #160	; 0xa0
 800adbe:	2100      	movs	r1, #0
 800adc0:	5099      	str	r1, [r3, r2]
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800adc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adc4:	22a4      	movs	r2, #164	; 0xa4
 800adc6:	2100      	movs	r1, #0
 800adc8:	5499      	strb	r1, [r3, r2]
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800adca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adcc:	3354      	adds	r3, #84	; 0x54
 800adce:	224c      	movs	r2, #76	; 0x4c
 800add0:	2100      	movs	r1, #0
 800add2:	0018      	movs	r0, r3
 800add4:	f002 fab2 	bl	800d33c <memset>
 800add8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adda:	4a0e      	ldr	r2, [pc, #56]	; (800ae14 <prvInitialiseNewTask+0x134>)
 800addc:	659a      	str	r2, [r3, #88]	; 0x58
 800adde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ade0:	4a0d      	ldr	r2, [pc, #52]	; (800ae18 <prvInitialiseNewTask+0x138>)
 800ade2:	65da      	str	r2, [r3, #92]	; 0x5c
 800ade4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ade6:	4a0d      	ldr	r2, [pc, #52]	; (800ae1c <prvInitialiseNewTask+0x13c>)
 800ade8:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800adea:	683a      	ldr	r2, [r7, #0]
 800adec:	68f9      	ldr	r1, [r7, #12]
 800adee:	693b      	ldr	r3, [r7, #16]
 800adf0:	0018      	movs	r0, r3
 800adf2:	f001 f86b 	bl	800becc <pxPortInitialiseStack>
 800adf6:	0002      	movs	r2, r0
 800adf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adfa:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800adfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	d002      	beq.n	800ae08 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800ae02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae04:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ae06:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ae08:	46c0      	nop			; (mov r8, r8)
 800ae0a:	46bd      	mov	sp, r7
 800ae0c:	b006      	add	sp, #24
 800ae0e:	bd80      	pop	{r7, pc}
 800ae10:	3fffffff 	.word	0x3fffffff
 800ae14:	200028e0 	.word	0x200028e0
 800ae18:	20002948 	.word	0x20002948
 800ae1c:	200029b0 	.word	0x200029b0

0800ae20 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800ae20:	b580      	push	{r7, lr}
 800ae22:	b082      	sub	sp, #8
 800ae24:	af00      	add	r7, sp, #0
 800ae26:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800ae28:	f001 f8ea 	bl	800c000 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800ae2c:	4b2a      	ldr	r3, [pc, #168]	; (800aed8 <prvAddNewTaskToReadyList+0xb8>)
 800ae2e:	681b      	ldr	r3, [r3, #0]
 800ae30:	1c5a      	adds	r2, r3, #1
 800ae32:	4b29      	ldr	r3, [pc, #164]	; (800aed8 <prvAddNewTaskToReadyList+0xb8>)
 800ae34:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 800ae36:	4b29      	ldr	r3, [pc, #164]	; (800aedc <prvAddNewTaskToReadyList+0xbc>)
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	d109      	bne.n	800ae52 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800ae3e:	4b27      	ldr	r3, [pc, #156]	; (800aedc <prvAddNewTaskToReadyList+0xbc>)
 800ae40:	687a      	ldr	r2, [r7, #4]
 800ae42:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800ae44:	4b24      	ldr	r3, [pc, #144]	; (800aed8 <prvAddNewTaskToReadyList+0xb8>)
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	2b01      	cmp	r3, #1
 800ae4a:	d110      	bne.n	800ae6e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800ae4c:	f000 fba2 	bl	800b594 <prvInitialiseTaskLists>
 800ae50:	e00d      	b.n	800ae6e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800ae52:	4b23      	ldr	r3, [pc, #140]	; (800aee0 <prvAddNewTaskToReadyList+0xc0>)
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	d109      	bne.n	800ae6e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800ae5a:	4b20      	ldr	r3, [pc, #128]	; (800aedc <prvAddNewTaskToReadyList+0xbc>)
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae64:	429a      	cmp	r2, r3
 800ae66:	d802      	bhi.n	800ae6e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800ae68:	4b1c      	ldr	r3, [pc, #112]	; (800aedc <prvAddNewTaskToReadyList+0xbc>)
 800ae6a:	687a      	ldr	r2, [r7, #4]
 800ae6c:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800ae6e:	4b1d      	ldr	r3, [pc, #116]	; (800aee4 <prvAddNewTaskToReadyList+0xc4>)
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	1c5a      	adds	r2, r3, #1
 800ae74:	4b1b      	ldr	r3, [pc, #108]	; (800aee4 <prvAddNewTaskToReadyList+0xc4>)
 800ae76:	601a      	str	r2, [r3, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800ae78:	4b1a      	ldr	r3, [pc, #104]	; (800aee4 <prvAddNewTaskToReadyList+0xc4>)
 800ae7a:	681a      	ldr	r2, [r3, #0]
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae84:	4b18      	ldr	r3, [pc, #96]	; (800aee8 <prvAddNewTaskToReadyList+0xc8>)
 800ae86:	681b      	ldr	r3, [r3, #0]
 800ae88:	429a      	cmp	r2, r3
 800ae8a:	d903      	bls.n	800ae94 <prvAddNewTaskToReadyList+0x74>
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae90:	4b15      	ldr	r3, [pc, #84]	; (800aee8 <prvAddNewTaskToReadyList+0xc8>)
 800ae92:	601a      	str	r2, [r3, #0]
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae98:	0013      	movs	r3, r2
 800ae9a:	009b      	lsls	r3, r3, #2
 800ae9c:	189b      	adds	r3, r3, r2
 800ae9e:	009b      	lsls	r3, r3, #2
 800aea0:	4a12      	ldr	r2, [pc, #72]	; (800aeec <prvAddNewTaskToReadyList+0xcc>)
 800aea2:	189a      	adds	r2, r3, r2
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	3304      	adds	r3, #4
 800aea8:	0019      	movs	r1, r3
 800aeaa:	0010      	movs	r0, r2
 800aeac:	f7ff f9db 	bl	800a266 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800aeb0:	f001 f8b8 	bl	800c024 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800aeb4:	4b0a      	ldr	r3, [pc, #40]	; (800aee0 <prvAddNewTaskToReadyList+0xc0>)
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	d008      	beq.n	800aece <prvAddNewTaskToReadyList+0xae>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800aebc:	4b07      	ldr	r3, [pc, #28]	; (800aedc <prvAddNewTaskToReadyList+0xbc>)
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aec6:	429a      	cmp	r2, r3
 800aec8:	d201      	bcs.n	800aece <prvAddNewTaskToReadyList+0xae>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800aeca:	f001 f889 	bl	800bfe0 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800aece:	46c0      	nop			; (mov r8, r8)
 800aed0:	46bd      	mov	sp, r7
 800aed2:	b002      	add	sp, #8
 800aed4:	bd80      	pop	{r7, pc}
 800aed6:	46c0      	nop			; (mov r8, r8)
 800aed8:	20001b68 	.word	0x20001b68
 800aedc:	20001694 	.word	0x20001694
 800aee0:	20001b74 	.word	0x20001b74
 800aee4:	20001b84 	.word	0x20001b84
 800aee8:	20001b70 	.word	0x20001b70
 800aeec:	20001698 	.word	0x20001698

0800aef0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800aef0:	b580      	push	{r7, lr}
 800aef2:	b084      	sub	sp, #16
 800aef4:	af00      	add	r7, sp, #0
 800aef6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800aef8:	2300      	movs	r3, #0
 800aefa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	2b00      	cmp	r3, #0
 800af00:	d010      	beq.n	800af24 <vTaskDelay+0x34>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800af02:	4b0d      	ldr	r3, [pc, #52]	; (800af38 <vTaskDelay+0x48>)
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	2b00      	cmp	r3, #0
 800af08:	d001      	beq.n	800af0e <vTaskDelay+0x1e>
 800af0a:	b672      	cpsid	i
 800af0c:	e7fe      	b.n	800af0c <vTaskDelay+0x1c>
			vTaskSuspendAll();
 800af0e:	f000 f873 	bl	800aff8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	2100      	movs	r1, #0
 800af16:	0018      	movs	r0, r3
 800af18:	f000 fc72 	bl	800b800 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800af1c:	f000 f878 	bl	800b010 <xTaskResumeAll>
 800af20:	0003      	movs	r3, r0
 800af22:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800af24:	68fb      	ldr	r3, [r7, #12]
 800af26:	2b00      	cmp	r3, #0
 800af28:	d101      	bne.n	800af2e <vTaskDelay+0x3e>
		{
			portYIELD_WITHIN_API();
 800af2a:	f001 f859 	bl	800bfe0 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800af2e:	46c0      	nop			; (mov r8, r8)
 800af30:	46bd      	mov	sp, r7
 800af32:	b004      	add	sp, #16
 800af34:	bd80      	pop	{r7, pc}
 800af36:	46c0      	nop			; (mov r8, r8)
 800af38:	20001b90 	.word	0x20001b90

0800af3c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800af3c:	b590      	push	{r4, r7, lr}
 800af3e:	b089      	sub	sp, #36	; 0x24
 800af40:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800af42:	2300      	movs	r3, #0
 800af44:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800af46:	2300      	movs	r3, #0
 800af48:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800af4a:	003a      	movs	r2, r7
 800af4c:	1d39      	adds	r1, r7, #4
 800af4e:	2308      	movs	r3, #8
 800af50:	18fb      	adds	r3, r7, r3
 800af52:	0018      	movs	r0, r3
 800af54:	f7ff f92e 	bl	800a1b4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800af58:	683c      	ldr	r4, [r7, #0]
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	68ba      	ldr	r2, [r7, #8]
 800af5e:	491e      	ldr	r1, [pc, #120]	; (800afd8 <vTaskStartScheduler+0x9c>)
 800af60:	481e      	ldr	r0, [pc, #120]	; (800afdc <vTaskStartScheduler+0xa0>)
 800af62:	9202      	str	r2, [sp, #8]
 800af64:	9301      	str	r3, [sp, #4]
 800af66:	2300      	movs	r3, #0
 800af68:	9300      	str	r3, [sp, #0]
 800af6a:	2300      	movs	r3, #0
 800af6c:	0022      	movs	r2, r4
 800af6e:	f7ff fe26 	bl	800abbe <xTaskCreateStatic>
 800af72:	0002      	movs	r2, r0
 800af74:	4b1a      	ldr	r3, [pc, #104]	; (800afe0 <vTaskStartScheduler+0xa4>)
 800af76:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800af78:	4b19      	ldr	r3, [pc, #100]	; (800afe0 <vTaskStartScheduler+0xa4>)
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	d002      	beq.n	800af86 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800af80:	2301      	movs	r3, #1
 800af82:	60fb      	str	r3, [r7, #12]
 800af84:	e001      	b.n	800af8a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800af86:	2300      	movs	r3, #0
 800af88:	60fb      	str	r3, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800af8a:	68fb      	ldr	r3, [r7, #12]
 800af8c:	2b01      	cmp	r3, #1
 800af8e:	d103      	bne.n	800af98 <vTaskStartScheduler+0x5c>
		{
			xReturn = xTimerCreateTimerTask();
 800af90:	f000 fc8a 	bl	800b8a8 <xTimerCreateTimerTask>
 800af94:	0003      	movs	r3, r0
 800af96:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800af98:	68fb      	ldr	r3, [r7, #12]
 800af9a:	2b01      	cmp	r3, #1
 800af9c:	d113      	bne.n	800afc6 <vTaskStartScheduler+0x8a>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 800af9e:	b672      	cpsid	i
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800afa0:	4b10      	ldr	r3, [pc, #64]	; (800afe4 <vTaskStartScheduler+0xa8>)
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	3354      	adds	r3, #84	; 0x54
 800afa6:	001a      	movs	r2, r3
 800afa8:	4b0f      	ldr	r3, [pc, #60]	; (800afe8 <vTaskStartScheduler+0xac>)
 800afaa:	601a      	str	r2, [r3, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800afac:	4b0f      	ldr	r3, [pc, #60]	; (800afec <vTaskStartScheduler+0xb0>)
 800afae:	2201      	movs	r2, #1
 800afb0:	4252      	negs	r2, r2
 800afb2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800afb4:	4b0e      	ldr	r3, [pc, #56]	; (800aff0 <vTaskStartScheduler+0xb4>)
 800afb6:	2201      	movs	r2, #1
 800afb8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800afba:	4b0e      	ldr	r3, [pc, #56]	; (800aff4 <vTaskStartScheduler+0xb8>)
 800afbc:	2200      	movs	r2, #0
 800afbe:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800afc0:	f000 ffea 	bl	800bf98 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800afc4:	e004      	b.n	800afd0 <vTaskStartScheduler+0x94>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800afc6:	68fb      	ldr	r3, [r7, #12]
 800afc8:	3301      	adds	r3, #1
 800afca:	d101      	bne.n	800afd0 <vTaskStartScheduler+0x94>
 800afcc:	b672      	cpsid	i
 800afce:	e7fe      	b.n	800afce <vTaskStartScheduler+0x92>
}
 800afd0:	46c0      	nop			; (mov r8, r8)
 800afd2:	46bd      	mov	sp, r7
 800afd4:	b005      	add	sp, #20
 800afd6:	bd90      	pop	{r4, r7, pc}
 800afd8:	0800f394 	.word	0x0800f394
 800afdc:	0800b575 	.word	0x0800b575
 800afe0:	20001b8c 	.word	0x20001b8c
 800afe4:	20001694 	.word	0x20001694
 800afe8:	200001d4 	.word	0x200001d4
 800afec:	20001b88 	.word	0x20001b88
 800aff0:	20001b74 	.word	0x20001b74
 800aff4:	20001b6c 	.word	0x20001b6c

0800aff8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800aff8:	b580      	push	{r7, lr}
 800affa:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800affc:	4b03      	ldr	r3, [pc, #12]	; (800b00c <vTaskSuspendAll+0x14>)
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	1c5a      	adds	r2, r3, #1
 800b002:	4b02      	ldr	r3, [pc, #8]	; (800b00c <vTaskSuspendAll+0x14>)
 800b004:	601a      	str	r2, [r3, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800b006:	46c0      	nop			; (mov r8, r8)
 800b008:	46bd      	mov	sp, r7
 800b00a:	bd80      	pop	{r7, pc}
 800b00c:	20001b90 	.word	0x20001b90

0800b010 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b010:	b580      	push	{r7, lr}
 800b012:	b084      	sub	sp, #16
 800b014:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b016:	2300      	movs	r3, #0
 800b018:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b01a:	2300      	movs	r3, #0
 800b01c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b01e:	4b3a      	ldr	r3, [pc, #232]	; (800b108 <xTaskResumeAll+0xf8>)
 800b020:	681b      	ldr	r3, [r3, #0]
 800b022:	2b00      	cmp	r3, #0
 800b024:	d101      	bne.n	800b02a <xTaskResumeAll+0x1a>
 800b026:	b672      	cpsid	i
 800b028:	e7fe      	b.n	800b028 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b02a:	f000 ffe9 	bl	800c000 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b02e:	4b36      	ldr	r3, [pc, #216]	; (800b108 <xTaskResumeAll+0xf8>)
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	1e5a      	subs	r2, r3, #1
 800b034:	4b34      	ldr	r3, [pc, #208]	; (800b108 <xTaskResumeAll+0xf8>)
 800b036:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b038:	4b33      	ldr	r3, [pc, #204]	; (800b108 <xTaskResumeAll+0xf8>)
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	d15b      	bne.n	800b0f8 <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b040:	4b32      	ldr	r3, [pc, #200]	; (800b10c <xTaskResumeAll+0xfc>)
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	2b00      	cmp	r3, #0
 800b046:	d057      	beq.n	800b0f8 <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b048:	e02f      	b.n	800b0aa <xTaskResumeAll+0x9a>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b04a:	4b31      	ldr	r3, [pc, #196]	; (800b110 <xTaskResumeAll+0x100>)
 800b04c:	68db      	ldr	r3, [r3, #12]
 800b04e:	68db      	ldr	r3, [r3, #12]
 800b050:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b052:	68fb      	ldr	r3, [r7, #12]
 800b054:	3318      	adds	r3, #24
 800b056:	0018      	movs	r0, r3
 800b058:	f7ff f95d 	bl	800a316 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b05c:	68fb      	ldr	r3, [r7, #12]
 800b05e:	3304      	adds	r3, #4
 800b060:	0018      	movs	r0, r3
 800b062:	f7ff f958 	bl	800a316 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b066:	68fb      	ldr	r3, [r7, #12]
 800b068:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b06a:	4b2a      	ldr	r3, [pc, #168]	; (800b114 <xTaskResumeAll+0x104>)
 800b06c:	681b      	ldr	r3, [r3, #0]
 800b06e:	429a      	cmp	r2, r3
 800b070:	d903      	bls.n	800b07a <xTaskResumeAll+0x6a>
 800b072:	68fb      	ldr	r3, [r7, #12]
 800b074:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b076:	4b27      	ldr	r3, [pc, #156]	; (800b114 <xTaskResumeAll+0x104>)
 800b078:	601a      	str	r2, [r3, #0]
 800b07a:	68fb      	ldr	r3, [r7, #12]
 800b07c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b07e:	0013      	movs	r3, r2
 800b080:	009b      	lsls	r3, r3, #2
 800b082:	189b      	adds	r3, r3, r2
 800b084:	009b      	lsls	r3, r3, #2
 800b086:	4a24      	ldr	r2, [pc, #144]	; (800b118 <xTaskResumeAll+0x108>)
 800b088:	189a      	adds	r2, r3, r2
 800b08a:	68fb      	ldr	r3, [r7, #12]
 800b08c:	3304      	adds	r3, #4
 800b08e:	0019      	movs	r1, r3
 800b090:	0010      	movs	r0, r2
 800b092:	f7ff f8e8 	bl	800a266 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b096:	68fb      	ldr	r3, [r7, #12]
 800b098:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b09a:	4b20      	ldr	r3, [pc, #128]	; (800b11c <xTaskResumeAll+0x10c>)
 800b09c:	681b      	ldr	r3, [r3, #0]
 800b09e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0a0:	429a      	cmp	r2, r3
 800b0a2:	d302      	bcc.n	800b0aa <xTaskResumeAll+0x9a>
					{
						xYieldPending = pdTRUE;
 800b0a4:	4b1e      	ldr	r3, [pc, #120]	; (800b120 <xTaskResumeAll+0x110>)
 800b0a6:	2201      	movs	r2, #1
 800b0a8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b0aa:	4b19      	ldr	r3, [pc, #100]	; (800b110 <xTaskResumeAll+0x100>)
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d1cb      	bne.n	800b04a <xTaskResumeAll+0x3a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b0b2:	68fb      	ldr	r3, [r7, #12]
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	d001      	beq.n	800b0bc <xTaskResumeAll+0xac>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b0b8:	f000 fb0c 	bl	800b6d4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800b0bc:	4b19      	ldr	r3, [pc, #100]	; (800b124 <xTaskResumeAll+0x114>)
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	d00f      	beq.n	800b0e8 <xTaskResumeAll+0xd8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b0c8:	f000 f83c 	bl	800b144 <xTaskIncrementTick>
 800b0cc:	1e03      	subs	r3, r0, #0
 800b0ce:	d002      	beq.n	800b0d6 <xTaskResumeAll+0xc6>
							{
								xYieldPending = pdTRUE;
 800b0d0:	4b13      	ldr	r3, [pc, #76]	; (800b120 <xTaskResumeAll+0x110>)
 800b0d2:	2201      	movs	r2, #1
 800b0d4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	3b01      	subs	r3, #1
 800b0da:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	d1f2      	bne.n	800b0c8 <xTaskResumeAll+0xb8>

						xPendedTicks = 0;
 800b0e2:	4b10      	ldr	r3, [pc, #64]	; (800b124 <xTaskResumeAll+0x114>)
 800b0e4:	2200      	movs	r2, #0
 800b0e6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b0e8:	4b0d      	ldr	r3, [pc, #52]	; (800b120 <xTaskResumeAll+0x110>)
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	d003      	beq.n	800b0f8 <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b0f0:	2301      	movs	r3, #1
 800b0f2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b0f4:	f000 ff74 	bl	800bfe0 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b0f8:	f000 ff94 	bl	800c024 <vPortExitCritical>

	return xAlreadyYielded;
 800b0fc:	68bb      	ldr	r3, [r7, #8]
}
 800b0fe:	0018      	movs	r0, r3
 800b100:	46bd      	mov	sp, r7
 800b102:	b004      	add	sp, #16
 800b104:	bd80      	pop	{r7, pc}
 800b106:	46c0      	nop			; (mov r8, r8)
 800b108:	20001b90 	.word	0x20001b90
 800b10c:	20001b68 	.word	0x20001b68
 800b110:	20001b28 	.word	0x20001b28
 800b114:	20001b70 	.word	0x20001b70
 800b118:	20001698 	.word	0x20001698
 800b11c:	20001694 	.word	0x20001694
 800b120:	20001b7c 	.word	0x20001b7c
 800b124:	20001b78 	.word	0x20001b78

0800b128 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b128:	b580      	push	{r7, lr}
 800b12a:	b082      	sub	sp, #8
 800b12c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b12e:	4b04      	ldr	r3, [pc, #16]	; (800b140 <xTaskGetTickCount+0x18>)
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b134:	687b      	ldr	r3, [r7, #4]
}
 800b136:	0018      	movs	r0, r3
 800b138:	46bd      	mov	sp, r7
 800b13a:	b002      	add	sp, #8
 800b13c:	bd80      	pop	{r7, pc}
 800b13e:	46c0      	nop			; (mov r8, r8)
 800b140:	20001b6c 	.word	0x20001b6c

0800b144 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b144:	b580      	push	{r7, lr}
 800b146:	b086      	sub	sp, #24
 800b148:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b14a:	2300      	movs	r3, #0
 800b14c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b14e:	4b4a      	ldr	r3, [pc, #296]	; (800b278 <xTaskIncrementTick+0x134>)
 800b150:	681b      	ldr	r3, [r3, #0]
 800b152:	2b00      	cmp	r3, #0
 800b154:	d000      	beq.n	800b158 <xTaskIncrementTick+0x14>
 800b156:	e084      	b.n	800b262 <xTaskIncrementTick+0x11e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b158:	4b48      	ldr	r3, [pc, #288]	; (800b27c <xTaskIncrementTick+0x138>)
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	3301      	adds	r3, #1
 800b15e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b160:	4b46      	ldr	r3, [pc, #280]	; (800b27c <xTaskIncrementTick+0x138>)
 800b162:	693a      	ldr	r2, [r7, #16]
 800b164:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b166:	693b      	ldr	r3, [r7, #16]
 800b168:	2b00      	cmp	r3, #0
 800b16a:	d117      	bne.n	800b19c <xTaskIncrementTick+0x58>
		{
			taskSWITCH_DELAYED_LISTS();
 800b16c:	4b44      	ldr	r3, [pc, #272]	; (800b280 <xTaskIncrementTick+0x13c>)
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	2b00      	cmp	r3, #0
 800b174:	d001      	beq.n	800b17a <xTaskIncrementTick+0x36>
 800b176:	b672      	cpsid	i
 800b178:	e7fe      	b.n	800b178 <xTaskIncrementTick+0x34>
 800b17a:	4b41      	ldr	r3, [pc, #260]	; (800b280 <xTaskIncrementTick+0x13c>)
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	60fb      	str	r3, [r7, #12]
 800b180:	4b40      	ldr	r3, [pc, #256]	; (800b284 <xTaskIncrementTick+0x140>)
 800b182:	681a      	ldr	r2, [r3, #0]
 800b184:	4b3e      	ldr	r3, [pc, #248]	; (800b280 <xTaskIncrementTick+0x13c>)
 800b186:	601a      	str	r2, [r3, #0]
 800b188:	4b3e      	ldr	r3, [pc, #248]	; (800b284 <xTaskIncrementTick+0x140>)
 800b18a:	68fa      	ldr	r2, [r7, #12]
 800b18c:	601a      	str	r2, [r3, #0]
 800b18e:	4b3e      	ldr	r3, [pc, #248]	; (800b288 <xTaskIncrementTick+0x144>)
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	1c5a      	adds	r2, r3, #1
 800b194:	4b3c      	ldr	r3, [pc, #240]	; (800b288 <xTaskIncrementTick+0x144>)
 800b196:	601a      	str	r2, [r3, #0]
 800b198:	f000 fa9c 	bl	800b6d4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b19c:	4b3b      	ldr	r3, [pc, #236]	; (800b28c <xTaskIncrementTick+0x148>)
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	693a      	ldr	r2, [r7, #16]
 800b1a2:	429a      	cmp	r2, r3
 800b1a4:	d349      	bcc.n	800b23a <xTaskIncrementTick+0xf6>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b1a6:	4b36      	ldr	r3, [pc, #216]	; (800b280 <xTaskIncrementTick+0x13c>)
 800b1a8:	681b      	ldr	r3, [r3, #0]
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	d104      	bne.n	800b1ba <xTaskIncrementTick+0x76>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b1b0:	4b36      	ldr	r3, [pc, #216]	; (800b28c <xTaskIncrementTick+0x148>)
 800b1b2:	2201      	movs	r2, #1
 800b1b4:	4252      	negs	r2, r2
 800b1b6:	601a      	str	r2, [r3, #0]
					break;
 800b1b8:	e03f      	b.n	800b23a <xTaskIncrementTick+0xf6>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b1ba:	4b31      	ldr	r3, [pc, #196]	; (800b280 <xTaskIncrementTick+0x13c>)
 800b1bc:	681b      	ldr	r3, [r3, #0]
 800b1be:	68db      	ldr	r3, [r3, #12]
 800b1c0:	68db      	ldr	r3, [r3, #12]
 800b1c2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b1c4:	68bb      	ldr	r3, [r7, #8]
 800b1c6:	685b      	ldr	r3, [r3, #4]
 800b1c8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b1ca:	693a      	ldr	r2, [r7, #16]
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	429a      	cmp	r2, r3
 800b1d0:	d203      	bcs.n	800b1da <xTaskIncrementTick+0x96>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b1d2:	4b2e      	ldr	r3, [pc, #184]	; (800b28c <xTaskIncrementTick+0x148>)
 800b1d4:	687a      	ldr	r2, [r7, #4]
 800b1d6:	601a      	str	r2, [r3, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b1d8:	e02f      	b.n	800b23a <xTaskIncrementTick+0xf6>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b1da:	68bb      	ldr	r3, [r7, #8]
 800b1dc:	3304      	adds	r3, #4
 800b1de:	0018      	movs	r0, r3
 800b1e0:	f7ff f899 	bl	800a316 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b1e4:	68bb      	ldr	r3, [r7, #8]
 800b1e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	d004      	beq.n	800b1f6 <xTaskIncrementTick+0xb2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b1ec:	68bb      	ldr	r3, [r7, #8]
 800b1ee:	3318      	adds	r3, #24
 800b1f0:	0018      	movs	r0, r3
 800b1f2:	f7ff f890 	bl	800a316 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b1f6:	68bb      	ldr	r3, [r7, #8]
 800b1f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b1fa:	4b25      	ldr	r3, [pc, #148]	; (800b290 <xTaskIncrementTick+0x14c>)
 800b1fc:	681b      	ldr	r3, [r3, #0]
 800b1fe:	429a      	cmp	r2, r3
 800b200:	d903      	bls.n	800b20a <xTaskIncrementTick+0xc6>
 800b202:	68bb      	ldr	r3, [r7, #8]
 800b204:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b206:	4b22      	ldr	r3, [pc, #136]	; (800b290 <xTaskIncrementTick+0x14c>)
 800b208:	601a      	str	r2, [r3, #0]
 800b20a:	68bb      	ldr	r3, [r7, #8]
 800b20c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b20e:	0013      	movs	r3, r2
 800b210:	009b      	lsls	r3, r3, #2
 800b212:	189b      	adds	r3, r3, r2
 800b214:	009b      	lsls	r3, r3, #2
 800b216:	4a1f      	ldr	r2, [pc, #124]	; (800b294 <xTaskIncrementTick+0x150>)
 800b218:	189a      	adds	r2, r3, r2
 800b21a:	68bb      	ldr	r3, [r7, #8]
 800b21c:	3304      	adds	r3, #4
 800b21e:	0019      	movs	r1, r3
 800b220:	0010      	movs	r0, r2
 800b222:	f7ff f820 	bl	800a266 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b226:	68bb      	ldr	r3, [r7, #8]
 800b228:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b22a:	4b1b      	ldr	r3, [pc, #108]	; (800b298 <xTaskIncrementTick+0x154>)
 800b22c:	681b      	ldr	r3, [r3, #0]
 800b22e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b230:	429a      	cmp	r2, r3
 800b232:	d3b8      	bcc.n	800b1a6 <xTaskIncrementTick+0x62>
						{
							xSwitchRequired = pdTRUE;
 800b234:	2301      	movs	r3, #1
 800b236:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b238:	e7b5      	b.n	800b1a6 <xTaskIncrementTick+0x62>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b23a:	4b17      	ldr	r3, [pc, #92]	; (800b298 <xTaskIncrementTick+0x154>)
 800b23c:	681b      	ldr	r3, [r3, #0]
 800b23e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b240:	4914      	ldr	r1, [pc, #80]	; (800b294 <xTaskIncrementTick+0x150>)
 800b242:	0013      	movs	r3, r2
 800b244:	009b      	lsls	r3, r3, #2
 800b246:	189b      	adds	r3, r3, r2
 800b248:	009b      	lsls	r3, r3, #2
 800b24a:	585b      	ldr	r3, [r3, r1]
 800b24c:	2b01      	cmp	r3, #1
 800b24e:	d901      	bls.n	800b254 <xTaskIncrementTick+0x110>
			{
				xSwitchRequired = pdTRUE;
 800b250:	2301      	movs	r3, #1
 800b252:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800b254:	4b11      	ldr	r3, [pc, #68]	; (800b29c <xTaskIncrementTick+0x158>)
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	2b00      	cmp	r3, #0
 800b25a:	d007      	beq.n	800b26c <xTaskIncrementTick+0x128>
			{
				xSwitchRequired = pdTRUE;
 800b25c:	2301      	movs	r3, #1
 800b25e:	617b      	str	r3, [r7, #20]
 800b260:	e004      	b.n	800b26c <xTaskIncrementTick+0x128>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800b262:	4b0f      	ldr	r3, [pc, #60]	; (800b2a0 <xTaskIncrementTick+0x15c>)
 800b264:	681b      	ldr	r3, [r3, #0]
 800b266:	1c5a      	adds	r2, r3, #1
 800b268:	4b0d      	ldr	r3, [pc, #52]	; (800b2a0 <xTaskIncrementTick+0x15c>)
 800b26a:	601a      	str	r2, [r3, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800b26c:	697b      	ldr	r3, [r7, #20]
}
 800b26e:	0018      	movs	r0, r3
 800b270:	46bd      	mov	sp, r7
 800b272:	b006      	add	sp, #24
 800b274:	bd80      	pop	{r7, pc}
 800b276:	46c0      	nop			; (mov r8, r8)
 800b278:	20001b90 	.word	0x20001b90
 800b27c:	20001b6c 	.word	0x20001b6c
 800b280:	20001b20 	.word	0x20001b20
 800b284:	20001b24 	.word	0x20001b24
 800b288:	20001b80 	.word	0x20001b80
 800b28c:	20001b88 	.word	0x20001b88
 800b290:	20001b70 	.word	0x20001b70
 800b294:	20001698 	.word	0x20001698
 800b298:	20001694 	.word	0x20001694
 800b29c:	20001b7c 	.word	0x20001b7c
 800b2a0:	20001b78 	.word	0x20001b78

0800b2a4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b2a4:	b580      	push	{r7, lr}
 800b2a6:	b082      	sub	sp, #8
 800b2a8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b2aa:	4b25      	ldr	r3, [pc, #148]	; (800b340 <vTaskSwitchContext+0x9c>)
 800b2ac:	681b      	ldr	r3, [r3, #0]
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	d003      	beq.n	800b2ba <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b2b2:	4b24      	ldr	r3, [pc, #144]	; (800b344 <vTaskSwitchContext+0xa0>)
 800b2b4:	2201      	movs	r2, #1
 800b2b6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b2b8:	e03d      	b.n	800b336 <vTaskSwitchContext+0x92>
		xYieldPending = pdFALSE;
 800b2ba:	4b22      	ldr	r3, [pc, #136]	; (800b344 <vTaskSwitchContext+0xa0>)
 800b2bc:	2200      	movs	r2, #0
 800b2be:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b2c0:	4b21      	ldr	r3, [pc, #132]	; (800b348 <vTaskSwitchContext+0xa4>)
 800b2c2:	681b      	ldr	r3, [r3, #0]
 800b2c4:	607b      	str	r3, [r7, #4]
 800b2c6:	e007      	b.n	800b2d8 <vTaskSwitchContext+0x34>
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	2b00      	cmp	r3, #0
 800b2cc:	d101      	bne.n	800b2d2 <vTaskSwitchContext+0x2e>
 800b2ce:	b672      	cpsid	i
 800b2d0:	e7fe      	b.n	800b2d0 <vTaskSwitchContext+0x2c>
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	3b01      	subs	r3, #1
 800b2d6:	607b      	str	r3, [r7, #4]
 800b2d8:	491c      	ldr	r1, [pc, #112]	; (800b34c <vTaskSwitchContext+0xa8>)
 800b2da:	687a      	ldr	r2, [r7, #4]
 800b2dc:	0013      	movs	r3, r2
 800b2de:	009b      	lsls	r3, r3, #2
 800b2e0:	189b      	adds	r3, r3, r2
 800b2e2:	009b      	lsls	r3, r3, #2
 800b2e4:	585b      	ldr	r3, [r3, r1]
 800b2e6:	2b00      	cmp	r3, #0
 800b2e8:	d0ee      	beq.n	800b2c8 <vTaskSwitchContext+0x24>
 800b2ea:	687a      	ldr	r2, [r7, #4]
 800b2ec:	0013      	movs	r3, r2
 800b2ee:	009b      	lsls	r3, r3, #2
 800b2f0:	189b      	adds	r3, r3, r2
 800b2f2:	009b      	lsls	r3, r3, #2
 800b2f4:	4a15      	ldr	r2, [pc, #84]	; (800b34c <vTaskSwitchContext+0xa8>)
 800b2f6:	189b      	adds	r3, r3, r2
 800b2f8:	603b      	str	r3, [r7, #0]
 800b2fa:	683b      	ldr	r3, [r7, #0]
 800b2fc:	685b      	ldr	r3, [r3, #4]
 800b2fe:	685a      	ldr	r2, [r3, #4]
 800b300:	683b      	ldr	r3, [r7, #0]
 800b302:	605a      	str	r2, [r3, #4]
 800b304:	683b      	ldr	r3, [r7, #0]
 800b306:	685a      	ldr	r2, [r3, #4]
 800b308:	683b      	ldr	r3, [r7, #0]
 800b30a:	3308      	adds	r3, #8
 800b30c:	429a      	cmp	r2, r3
 800b30e:	d104      	bne.n	800b31a <vTaskSwitchContext+0x76>
 800b310:	683b      	ldr	r3, [r7, #0]
 800b312:	685b      	ldr	r3, [r3, #4]
 800b314:	685a      	ldr	r2, [r3, #4]
 800b316:	683b      	ldr	r3, [r7, #0]
 800b318:	605a      	str	r2, [r3, #4]
 800b31a:	683b      	ldr	r3, [r7, #0]
 800b31c:	685b      	ldr	r3, [r3, #4]
 800b31e:	68da      	ldr	r2, [r3, #12]
 800b320:	4b0b      	ldr	r3, [pc, #44]	; (800b350 <vTaskSwitchContext+0xac>)
 800b322:	601a      	str	r2, [r3, #0]
 800b324:	4b08      	ldr	r3, [pc, #32]	; (800b348 <vTaskSwitchContext+0xa4>)
 800b326:	687a      	ldr	r2, [r7, #4]
 800b328:	601a      	str	r2, [r3, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b32a:	4b09      	ldr	r3, [pc, #36]	; (800b350 <vTaskSwitchContext+0xac>)
 800b32c:	681b      	ldr	r3, [r3, #0]
 800b32e:	3354      	adds	r3, #84	; 0x54
 800b330:	001a      	movs	r2, r3
 800b332:	4b08      	ldr	r3, [pc, #32]	; (800b354 <vTaskSwitchContext+0xb0>)
 800b334:	601a      	str	r2, [r3, #0]
}
 800b336:	46c0      	nop			; (mov r8, r8)
 800b338:	46bd      	mov	sp, r7
 800b33a:	b002      	add	sp, #8
 800b33c:	bd80      	pop	{r7, pc}
 800b33e:	46c0      	nop			; (mov r8, r8)
 800b340:	20001b90 	.word	0x20001b90
 800b344:	20001b7c 	.word	0x20001b7c
 800b348:	20001b70 	.word	0x20001b70
 800b34c:	20001698 	.word	0x20001698
 800b350:	20001694 	.word	0x20001694
 800b354:	200001d4 	.word	0x200001d4

0800b358 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b358:	b580      	push	{r7, lr}
 800b35a:	b082      	sub	sp, #8
 800b35c:	af00      	add	r7, sp, #0
 800b35e:	6078      	str	r0, [r7, #4]
 800b360:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	2b00      	cmp	r3, #0
 800b366:	d101      	bne.n	800b36c <vTaskPlaceOnEventList+0x14>
 800b368:	b672      	cpsid	i
 800b36a:	e7fe      	b.n	800b36a <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b36c:	4b08      	ldr	r3, [pc, #32]	; (800b390 <vTaskPlaceOnEventList+0x38>)
 800b36e:	681b      	ldr	r3, [r3, #0]
 800b370:	3318      	adds	r3, #24
 800b372:	001a      	movs	r2, r3
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	0011      	movs	r1, r2
 800b378:	0018      	movs	r0, r3
 800b37a:	f7fe ff96 	bl	800a2aa <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b37e:	683b      	ldr	r3, [r7, #0]
 800b380:	2101      	movs	r1, #1
 800b382:	0018      	movs	r0, r3
 800b384:	f000 fa3c 	bl	800b800 <prvAddCurrentTaskToDelayedList>
}
 800b388:	46c0      	nop			; (mov r8, r8)
 800b38a:	46bd      	mov	sp, r7
 800b38c:	b002      	add	sp, #8
 800b38e:	bd80      	pop	{r7, pc}
 800b390:	20001694 	.word	0x20001694

0800b394 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b394:	b580      	push	{r7, lr}
 800b396:	b084      	sub	sp, #16
 800b398:	af00      	add	r7, sp, #0
 800b39a:	60f8      	str	r0, [r7, #12]
 800b39c:	60b9      	str	r1, [r7, #8]
 800b39e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800b3a0:	68fb      	ldr	r3, [r7, #12]
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	d101      	bne.n	800b3aa <vTaskPlaceOnEventListRestricted+0x16>
 800b3a6:	b672      	cpsid	i
 800b3a8:	e7fe      	b.n	800b3a8 <vTaskPlaceOnEventListRestricted+0x14>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b3aa:	4b0c      	ldr	r3, [pc, #48]	; (800b3dc <vTaskPlaceOnEventListRestricted+0x48>)
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	3318      	adds	r3, #24
 800b3b0:	001a      	movs	r2, r3
 800b3b2:	68fb      	ldr	r3, [r7, #12]
 800b3b4:	0011      	movs	r1, r2
 800b3b6:	0018      	movs	r0, r3
 800b3b8:	f7fe ff55 	bl	800a266 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	d002      	beq.n	800b3c8 <vTaskPlaceOnEventListRestricted+0x34>
		{
			xTicksToWait = portMAX_DELAY;
 800b3c2:	2301      	movs	r3, #1
 800b3c4:	425b      	negs	r3, r3
 800b3c6:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b3c8:	687a      	ldr	r2, [r7, #4]
 800b3ca:	68bb      	ldr	r3, [r7, #8]
 800b3cc:	0011      	movs	r1, r2
 800b3ce:	0018      	movs	r0, r3
 800b3d0:	f000 fa16 	bl	800b800 <prvAddCurrentTaskToDelayedList>
	}
 800b3d4:	46c0      	nop			; (mov r8, r8)
 800b3d6:	46bd      	mov	sp, r7
 800b3d8:	b004      	add	sp, #16
 800b3da:	bd80      	pop	{r7, pc}
 800b3dc:	20001694 	.word	0x20001694

0800b3e0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b3e0:	b580      	push	{r7, lr}
 800b3e2:	b084      	sub	sp, #16
 800b3e4:	af00      	add	r7, sp, #0
 800b3e6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	68db      	ldr	r3, [r3, #12]
 800b3ec:	68db      	ldr	r3, [r3, #12]
 800b3ee:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 800b3f0:	68bb      	ldr	r3, [r7, #8]
 800b3f2:	2b00      	cmp	r3, #0
 800b3f4:	d101      	bne.n	800b3fa <xTaskRemoveFromEventList+0x1a>
 800b3f6:	b672      	cpsid	i
 800b3f8:	e7fe      	b.n	800b3f8 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b3fa:	68bb      	ldr	r3, [r7, #8]
 800b3fc:	3318      	adds	r3, #24
 800b3fe:	0018      	movs	r0, r3
 800b400:	f7fe ff89 	bl	800a316 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b404:	4b1e      	ldr	r3, [pc, #120]	; (800b480 <xTaskRemoveFromEventList+0xa0>)
 800b406:	681b      	ldr	r3, [r3, #0]
 800b408:	2b00      	cmp	r3, #0
 800b40a:	d11d      	bne.n	800b448 <xTaskRemoveFromEventList+0x68>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b40c:	68bb      	ldr	r3, [r7, #8]
 800b40e:	3304      	adds	r3, #4
 800b410:	0018      	movs	r0, r3
 800b412:	f7fe ff80 	bl	800a316 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b416:	68bb      	ldr	r3, [r7, #8]
 800b418:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b41a:	4b1a      	ldr	r3, [pc, #104]	; (800b484 <xTaskRemoveFromEventList+0xa4>)
 800b41c:	681b      	ldr	r3, [r3, #0]
 800b41e:	429a      	cmp	r2, r3
 800b420:	d903      	bls.n	800b42a <xTaskRemoveFromEventList+0x4a>
 800b422:	68bb      	ldr	r3, [r7, #8]
 800b424:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b426:	4b17      	ldr	r3, [pc, #92]	; (800b484 <xTaskRemoveFromEventList+0xa4>)
 800b428:	601a      	str	r2, [r3, #0]
 800b42a:	68bb      	ldr	r3, [r7, #8]
 800b42c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b42e:	0013      	movs	r3, r2
 800b430:	009b      	lsls	r3, r3, #2
 800b432:	189b      	adds	r3, r3, r2
 800b434:	009b      	lsls	r3, r3, #2
 800b436:	4a14      	ldr	r2, [pc, #80]	; (800b488 <xTaskRemoveFromEventList+0xa8>)
 800b438:	189a      	adds	r2, r3, r2
 800b43a:	68bb      	ldr	r3, [r7, #8]
 800b43c:	3304      	adds	r3, #4
 800b43e:	0019      	movs	r1, r3
 800b440:	0010      	movs	r0, r2
 800b442:	f7fe ff10 	bl	800a266 <vListInsertEnd>
 800b446:	e007      	b.n	800b458 <xTaskRemoveFromEventList+0x78>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b448:	68bb      	ldr	r3, [r7, #8]
 800b44a:	3318      	adds	r3, #24
 800b44c:	001a      	movs	r2, r3
 800b44e:	4b0f      	ldr	r3, [pc, #60]	; (800b48c <xTaskRemoveFromEventList+0xac>)
 800b450:	0011      	movs	r1, r2
 800b452:	0018      	movs	r0, r3
 800b454:	f7fe ff07 	bl	800a266 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b458:	68bb      	ldr	r3, [r7, #8]
 800b45a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b45c:	4b0c      	ldr	r3, [pc, #48]	; (800b490 <xTaskRemoveFromEventList+0xb0>)
 800b45e:	681b      	ldr	r3, [r3, #0]
 800b460:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b462:	429a      	cmp	r2, r3
 800b464:	d905      	bls.n	800b472 <xTaskRemoveFromEventList+0x92>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b466:	2301      	movs	r3, #1
 800b468:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b46a:	4b0a      	ldr	r3, [pc, #40]	; (800b494 <xTaskRemoveFromEventList+0xb4>)
 800b46c:	2201      	movs	r2, #1
 800b46e:	601a      	str	r2, [r3, #0]
 800b470:	e001      	b.n	800b476 <xTaskRemoveFromEventList+0x96>
	}
	else
	{
		xReturn = pdFALSE;
 800b472:	2300      	movs	r3, #0
 800b474:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
 800b476:	68fb      	ldr	r3, [r7, #12]
}
 800b478:	0018      	movs	r0, r3
 800b47a:	46bd      	mov	sp, r7
 800b47c:	b004      	add	sp, #16
 800b47e:	bd80      	pop	{r7, pc}
 800b480:	20001b90 	.word	0x20001b90
 800b484:	20001b70 	.word	0x20001b70
 800b488:	20001698 	.word	0x20001698
 800b48c:	20001b28 	.word	0x20001b28
 800b490:	20001694 	.word	0x20001694
 800b494:	20001b7c 	.word	0x20001b7c

0800b498 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b498:	b580      	push	{r7, lr}
 800b49a:	b082      	sub	sp, #8
 800b49c:	af00      	add	r7, sp, #0
 800b49e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b4a0:	4b05      	ldr	r3, [pc, #20]	; (800b4b8 <vTaskInternalSetTimeOutState+0x20>)
 800b4a2:	681a      	ldr	r2, [r3, #0]
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b4a8:	4b04      	ldr	r3, [pc, #16]	; (800b4bc <vTaskInternalSetTimeOutState+0x24>)
 800b4aa:	681a      	ldr	r2, [r3, #0]
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	605a      	str	r2, [r3, #4]
}
 800b4b0:	46c0      	nop			; (mov r8, r8)
 800b4b2:	46bd      	mov	sp, r7
 800b4b4:	b002      	add	sp, #8
 800b4b6:	bd80      	pop	{r7, pc}
 800b4b8:	20001b80 	.word	0x20001b80
 800b4bc:	20001b6c 	.word	0x20001b6c

0800b4c0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b4c0:	b580      	push	{r7, lr}
 800b4c2:	b086      	sub	sp, #24
 800b4c4:	af00      	add	r7, sp, #0
 800b4c6:	6078      	str	r0, [r7, #4]
 800b4c8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	2b00      	cmp	r3, #0
 800b4ce:	d101      	bne.n	800b4d4 <xTaskCheckForTimeOut+0x14>
 800b4d0:	b672      	cpsid	i
 800b4d2:	e7fe      	b.n	800b4d2 <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
 800b4d4:	683b      	ldr	r3, [r7, #0]
 800b4d6:	2b00      	cmp	r3, #0
 800b4d8:	d101      	bne.n	800b4de <xTaskCheckForTimeOut+0x1e>
 800b4da:	b672      	cpsid	i
 800b4dc:	e7fe      	b.n	800b4dc <xTaskCheckForTimeOut+0x1c>

	taskENTER_CRITICAL();
 800b4de:	f000 fd8f 	bl	800c000 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b4e2:	4b1d      	ldr	r3, [pc, #116]	; (800b558 <xTaskCheckForTimeOut+0x98>)
 800b4e4:	681b      	ldr	r3, [r3, #0]
 800b4e6:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	685b      	ldr	r3, [r3, #4]
 800b4ec:	693a      	ldr	r2, [r7, #16]
 800b4ee:	1ad3      	subs	r3, r2, r3
 800b4f0:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b4f2:	683b      	ldr	r3, [r7, #0]
 800b4f4:	681b      	ldr	r3, [r3, #0]
 800b4f6:	3301      	adds	r3, #1
 800b4f8:	d102      	bne.n	800b500 <xTaskCheckForTimeOut+0x40>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b4fa:	2300      	movs	r3, #0
 800b4fc:	617b      	str	r3, [r7, #20]
 800b4fe:	e024      	b.n	800b54a <xTaskCheckForTimeOut+0x8a>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	681a      	ldr	r2, [r3, #0]
 800b504:	4b15      	ldr	r3, [pc, #84]	; (800b55c <xTaskCheckForTimeOut+0x9c>)
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	429a      	cmp	r2, r3
 800b50a:	d007      	beq.n	800b51c <xTaskCheckForTimeOut+0x5c>
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	685b      	ldr	r3, [r3, #4]
 800b510:	693a      	ldr	r2, [r7, #16]
 800b512:	429a      	cmp	r2, r3
 800b514:	d302      	bcc.n	800b51c <xTaskCheckForTimeOut+0x5c>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b516:	2301      	movs	r3, #1
 800b518:	617b      	str	r3, [r7, #20]
 800b51a:	e016      	b.n	800b54a <xTaskCheckForTimeOut+0x8a>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b51c:	683b      	ldr	r3, [r7, #0]
 800b51e:	681b      	ldr	r3, [r3, #0]
 800b520:	68fa      	ldr	r2, [r7, #12]
 800b522:	429a      	cmp	r2, r3
 800b524:	d20c      	bcs.n	800b540 <xTaskCheckForTimeOut+0x80>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b526:	683b      	ldr	r3, [r7, #0]
 800b528:	681a      	ldr	r2, [r3, #0]
 800b52a:	68fb      	ldr	r3, [r7, #12]
 800b52c:	1ad2      	subs	r2, r2, r3
 800b52e:	683b      	ldr	r3, [r7, #0]
 800b530:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	0018      	movs	r0, r3
 800b536:	f7ff ffaf 	bl	800b498 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b53a:	2300      	movs	r3, #0
 800b53c:	617b      	str	r3, [r7, #20]
 800b53e:	e004      	b.n	800b54a <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			*pxTicksToWait = 0;
 800b540:	683b      	ldr	r3, [r7, #0]
 800b542:	2200      	movs	r2, #0
 800b544:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b546:	2301      	movs	r3, #1
 800b548:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 800b54a:	f000 fd6b 	bl	800c024 <vPortExitCritical>

	return xReturn;
 800b54e:	697b      	ldr	r3, [r7, #20]
}
 800b550:	0018      	movs	r0, r3
 800b552:	46bd      	mov	sp, r7
 800b554:	b006      	add	sp, #24
 800b556:	bd80      	pop	{r7, pc}
 800b558:	20001b6c 	.word	0x20001b6c
 800b55c:	20001b80 	.word	0x20001b80

0800b560 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b560:	b580      	push	{r7, lr}
 800b562:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b564:	4b02      	ldr	r3, [pc, #8]	; (800b570 <vTaskMissedYield+0x10>)
 800b566:	2201      	movs	r2, #1
 800b568:	601a      	str	r2, [r3, #0]
}
 800b56a:	46c0      	nop			; (mov r8, r8)
 800b56c:	46bd      	mov	sp, r7
 800b56e:	bd80      	pop	{r7, pc}
 800b570:	20001b7c 	.word	0x20001b7c

0800b574 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b574:	b580      	push	{r7, lr}
 800b576:	b082      	sub	sp, #8
 800b578:	af00      	add	r7, sp, #0
 800b57a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b57c:	f000 f84e 	bl	800b61c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b580:	4b03      	ldr	r3, [pc, #12]	; (800b590 <prvIdleTask+0x1c>)
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	2b01      	cmp	r3, #1
 800b586:	d9f9      	bls.n	800b57c <prvIdleTask+0x8>
			{
				taskYIELD();
 800b588:	f000 fd2a 	bl	800bfe0 <vPortYield>
		prvCheckTasksWaitingTermination();
 800b58c:	e7f6      	b.n	800b57c <prvIdleTask+0x8>
 800b58e:	46c0      	nop			; (mov r8, r8)
 800b590:	20001698 	.word	0x20001698

0800b594 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b594:	b580      	push	{r7, lr}
 800b596:	b082      	sub	sp, #8
 800b598:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b59a:	2300      	movs	r3, #0
 800b59c:	607b      	str	r3, [r7, #4]
 800b59e:	e00c      	b.n	800b5ba <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b5a0:	687a      	ldr	r2, [r7, #4]
 800b5a2:	0013      	movs	r3, r2
 800b5a4:	009b      	lsls	r3, r3, #2
 800b5a6:	189b      	adds	r3, r3, r2
 800b5a8:	009b      	lsls	r3, r3, #2
 800b5aa:	4a14      	ldr	r2, [pc, #80]	; (800b5fc <prvInitialiseTaskLists+0x68>)
 800b5ac:	189b      	adds	r3, r3, r2
 800b5ae:	0018      	movs	r0, r3
 800b5b0:	f7fe fe30 	bl	800a214 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	3301      	adds	r3, #1
 800b5b8:	607b      	str	r3, [r7, #4]
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	2b37      	cmp	r3, #55	; 0x37
 800b5be:	d9ef      	bls.n	800b5a0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b5c0:	4b0f      	ldr	r3, [pc, #60]	; (800b600 <prvInitialiseTaskLists+0x6c>)
 800b5c2:	0018      	movs	r0, r3
 800b5c4:	f7fe fe26 	bl	800a214 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b5c8:	4b0e      	ldr	r3, [pc, #56]	; (800b604 <prvInitialiseTaskLists+0x70>)
 800b5ca:	0018      	movs	r0, r3
 800b5cc:	f7fe fe22 	bl	800a214 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b5d0:	4b0d      	ldr	r3, [pc, #52]	; (800b608 <prvInitialiseTaskLists+0x74>)
 800b5d2:	0018      	movs	r0, r3
 800b5d4:	f7fe fe1e 	bl	800a214 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b5d8:	4b0c      	ldr	r3, [pc, #48]	; (800b60c <prvInitialiseTaskLists+0x78>)
 800b5da:	0018      	movs	r0, r3
 800b5dc:	f7fe fe1a 	bl	800a214 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b5e0:	4b0b      	ldr	r3, [pc, #44]	; (800b610 <prvInitialiseTaskLists+0x7c>)
 800b5e2:	0018      	movs	r0, r3
 800b5e4:	f7fe fe16 	bl	800a214 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b5e8:	4b0a      	ldr	r3, [pc, #40]	; (800b614 <prvInitialiseTaskLists+0x80>)
 800b5ea:	4a05      	ldr	r2, [pc, #20]	; (800b600 <prvInitialiseTaskLists+0x6c>)
 800b5ec:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b5ee:	4b0a      	ldr	r3, [pc, #40]	; (800b618 <prvInitialiseTaskLists+0x84>)
 800b5f0:	4a04      	ldr	r2, [pc, #16]	; (800b604 <prvInitialiseTaskLists+0x70>)
 800b5f2:	601a      	str	r2, [r3, #0]
}
 800b5f4:	46c0      	nop			; (mov r8, r8)
 800b5f6:	46bd      	mov	sp, r7
 800b5f8:	b002      	add	sp, #8
 800b5fa:	bd80      	pop	{r7, pc}
 800b5fc:	20001698 	.word	0x20001698
 800b600:	20001af8 	.word	0x20001af8
 800b604:	20001b0c 	.word	0x20001b0c
 800b608:	20001b28 	.word	0x20001b28
 800b60c:	20001b3c 	.word	0x20001b3c
 800b610:	20001b54 	.word	0x20001b54
 800b614:	20001b20 	.word	0x20001b20
 800b618:	20001b24 	.word	0x20001b24

0800b61c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b61c:	b580      	push	{r7, lr}
 800b61e:	b082      	sub	sp, #8
 800b620:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b622:	e01a      	b.n	800b65a <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
 800b624:	f000 fcec 	bl	800c000 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b628:	4b10      	ldr	r3, [pc, #64]	; (800b66c <prvCheckTasksWaitingTermination+0x50>)
 800b62a:	68db      	ldr	r3, [r3, #12]
 800b62c:	68db      	ldr	r3, [r3, #12]
 800b62e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	3304      	adds	r3, #4
 800b634:	0018      	movs	r0, r3
 800b636:	f7fe fe6e 	bl	800a316 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b63a:	4b0d      	ldr	r3, [pc, #52]	; (800b670 <prvCheckTasksWaitingTermination+0x54>)
 800b63c:	681b      	ldr	r3, [r3, #0]
 800b63e:	1e5a      	subs	r2, r3, #1
 800b640:	4b0b      	ldr	r3, [pc, #44]	; (800b670 <prvCheckTasksWaitingTermination+0x54>)
 800b642:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b644:	4b0b      	ldr	r3, [pc, #44]	; (800b674 <prvCheckTasksWaitingTermination+0x58>)
 800b646:	681b      	ldr	r3, [r3, #0]
 800b648:	1e5a      	subs	r2, r3, #1
 800b64a:	4b0a      	ldr	r3, [pc, #40]	; (800b674 <prvCheckTasksWaitingTermination+0x58>)
 800b64c:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
 800b64e:	f000 fce9 	bl	800c024 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	0018      	movs	r0, r3
 800b656:	f000 f80f 	bl	800b678 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b65a:	4b06      	ldr	r3, [pc, #24]	; (800b674 <prvCheckTasksWaitingTermination+0x58>)
 800b65c:	681b      	ldr	r3, [r3, #0]
 800b65e:	2b00      	cmp	r3, #0
 800b660:	d1e0      	bne.n	800b624 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b662:	46c0      	nop			; (mov r8, r8)
 800b664:	46c0      	nop			; (mov r8, r8)
 800b666:	46bd      	mov	sp, r7
 800b668:	b002      	add	sp, #8
 800b66a:	bd80      	pop	{r7, pc}
 800b66c:	20001b3c 	.word	0x20001b3c
 800b670:	20001b68 	.word	0x20001b68
 800b674:	20001b50 	.word	0x20001b50

0800b678 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b678:	b580      	push	{r7, lr}
 800b67a:	b082      	sub	sp, #8
 800b67c:	af00      	add	r7, sp, #0
 800b67e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	3354      	adds	r3, #84	; 0x54
 800b684:	0018      	movs	r0, r3
 800b686:	f001 fe85 	bl	800d394 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	22a5      	movs	r2, #165	; 0xa5
 800b68e:	5c9b      	ldrb	r3, [r3, r2]
 800b690:	2b00      	cmp	r3, #0
 800b692:	d109      	bne.n	800b6a8 <prvDeleteTCB+0x30>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b698:	0018      	movs	r0, r3
 800b69a:	f000 fdf5 	bl	800c288 <vPortFree>
				vPortFree( pxTCB );
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	0018      	movs	r0, r3
 800b6a2:	f000 fdf1 	bl	800c288 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b6a6:	e010      	b.n	800b6ca <prvDeleteTCB+0x52>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	22a5      	movs	r2, #165	; 0xa5
 800b6ac:	5c9b      	ldrb	r3, [r3, r2]
 800b6ae:	2b01      	cmp	r3, #1
 800b6b0:	d104      	bne.n	800b6bc <prvDeleteTCB+0x44>
				vPortFree( pxTCB );
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	0018      	movs	r0, r3
 800b6b6:	f000 fde7 	bl	800c288 <vPortFree>
	}
 800b6ba:	e006      	b.n	800b6ca <prvDeleteTCB+0x52>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	22a5      	movs	r2, #165	; 0xa5
 800b6c0:	5c9b      	ldrb	r3, [r3, r2]
 800b6c2:	2b02      	cmp	r3, #2
 800b6c4:	d001      	beq.n	800b6ca <prvDeleteTCB+0x52>
 800b6c6:	b672      	cpsid	i
 800b6c8:	e7fe      	b.n	800b6c8 <prvDeleteTCB+0x50>
	}
 800b6ca:	46c0      	nop			; (mov r8, r8)
 800b6cc:	46bd      	mov	sp, r7
 800b6ce:	b002      	add	sp, #8
 800b6d0:	bd80      	pop	{r7, pc}
	...

0800b6d4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b6d4:	b580      	push	{r7, lr}
 800b6d6:	b082      	sub	sp, #8
 800b6d8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b6da:	4b0b      	ldr	r3, [pc, #44]	; (800b708 <prvResetNextTaskUnblockTime+0x34>)
 800b6dc:	681b      	ldr	r3, [r3, #0]
 800b6de:	681b      	ldr	r3, [r3, #0]
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	d104      	bne.n	800b6ee <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b6e4:	4b09      	ldr	r3, [pc, #36]	; (800b70c <prvResetNextTaskUnblockTime+0x38>)
 800b6e6:	2201      	movs	r2, #1
 800b6e8:	4252      	negs	r2, r2
 800b6ea:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b6ec:	e008      	b.n	800b700 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b6ee:	4b06      	ldr	r3, [pc, #24]	; (800b708 <prvResetNextTaskUnblockTime+0x34>)
 800b6f0:	681b      	ldr	r3, [r3, #0]
 800b6f2:	68db      	ldr	r3, [r3, #12]
 800b6f4:	68db      	ldr	r3, [r3, #12]
 800b6f6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	685a      	ldr	r2, [r3, #4]
 800b6fc:	4b03      	ldr	r3, [pc, #12]	; (800b70c <prvResetNextTaskUnblockTime+0x38>)
 800b6fe:	601a      	str	r2, [r3, #0]
}
 800b700:	46c0      	nop			; (mov r8, r8)
 800b702:	46bd      	mov	sp, r7
 800b704:	b002      	add	sp, #8
 800b706:	bd80      	pop	{r7, pc}
 800b708:	20001b20 	.word	0x20001b20
 800b70c:	20001b88 	.word	0x20001b88

0800b710 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b710:	b580      	push	{r7, lr}
 800b712:	b082      	sub	sp, #8
 800b714:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b716:	4b0a      	ldr	r3, [pc, #40]	; (800b740 <xTaskGetSchedulerState+0x30>)
 800b718:	681b      	ldr	r3, [r3, #0]
 800b71a:	2b00      	cmp	r3, #0
 800b71c:	d102      	bne.n	800b724 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b71e:	2301      	movs	r3, #1
 800b720:	607b      	str	r3, [r7, #4]
 800b722:	e008      	b.n	800b736 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b724:	4b07      	ldr	r3, [pc, #28]	; (800b744 <xTaskGetSchedulerState+0x34>)
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	2b00      	cmp	r3, #0
 800b72a:	d102      	bne.n	800b732 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b72c:	2302      	movs	r3, #2
 800b72e:	607b      	str	r3, [r7, #4]
 800b730:	e001      	b.n	800b736 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b732:	2300      	movs	r3, #0
 800b734:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b736:	687b      	ldr	r3, [r7, #4]
	}
 800b738:	0018      	movs	r0, r3
 800b73a:	46bd      	mov	sp, r7
 800b73c:	b002      	add	sp, #8
 800b73e:	bd80      	pop	{r7, pc}
 800b740:	20001b74 	.word	0x20001b74
 800b744:	20001b90 	.word	0x20001b90

0800b748 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b748:	b580      	push	{r7, lr}
 800b74a:	b084      	sub	sp, #16
 800b74c:	af00      	add	r7, sp, #0
 800b74e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800b754:	2300      	movs	r3, #0
 800b756:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	d044      	beq.n	800b7e8 <xTaskPriorityDisinherit+0xa0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b75e:	4b25      	ldr	r3, [pc, #148]	; (800b7f4 <xTaskPriorityDisinherit+0xac>)
 800b760:	681b      	ldr	r3, [r3, #0]
 800b762:	68ba      	ldr	r2, [r7, #8]
 800b764:	429a      	cmp	r2, r3
 800b766:	d001      	beq.n	800b76c <xTaskPriorityDisinherit+0x24>
 800b768:	b672      	cpsid	i
 800b76a:	e7fe      	b.n	800b76a <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 800b76c:	68bb      	ldr	r3, [r7, #8]
 800b76e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b770:	2b00      	cmp	r3, #0
 800b772:	d101      	bne.n	800b778 <xTaskPriorityDisinherit+0x30>
 800b774:	b672      	cpsid	i
 800b776:	e7fe      	b.n	800b776 <xTaskPriorityDisinherit+0x2e>
			( pxTCB->uxMutexesHeld )--;
 800b778:	68bb      	ldr	r3, [r7, #8]
 800b77a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b77c:	1e5a      	subs	r2, r3, #1
 800b77e:	68bb      	ldr	r3, [r7, #8]
 800b780:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b782:	68bb      	ldr	r3, [r7, #8]
 800b784:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b786:	68bb      	ldr	r3, [r7, #8]
 800b788:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b78a:	429a      	cmp	r2, r3
 800b78c:	d02c      	beq.n	800b7e8 <xTaskPriorityDisinherit+0xa0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b78e:	68bb      	ldr	r3, [r7, #8]
 800b790:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b792:	2b00      	cmp	r3, #0
 800b794:	d128      	bne.n	800b7e8 <xTaskPriorityDisinherit+0xa0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b796:	68bb      	ldr	r3, [r7, #8]
 800b798:	3304      	adds	r3, #4
 800b79a:	0018      	movs	r0, r3
 800b79c:	f7fe fdbb 	bl	800a316 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b7a0:	68bb      	ldr	r3, [r7, #8]
 800b7a2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b7a4:	68bb      	ldr	r3, [r7, #8]
 800b7a6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b7a8:	68bb      	ldr	r3, [r7, #8]
 800b7aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7ac:	2238      	movs	r2, #56	; 0x38
 800b7ae:	1ad2      	subs	r2, r2, r3
 800b7b0:	68bb      	ldr	r3, [r7, #8]
 800b7b2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b7b4:	68bb      	ldr	r3, [r7, #8]
 800b7b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b7b8:	4b0f      	ldr	r3, [pc, #60]	; (800b7f8 <xTaskPriorityDisinherit+0xb0>)
 800b7ba:	681b      	ldr	r3, [r3, #0]
 800b7bc:	429a      	cmp	r2, r3
 800b7be:	d903      	bls.n	800b7c8 <xTaskPriorityDisinherit+0x80>
 800b7c0:	68bb      	ldr	r3, [r7, #8]
 800b7c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b7c4:	4b0c      	ldr	r3, [pc, #48]	; (800b7f8 <xTaskPriorityDisinherit+0xb0>)
 800b7c6:	601a      	str	r2, [r3, #0]
 800b7c8:	68bb      	ldr	r3, [r7, #8]
 800b7ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b7cc:	0013      	movs	r3, r2
 800b7ce:	009b      	lsls	r3, r3, #2
 800b7d0:	189b      	adds	r3, r3, r2
 800b7d2:	009b      	lsls	r3, r3, #2
 800b7d4:	4a09      	ldr	r2, [pc, #36]	; (800b7fc <xTaskPriorityDisinherit+0xb4>)
 800b7d6:	189a      	adds	r2, r3, r2
 800b7d8:	68bb      	ldr	r3, [r7, #8]
 800b7da:	3304      	adds	r3, #4
 800b7dc:	0019      	movs	r1, r3
 800b7de:	0010      	movs	r0, r2
 800b7e0:	f7fe fd41 	bl	800a266 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b7e4:	2301      	movs	r3, #1
 800b7e6:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b7e8:	68fb      	ldr	r3, [r7, #12]
	}
 800b7ea:	0018      	movs	r0, r3
 800b7ec:	46bd      	mov	sp, r7
 800b7ee:	b004      	add	sp, #16
 800b7f0:	bd80      	pop	{r7, pc}
 800b7f2:	46c0      	nop			; (mov r8, r8)
 800b7f4:	20001694 	.word	0x20001694
 800b7f8:	20001b70 	.word	0x20001b70
 800b7fc:	20001698 	.word	0x20001698

0800b800 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b800:	b580      	push	{r7, lr}
 800b802:	b084      	sub	sp, #16
 800b804:	af00      	add	r7, sp, #0
 800b806:	6078      	str	r0, [r7, #4]
 800b808:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b80a:	4b21      	ldr	r3, [pc, #132]	; (800b890 <prvAddCurrentTaskToDelayedList+0x90>)
 800b80c:	681b      	ldr	r3, [r3, #0]
 800b80e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b810:	4b20      	ldr	r3, [pc, #128]	; (800b894 <prvAddCurrentTaskToDelayedList+0x94>)
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	3304      	adds	r3, #4
 800b816:	0018      	movs	r0, r3
 800b818:	f7fe fd7d 	bl	800a316 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	3301      	adds	r3, #1
 800b820:	d10b      	bne.n	800b83a <prvAddCurrentTaskToDelayedList+0x3a>
 800b822:	683b      	ldr	r3, [r7, #0]
 800b824:	2b00      	cmp	r3, #0
 800b826:	d008      	beq.n	800b83a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b828:	4b1a      	ldr	r3, [pc, #104]	; (800b894 <prvAddCurrentTaskToDelayedList+0x94>)
 800b82a:	681b      	ldr	r3, [r3, #0]
 800b82c:	1d1a      	adds	r2, r3, #4
 800b82e:	4b1a      	ldr	r3, [pc, #104]	; (800b898 <prvAddCurrentTaskToDelayedList+0x98>)
 800b830:	0011      	movs	r1, r2
 800b832:	0018      	movs	r0, r3
 800b834:	f7fe fd17 	bl	800a266 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b838:	e026      	b.n	800b888 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b83a:	68fa      	ldr	r2, [r7, #12]
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	18d3      	adds	r3, r2, r3
 800b840:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b842:	4b14      	ldr	r3, [pc, #80]	; (800b894 <prvAddCurrentTaskToDelayedList+0x94>)
 800b844:	681b      	ldr	r3, [r3, #0]
 800b846:	68ba      	ldr	r2, [r7, #8]
 800b848:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b84a:	68ba      	ldr	r2, [r7, #8]
 800b84c:	68fb      	ldr	r3, [r7, #12]
 800b84e:	429a      	cmp	r2, r3
 800b850:	d209      	bcs.n	800b866 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b852:	4b12      	ldr	r3, [pc, #72]	; (800b89c <prvAddCurrentTaskToDelayedList+0x9c>)
 800b854:	681a      	ldr	r2, [r3, #0]
 800b856:	4b0f      	ldr	r3, [pc, #60]	; (800b894 <prvAddCurrentTaskToDelayedList+0x94>)
 800b858:	681b      	ldr	r3, [r3, #0]
 800b85a:	3304      	adds	r3, #4
 800b85c:	0019      	movs	r1, r3
 800b85e:	0010      	movs	r0, r2
 800b860:	f7fe fd23 	bl	800a2aa <vListInsert>
}
 800b864:	e010      	b.n	800b888 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b866:	4b0e      	ldr	r3, [pc, #56]	; (800b8a0 <prvAddCurrentTaskToDelayedList+0xa0>)
 800b868:	681a      	ldr	r2, [r3, #0]
 800b86a:	4b0a      	ldr	r3, [pc, #40]	; (800b894 <prvAddCurrentTaskToDelayedList+0x94>)
 800b86c:	681b      	ldr	r3, [r3, #0]
 800b86e:	3304      	adds	r3, #4
 800b870:	0019      	movs	r1, r3
 800b872:	0010      	movs	r0, r2
 800b874:	f7fe fd19 	bl	800a2aa <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b878:	4b0a      	ldr	r3, [pc, #40]	; (800b8a4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b87a:	681b      	ldr	r3, [r3, #0]
 800b87c:	68ba      	ldr	r2, [r7, #8]
 800b87e:	429a      	cmp	r2, r3
 800b880:	d202      	bcs.n	800b888 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800b882:	4b08      	ldr	r3, [pc, #32]	; (800b8a4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b884:	68ba      	ldr	r2, [r7, #8]
 800b886:	601a      	str	r2, [r3, #0]
}
 800b888:	46c0      	nop			; (mov r8, r8)
 800b88a:	46bd      	mov	sp, r7
 800b88c:	b004      	add	sp, #16
 800b88e:	bd80      	pop	{r7, pc}
 800b890:	20001b6c 	.word	0x20001b6c
 800b894:	20001694 	.word	0x20001694
 800b898:	20001b54 	.word	0x20001b54
 800b89c:	20001b24 	.word	0x20001b24
 800b8a0:	20001b20 	.word	0x20001b20
 800b8a4:	20001b88 	.word	0x20001b88

0800b8a8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800b8a8:	b590      	push	{r4, r7, lr}
 800b8aa:	b089      	sub	sp, #36	; 0x24
 800b8ac:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800b8ae:	2300      	movs	r3, #0
 800b8b0:	60fb      	str	r3, [r7, #12]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800b8b2:	f000 fac9 	bl	800be48 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800b8b6:	4b17      	ldr	r3, [pc, #92]	; (800b914 <xTimerCreateTimerTask+0x6c>)
 800b8b8:	681b      	ldr	r3, [r3, #0]
 800b8ba:	2b00      	cmp	r3, #0
 800b8bc:	d020      	beq.n	800b900 <xTimerCreateTimerTask+0x58>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800b8be:	2300      	movs	r3, #0
 800b8c0:	60bb      	str	r3, [r7, #8]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800b8c2:	2300      	movs	r3, #0
 800b8c4:	607b      	str	r3, [r7, #4]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800b8c6:	003a      	movs	r2, r7
 800b8c8:	1d39      	adds	r1, r7, #4
 800b8ca:	2308      	movs	r3, #8
 800b8cc:	18fb      	adds	r3, r7, r3
 800b8ce:	0018      	movs	r0, r3
 800b8d0:	f7fe fc88 	bl	800a1e4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800b8d4:	683c      	ldr	r4, [r7, #0]
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	68ba      	ldr	r2, [r7, #8]
 800b8da:	490f      	ldr	r1, [pc, #60]	; (800b918 <xTimerCreateTimerTask+0x70>)
 800b8dc:	480f      	ldr	r0, [pc, #60]	; (800b91c <xTimerCreateTimerTask+0x74>)
 800b8de:	9202      	str	r2, [sp, #8]
 800b8e0:	9301      	str	r3, [sp, #4]
 800b8e2:	2302      	movs	r3, #2
 800b8e4:	9300      	str	r3, [sp, #0]
 800b8e6:	2300      	movs	r3, #0
 800b8e8:	0022      	movs	r2, r4
 800b8ea:	f7ff f968 	bl	800abbe <xTaskCreateStatic>
 800b8ee:	0002      	movs	r2, r0
 800b8f0:	4b0b      	ldr	r3, [pc, #44]	; (800b920 <xTimerCreateTimerTask+0x78>)
 800b8f2:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800b8f4:	4b0a      	ldr	r3, [pc, #40]	; (800b920 <xTimerCreateTimerTask+0x78>)
 800b8f6:	681b      	ldr	r3, [r3, #0]
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	d001      	beq.n	800b900 <xTimerCreateTimerTask+0x58>
			{
				xReturn = pdPASS;
 800b8fc:	2301      	movs	r3, #1
 800b8fe:	60fb      	str	r3, [r7, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800b900:	68fb      	ldr	r3, [r7, #12]
 800b902:	2b00      	cmp	r3, #0
 800b904:	d101      	bne.n	800b90a <xTimerCreateTimerTask+0x62>
 800b906:	b672      	cpsid	i
 800b908:	e7fe      	b.n	800b908 <xTimerCreateTimerTask+0x60>
	return xReturn;
 800b90a:	68fb      	ldr	r3, [r7, #12]
}
 800b90c:	0018      	movs	r0, r3
 800b90e:	46bd      	mov	sp, r7
 800b910:	b005      	add	sp, #20
 800b912:	bd90      	pop	{r4, r7, pc}
 800b914:	20001bc4 	.word	0x20001bc4
 800b918:	0800f39c 	.word	0x0800f39c
 800b91c:	0800ba41 	.word	0x0800ba41
 800b920:	20001bc8 	.word	0x20001bc8

0800b924 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800b924:	b590      	push	{r4, r7, lr}
 800b926:	b08b      	sub	sp, #44	; 0x2c
 800b928:	af00      	add	r7, sp, #0
 800b92a:	60f8      	str	r0, [r7, #12]
 800b92c:	60b9      	str	r1, [r7, #8]
 800b92e:	607a      	str	r2, [r7, #4]
 800b930:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800b932:	2300      	movs	r3, #0
 800b934:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800b936:	68fb      	ldr	r3, [r7, #12]
 800b938:	2b00      	cmp	r3, #0
 800b93a:	d101      	bne.n	800b940 <xTimerGenericCommand+0x1c>
 800b93c:	b672      	cpsid	i
 800b93e:	e7fe      	b.n	800b93e <xTimerGenericCommand+0x1a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800b940:	4b1c      	ldr	r3, [pc, #112]	; (800b9b4 <xTimerGenericCommand+0x90>)
 800b942:	681b      	ldr	r3, [r3, #0]
 800b944:	2b00      	cmp	r3, #0
 800b946:	d030      	beq.n	800b9aa <xTimerGenericCommand+0x86>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800b948:	2414      	movs	r4, #20
 800b94a:	193b      	adds	r3, r7, r4
 800b94c:	68ba      	ldr	r2, [r7, #8]
 800b94e:	601a      	str	r2, [r3, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800b950:	193b      	adds	r3, r7, r4
 800b952:	687a      	ldr	r2, [r7, #4]
 800b954:	605a      	str	r2, [r3, #4]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800b956:	193b      	adds	r3, r7, r4
 800b958:	68fa      	ldr	r2, [r7, #12]
 800b95a:	609a      	str	r2, [r3, #8]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800b95c:	68bb      	ldr	r3, [r7, #8]
 800b95e:	2b05      	cmp	r3, #5
 800b960:	dc19      	bgt.n	800b996 <xTimerGenericCommand+0x72>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800b962:	f7ff fed5 	bl	800b710 <xTaskGetSchedulerState>
 800b966:	0003      	movs	r3, r0
 800b968:	2b02      	cmp	r3, #2
 800b96a:	d109      	bne.n	800b980 <xTimerGenericCommand+0x5c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800b96c:	4b11      	ldr	r3, [pc, #68]	; (800b9b4 <xTimerGenericCommand+0x90>)
 800b96e:	6818      	ldr	r0, [r3, #0]
 800b970:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b972:	1939      	adds	r1, r7, r4
 800b974:	2300      	movs	r3, #0
 800b976:	f7fe fdbd 	bl	800a4f4 <xQueueGenericSend>
 800b97a:	0003      	movs	r3, r0
 800b97c:	627b      	str	r3, [r7, #36]	; 0x24
 800b97e:	e014      	b.n	800b9aa <xTimerGenericCommand+0x86>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800b980:	4b0c      	ldr	r3, [pc, #48]	; (800b9b4 <xTimerGenericCommand+0x90>)
 800b982:	6818      	ldr	r0, [r3, #0]
 800b984:	2314      	movs	r3, #20
 800b986:	18f9      	adds	r1, r7, r3
 800b988:	2300      	movs	r3, #0
 800b98a:	2200      	movs	r2, #0
 800b98c:	f7fe fdb2 	bl	800a4f4 <xQueueGenericSend>
 800b990:	0003      	movs	r3, r0
 800b992:	627b      	str	r3, [r7, #36]	; 0x24
 800b994:	e009      	b.n	800b9aa <xTimerGenericCommand+0x86>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800b996:	4b07      	ldr	r3, [pc, #28]	; (800b9b4 <xTimerGenericCommand+0x90>)
 800b998:	6818      	ldr	r0, [r3, #0]
 800b99a:	683a      	ldr	r2, [r7, #0]
 800b99c:	2314      	movs	r3, #20
 800b99e:	18f9      	adds	r1, r7, r3
 800b9a0:	2300      	movs	r3, #0
 800b9a2:	f7fe fe6b 	bl	800a67c <xQueueGenericSendFromISR>
 800b9a6:	0003      	movs	r3, r0
 800b9a8:	627b      	str	r3, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800b9aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b9ac:	0018      	movs	r0, r3
 800b9ae:	46bd      	mov	sp, r7
 800b9b0:	b00b      	add	sp, #44	; 0x2c
 800b9b2:	bd90      	pop	{r4, r7, pc}
 800b9b4:	20001bc4 	.word	0x20001bc4

0800b9b8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800b9b8:	b580      	push	{r7, lr}
 800b9ba:	b086      	sub	sp, #24
 800b9bc:	af02      	add	r7, sp, #8
 800b9be:	6078      	str	r0, [r7, #4]
 800b9c0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b9c2:	4b1e      	ldr	r3, [pc, #120]	; (800ba3c <prvProcessExpiredTimer+0x84>)
 800b9c4:	681b      	ldr	r3, [r3, #0]
 800b9c6:	68db      	ldr	r3, [r3, #12]
 800b9c8:	68db      	ldr	r3, [r3, #12]
 800b9ca:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b9cc:	68fb      	ldr	r3, [r7, #12]
 800b9ce:	3304      	adds	r3, #4
 800b9d0:	0018      	movs	r0, r3
 800b9d2:	f7fe fca0 	bl	800a316 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b9d6:	68fb      	ldr	r3, [r7, #12]
 800b9d8:	2228      	movs	r2, #40	; 0x28
 800b9da:	5c9b      	ldrb	r3, [r3, r2]
 800b9dc:	001a      	movs	r2, r3
 800b9de:	2304      	movs	r3, #4
 800b9e0:	4013      	ands	r3, r2
 800b9e2:	d019      	beq.n	800ba18 <prvProcessExpiredTimer+0x60>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800b9e4:	68fb      	ldr	r3, [r7, #12]
 800b9e6:	699a      	ldr	r2, [r3, #24]
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	18d1      	adds	r1, r2, r3
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	683a      	ldr	r2, [r7, #0]
 800b9f0:	68f8      	ldr	r0, [r7, #12]
 800b9f2:	f000 f8c3 	bl	800bb7c <prvInsertTimerInActiveList>
 800b9f6:	1e03      	subs	r3, r0, #0
 800b9f8:	d017      	beq.n	800ba2a <prvProcessExpiredTimer+0x72>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b9fa:	687a      	ldr	r2, [r7, #4]
 800b9fc:	68f8      	ldr	r0, [r7, #12]
 800b9fe:	2300      	movs	r3, #0
 800ba00:	9300      	str	r3, [sp, #0]
 800ba02:	2300      	movs	r3, #0
 800ba04:	2100      	movs	r1, #0
 800ba06:	f7ff ff8d 	bl	800b924 <xTimerGenericCommand>
 800ba0a:	0003      	movs	r3, r0
 800ba0c:	60bb      	str	r3, [r7, #8]
			configASSERT( xResult );
 800ba0e:	68bb      	ldr	r3, [r7, #8]
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	d10a      	bne.n	800ba2a <prvProcessExpiredTimer+0x72>
 800ba14:	b672      	cpsid	i
 800ba16:	e7fe      	b.n	800ba16 <prvProcessExpiredTimer+0x5e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ba18:	68fb      	ldr	r3, [r7, #12]
 800ba1a:	2228      	movs	r2, #40	; 0x28
 800ba1c:	5c9b      	ldrb	r3, [r3, r2]
 800ba1e:	2201      	movs	r2, #1
 800ba20:	4393      	bics	r3, r2
 800ba22:	b2d9      	uxtb	r1, r3
 800ba24:	68fb      	ldr	r3, [r7, #12]
 800ba26:	2228      	movs	r2, #40	; 0x28
 800ba28:	5499      	strb	r1, [r3, r2]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ba2a:	68fb      	ldr	r3, [r7, #12]
 800ba2c:	6a1b      	ldr	r3, [r3, #32]
 800ba2e:	68fa      	ldr	r2, [r7, #12]
 800ba30:	0010      	movs	r0, r2
 800ba32:	4798      	blx	r3
}
 800ba34:	46c0      	nop			; (mov r8, r8)
 800ba36:	46bd      	mov	sp, r7
 800ba38:	b004      	add	sp, #16
 800ba3a:	bd80      	pop	{r7, pc}
 800ba3c:	20001bbc 	.word	0x20001bbc

0800ba40 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800ba40:	b580      	push	{r7, lr}
 800ba42:	b084      	sub	sp, #16
 800ba44:	af00      	add	r7, sp, #0
 800ba46:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ba48:	2308      	movs	r3, #8
 800ba4a:	18fb      	adds	r3, r7, r3
 800ba4c:	0018      	movs	r0, r3
 800ba4e:	f000 f853 	bl	800baf8 <prvGetNextExpireTime>
 800ba52:	0003      	movs	r3, r0
 800ba54:	60fb      	str	r3, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800ba56:	68ba      	ldr	r2, [r7, #8]
 800ba58:	68fb      	ldr	r3, [r7, #12]
 800ba5a:	0011      	movs	r1, r2
 800ba5c:	0018      	movs	r0, r3
 800ba5e:	f000 f803 	bl	800ba68 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800ba62:	f000 f8cd 	bl	800bc00 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ba66:	e7ef      	b.n	800ba48 <prvTimerTask+0x8>

0800ba68 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800ba68:	b580      	push	{r7, lr}
 800ba6a:	b084      	sub	sp, #16
 800ba6c:	af00      	add	r7, sp, #0
 800ba6e:	6078      	str	r0, [r7, #4]
 800ba70:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800ba72:	f7ff fac1 	bl	800aff8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ba76:	2308      	movs	r3, #8
 800ba78:	18fb      	adds	r3, r7, r3
 800ba7a:	0018      	movs	r0, r3
 800ba7c:	f000 f85e 	bl	800bb3c <prvSampleTimeNow>
 800ba80:	0003      	movs	r3, r0
 800ba82:	60fb      	str	r3, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800ba84:	68bb      	ldr	r3, [r7, #8]
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	d12b      	bne.n	800bae2 <prvProcessTimerOrBlockTask+0x7a>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800ba8a:	683b      	ldr	r3, [r7, #0]
 800ba8c:	2b00      	cmp	r3, #0
 800ba8e:	d10c      	bne.n	800baaa <prvProcessTimerOrBlockTask+0x42>
 800ba90:	687a      	ldr	r2, [r7, #4]
 800ba92:	68fb      	ldr	r3, [r7, #12]
 800ba94:	429a      	cmp	r2, r3
 800ba96:	d808      	bhi.n	800baaa <prvProcessTimerOrBlockTask+0x42>
			{
				( void ) xTaskResumeAll();
 800ba98:	f7ff faba 	bl	800b010 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800ba9c:	68fa      	ldr	r2, [r7, #12]
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	0011      	movs	r1, r2
 800baa2:	0018      	movs	r0, r3
 800baa4:	f7ff ff88 	bl	800b9b8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800baa8:	e01d      	b.n	800bae6 <prvProcessTimerOrBlockTask+0x7e>
				if( xListWasEmpty != pdFALSE )
 800baaa:	683b      	ldr	r3, [r7, #0]
 800baac:	2b00      	cmp	r3, #0
 800baae:	d008      	beq.n	800bac2 <prvProcessTimerOrBlockTask+0x5a>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800bab0:	4b0f      	ldr	r3, [pc, #60]	; (800baf0 <prvProcessTimerOrBlockTask+0x88>)
 800bab2:	681b      	ldr	r3, [r3, #0]
 800bab4:	681b      	ldr	r3, [r3, #0]
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	d101      	bne.n	800babe <prvProcessTimerOrBlockTask+0x56>
 800baba:	2301      	movs	r3, #1
 800babc:	e000      	b.n	800bac0 <prvProcessTimerOrBlockTask+0x58>
 800babe:	2300      	movs	r3, #0
 800bac0:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800bac2:	4b0c      	ldr	r3, [pc, #48]	; (800baf4 <prvProcessTimerOrBlockTask+0x8c>)
 800bac4:	6818      	ldr	r0, [r3, #0]
 800bac6:	687a      	ldr	r2, [r7, #4]
 800bac8:	68fb      	ldr	r3, [r7, #12]
 800baca:	1ad3      	subs	r3, r2, r3
 800bacc:	683a      	ldr	r2, [r7, #0]
 800bace:	0019      	movs	r1, r3
 800bad0:	f7ff f842 	bl	800ab58 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800bad4:	f7ff fa9c 	bl	800b010 <xTaskResumeAll>
 800bad8:	1e03      	subs	r3, r0, #0
 800bada:	d104      	bne.n	800bae6 <prvProcessTimerOrBlockTask+0x7e>
					portYIELD_WITHIN_API();
 800badc:	f000 fa80 	bl	800bfe0 <vPortYield>
}
 800bae0:	e001      	b.n	800bae6 <prvProcessTimerOrBlockTask+0x7e>
			( void ) xTaskResumeAll();
 800bae2:	f7ff fa95 	bl	800b010 <xTaskResumeAll>
}
 800bae6:	46c0      	nop			; (mov r8, r8)
 800bae8:	46bd      	mov	sp, r7
 800baea:	b004      	add	sp, #16
 800baec:	bd80      	pop	{r7, pc}
 800baee:	46c0      	nop			; (mov r8, r8)
 800baf0:	20001bc0 	.word	0x20001bc0
 800baf4:	20001bc4 	.word	0x20001bc4

0800baf8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800baf8:	b580      	push	{r7, lr}
 800bafa:	b084      	sub	sp, #16
 800bafc:	af00      	add	r7, sp, #0
 800bafe:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800bb00:	4b0d      	ldr	r3, [pc, #52]	; (800bb38 <prvGetNextExpireTime+0x40>)
 800bb02:	681b      	ldr	r3, [r3, #0]
 800bb04:	681b      	ldr	r3, [r3, #0]
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	d101      	bne.n	800bb0e <prvGetNextExpireTime+0x16>
 800bb0a:	2201      	movs	r2, #1
 800bb0c:	e000      	b.n	800bb10 <prvGetNextExpireTime+0x18>
 800bb0e:	2200      	movs	r2, #0
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	681b      	ldr	r3, [r3, #0]
 800bb18:	2b00      	cmp	r3, #0
 800bb1a:	d105      	bne.n	800bb28 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800bb1c:	4b06      	ldr	r3, [pc, #24]	; (800bb38 <prvGetNextExpireTime+0x40>)
 800bb1e:	681b      	ldr	r3, [r3, #0]
 800bb20:	68db      	ldr	r3, [r3, #12]
 800bb22:	681b      	ldr	r3, [r3, #0]
 800bb24:	60fb      	str	r3, [r7, #12]
 800bb26:	e001      	b.n	800bb2c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800bb28:	2300      	movs	r3, #0
 800bb2a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800bb2c:	68fb      	ldr	r3, [r7, #12]
}
 800bb2e:	0018      	movs	r0, r3
 800bb30:	46bd      	mov	sp, r7
 800bb32:	b004      	add	sp, #16
 800bb34:	bd80      	pop	{r7, pc}
 800bb36:	46c0      	nop			; (mov r8, r8)
 800bb38:	20001bbc 	.word	0x20001bbc

0800bb3c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800bb3c:	b580      	push	{r7, lr}
 800bb3e:	b084      	sub	sp, #16
 800bb40:	af00      	add	r7, sp, #0
 800bb42:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800bb44:	f7ff faf0 	bl	800b128 <xTaskGetTickCount>
 800bb48:	0003      	movs	r3, r0
 800bb4a:	60fb      	str	r3, [r7, #12]

	if( xTimeNow < xLastTime )
 800bb4c:	4b0a      	ldr	r3, [pc, #40]	; (800bb78 <prvSampleTimeNow+0x3c>)
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	68fa      	ldr	r2, [r7, #12]
 800bb52:	429a      	cmp	r2, r3
 800bb54:	d205      	bcs.n	800bb62 <prvSampleTimeNow+0x26>
	{
		prvSwitchTimerLists();
 800bb56:	f000 f919 	bl	800bd8c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	2201      	movs	r2, #1
 800bb5e:	601a      	str	r2, [r3, #0]
 800bb60:	e002      	b.n	800bb68 <prvSampleTimeNow+0x2c>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	2200      	movs	r2, #0
 800bb66:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800bb68:	4b03      	ldr	r3, [pc, #12]	; (800bb78 <prvSampleTimeNow+0x3c>)
 800bb6a:	68fa      	ldr	r2, [r7, #12]
 800bb6c:	601a      	str	r2, [r3, #0]

	return xTimeNow;
 800bb6e:	68fb      	ldr	r3, [r7, #12]
}
 800bb70:	0018      	movs	r0, r3
 800bb72:	46bd      	mov	sp, r7
 800bb74:	b004      	add	sp, #16
 800bb76:	bd80      	pop	{r7, pc}
 800bb78:	20001bcc 	.word	0x20001bcc

0800bb7c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800bb7c:	b580      	push	{r7, lr}
 800bb7e:	b086      	sub	sp, #24
 800bb80:	af00      	add	r7, sp, #0
 800bb82:	60f8      	str	r0, [r7, #12]
 800bb84:	60b9      	str	r1, [r7, #8]
 800bb86:	607a      	str	r2, [r7, #4]
 800bb88:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800bb8a:	2300      	movs	r3, #0
 800bb8c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800bb8e:	68fb      	ldr	r3, [r7, #12]
 800bb90:	68ba      	ldr	r2, [r7, #8]
 800bb92:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800bb94:	68fb      	ldr	r3, [r7, #12]
 800bb96:	68fa      	ldr	r2, [r7, #12]
 800bb98:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800bb9a:	68ba      	ldr	r2, [r7, #8]
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	429a      	cmp	r2, r3
 800bba0:	d812      	bhi.n	800bbc8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bba2:	687a      	ldr	r2, [r7, #4]
 800bba4:	683b      	ldr	r3, [r7, #0]
 800bba6:	1ad2      	subs	r2, r2, r3
 800bba8:	68fb      	ldr	r3, [r7, #12]
 800bbaa:	699b      	ldr	r3, [r3, #24]
 800bbac:	429a      	cmp	r2, r3
 800bbae:	d302      	bcc.n	800bbb6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800bbb0:	2301      	movs	r3, #1
 800bbb2:	617b      	str	r3, [r7, #20]
 800bbb4:	e01b      	b.n	800bbee <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800bbb6:	4b10      	ldr	r3, [pc, #64]	; (800bbf8 <prvInsertTimerInActiveList+0x7c>)
 800bbb8:	681a      	ldr	r2, [r3, #0]
 800bbba:	68fb      	ldr	r3, [r7, #12]
 800bbbc:	3304      	adds	r3, #4
 800bbbe:	0019      	movs	r1, r3
 800bbc0:	0010      	movs	r0, r2
 800bbc2:	f7fe fb72 	bl	800a2aa <vListInsert>
 800bbc6:	e012      	b.n	800bbee <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800bbc8:	687a      	ldr	r2, [r7, #4]
 800bbca:	683b      	ldr	r3, [r7, #0]
 800bbcc:	429a      	cmp	r2, r3
 800bbce:	d206      	bcs.n	800bbde <prvInsertTimerInActiveList+0x62>
 800bbd0:	68ba      	ldr	r2, [r7, #8]
 800bbd2:	683b      	ldr	r3, [r7, #0]
 800bbd4:	429a      	cmp	r2, r3
 800bbd6:	d302      	bcc.n	800bbde <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800bbd8:	2301      	movs	r3, #1
 800bbda:	617b      	str	r3, [r7, #20]
 800bbdc:	e007      	b.n	800bbee <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800bbde:	4b07      	ldr	r3, [pc, #28]	; (800bbfc <prvInsertTimerInActiveList+0x80>)
 800bbe0:	681a      	ldr	r2, [r3, #0]
 800bbe2:	68fb      	ldr	r3, [r7, #12]
 800bbe4:	3304      	adds	r3, #4
 800bbe6:	0019      	movs	r1, r3
 800bbe8:	0010      	movs	r0, r2
 800bbea:	f7fe fb5e 	bl	800a2aa <vListInsert>
		}
	}

	return xProcessTimerNow;
 800bbee:	697b      	ldr	r3, [r7, #20]
}
 800bbf0:	0018      	movs	r0, r3
 800bbf2:	46bd      	mov	sp, r7
 800bbf4:	b006      	add	sp, #24
 800bbf6:	bd80      	pop	{r7, pc}
 800bbf8:	20001bc0 	.word	0x20001bc0
 800bbfc:	20001bbc 	.word	0x20001bbc

0800bc00 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800bc00:	b590      	push	{r4, r7, lr}
 800bc02:	b08d      	sub	sp, #52	; 0x34
 800bc04:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800bc06:	e0ac      	b.n	800bd62 <prvProcessReceivedCommands+0x162>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800bc08:	2208      	movs	r2, #8
 800bc0a:	18bb      	adds	r3, r7, r2
 800bc0c:	681b      	ldr	r3, [r3, #0]
 800bc0e:	2b00      	cmp	r3, #0
 800bc10:	da0f      	bge.n	800bc32 <prvProcessReceivedCommands+0x32>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800bc12:	18bb      	adds	r3, r7, r2
 800bc14:	3304      	adds	r3, #4
 800bc16:	627b      	str	r3, [r7, #36]	; 0x24

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800bc18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc1a:	2b00      	cmp	r3, #0
 800bc1c:	d101      	bne.n	800bc22 <prvProcessReceivedCommands+0x22>
 800bc1e:	b672      	cpsid	i
 800bc20:	e7fe      	b.n	800bc20 <prvProcessReceivedCommands+0x20>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800bc22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc24:	681a      	ldr	r2, [r3, #0]
 800bc26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc28:	6858      	ldr	r0, [r3, #4]
 800bc2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc2c:	689b      	ldr	r3, [r3, #8]
 800bc2e:	0019      	movs	r1, r3
 800bc30:	4790      	blx	r2
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800bc32:	2208      	movs	r2, #8
 800bc34:	18bb      	adds	r3, r7, r2
 800bc36:	681b      	ldr	r3, [r3, #0]
 800bc38:	2b00      	cmp	r3, #0
 800bc3a:	da00      	bge.n	800bc3e <prvProcessReceivedCommands+0x3e>
 800bc3c:	e091      	b.n	800bd62 <prvProcessReceivedCommands+0x162>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800bc3e:	18bb      	adds	r3, r7, r2
 800bc40:	689b      	ldr	r3, [r3, #8]
 800bc42:	623b      	str	r3, [r7, #32]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800bc44:	6a3b      	ldr	r3, [r7, #32]
 800bc46:	695b      	ldr	r3, [r3, #20]
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	d004      	beq.n	800bc56 <prvProcessReceivedCommands+0x56>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bc4c:	6a3b      	ldr	r3, [r7, #32]
 800bc4e:	3304      	adds	r3, #4
 800bc50:	0018      	movs	r0, r3
 800bc52:	f7fe fb60 	bl	800a316 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800bc56:	1d3b      	adds	r3, r7, #4
 800bc58:	0018      	movs	r0, r3
 800bc5a:	f7ff ff6f 	bl	800bb3c <prvSampleTimeNow>
 800bc5e:	0003      	movs	r3, r0
 800bc60:	61fb      	str	r3, [r7, #28]

			switch( xMessage.xMessageID )
 800bc62:	2308      	movs	r3, #8
 800bc64:	18fb      	adds	r3, r7, r3
 800bc66:	681b      	ldr	r3, [r3, #0]
 800bc68:	2b09      	cmp	r3, #9
 800bc6a:	d900      	bls.n	800bc6e <prvProcessReceivedCommands+0x6e>
 800bc6c:	e078      	b.n	800bd60 <prvProcessReceivedCommands+0x160>
 800bc6e:	009a      	lsls	r2, r3, #2
 800bc70:	4b44      	ldr	r3, [pc, #272]	; (800bd84 <prvProcessReceivedCommands+0x184>)
 800bc72:	18d3      	adds	r3, r2, r3
 800bc74:	681b      	ldr	r3, [r3, #0]
 800bc76:	469f      	mov	pc, r3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800bc78:	6a3b      	ldr	r3, [r7, #32]
 800bc7a:	2228      	movs	r2, #40	; 0x28
 800bc7c:	5c9b      	ldrb	r3, [r3, r2]
 800bc7e:	2201      	movs	r2, #1
 800bc80:	4313      	orrs	r3, r2
 800bc82:	b2d9      	uxtb	r1, r3
 800bc84:	6a3b      	ldr	r3, [r7, #32]
 800bc86:	2228      	movs	r2, #40	; 0x28
 800bc88:	5499      	strb	r1, [r3, r2]
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800bc8a:	2408      	movs	r4, #8
 800bc8c:	193b      	adds	r3, r7, r4
 800bc8e:	685a      	ldr	r2, [r3, #4]
 800bc90:	6a3b      	ldr	r3, [r7, #32]
 800bc92:	699b      	ldr	r3, [r3, #24]
 800bc94:	18d1      	adds	r1, r2, r3
 800bc96:	193b      	adds	r3, r7, r4
 800bc98:	685b      	ldr	r3, [r3, #4]
 800bc9a:	69fa      	ldr	r2, [r7, #28]
 800bc9c:	6a38      	ldr	r0, [r7, #32]
 800bc9e:	f7ff ff6d 	bl	800bb7c <prvInsertTimerInActiveList>
 800bca2:	1e03      	subs	r3, r0, #0
 800bca4:	d05d      	beq.n	800bd62 <prvProcessReceivedCommands+0x162>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bca6:	6a3b      	ldr	r3, [r7, #32]
 800bca8:	6a1b      	ldr	r3, [r3, #32]
 800bcaa:	6a3a      	ldr	r2, [r7, #32]
 800bcac:	0010      	movs	r0, r2
 800bcae:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bcb0:	6a3b      	ldr	r3, [r7, #32]
 800bcb2:	2228      	movs	r2, #40	; 0x28
 800bcb4:	5c9b      	ldrb	r3, [r3, r2]
 800bcb6:	001a      	movs	r2, r3
 800bcb8:	2304      	movs	r3, #4
 800bcba:	4013      	ands	r3, r2
 800bcbc:	d051      	beq.n	800bd62 <prvProcessReceivedCommands+0x162>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800bcbe:	193b      	adds	r3, r7, r4
 800bcc0:	685a      	ldr	r2, [r3, #4]
 800bcc2:	6a3b      	ldr	r3, [r7, #32]
 800bcc4:	699b      	ldr	r3, [r3, #24]
 800bcc6:	18d2      	adds	r2, r2, r3
 800bcc8:	6a38      	ldr	r0, [r7, #32]
 800bcca:	2300      	movs	r3, #0
 800bccc:	9300      	str	r3, [sp, #0]
 800bcce:	2300      	movs	r3, #0
 800bcd0:	2100      	movs	r1, #0
 800bcd2:	f7ff fe27 	bl	800b924 <xTimerGenericCommand>
 800bcd6:	0003      	movs	r3, r0
 800bcd8:	61bb      	str	r3, [r7, #24]
							configASSERT( xResult );
 800bcda:	69bb      	ldr	r3, [r7, #24]
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	d140      	bne.n	800bd62 <prvProcessReceivedCommands+0x162>
 800bce0:	b672      	cpsid	i
 800bce2:	e7fe      	b.n	800bce2 <prvProcessReceivedCommands+0xe2>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bce4:	6a3b      	ldr	r3, [r7, #32]
 800bce6:	2228      	movs	r2, #40	; 0x28
 800bce8:	5c9b      	ldrb	r3, [r3, r2]
 800bcea:	2201      	movs	r2, #1
 800bcec:	4393      	bics	r3, r2
 800bcee:	b2d9      	uxtb	r1, r3
 800bcf0:	6a3b      	ldr	r3, [r7, #32]
 800bcf2:	2228      	movs	r2, #40	; 0x28
 800bcf4:	5499      	strb	r1, [r3, r2]
					break;
 800bcf6:	e034      	b.n	800bd62 <prvProcessReceivedCommands+0x162>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800bcf8:	6a3b      	ldr	r3, [r7, #32]
 800bcfa:	2228      	movs	r2, #40	; 0x28
 800bcfc:	5c9b      	ldrb	r3, [r3, r2]
 800bcfe:	2201      	movs	r2, #1
 800bd00:	4313      	orrs	r3, r2
 800bd02:	b2d9      	uxtb	r1, r3
 800bd04:	6a3b      	ldr	r3, [r7, #32]
 800bd06:	2228      	movs	r2, #40	; 0x28
 800bd08:	5499      	strb	r1, [r3, r2]
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800bd0a:	2308      	movs	r3, #8
 800bd0c:	18fb      	adds	r3, r7, r3
 800bd0e:	685a      	ldr	r2, [r3, #4]
 800bd10:	6a3b      	ldr	r3, [r7, #32]
 800bd12:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800bd14:	6a3b      	ldr	r3, [r7, #32]
 800bd16:	699b      	ldr	r3, [r3, #24]
 800bd18:	2b00      	cmp	r3, #0
 800bd1a:	d101      	bne.n	800bd20 <prvProcessReceivedCommands+0x120>
 800bd1c:	b672      	cpsid	i
 800bd1e:	e7fe      	b.n	800bd1e <prvProcessReceivedCommands+0x11e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800bd20:	6a3b      	ldr	r3, [r7, #32]
 800bd22:	699a      	ldr	r2, [r3, #24]
 800bd24:	69fb      	ldr	r3, [r7, #28]
 800bd26:	18d1      	adds	r1, r2, r3
 800bd28:	69fb      	ldr	r3, [r7, #28]
 800bd2a:	69fa      	ldr	r2, [r7, #28]
 800bd2c:	6a38      	ldr	r0, [r7, #32]
 800bd2e:	f7ff ff25 	bl	800bb7c <prvInsertTimerInActiveList>
					break;
 800bd32:	e016      	b.n	800bd62 <prvProcessReceivedCommands+0x162>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800bd34:	6a3b      	ldr	r3, [r7, #32]
 800bd36:	2228      	movs	r2, #40	; 0x28
 800bd38:	5c9b      	ldrb	r3, [r3, r2]
 800bd3a:	001a      	movs	r2, r3
 800bd3c:	2302      	movs	r3, #2
 800bd3e:	4013      	ands	r3, r2
 800bd40:	d104      	bne.n	800bd4c <prvProcessReceivedCommands+0x14c>
						{
							vPortFree( pxTimer );
 800bd42:	6a3b      	ldr	r3, [r7, #32]
 800bd44:	0018      	movs	r0, r3
 800bd46:	f000 fa9f 	bl	800c288 <vPortFree>
 800bd4a:	e00a      	b.n	800bd62 <prvProcessReceivedCommands+0x162>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bd4c:	6a3b      	ldr	r3, [r7, #32]
 800bd4e:	2228      	movs	r2, #40	; 0x28
 800bd50:	5c9b      	ldrb	r3, [r3, r2]
 800bd52:	2201      	movs	r2, #1
 800bd54:	4393      	bics	r3, r2
 800bd56:	b2d9      	uxtb	r1, r3
 800bd58:	6a3b      	ldr	r3, [r7, #32]
 800bd5a:	2228      	movs	r2, #40	; 0x28
 800bd5c:	5499      	strb	r1, [r3, r2]
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800bd5e:	e000      	b.n	800bd62 <prvProcessReceivedCommands+0x162>

				default	:
					/* Don't expect to get here. */
					break;
 800bd60:	46c0      	nop			; (mov r8, r8)
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800bd62:	4b09      	ldr	r3, [pc, #36]	; (800bd88 <prvProcessReceivedCommands+0x188>)
 800bd64:	681b      	ldr	r3, [r3, #0]
 800bd66:	2208      	movs	r2, #8
 800bd68:	18b9      	adds	r1, r7, r2
 800bd6a:	2200      	movs	r2, #0
 800bd6c:	0018      	movs	r0, r3
 800bd6e:	f7fe fcf9 	bl	800a764 <xQueueReceive>
 800bd72:	1e03      	subs	r3, r0, #0
 800bd74:	d000      	beq.n	800bd78 <prvProcessReceivedCommands+0x178>
 800bd76:	e747      	b.n	800bc08 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800bd78:	46c0      	nop			; (mov r8, r8)
 800bd7a:	46c0      	nop			; (mov r8, r8)
 800bd7c:	46bd      	mov	sp, r7
 800bd7e:	b00b      	add	sp, #44	; 0x2c
 800bd80:	bd90      	pop	{r4, r7, pc}
 800bd82:	46c0      	nop			; (mov r8, r8)
 800bd84:	0800f5b4 	.word	0x0800f5b4
 800bd88:	20001bc4 	.word	0x20001bc4

0800bd8c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800bd8c:	b580      	push	{r7, lr}
 800bd8e:	b088      	sub	sp, #32
 800bd90:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800bd92:	e041      	b.n	800be18 <prvSwitchTimerLists+0x8c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800bd94:	4b2a      	ldr	r3, [pc, #168]	; (800be40 <prvSwitchTimerLists+0xb4>)
 800bd96:	681b      	ldr	r3, [r3, #0]
 800bd98:	68db      	ldr	r3, [r3, #12]
 800bd9a:	681b      	ldr	r3, [r3, #0]
 800bd9c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bd9e:	4b28      	ldr	r3, [pc, #160]	; (800be40 <prvSwitchTimerLists+0xb4>)
 800bda0:	681b      	ldr	r3, [r3, #0]
 800bda2:	68db      	ldr	r3, [r3, #12]
 800bda4:	68db      	ldr	r3, [r3, #12]
 800bda6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bda8:	68fb      	ldr	r3, [r7, #12]
 800bdaa:	3304      	adds	r3, #4
 800bdac:	0018      	movs	r0, r3
 800bdae:	f7fe fab2 	bl	800a316 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bdb2:	68fb      	ldr	r3, [r7, #12]
 800bdb4:	6a1b      	ldr	r3, [r3, #32]
 800bdb6:	68fa      	ldr	r2, [r7, #12]
 800bdb8:	0010      	movs	r0, r2
 800bdba:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bdbc:	68fb      	ldr	r3, [r7, #12]
 800bdbe:	2228      	movs	r2, #40	; 0x28
 800bdc0:	5c9b      	ldrb	r3, [r3, r2]
 800bdc2:	001a      	movs	r2, r3
 800bdc4:	2304      	movs	r3, #4
 800bdc6:	4013      	ands	r3, r2
 800bdc8:	d026      	beq.n	800be18 <prvSwitchTimerLists+0x8c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800bdca:	68fb      	ldr	r3, [r7, #12]
 800bdcc:	699b      	ldr	r3, [r3, #24]
 800bdce:	693a      	ldr	r2, [r7, #16]
 800bdd0:	18d3      	adds	r3, r2, r3
 800bdd2:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800bdd4:	68ba      	ldr	r2, [r7, #8]
 800bdd6:	693b      	ldr	r3, [r7, #16]
 800bdd8:	429a      	cmp	r2, r3
 800bdda:	d90e      	bls.n	800bdfa <prvSwitchTimerLists+0x6e>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800bddc:	68fb      	ldr	r3, [r7, #12]
 800bdde:	68ba      	ldr	r2, [r7, #8]
 800bde0:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800bde2:	68fb      	ldr	r3, [r7, #12]
 800bde4:	68fa      	ldr	r2, [r7, #12]
 800bde6:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800bde8:	4b15      	ldr	r3, [pc, #84]	; (800be40 <prvSwitchTimerLists+0xb4>)
 800bdea:	681a      	ldr	r2, [r3, #0]
 800bdec:	68fb      	ldr	r3, [r7, #12]
 800bdee:	3304      	adds	r3, #4
 800bdf0:	0019      	movs	r1, r3
 800bdf2:	0010      	movs	r0, r2
 800bdf4:	f7fe fa59 	bl	800a2aa <vListInsert>
 800bdf8:	e00e      	b.n	800be18 <prvSwitchTimerLists+0x8c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800bdfa:	693a      	ldr	r2, [r7, #16]
 800bdfc:	68f8      	ldr	r0, [r7, #12]
 800bdfe:	2300      	movs	r3, #0
 800be00:	9300      	str	r3, [sp, #0]
 800be02:	2300      	movs	r3, #0
 800be04:	2100      	movs	r1, #0
 800be06:	f7ff fd8d 	bl	800b924 <xTimerGenericCommand>
 800be0a:	0003      	movs	r3, r0
 800be0c:	607b      	str	r3, [r7, #4]
				configASSERT( xResult );
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	2b00      	cmp	r3, #0
 800be12:	d101      	bne.n	800be18 <prvSwitchTimerLists+0x8c>
 800be14:	b672      	cpsid	i
 800be16:	e7fe      	b.n	800be16 <prvSwitchTimerLists+0x8a>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800be18:	4b09      	ldr	r3, [pc, #36]	; (800be40 <prvSwitchTimerLists+0xb4>)
 800be1a:	681b      	ldr	r3, [r3, #0]
 800be1c:	681b      	ldr	r3, [r3, #0]
 800be1e:	2b00      	cmp	r3, #0
 800be20:	d1b8      	bne.n	800bd94 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800be22:	4b07      	ldr	r3, [pc, #28]	; (800be40 <prvSwitchTimerLists+0xb4>)
 800be24:	681b      	ldr	r3, [r3, #0]
 800be26:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800be28:	4b06      	ldr	r3, [pc, #24]	; (800be44 <prvSwitchTimerLists+0xb8>)
 800be2a:	681a      	ldr	r2, [r3, #0]
 800be2c:	4b04      	ldr	r3, [pc, #16]	; (800be40 <prvSwitchTimerLists+0xb4>)
 800be2e:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
 800be30:	4b04      	ldr	r3, [pc, #16]	; (800be44 <prvSwitchTimerLists+0xb8>)
 800be32:	697a      	ldr	r2, [r7, #20]
 800be34:	601a      	str	r2, [r3, #0]
}
 800be36:	46c0      	nop			; (mov r8, r8)
 800be38:	46bd      	mov	sp, r7
 800be3a:	b006      	add	sp, #24
 800be3c:	bd80      	pop	{r7, pc}
 800be3e:	46c0      	nop			; (mov r8, r8)
 800be40:	20001bbc 	.word	0x20001bbc
 800be44:	20001bc0 	.word	0x20001bc0

0800be48 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800be48:	b580      	push	{r7, lr}
 800be4a:	b082      	sub	sp, #8
 800be4c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800be4e:	f000 f8d7 	bl	800c000 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800be52:	4b16      	ldr	r3, [pc, #88]	; (800beac <prvCheckForValidListAndQueue+0x64>)
 800be54:	681b      	ldr	r3, [r3, #0]
 800be56:	2b00      	cmp	r3, #0
 800be58:	d123      	bne.n	800bea2 <prvCheckForValidListAndQueue+0x5a>
		{
			vListInitialise( &xActiveTimerList1 );
 800be5a:	4b15      	ldr	r3, [pc, #84]	; (800beb0 <prvCheckForValidListAndQueue+0x68>)
 800be5c:	0018      	movs	r0, r3
 800be5e:	f7fe f9d9 	bl	800a214 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800be62:	4b14      	ldr	r3, [pc, #80]	; (800beb4 <prvCheckForValidListAndQueue+0x6c>)
 800be64:	0018      	movs	r0, r3
 800be66:	f7fe f9d5 	bl	800a214 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800be6a:	4b13      	ldr	r3, [pc, #76]	; (800beb8 <prvCheckForValidListAndQueue+0x70>)
 800be6c:	4a10      	ldr	r2, [pc, #64]	; (800beb0 <prvCheckForValidListAndQueue+0x68>)
 800be6e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800be70:	4b12      	ldr	r3, [pc, #72]	; (800bebc <prvCheckForValidListAndQueue+0x74>)
 800be72:	4a10      	ldr	r2, [pc, #64]	; (800beb4 <prvCheckForValidListAndQueue+0x6c>)
 800be74:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800be76:	4b12      	ldr	r3, [pc, #72]	; (800bec0 <prvCheckForValidListAndQueue+0x78>)
 800be78:	4a12      	ldr	r2, [pc, #72]	; (800bec4 <prvCheckForValidListAndQueue+0x7c>)
 800be7a:	2100      	movs	r1, #0
 800be7c:	9100      	str	r1, [sp, #0]
 800be7e:	2110      	movs	r1, #16
 800be80:	200a      	movs	r0, #10
 800be82:	f7fe fac4 	bl	800a40e <xQueueGenericCreateStatic>
 800be86:	0002      	movs	r2, r0
 800be88:	4b08      	ldr	r3, [pc, #32]	; (800beac <prvCheckForValidListAndQueue+0x64>)
 800be8a:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800be8c:	4b07      	ldr	r3, [pc, #28]	; (800beac <prvCheckForValidListAndQueue+0x64>)
 800be8e:	681b      	ldr	r3, [r3, #0]
 800be90:	2b00      	cmp	r3, #0
 800be92:	d006      	beq.n	800bea2 <prvCheckForValidListAndQueue+0x5a>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800be94:	4b05      	ldr	r3, [pc, #20]	; (800beac <prvCheckForValidListAndQueue+0x64>)
 800be96:	681b      	ldr	r3, [r3, #0]
 800be98:	4a0b      	ldr	r2, [pc, #44]	; (800bec8 <prvCheckForValidListAndQueue+0x80>)
 800be9a:	0011      	movs	r1, r2
 800be9c:	0018      	movs	r0, r3
 800be9e:	f7fe fe33 	bl	800ab08 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800bea2:	f000 f8bf 	bl	800c024 <vPortExitCritical>
}
 800bea6:	46c0      	nop			; (mov r8, r8)
 800bea8:	46bd      	mov	sp, r7
 800beaa:	bd80      	pop	{r7, pc}
 800beac:	20001bc4 	.word	0x20001bc4
 800beb0:	20001b94 	.word	0x20001b94
 800beb4:	20001ba8 	.word	0x20001ba8
 800beb8:	20001bbc 	.word	0x20001bbc
 800bebc:	20001bc0 	.word	0x20001bc0
 800bec0:	20001c70 	.word	0x20001c70
 800bec4:	20001bd0 	.word	0x20001bd0
 800bec8:	0800f3a4 	.word	0x0800f3a4

0800becc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800becc:	b580      	push	{r7, lr}
 800bece:	b084      	sub	sp, #16
 800bed0:	af00      	add	r7, sp, #0
 800bed2:	60f8      	str	r0, [r7, #12]
 800bed4:	60b9      	str	r1, [r7, #8]
 800bed6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800bed8:	68fb      	ldr	r3, [r7, #12]
 800beda:	3b04      	subs	r3, #4
 800bedc:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800bede:	68fb      	ldr	r3, [r7, #12]
 800bee0:	2280      	movs	r2, #128	; 0x80
 800bee2:	0452      	lsls	r2, r2, #17
 800bee4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bee6:	68fb      	ldr	r3, [r7, #12]
 800bee8:	3b04      	subs	r3, #4
 800beea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 800beec:	68ba      	ldr	r2, [r7, #8]
 800beee:	68fb      	ldr	r3, [r7, #12]
 800bef0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bef2:	68fb      	ldr	r3, [r7, #12]
 800bef4:	3b04      	subs	r3, #4
 800bef6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800bef8:	4a08      	ldr	r2, [pc, #32]	; (800bf1c <pxPortInitialiseStack+0x50>)
 800befa:	68fb      	ldr	r3, [r7, #12]
 800befc:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800befe:	68fb      	ldr	r3, [r7, #12]
 800bf00:	3b14      	subs	r3, #20
 800bf02:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800bf04:	687a      	ldr	r2, [r7, #4]
 800bf06:	68fb      	ldr	r3, [r7, #12]
 800bf08:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 800bf0a:	68fb      	ldr	r3, [r7, #12]
 800bf0c:	3b20      	subs	r3, #32
 800bf0e:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800bf10:	68fb      	ldr	r3, [r7, #12]
}
 800bf12:	0018      	movs	r0, r3
 800bf14:	46bd      	mov	sp, r7
 800bf16:	b004      	add	sp, #16
 800bf18:	bd80      	pop	{r7, pc}
 800bf1a:	46c0      	nop			; (mov r8, r8)
 800bf1c:	0800bf21 	.word	0x0800bf21

0800bf20 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800bf20:	b580      	push	{r7, lr}
 800bf22:	b082      	sub	sp, #8
 800bf24:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800bf26:	2300      	movs	r3, #0
 800bf28:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800bf2a:	4b08      	ldr	r3, [pc, #32]	; (800bf4c <prvTaskExitError+0x2c>)
 800bf2c:	681b      	ldr	r3, [r3, #0]
 800bf2e:	3301      	adds	r3, #1
 800bf30:	d001      	beq.n	800bf36 <prvTaskExitError+0x16>
 800bf32:	b672      	cpsid	i
 800bf34:	e7fe      	b.n	800bf34 <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
 800bf36:	b672      	cpsid	i
	while( ulDummy == 0 )
 800bf38:	46c0      	nop			; (mov r8, r8)
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	2b00      	cmp	r3, #0
 800bf3e:	d0fc      	beq.n	800bf3a <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800bf40:	46c0      	nop			; (mov r8, r8)
 800bf42:	46c0      	nop			; (mov r8, r8)
 800bf44:	46bd      	mov	sp, r7
 800bf46:	b002      	add	sp, #8
 800bf48:	bd80      	pop	{r7, pc}
 800bf4a:	46c0      	nop			; (mov r8, r8)
 800bf4c:	2000000c 	.word	0x2000000c

0800bf50 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 800bf50:	b580      	push	{r7, lr}
 800bf52:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 800bf54:	46c0      	nop			; (mov r8, r8)
 800bf56:	46bd      	mov	sp, r7
 800bf58:	bd80      	pop	{r7, pc}
 800bf5a:	0000      	movs	r0, r0
 800bf5c:	0000      	movs	r0, r0
	...

0800bf60 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 800bf60:	4a0b      	ldr	r2, [pc, #44]	; (800bf90 <pxCurrentTCBConst2>)
 800bf62:	6813      	ldr	r3, [r2, #0]
 800bf64:	6818      	ldr	r0, [r3, #0]
 800bf66:	3020      	adds	r0, #32
 800bf68:	f380 8809 	msr	PSP, r0
 800bf6c:	2002      	movs	r0, #2
 800bf6e:	f380 8814 	msr	CONTROL, r0
 800bf72:	f3bf 8f6f 	isb	sy
 800bf76:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 800bf78:	46ae      	mov	lr, r5
 800bf7a:	bc08      	pop	{r3}
 800bf7c:	bc04      	pop	{r2}
 800bf7e:	b662      	cpsie	i
 800bf80:	4718      	bx	r3
 800bf82:	46c0      	nop			; (mov r8, r8)
 800bf84:	46c0      	nop			; (mov r8, r8)
 800bf86:	46c0      	nop			; (mov r8, r8)
 800bf88:	46c0      	nop			; (mov r8, r8)
 800bf8a:	46c0      	nop			; (mov r8, r8)
 800bf8c:	46c0      	nop			; (mov r8, r8)
 800bf8e:	46c0      	nop			; (mov r8, r8)

0800bf90 <pxCurrentTCBConst2>:
 800bf90:	20001694 	.word	0x20001694
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
 800bf94:	46c0      	nop			; (mov r8, r8)
 800bf96:	46c0      	nop			; (mov r8, r8)

0800bf98 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800bf98:	b580      	push	{r7, lr}
 800bf9a:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priority as the kernel. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800bf9c:	4b0e      	ldr	r3, [pc, #56]	; (800bfd8 <xPortStartScheduler+0x40>)
 800bf9e:	681a      	ldr	r2, [r3, #0]
 800bfa0:	4b0d      	ldr	r3, [pc, #52]	; (800bfd8 <xPortStartScheduler+0x40>)
 800bfa2:	21ff      	movs	r1, #255	; 0xff
 800bfa4:	0409      	lsls	r1, r1, #16
 800bfa6:	430a      	orrs	r2, r1
 800bfa8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800bfaa:	4b0b      	ldr	r3, [pc, #44]	; (800bfd8 <xPortStartScheduler+0x40>)
 800bfac:	681a      	ldr	r2, [r3, #0]
 800bfae:	4b0a      	ldr	r3, [pc, #40]	; (800bfd8 <xPortStartScheduler+0x40>)
 800bfb0:	21ff      	movs	r1, #255	; 0xff
 800bfb2:	0609      	lsls	r1, r1, #24
 800bfb4:	430a      	orrs	r2, r1
 800bfb6:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800bfb8:	f000 f898 	bl	800c0ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800bfbc:	4b07      	ldr	r3, [pc, #28]	; (800bfdc <xPortStartScheduler+0x44>)
 800bfbe:	2200      	movs	r2, #0
 800bfc0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 800bfc2:	f7ff ffcd 	bl	800bf60 <vPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800bfc6:	f7ff f96d 	bl	800b2a4 <vTaskSwitchContext>
	prvTaskExitError();
 800bfca:	f7ff ffa9 	bl	800bf20 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800bfce:	2300      	movs	r3, #0
}
 800bfd0:	0018      	movs	r0, r3
 800bfd2:	46bd      	mov	sp, r7
 800bfd4:	bd80      	pop	{r7, pc}
 800bfd6:	46c0      	nop			; (mov r8, r8)
 800bfd8:	e000ed20 	.word	0xe000ed20
 800bfdc:	2000000c 	.word	0x2000000c

0800bfe0 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 800bfe0:	b580      	push	{r7, lr}
 800bfe2:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800bfe4:	4b05      	ldr	r3, [pc, #20]	; (800bffc <vPortYield+0x1c>)
 800bfe6:	2280      	movs	r2, #128	; 0x80
 800bfe8:	0552      	lsls	r2, r2, #21
 800bfea:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 800bfec:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 800bff0:	f3bf 8f6f 	isb	sy
}
 800bff4:	46c0      	nop			; (mov r8, r8)
 800bff6:	46bd      	mov	sp, r7
 800bff8:	bd80      	pop	{r7, pc}
 800bffa:	46c0      	nop			; (mov r8, r8)
 800bffc:	e000ed04 	.word	0xe000ed04

0800c000 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c000:	b580      	push	{r7, lr}
 800c002:	af00      	add	r7, sp, #0
	portDISABLE_INTERRUPTS();
 800c004:	b672      	cpsid	i
	uxCriticalNesting++;
 800c006:	4b06      	ldr	r3, [pc, #24]	; (800c020 <vPortEnterCritical+0x20>)
 800c008:	681b      	ldr	r3, [r3, #0]
 800c00a:	1c5a      	adds	r2, r3, #1
 800c00c:	4b04      	ldr	r3, [pc, #16]	; (800c020 <vPortEnterCritical+0x20>)
 800c00e:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 800c010:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 800c014:	f3bf 8f6f 	isb	sy
}
 800c018:	46c0      	nop			; (mov r8, r8)
 800c01a:	46bd      	mov	sp, r7
 800c01c:	bd80      	pop	{r7, pc}
 800c01e:	46c0      	nop			; (mov r8, r8)
 800c020:	2000000c 	.word	0x2000000c

0800c024 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c024:	b580      	push	{r7, lr}
 800c026:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c028:	4b09      	ldr	r3, [pc, #36]	; (800c050 <vPortExitCritical+0x2c>)
 800c02a:	681b      	ldr	r3, [r3, #0]
 800c02c:	2b00      	cmp	r3, #0
 800c02e:	d101      	bne.n	800c034 <vPortExitCritical+0x10>
 800c030:	b672      	cpsid	i
 800c032:	e7fe      	b.n	800c032 <vPortExitCritical+0xe>
	uxCriticalNesting--;
 800c034:	4b06      	ldr	r3, [pc, #24]	; (800c050 <vPortExitCritical+0x2c>)
 800c036:	681b      	ldr	r3, [r3, #0]
 800c038:	1e5a      	subs	r2, r3, #1
 800c03a:	4b05      	ldr	r3, [pc, #20]	; (800c050 <vPortExitCritical+0x2c>)
 800c03c:	601a      	str	r2, [r3, #0]
	if( uxCriticalNesting == 0 )
 800c03e:	4b04      	ldr	r3, [pc, #16]	; (800c050 <vPortExitCritical+0x2c>)
 800c040:	681b      	ldr	r3, [r3, #0]
 800c042:	2b00      	cmp	r3, #0
 800c044:	d100      	bne.n	800c048 <vPortExitCritical+0x24>
	{
		portENABLE_INTERRUPTS();
 800c046:	b662      	cpsie	i
	}
}
 800c048:	46c0      	nop			; (mov r8, r8)
 800c04a:	46bd      	mov	sp, r7
 800c04c:	bd80      	pop	{r7, pc}
 800c04e:	46c0      	nop			; (mov r8, r8)
 800c050:	2000000c 	.word	0x2000000c

0800c054 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 800c054:	f3ef 8010 	mrs	r0, PRIMASK
 800c058:	b672      	cpsid	i
 800c05a:	4770      	bx	lr
					" mrs r0, PRIMASK	\n"
					" cpsid i			\n"
					" bx lr				  "
					::: "memory"
				  );
}
 800c05c:	46c0      	nop			; (mov r8, r8)
 800c05e:	0018      	movs	r0, r3

0800c060 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 800c060:	f380 8810 	msr	PRIMASK, r0
 800c064:	4770      	bx	lr
					" msr PRIMASK, r0	\n"
					" bx lr				  "
					::: "memory"
				  );
}
 800c066:	46c0      	nop			; (mov r8, r8)
	...

0800c070 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c070:	f3ef 8009 	mrs	r0, PSP
 800c074:	4b0e      	ldr	r3, [pc, #56]	; (800c0b0 <pxCurrentTCBConst>)
 800c076:	681a      	ldr	r2, [r3, #0]
 800c078:	3820      	subs	r0, #32
 800c07a:	6010      	str	r0, [r2, #0]
 800c07c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 800c07e:	4644      	mov	r4, r8
 800c080:	464d      	mov	r5, r9
 800c082:	4656      	mov	r6, sl
 800c084:	465f      	mov	r7, fp
 800c086:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 800c088:	b508      	push	{r3, lr}
 800c08a:	b672      	cpsid	i
 800c08c:	f7ff f90a 	bl	800b2a4 <vTaskSwitchContext>
 800c090:	b662      	cpsie	i
 800c092:	bc0c      	pop	{r2, r3}
 800c094:	6811      	ldr	r1, [r2, #0]
 800c096:	6808      	ldr	r0, [r1, #0]
 800c098:	3010      	adds	r0, #16
 800c09a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800c09c:	46a0      	mov	r8, r4
 800c09e:	46a9      	mov	r9, r5
 800c0a0:	46b2      	mov	sl, r6
 800c0a2:	46bb      	mov	fp, r7
 800c0a4:	f380 8809 	msr	PSP, r0
 800c0a8:	3820      	subs	r0, #32
 800c0aa:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800c0ac:	4718      	bx	r3
 800c0ae:	46c0      	nop			; (mov r8, r8)

0800c0b0 <pxCurrentTCBConst>:
 800c0b0:	20001694 	.word	0x20001694
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 800c0b4:	46c0      	nop			; (mov r8, r8)
 800c0b6:	46c0      	nop			; (mov r8, r8)

0800c0b8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c0b8:	b580      	push	{r7, lr}
 800c0ba:	b082      	sub	sp, #8
 800c0bc:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 800c0be:	f7ff ffc9 	bl	800c054 <ulSetInterruptMaskFromISR>
 800c0c2:	0003      	movs	r3, r0
 800c0c4:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c0c6:	f7ff f83d 	bl	800b144 <xTaskIncrementTick>
 800c0ca:	1e03      	subs	r3, r0, #0
 800c0cc:	d003      	beq.n	800c0d6 <xPortSysTickHandler+0x1e>
		{
			/* Pend a context switch. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c0ce:	4b06      	ldr	r3, [pc, #24]	; (800c0e8 <xPortSysTickHandler+0x30>)
 800c0d0:	2280      	movs	r2, #128	; 0x80
 800c0d2:	0552      	lsls	r2, r2, #21
 800c0d4:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	0018      	movs	r0, r3
 800c0da:	f7ff ffc1 	bl	800c060 <vClearInterruptMaskFromISR>
}
 800c0de:	46c0      	nop			; (mov r8, r8)
 800c0e0:	46bd      	mov	sp, r7
 800c0e2:	b002      	add	sp, #8
 800c0e4:	bd80      	pop	{r7, pc}
 800c0e6:	46c0      	nop			; (mov r8, r8)
 800c0e8:	e000ed04 	.word	0xe000ed04

0800c0ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c0ec:	b580      	push	{r7, lr}
 800c0ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR;
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c0f0:	4b0b      	ldr	r3, [pc, #44]	; (800c120 <vPortSetupTimerInterrupt+0x34>)
 800c0f2:	2200      	movs	r2, #0
 800c0f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c0f6:	4b0b      	ldr	r3, [pc, #44]	; (800c124 <vPortSetupTimerInterrupt+0x38>)
 800c0f8:	2200      	movs	r2, #0
 800c0fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c0fc:	4b0a      	ldr	r3, [pc, #40]	; (800c128 <vPortSetupTimerInterrupt+0x3c>)
 800c0fe:	681b      	ldr	r3, [r3, #0]
 800c100:	22fa      	movs	r2, #250	; 0xfa
 800c102:	0091      	lsls	r1, r2, #2
 800c104:	0018      	movs	r0, r3
 800c106:	f7f4 f825 	bl	8000154 <__udivsi3>
 800c10a:	0003      	movs	r3, r0
 800c10c:	001a      	movs	r2, r3
 800c10e:	4b07      	ldr	r3, [pc, #28]	; (800c12c <vPortSetupTimerInterrupt+0x40>)
 800c110:	3a01      	subs	r2, #1
 800c112:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
 800c114:	4b02      	ldr	r3, [pc, #8]	; (800c120 <vPortSetupTimerInterrupt+0x34>)
 800c116:	2207      	movs	r2, #7
 800c118:	601a      	str	r2, [r3, #0]
}
 800c11a:	46c0      	nop			; (mov r8, r8)
 800c11c:	46bd      	mov	sp, r7
 800c11e:	bd80      	pop	{r7, pc}
 800c120:	e000e010 	.word	0xe000e010
 800c124:	e000e018 	.word	0xe000e018
 800c128:	20000000 	.word	0x20000000
 800c12c:	e000e014 	.word	0xe000e014

0800c130 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c130:	b580      	push	{r7, lr}
 800c132:	b086      	sub	sp, #24
 800c134:	af00      	add	r7, sp, #0
 800c136:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c138:	2300      	movs	r3, #0
 800c13a:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 800c13c:	f7fe ff5c 	bl	800aff8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c140:	4b4b      	ldr	r3, [pc, #300]	; (800c270 <pvPortMalloc+0x140>)
 800c142:	681b      	ldr	r3, [r3, #0]
 800c144:	2b00      	cmp	r3, #0
 800c146:	d101      	bne.n	800c14c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c148:	f000 f8ec 	bl	800c324 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c14c:	4b49      	ldr	r3, [pc, #292]	; (800c274 <pvPortMalloc+0x144>)
 800c14e:	681b      	ldr	r3, [r3, #0]
 800c150:	687a      	ldr	r2, [r7, #4]
 800c152:	4013      	ands	r3, r2
 800c154:	d000      	beq.n	800c158 <pvPortMalloc+0x28>
 800c156:	e07e      	b.n	800c256 <pvPortMalloc+0x126>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	2b00      	cmp	r3, #0
 800c15c:	d012      	beq.n	800c184 <pvPortMalloc+0x54>
			{
				xWantedSize += xHeapStructSize;
 800c15e:	2208      	movs	r2, #8
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	189b      	adds	r3, r3, r2
 800c164:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	2207      	movs	r2, #7
 800c16a:	4013      	ands	r3, r2
 800c16c:	d00a      	beq.n	800c184 <pvPortMalloc+0x54>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	2207      	movs	r2, #7
 800c172:	4393      	bics	r3, r2
 800c174:	3308      	adds	r3, #8
 800c176:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	2207      	movs	r2, #7
 800c17c:	4013      	ands	r3, r2
 800c17e:	d001      	beq.n	800c184 <pvPortMalloc+0x54>
 800c180:	b672      	cpsid	i
 800c182:	e7fe      	b.n	800c182 <pvPortMalloc+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	2b00      	cmp	r3, #0
 800c188:	d065      	beq.n	800c256 <pvPortMalloc+0x126>
 800c18a:	4b3b      	ldr	r3, [pc, #236]	; (800c278 <pvPortMalloc+0x148>)
 800c18c:	681b      	ldr	r3, [r3, #0]
 800c18e:	687a      	ldr	r2, [r7, #4]
 800c190:	429a      	cmp	r2, r3
 800c192:	d860      	bhi.n	800c256 <pvPortMalloc+0x126>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c194:	4b39      	ldr	r3, [pc, #228]	; (800c27c <pvPortMalloc+0x14c>)
 800c196:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 800c198:	4b38      	ldr	r3, [pc, #224]	; (800c27c <pvPortMalloc+0x14c>)
 800c19a:	681b      	ldr	r3, [r3, #0]
 800c19c:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c19e:	e004      	b.n	800c1aa <pvPortMalloc+0x7a>
				{
					pxPreviousBlock = pxBlock;
 800c1a0:	697b      	ldr	r3, [r7, #20]
 800c1a2:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c1a4:	697b      	ldr	r3, [r7, #20]
 800c1a6:	681b      	ldr	r3, [r3, #0]
 800c1a8:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c1aa:	697b      	ldr	r3, [r7, #20]
 800c1ac:	685b      	ldr	r3, [r3, #4]
 800c1ae:	687a      	ldr	r2, [r7, #4]
 800c1b0:	429a      	cmp	r2, r3
 800c1b2:	d903      	bls.n	800c1bc <pvPortMalloc+0x8c>
 800c1b4:	697b      	ldr	r3, [r7, #20]
 800c1b6:	681b      	ldr	r3, [r3, #0]
 800c1b8:	2b00      	cmp	r3, #0
 800c1ba:	d1f1      	bne.n	800c1a0 <pvPortMalloc+0x70>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c1bc:	4b2c      	ldr	r3, [pc, #176]	; (800c270 <pvPortMalloc+0x140>)
 800c1be:	681b      	ldr	r3, [r3, #0]
 800c1c0:	697a      	ldr	r2, [r7, #20]
 800c1c2:	429a      	cmp	r2, r3
 800c1c4:	d047      	beq.n	800c256 <pvPortMalloc+0x126>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c1c6:	693b      	ldr	r3, [r7, #16]
 800c1c8:	681b      	ldr	r3, [r3, #0]
 800c1ca:	2208      	movs	r2, #8
 800c1cc:	189b      	adds	r3, r3, r2
 800c1ce:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c1d0:	697b      	ldr	r3, [r7, #20]
 800c1d2:	681a      	ldr	r2, [r3, #0]
 800c1d4:	693b      	ldr	r3, [r7, #16]
 800c1d6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c1d8:	697b      	ldr	r3, [r7, #20]
 800c1da:	685a      	ldr	r2, [r3, #4]
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	1ad2      	subs	r2, r2, r3
 800c1e0:	2308      	movs	r3, #8
 800c1e2:	005b      	lsls	r3, r3, #1
 800c1e4:	429a      	cmp	r2, r3
 800c1e6:	d916      	bls.n	800c216 <pvPortMalloc+0xe6>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c1e8:	697a      	ldr	r2, [r7, #20]
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	18d3      	adds	r3, r2, r3
 800c1ee:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c1f0:	68bb      	ldr	r3, [r7, #8]
 800c1f2:	2207      	movs	r2, #7
 800c1f4:	4013      	ands	r3, r2
 800c1f6:	d001      	beq.n	800c1fc <pvPortMalloc+0xcc>
 800c1f8:	b672      	cpsid	i
 800c1fa:	e7fe      	b.n	800c1fa <pvPortMalloc+0xca>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c1fc:	697b      	ldr	r3, [r7, #20]
 800c1fe:	685a      	ldr	r2, [r3, #4]
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	1ad2      	subs	r2, r2, r3
 800c204:	68bb      	ldr	r3, [r7, #8]
 800c206:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c208:	697b      	ldr	r3, [r7, #20]
 800c20a:	687a      	ldr	r2, [r7, #4]
 800c20c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c20e:	68bb      	ldr	r3, [r7, #8]
 800c210:	0018      	movs	r0, r3
 800c212:	f000 f8e7 	bl	800c3e4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c216:	4b18      	ldr	r3, [pc, #96]	; (800c278 <pvPortMalloc+0x148>)
 800c218:	681a      	ldr	r2, [r3, #0]
 800c21a:	697b      	ldr	r3, [r7, #20]
 800c21c:	685b      	ldr	r3, [r3, #4]
 800c21e:	1ad2      	subs	r2, r2, r3
 800c220:	4b15      	ldr	r3, [pc, #84]	; (800c278 <pvPortMalloc+0x148>)
 800c222:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c224:	4b14      	ldr	r3, [pc, #80]	; (800c278 <pvPortMalloc+0x148>)
 800c226:	681a      	ldr	r2, [r3, #0]
 800c228:	4b15      	ldr	r3, [pc, #84]	; (800c280 <pvPortMalloc+0x150>)
 800c22a:	681b      	ldr	r3, [r3, #0]
 800c22c:	429a      	cmp	r2, r3
 800c22e:	d203      	bcs.n	800c238 <pvPortMalloc+0x108>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c230:	4b11      	ldr	r3, [pc, #68]	; (800c278 <pvPortMalloc+0x148>)
 800c232:	681a      	ldr	r2, [r3, #0]
 800c234:	4b12      	ldr	r3, [pc, #72]	; (800c280 <pvPortMalloc+0x150>)
 800c236:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c238:	697b      	ldr	r3, [r7, #20]
 800c23a:	685a      	ldr	r2, [r3, #4]
 800c23c:	4b0d      	ldr	r3, [pc, #52]	; (800c274 <pvPortMalloc+0x144>)
 800c23e:	681b      	ldr	r3, [r3, #0]
 800c240:	431a      	orrs	r2, r3
 800c242:	697b      	ldr	r3, [r7, #20]
 800c244:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c246:	697b      	ldr	r3, [r7, #20]
 800c248:	2200      	movs	r2, #0
 800c24a:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800c24c:	4b0d      	ldr	r3, [pc, #52]	; (800c284 <pvPortMalloc+0x154>)
 800c24e:	681b      	ldr	r3, [r3, #0]
 800c250:	1c5a      	adds	r2, r3, #1
 800c252:	4b0c      	ldr	r3, [pc, #48]	; (800c284 <pvPortMalloc+0x154>)
 800c254:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c256:	f7fe fedb 	bl	800b010 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c25a:	68fb      	ldr	r3, [r7, #12]
 800c25c:	2207      	movs	r2, #7
 800c25e:	4013      	ands	r3, r2
 800c260:	d001      	beq.n	800c266 <pvPortMalloc+0x136>
 800c262:	b672      	cpsid	i
 800c264:	e7fe      	b.n	800c264 <pvPortMalloc+0x134>
	return pvReturn;
 800c266:	68fb      	ldr	r3, [r7, #12]
}
 800c268:	0018      	movs	r0, r3
 800c26a:	46bd      	mov	sp, r7
 800c26c:	b006      	add	sp, #24
 800c26e:	bd80      	pop	{r7, pc}
 800c270:	200028c8 	.word	0x200028c8
 800c274:	200028dc 	.word	0x200028dc
 800c278:	200028cc 	.word	0x200028cc
 800c27c:	200028c0 	.word	0x200028c0
 800c280:	200028d0 	.word	0x200028d0
 800c284:	200028d4 	.word	0x200028d4

0800c288 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c288:	b580      	push	{r7, lr}
 800c28a:	b084      	sub	sp, #16
 800c28c:	af00      	add	r7, sp, #0
 800c28e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	2b00      	cmp	r3, #0
 800c298:	d03a      	beq.n	800c310 <vPortFree+0x88>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c29a:	2308      	movs	r3, #8
 800c29c:	425b      	negs	r3, r3
 800c29e:	68fa      	ldr	r2, [r7, #12]
 800c2a0:	18d3      	adds	r3, r2, r3
 800c2a2:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c2a4:	68fb      	ldr	r3, [r7, #12]
 800c2a6:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c2a8:	68bb      	ldr	r3, [r7, #8]
 800c2aa:	685a      	ldr	r2, [r3, #4]
 800c2ac:	4b1a      	ldr	r3, [pc, #104]	; (800c318 <vPortFree+0x90>)
 800c2ae:	681b      	ldr	r3, [r3, #0]
 800c2b0:	4013      	ands	r3, r2
 800c2b2:	d101      	bne.n	800c2b8 <vPortFree+0x30>
 800c2b4:	b672      	cpsid	i
 800c2b6:	e7fe      	b.n	800c2b6 <vPortFree+0x2e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c2b8:	68bb      	ldr	r3, [r7, #8]
 800c2ba:	681b      	ldr	r3, [r3, #0]
 800c2bc:	2b00      	cmp	r3, #0
 800c2be:	d001      	beq.n	800c2c4 <vPortFree+0x3c>
 800c2c0:	b672      	cpsid	i
 800c2c2:	e7fe      	b.n	800c2c2 <vPortFree+0x3a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c2c4:	68bb      	ldr	r3, [r7, #8]
 800c2c6:	685a      	ldr	r2, [r3, #4]
 800c2c8:	4b13      	ldr	r3, [pc, #76]	; (800c318 <vPortFree+0x90>)
 800c2ca:	681b      	ldr	r3, [r3, #0]
 800c2cc:	4013      	ands	r3, r2
 800c2ce:	d01f      	beq.n	800c310 <vPortFree+0x88>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c2d0:	68bb      	ldr	r3, [r7, #8]
 800c2d2:	681b      	ldr	r3, [r3, #0]
 800c2d4:	2b00      	cmp	r3, #0
 800c2d6:	d11b      	bne.n	800c310 <vPortFree+0x88>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c2d8:	68bb      	ldr	r3, [r7, #8]
 800c2da:	685a      	ldr	r2, [r3, #4]
 800c2dc:	4b0e      	ldr	r3, [pc, #56]	; (800c318 <vPortFree+0x90>)
 800c2de:	681b      	ldr	r3, [r3, #0]
 800c2e0:	43db      	mvns	r3, r3
 800c2e2:	401a      	ands	r2, r3
 800c2e4:	68bb      	ldr	r3, [r7, #8]
 800c2e6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c2e8:	f7fe fe86 	bl	800aff8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c2ec:	68bb      	ldr	r3, [r7, #8]
 800c2ee:	685a      	ldr	r2, [r3, #4]
 800c2f0:	4b0a      	ldr	r3, [pc, #40]	; (800c31c <vPortFree+0x94>)
 800c2f2:	681b      	ldr	r3, [r3, #0]
 800c2f4:	18d2      	adds	r2, r2, r3
 800c2f6:	4b09      	ldr	r3, [pc, #36]	; (800c31c <vPortFree+0x94>)
 800c2f8:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c2fa:	68bb      	ldr	r3, [r7, #8]
 800c2fc:	0018      	movs	r0, r3
 800c2fe:	f000 f871 	bl	800c3e4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800c302:	4b07      	ldr	r3, [pc, #28]	; (800c320 <vPortFree+0x98>)
 800c304:	681b      	ldr	r3, [r3, #0]
 800c306:	1c5a      	adds	r2, r3, #1
 800c308:	4b05      	ldr	r3, [pc, #20]	; (800c320 <vPortFree+0x98>)
 800c30a:	601a      	str	r2, [r3, #0]
				}
				( void ) xTaskResumeAll();
 800c30c:	f7fe fe80 	bl	800b010 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c310:	46c0      	nop			; (mov r8, r8)
 800c312:	46bd      	mov	sp, r7
 800c314:	b004      	add	sp, #16
 800c316:	bd80      	pop	{r7, pc}
 800c318:	200028dc 	.word	0x200028dc
 800c31c:	200028cc 	.word	0x200028cc
 800c320:	200028d8 	.word	0x200028d8

0800c324 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c324:	b580      	push	{r7, lr}
 800c326:	b084      	sub	sp, #16
 800c328:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c32a:	23c0      	movs	r3, #192	; 0xc0
 800c32c:	011b      	lsls	r3, r3, #4
 800c32e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c330:	4b26      	ldr	r3, [pc, #152]	; (800c3cc <prvHeapInit+0xa8>)
 800c332:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c334:	68fb      	ldr	r3, [r7, #12]
 800c336:	2207      	movs	r2, #7
 800c338:	4013      	ands	r3, r2
 800c33a:	d00c      	beq.n	800c356 <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c33c:	68fb      	ldr	r3, [r7, #12]
 800c33e:	3307      	adds	r3, #7
 800c340:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c342:	68fb      	ldr	r3, [r7, #12]
 800c344:	2207      	movs	r2, #7
 800c346:	4393      	bics	r3, r2
 800c348:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c34a:	68ba      	ldr	r2, [r7, #8]
 800c34c:	68fb      	ldr	r3, [r7, #12]
 800c34e:	1ad2      	subs	r2, r2, r3
 800c350:	4b1e      	ldr	r3, [pc, #120]	; (800c3cc <prvHeapInit+0xa8>)
 800c352:	18d3      	adds	r3, r2, r3
 800c354:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c356:	68fb      	ldr	r3, [r7, #12]
 800c358:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c35a:	4b1d      	ldr	r3, [pc, #116]	; (800c3d0 <prvHeapInit+0xac>)
 800c35c:	687a      	ldr	r2, [r7, #4]
 800c35e:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c360:	4b1b      	ldr	r3, [pc, #108]	; (800c3d0 <prvHeapInit+0xac>)
 800c362:	2200      	movs	r2, #0
 800c364:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	68ba      	ldr	r2, [r7, #8]
 800c36a:	18d3      	adds	r3, r2, r3
 800c36c:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c36e:	2208      	movs	r2, #8
 800c370:	68fb      	ldr	r3, [r7, #12]
 800c372:	1a9b      	subs	r3, r3, r2
 800c374:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c376:	68fb      	ldr	r3, [r7, #12]
 800c378:	2207      	movs	r2, #7
 800c37a:	4393      	bics	r3, r2
 800c37c:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c37e:	68fa      	ldr	r2, [r7, #12]
 800c380:	4b14      	ldr	r3, [pc, #80]	; (800c3d4 <prvHeapInit+0xb0>)
 800c382:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
 800c384:	4b13      	ldr	r3, [pc, #76]	; (800c3d4 <prvHeapInit+0xb0>)
 800c386:	681b      	ldr	r3, [r3, #0]
 800c388:	2200      	movs	r2, #0
 800c38a:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c38c:	4b11      	ldr	r3, [pc, #68]	; (800c3d4 <prvHeapInit+0xb0>)
 800c38e:	681b      	ldr	r3, [r3, #0]
 800c390:	2200      	movs	r2, #0
 800c392:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c398:	683b      	ldr	r3, [r7, #0]
 800c39a:	68fa      	ldr	r2, [r7, #12]
 800c39c:	1ad2      	subs	r2, r2, r3
 800c39e:	683b      	ldr	r3, [r7, #0]
 800c3a0:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c3a2:	4b0c      	ldr	r3, [pc, #48]	; (800c3d4 <prvHeapInit+0xb0>)
 800c3a4:	681a      	ldr	r2, [r3, #0]
 800c3a6:	683b      	ldr	r3, [r7, #0]
 800c3a8:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c3aa:	683b      	ldr	r3, [r7, #0]
 800c3ac:	685a      	ldr	r2, [r3, #4]
 800c3ae:	4b0a      	ldr	r3, [pc, #40]	; (800c3d8 <prvHeapInit+0xb4>)
 800c3b0:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c3b2:	683b      	ldr	r3, [r7, #0]
 800c3b4:	685a      	ldr	r2, [r3, #4]
 800c3b6:	4b09      	ldr	r3, [pc, #36]	; (800c3dc <prvHeapInit+0xb8>)
 800c3b8:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c3ba:	4b09      	ldr	r3, [pc, #36]	; (800c3e0 <prvHeapInit+0xbc>)
 800c3bc:	2280      	movs	r2, #128	; 0x80
 800c3be:	0612      	lsls	r2, r2, #24
 800c3c0:	601a      	str	r2, [r3, #0]
}
 800c3c2:	46c0      	nop			; (mov r8, r8)
 800c3c4:	46bd      	mov	sp, r7
 800c3c6:	b004      	add	sp, #16
 800c3c8:	bd80      	pop	{r7, pc}
 800c3ca:	46c0      	nop			; (mov r8, r8)
 800c3cc:	20001cc0 	.word	0x20001cc0
 800c3d0:	200028c0 	.word	0x200028c0
 800c3d4:	200028c8 	.word	0x200028c8
 800c3d8:	200028d0 	.word	0x200028d0
 800c3dc:	200028cc 	.word	0x200028cc
 800c3e0:	200028dc 	.word	0x200028dc

0800c3e4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c3e4:	b580      	push	{r7, lr}
 800c3e6:	b084      	sub	sp, #16
 800c3e8:	af00      	add	r7, sp, #0
 800c3ea:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c3ec:	4b27      	ldr	r3, [pc, #156]	; (800c48c <prvInsertBlockIntoFreeList+0xa8>)
 800c3ee:	60fb      	str	r3, [r7, #12]
 800c3f0:	e002      	b.n	800c3f8 <prvInsertBlockIntoFreeList+0x14>
 800c3f2:	68fb      	ldr	r3, [r7, #12]
 800c3f4:	681b      	ldr	r3, [r3, #0]
 800c3f6:	60fb      	str	r3, [r7, #12]
 800c3f8:	68fb      	ldr	r3, [r7, #12]
 800c3fa:	681b      	ldr	r3, [r3, #0]
 800c3fc:	687a      	ldr	r2, [r7, #4]
 800c3fe:	429a      	cmp	r2, r3
 800c400:	d8f7      	bhi.n	800c3f2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c402:	68fb      	ldr	r3, [r7, #12]
 800c404:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c406:	68fb      	ldr	r3, [r7, #12]
 800c408:	685b      	ldr	r3, [r3, #4]
 800c40a:	68ba      	ldr	r2, [r7, #8]
 800c40c:	18d3      	adds	r3, r2, r3
 800c40e:	687a      	ldr	r2, [r7, #4]
 800c410:	429a      	cmp	r2, r3
 800c412:	d108      	bne.n	800c426 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c414:	68fb      	ldr	r3, [r7, #12]
 800c416:	685a      	ldr	r2, [r3, #4]
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	685b      	ldr	r3, [r3, #4]
 800c41c:	18d2      	adds	r2, r2, r3
 800c41e:	68fb      	ldr	r3, [r7, #12]
 800c420:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c422:	68fb      	ldr	r3, [r7, #12]
 800c424:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	685b      	ldr	r3, [r3, #4]
 800c42e:	68ba      	ldr	r2, [r7, #8]
 800c430:	18d2      	adds	r2, r2, r3
 800c432:	68fb      	ldr	r3, [r7, #12]
 800c434:	681b      	ldr	r3, [r3, #0]
 800c436:	429a      	cmp	r2, r3
 800c438:	d118      	bne.n	800c46c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c43a:	68fb      	ldr	r3, [r7, #12]
 800c43c:	681a      	ldr	r2, [r3, #0]
 800c43e:	4b14      	ldr	r3, [pc, #80]	; (800c490 <prvInsertBlockIntoFreeList+0xac>)
 800c440:	681b      	ldr	r3, [r3, #0]
 800c442:	429a      	cmp	r2, r3
 800c444:	d00d      	beq.n	800c462 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	685a      	ldr	r2, [r3, #4]
 800c44a:	68fb      	ldr	r3, [r7, #12]
 800c44c:	681b      	ldr	r3, [r3, #0]
 800c44e:	685b      	ldr	r3, [r3, #4]
 800c450:	18d2      	adds	r2, r2, r3
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c456:	68fb      	ldr	r3, [r7, #12]
 800c458:	681b      	ldr	r3, [r3, #0]
 800c45a:	681a      	ldr	r2, [r3, #0]
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	601a      	str	r2, [r3, #0]
 800c460:	e008      	b.n	800c474 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c462:	4b0b      	ldr	r3, [pc, #44]	; (800c490 <prvInsertBlockIntoFreeList+0xac>)
 800c464:	681a      	ldr	r2, [r3, #0]
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	601a      	str	r2, [r3, #0]
 800c46a:	e003      	b.n	800c474 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c46c:	68fb      	ldr	r3, [r7, #12]
 800c46e:	681a      	ldr	r2, [r3, #0]
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c474:	68fa      	ldr	r2, [r7, #12]
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	429a      	cmp	r2, r3
 800c47a:	d002      	beq.n	800c482 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c47c:	68fb      	ldr	r3, [r7, #12]
 800c47e:	687a      	ldr	r2, [r7, #4]
 800c480:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c482:	46c0      	nop			; (mov r8, r8)
 800c484:	46bd      	mov	sp, r7
 800c486:	b004      	add	sp, #16
 800c488:	bd80      	pop	{r7, pc}
 800c48a:	46c0      	nop			; (mov r8, r8)
 800c48c:	200028c0 	.word	0x200028c0
 800c490:	200028c8 	.word	0x200028c8

0800c494 <atof>:
 800c494:	b510      	push	{r4, lr}
 800c496:	2100      	movs	r1, #0
 800c498:	f000 fe24 	bl	800d0e4 <strtod>
 800c49c:	bd10      	pop	{r4, pc}
	...

0800c4a0 <sulp>:
 800c4a0:	b570      	push	{r4, r5, r6, lr}
 800c4a2:	0016      	movs	r6, r2
 800c4a4:	000d      	movs	r5, r1
 800c4a6:	f002 f83d 	bl	800e524 <__ulp>
 800c4aa:	2e00      	cmp	r6, #0
 800c4ac:	d00d      	beq.n	800c4ca <sulp+0x2a>
 800c4ae:	236b      	movs	r3, #107	; 0x6b
 800c4b0:	006a      	lsls	r2, r5, #1
 800c4b2:	0d52      	lsrs	r2, r2, #21
 800c4b4:	1a9b      	subs	r3, r3, r2
 800c4b6:	2b00      	cmp	r3, #0
 800c4b8:	dd07      	ble.n	800c4ca <sulp+0x2a>
 800c4ba:	2400      	movs	r4, #0
 800c4bc:	4a03      	ldr	r2, [pc, #12]	; (800c4cc <sulp+0x2c>)
 800c4be:	051b      	lsls	r3, r3, #20
 800c4c0:	189d      	adds	r5, r3, r2
 800c4c2:	002b      	movs	r3, r5
 800c4c4:	0022      	movs	r2, r4
 800c4c6:	f7f5 fdf3 	bl	80020b0 <__aeabi_dmul>
 800c4ca:	bd70      	pop	{r4, r5, r6, pc}
 800c4cc:	3ff00000 	.word	0x3ff00000

0800c4d0 <_strtod_l>:
 800c4d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c4d2:	b0a1      	sub	sp, #132	; 0x84
 800c4d4:	9219      	str	r2, [sp, #100]	; 0x64
 800c4d6:	2200      	movs	r2, #0
 800c4d8:	2600      	movs	r6, #0
 800c4da:	2700      	movs	r7, #0
 800c4dc:	9004      	str	r0, [sp, #16]
 800c4de:	9107      	str	r1, [sp, #28]
 800c4e0:	921c      	str	r2, [sp, #112]	; 0x70
 800c4e2:	911b      	str	r1, [sp, #108]	; 0x6c
 800c4e4:	780a      	ldrb	r2, [r1, #0]
 800c4e6:	2a2b      	cmp	r2, #43	; 0x2b
 800c4e8:	d055      	beq.n	800c596 <_strtod_l+0xc6>
 800c4ea:	d841      	bhi.n	800c570 <_strtod_l+0xa0>
 800c4ec:	2a0d      	cmp	r2, #13
 800c4ee:	d83b      	bhi.n	800c568 <_strtod_l+0x98>
 800c4f0:	2a08      	cmp	r2, #8
 800c4f2:	d83b      	bhi.n	800c56c <_strtod_l+0x9c>
 800c4f4:	2a00      	cmp	r2, #0
 800c4f6:	d044      	beq.n	800c582 <_strtod_l+0xb2>
 800c4f8:	2200      	movs	r2, #0
 800c4fa:	920f      	str	r2, [sp, #60]	; 0x3c
 800c4fc:	2100      	movs	r1, #0
 800c4fe:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800c500:	9109      	str	r1, [sp, #36]	; 0x24
 800c502:	782a      	ldrb	r2, [r5, #0]
 800c504:	2a30      	cmp	r2, #48	; 0x30
 800c506:	d000      	beq.n	800c50a <_strtod_l+0x3a>
 800c508:	e085      	b.n	800c616 <_strtod_l+0x146>
 800c50a:	786a      	ldrb	r2, [r5, #1]
 800c50c:	3120      	adds	r1, #32
 800c50e:	438a      	bics	r2, r1
 800c510:	2a58      	cmp	r2, #88	; 0x58
 800c512:	d000      	beq.n	800c516 <_strtod_l+0x46>
 800c514:	e075      	b.n	800c602 <_strtod_l+0x132>
 800c516:	9302      	str	r3, [sp, #8]
 800c518:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c51a:	4a97      	ldr	r2, [pc, #604]	; (800c778 <_strtod_l+0x2a8>)
 800c51c:	9301      	str	r3, [sp, #4]
 800c51e:	ab1c      	add	r3, sp, #112	; 0x70
 800c520:	9300      	str	r3, [sp, #0]
 800c522:	9804      	ldr	r0, [sp, #16]
 800c524:	ab1d      	add	r3, sp, #116	; 0x74
 800c526:	a91b      	add	r1, sp, #108	; 0x6c
 800c528:	f001 f8be 	bl	800d6a8 <__gethex>
 800c52c:	230f      	movs	r3, #15
 800c52e:	0002      	movs	r2, r0
 800c530:	401a      	ands	r2, r3
 800c532:	0004      	movs	r4, r0
 800c534:	9205      	str	r2, [sp, #20]
 800c536:	4218      	tst	r0, r3
 800c538:	d005      	beq.n	800c546 <_strtod_l+0x76>
 800c53a:	2a06      	cmp	r2, #6
 800c53c:	d12d      	bne.n	800c59a <_strtod_l+0xca>
 800c53e:	1c6b      	adds	r3, r5, #1
 800c540:	931b      	str	r3, [sp, #108]	; 0x6c
 800c542:	2300      	movs	r3, #0
 800c544:	930f      	str	r3, [sp, #60]	; 0x3c
 800c546:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800c548:	2b00      	cmp	r3, #0
 800c54a:	d002      	beq.n	800c552 <_strtod_l+0x82>
 800c54c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c54e:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800c550:	6013      	str	r3, [r2, #0]
 800c552:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c554:	2b00      	cmp	r3, #0
 800c556:	d01b      	beq.n	800c590 <_strtod_l+0xc0>
 800c558:	2380      	movs	r3, #128	; 0x80
 800c55a:	0032      	movs	r2, r6
 800c55c:	061b      	lsls	r3, r3, #24
 800c55e:	18fb      	adds	r3, r7, r3
 800c560:	0010      	movs	r0, r2
 800c562:	0019      	movs	r1, r3
 800c564:	b021      	add	sp, #132	; 0x84
 800c566:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c568:	2a20      	cmp	r2, #32
 800c56a:	d1c5      	bne.n	800c4f8 <_strtod_l+0x28>
 800c56c:	3101      	adds	r1, #1
 800c56e:	e7b8      	b.n	800c4e2 <_strtod_l+0x12>
 800c570:	2a2d      	cmp	r2, #45	; 0x2d
 800c572:	d1c1      	bne.n	800c4f8 <_strtod_l+0x28>
 800c574:	3a2c      	subs	r2, #44	; 0x2c
 800c576:	920f      	str	r2, [sp, #60]	; 0x3c
 800c578:	1c4a      	adds	r2, r1, #1
 800c57a:	921b      	str	r2, [sp, #108]	; 0x6c
 800c57c:	784a      	ldrb	r2, [r1, #1]
 800c57e:	2a00      	cmp	r2, #0
 800c580:	d1bc      	bne.n	800c4fc <_strtod_l+0x2c>
 800c582:	9b07      	ldr	r3, [sp, #28]
 800c584:	931b      	str	r3, [sp, #108]	; 0x6c
 800c586:	2300      	movs	r3, #0
 800c588:	930f      	str	r3, [sp, #60]	; 0x3c
 800c58a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	d1dd      	bne.n	800c54c <_strtod_l+0x7c>
 800c590:	0032      	movs	r2, r6
 800c592:	003b      	movs	r3, r7
 800c594:	e7e4      	b.n	800c560 <_strtod_l+0x90>
 800c596:	2200      	movs	r2, #0
 800c598:	e7ed      	b.n	800c576 <_strtod_l+0xa6>
 800c59a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800c59c:	2a00      	cmp	r2, #0
 800c59e:	d007      	beq.n	800c5b0 <_strtod_l+0xe0>
 800c5a0:	2135      	movs	r1, #53	; 0x35
 800c5a2:	a81e      	add	r0, sp, #120	; 0x78
 800c5a4:	f002 f8af 	bl	800e706 <__copybits>
 800c5a8:	991c      	ldr	r1, [sp, #112]	; 0x70
 800c5aa:	9804      	ldr	r0, [sp, #16]
 800c5ac:	f001 fc78 	bl	800dea0 <_Bfree>
 800c5b0:	9805      	ldr	r0, [sp, #20]
 800c5b2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800c5b4:	3801      	subs	r0, #1
 800c5b6:	2804      	cmp	r0, #4
 800c5b8:	d806      	bhi.n	800c5c8 <_strtod_l+0xf8>
 800c5ba:	f7f3 fdb7 	bl	800012c <__gnu_thumb1_case_uqi>
 800c5be:	0312      	.short	0x0312
 800c5c0:	1e1c      	.short	0x1e1c
 800c5c2:	12          	.byte	0x12
 800c5c3:	00          	.byte	0x00
 800c5c4:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 800c5c6:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
 800c5c8:	05e4      	lsls	r4, r4, #23
 800c5ca:	d502      	bpl.n	800c5d2 <_strtod_l+0x102>
 800c5cc:	2380      	movs	r3, #128	; 0x80
 800c5ce:	061b      	lsls	r3, r3, #24
 800c5d0:	431f      	orrs	r7, r3
 800c5d2:	4b6a      	ldr	r3, [pc, #424]	; (800c77c <_strtod_l+0x2ac>)
 800c5d4:	423b      	tst	r3, r7
 800c5d6:	d1b6      	bne.n	800c546 <_strtod_l+0x76>
 800c5d8:	f000 ff76 	bl	800d4c8 <__errno>
 800c5dc:	2322      	movs	r3, #34	; 0x22
 800c5de:	6003      	str	r3, [r0, #0]
 800c5e0:	e7b1      	b.n	800c546 <_strtod_l+0x76>
 800c5e2:	4967      	ldr	r1, [pc, #412]	; (800c780 <_strtod_l+0x2b0>)
 800c5e4:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800c5e6:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 800c5e8:	400a      	ands	r2, r1
 800c5ea:	4966      	ldr	r1, [pc, #408]	; (800c784 <_strtod_l+0x2b4>)
 800c5ec:	185b      	adds	r3, r3, r1
 800c5ee:	051b      	lsls	r3, r3, #20
 800c5f0:	431a      	orrs	r2, r3
 800c5f2:	0017      	movs	r7, r2
 800c5f4:	e7e8      	b.n	800c5c8 <_strtod_l+0xf8>
 800c5f6:	4f61      	ldr	r7, [pc, #388]	; (800c77c <_strtod_l+0x2ac>)
 800c5f8:	e7e6      	b.n	800c5c8 <_strtod_l+0xf8>
 800c5fa:	2601      	movs	r6, #1
 800c5fc:	4f62      	ldr	r7, [pc, #392]	; (800c788 <_strtod_l+0x2b8>)
 800c5fe:	4276      	negs	r6, r6
 800c600:	e7e2      	b.n	800c5c8 <_strtod_l+0xf8>
 800c602:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c604:	1c5a      	adds	r2, r3, #1
 800c606:	921b      	str	r2, [sp, #108]	; 0x6c
 800c608:	785b      	ldrb	r3, [r3, #1]
 800c60a:	2b30      	cmp	r3, #48	; 0x30
 800c60c:	d0f9      	beq.n	800c602 <_strtod_l+0x132>
 800c60e:	2b00      	cmp	r3, #0
 800c610:	d099      	beq.n	800c546 <_strtod_l+0x76>
 800c612:	2301      	movs	r3, #1
 800c614:	9309      	str	r3, [sp, #36]	; 0x24
 800c616:	2500      	movs	r5, #0
 800c618:	220a      	movs	r2, #10
 800c61a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c61c:	950d      	str	r5, [sp, #52]	; 0x34
 800c61e:	9310      	str	r3, [sp, #64]	; 0x40
 800c620:	9508      	str	r5, [sp, #32]
 800c622:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800c624:	7804      	ldrb	r4, [r0, #0]
 800c626:	0023      	movs	r3, r4
 800c628:	3b30      	subs	r3, #48	; 0x30
 800c62a:	b2d9      	uxtb	r1, r3
 800c62c:	2909      	cmp	r1, #9
 800c62e:	d927      	bls.n	800c680 <_strtod_l+0x1b0>
 800c630:	2201      	movs	r2, #1
 800c632:	4956      	ldr	r1, [pc, #344]	; (800c78c <_strtod_l+0x2bc>)
 800c634:	f000 fe8a 	bl	800d34c <strncmp>
 800c638:	2800      	cmp	r0, #0
 800c63a:	d031      	beq.n	800c6a0 <_strtod_l+0x1d0>
 800c63c:	2000      	movs	r0, #0
 800c63e:	0023      	movs	r3, r4
 800c640:	4684      	mov	ip, r0
 800c642:	9a08      	ldr	r2, [sp, #32]
 800c644:	900c      	str	r0, [sp, #48]	; 0x30
 800c646:	9205      	str	r2, [sp, #20]
 800c648:	2220      	movs	r2, #32
 800c64a:	0019      	movs	r1, r3
 800c64c:	4391      	bics	r1, r2
 800c64e:	000a      	movs	r2, r1
 800c650:	2100      	movs	r1, #0
 800c652:	9106      	str	r1, [sp, #24]
 800c654:	2a45      	cmp	r2, #69	; 0x45
 800c656:	d000      	beq.n	800c65a <_strtod_l+0x18a>
 800c658:	e0c2      	b.n	800c7e0 <_strtod_l+0x310>
 800c65a:	9b05      	ldr	r3, [sp, #20]
 800c65c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c65e:	4303      	orrs	r3, r0
 800c660:	4313      	orrs	r3, r2
 800c662:	428b      	cmp	r3, r1
 800c664:	d08d      	beq.n	800c582 <_strtod_l+0xb2>
 800c666:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c668:	9307      	str	r3, [sp, #28]
 800c66a:	3301      	adds	r3, #1
 800c66c:	931b      	str	r3, [sp, #108]	; 0x6c
 800c66e:	9b07      	ldr	r3, [sp, #28]
 800c670:	785b      	ldrb	r3, [r3, #1]
 800c672:	2b2b      	cmp	r3, #43	; 0x2b
 800c674:	d071      	beq.n	800c75a <_strtod_l+0x28a>
 800c676:	000c      	movs	r4, r1
 800c678:	2b2d      	cmp	r3, #45	; 0x2d
 800c67a:	d174      	bne.n	800c766 <_strtod_l+0x296>
 800c67c:	2401      	movs	r4, #1
 800c67e:	e06d      	b.n	800c75c <_strtod_l+0x28c>
 800c680:	9908      	ldr	r1, [sp, #32]
 800c682:	2908      	cmp	r1, #8
 800c684:	dc09      	bgt.n	800c69a <_strtod_l+0x1ca>
 800c686:	990d      	ldr	r1, [sp, #52]	; 0x34
 800c688:	4351      	muls	r1, r2
 800c68a:	185b      	adds	r3, r3, r1
 800c68c:	930d      	str	r3, [sp, #52]	; 0x34
 800c68e:	9b08      	ldr	r3, [sp, #32]
 800c690:	3001      	adds	r0, #1
 800c692:	3301      	adds	r3, #1
 800c694:	9308      	str	r3, [sp, #32]
 800c696:	901b      	str	r0, [sp, #108]	; 0x6c
 800c698:	e7c3      	b.n	800c622 <_strtod_l+0x152>
 800c69a:	4355      	muls	r5, r2
 800c69c:	195d      	adds	r5, r3, r5
 800c69e:	e7f6      	b.n	800c68e <_strtod_l+0x1be>
 800c6a0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c6a2:	1c5a      	adds	r2, r3, #1
 800c6a4:	921b      	str	r2, [sp, #108]	; 0x6c
 800c6a6:	9a08      	ldr	r2, [sp, #32]
 800c6a8:	785b      	ldrb	r3, [r3, #1]
 800c6aa:	2a00      	cmp	r2, #0
 800c6ac:	d03a      	beq.n	800c724 <_strtod_l+0x254>
 800c6ae:	900c      	str	r0, [sp, #48]	; 0x30
 800c6b0:	9205      	str	r2, [sp, #20]
 800c6b2:	001a      	movs	r2, r3
 800c6b4:	3a30      	subs	r2, #48	; 0x30
 800c6b6:	2a09      	cmp	r2, #9
 800c6b8:	d912      	bls.n	800c6e0 <_strtod_l+0x210>
 800c6ba:	2201      	movs	r2, #1
 800c6bc:	4694      	mov	ip, r2
 800c6be:	e7c3      	b.n	800c648 <_strtod_l+0x178>
 800c6c0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c6c2:	3001      	adds	r0, #1
 800c6c4:	1c5a      	adds	r2, r3, #1
 800c6c6:	921b      	str	r2, [sp, #108]	; 0x6c
 800c6c8:	785b      	ldrb	r3, [r3, #1]
 800c6ca:	2b30      	cmp	r3, #48	; 0x30
 800c6cc:	d0f8      	beq.n	800c6c0 <_strtod_l+0x1f0>
 800c6ce:	001a      	movs	r2, r3
 800c6d0:	3a31      	subs	r2, #49	; 0x31
 800c6d2:	2a08      	cmp	r2, #8
 800c6d4:	d83c      	bhi.n	800c750 <_strtod_l+0x280>
 800c6d6:	900c      	str	r0, [sp, #48]	; 0x30
 800c6d8:	2000      	movs	r0, #0
 800c6da:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800c6dc:	9005      	str	r0, [sp, #20]
 800c6de:	9210      	str	r2, [sp, #64]	; 0x40
 800c6e0:	001a      	movs	r2, r3
 800c6e2:	1c41      	adds	r1, r0, #1
 800c6e4:	3a30      	subs	r2, #48	; 0x30
 800c6e6:	2b30      	cmp	r3, #48	; 0x30
 800c6e8:	d016      	beq.n	800c718 <_strtod_l+0x248>
 800c6ea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c6ec:	185b      	adds	r3, r3, r1
 800c6ee:	930c      	str	r3, [sp, #48]	; 0x30
 800c6f0:	9b05      	ldr	r3, [sp, #20]
 800c6f2:	210a      	movs	r1, #10
 800c6f4:	469c      	mov	ip, r3
 800c6f6:	4484      	add	ip, r0
 800c6f8:	4563      	cmp	r3, ip
 800c6fa:	d115      	bne.n	800c728 <_strtod_l+0x258>
 800c6fc:	9905      	ldr	r1, [sp, #20]
 800c6fe:	9b05      	ldr	r3, [sp, #20]
 800c700:	3101      	adds	r1, #1
 800c702:	1809      	adds	r1, r1, r0
 800c704:	181b      	adds	r3, r3, r0
 800c706:	9105      	str	r1, [sp, #20]
 800c708:	2b08      	cmp	r3, #8
 800c70a:	dc19      	bgt.n	800c740 <_strtod_l+0x270>
 800c70c:	230a      	movs	r3, #10
 800c70e:	990d      	ldr	r1, [sp, #52]	; 0x34
 800c710:	434b      	muls	r3, r1
 800c712:	2100      	movs	r1, #0
 800c714:	18d3      	adds	r3, r2, r3
 800c716:	930d      	str	r3, [sp, #52]	; 0x34
 800c718:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c71a:	0008      	movs	r0, r1
 800c71c:	1c5a      	adds	r2, r3, #1
 800c71e:	921b      	str	r2, [sp, #108]	; 0x6c
 800c720:	785b      	ldrb	r3, [r3, #1]
 800c722:	e7c6      	b.n	800c6b2 <_strtod_l+0x1e2>
 800c724:	9808      	ldr	r0, [sp, #32]
 800c726:	e7d0      	b.n	800c6ca <_strtod_l+0x1fa>
 800c728:	1c5c      	adds	r4, r3, #1
 800c72a:	2b08      	cmp	r3, #8
 800c72c:	dc04      	bgt.n	800c738 <_strtod_l+0x268>
 800c72e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c730:	434b      	muls	r3, r1
 800c732:	930d      	str	r3, [sp, #52]	; 0x34
 800c734:	0023      	movs	r3, r4
 800c736:	e7df      	b.n	800c6f8 <_strtod_l+0x228>
 800c738:	2c10      	cmp	r4, #16
 800c73a:	dcfb      	bgt.n	800c734 <_strtod_l+0x264>
 800c73c:	434d      	muls	r5, r1
 800c73e:	e7f9      	b.n	800c734 <_strtod_l+0x264>
 800c740:	9b05      	ldr	r3, [sp, #20]
 800c742:	2100      	movs	r1, #0
 800c744:	2b10      	cmp	r3, #16
 800c746:	dce7      	bgt.n	800c718 <_strtod_l+0x248>
 800c748:	230a      	movs	r3, #10
 800c74a:	435d      	muls	r5, r3
 800c74c:	1955      	adds	r5, r2, r5
 800c74e:	e7e3      	b.n	800c718 <_strtod_l+0x248>
 800c750:	2200      	movs	r2, #0
 800c752:	920c      	str	r2, [sp, #48]	; 0x30
 800c754:	9205      	str	r2, [sp, #20]
 800c756:	3201      	adds	r2, #1
 800c758:	e7b0      	b.n	800c6bc <_strtod_l+0x1ec>
 800c75a:	2400      	movs	r4, #0
 800c75c:	9b07      	ldr	r3, [sp, #28]
 800c75e:	3302      	adds	r3, #2
 800c760:	931b      	str	r3, [sp, #108]	; 0x6c
 800c762:	9b07      	ldr	r3, [sp, #28]
 800c764:	789b      	ldrb	r3, [r3, #2]
 800c766:	001a      	movs	r2, r3
 800c768:	3a30      	subs	r2, #48	; 0x30
 800c76a:	2a09      	cmp	r2, #9
 800c76c:	d914      	bls.n	800c798 <_strtod_l+0x2c8>
 800c76e:	9a07      	ldr	r2, [sp, #28]
 800c770:	921b      	str	r2, [sp, #108]	; 0x6c
 800c772:	2200      	movs	r2, #0
 800c774:	e033      	b.n	800c7de <_strtod_l+0x30e>
 800c776:	46c0      	nop			; (mov r8, r8)
 800c778:	0800f5ec 	.word	0x0800f5ec
 800c77c:	7ff00000 	.word	0x7ff00000
 800c780:	ffefffff 	.word	0xffefffff
 800c784:	00000433 	.word	0x00000433
 800c788:	7fffffff 	.word	0x7fffffff
 800c78c:	0800f5dc 	.word	0x0800f5dc
 800c790:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c792:	1c5a      	adds	r2, r3, #1
 800c794:	921b      	str	r2, [sp, #108]	; 0x6c
 800c796:	785b      	ldrb	r3, [r3, #1]
 800c798:	2b30      	cmp	r3, #48	; 0x30
 800c79a:	d0f9      	beq.n	800c790 <_strtod_l+0x2c0>
 800c79c:	2200      	movs	r2, #0
 800c79e:	9206      	str	r2, [sp, #24]
 800c7a0:	001a      	movs	r2, r3
 800c7a2:	3a31      	subs	r2, #49	; 0x31
 800c7a4:	2a08      	cmp	r2, #8
 800c7a6:	d81b      	bhi.n	800c7e0 <_strtod_l+0x310>
 800c7a8:	3b30      	subs	r3, #48	; 0x30
 800c7aa:	930e      	str	r3, [sp, #56]	; 0x38
 800c7ac:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c7ae:	9306      	str	r3, [sp, #24]
 800c7b0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c7b2:	1c59      	adds	r1, r3, #1
 800c7b4:	911b      	str	r1, [sp, #108]	; 0x6c
 800c7b6:	785b      	ldrb	r3, [r3, #1]
 800c7b8:	001a      	movs	r2, r3
 800c7ba:	3a30      	subs	r2, #48	; 0x30
 800c7bc:	2a09      	cmp	r2, #9
 800c7be:	d93a      	bls.n	800c836 <_strtod_l+0x366>
 800c7c0:	9a06      	ldr	r2, [sp, #24]
 800c7c2:	1a8a      	subs	r2, r1, r2
 800c7c4:	49b2      	ldr	r1, [pc, #712]	; (800ca90 <_strtod_l+0x5c0>)
 800c7c6:	9106      	str	r1, [sp, #24]
 800c7c8:	2a08      	cmp	r2, #8
 800c7ca:	dc04      	bgt.n	800c7d6 <_strtod_l+0x306>
 800c7cc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c7ce:	9206      	str	r2, [sp, #24]
 800c7d0:	428a      	cmp	r2, r1
 800c7d2:	dd00      	ble.n	800c7d6 <_strtod_l+0x306>
 800c7d4:	9106      	str	r1, [sp, #24]
 800c7d6:	2c00      	cmp	r4, #0
 800c7d8:	d002      	beq.n	800c7e0 <_strtod_l+0x310>
 800c7da:	9a06      	ldr	r2, [sp, #24]
 800c7dc:	4252      	negs	r2, r2
 800c7de:	9206      	str	r2, [sp, #24]
 800c7e0:	9a05      	ldr	r2, [sp, #20]
 800c7e2:	2a00      	cmp	r2, #0
 800c7e4:	d14d      	bne.n	800c882 <_strtod_l+0x3b2>
 800c7e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c7e8:	4310      	orrs	r0, r2
 800c7ea:	d000      	beq.n	800c7ee <_strtod_l+0x31e>
 800c7ec:	e6ab      	b.n	800c546 <_strtod_l+0x76>
 800c7ee:	4662      	mov	r2, ip
 800c7f0:	2a00      	cmp	r2, #0
 800c7f2:	d000      	beq.n	800c7f6 <_strtod_l+0x326>
 800c7f4:	e6c5      	b.n	800c582 <_strtod_l+0xb2>
 800c7f6:	2b69      	cmp	r3, #105	; 0x69
 800c7f8:	d027      	beq.n	800c84a <_strtod_l+0x37a>
 800c7fa:	dc23      	bgt.n	800c844 <_strtod_l+0x374>
 800c7fc:	2b49      	cmp	r3, #73	; 0x49
 800c7fe:	d024      	beq.n	800c84a <_strtod_l+0x37a>
 800c800:	2b4e      	cmp	r3, #78	; 0x4e
 800c802:	d000      	beq.n	800c806 <_strtod_l+0x336>
 800c804:	e6bd      	b.n	800c582 <_strtod_l+0xb2>
 800c806:	49a3      	ldr	r1, [pc, #652]	; (800ca94 <_strtod_l+0x5c4>)
 800c808:	a81b      	add	r0, sp, #108	; 0x6c
 800c80a:	f001 f983 	bl	800db14 <__match>
 800c80e:	2800      	cmp	r0, #0
 800c810:	d100      	bne.n	800c814 <_strtod_l+0x344>
 800c812:	e6b6      	b.n	800c582 <_strtod_l+0xb2>
 800c814:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c816:	781b      	ldrb	r3, [r3, #0]
 800c818:	2b28      	cmp	r3, #40	; 0x28
 800c81a:	d12c      	bne.n	800c876 <_strtod_l+0x3a6>
 800c81c:	499e      	ldr	r1, [pc, #632]	; (800ca98 <_strtod_l+0x5c8>)
 800c81e:	aa1e      	add	r2, sp, #120	; 0x78
 800c820:	a81b      	add	r0, sp, #108	; 0x6c
 800c822:	f001 f98b 	bl	800db3c <__hexnan>
 800c826:	2805      	cmp	r0, #5
 800c828:	d125      	bne.n	800c876 <_strtod_l+0x3a6>
 800c82a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800c82c:	4a9b      	ldr	r2, [pc, #620]	; (800ca9c <_strtod_l+0x5cc>)
 800c82e:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 800c830:	431a      	orrs	r2, r3
 800c832:	0017      	movs	r7, r2
 800c834:	e687      	b.n	800c546 <_strtod_l+0x76>
 800c836:	220a      	movs	r2, #10
 800c838:	990e      	ldr	r1, [sp, #56]	; 0x38
 800c83a:	434a      	muls	r2, r1
 800c83c:	18d2      	adds	r2, r2, r3
 800c83e:	3a30      	subs	r2, #48	; 0x30
 800c840:	920e      	str	r2, [sp, #56]	; 0x38
 800c842:	e7b5      	b.n	800c7b0 <_strtod_l+0x2e0>
 800c844:	2b6e      	cmp	r3, #110	; 0x6e
 800c846:	d0de      	beq.n	800c806 <_strtod_l+0x336>
 800c848:	e69b      	b.n	800c582 <_strtod_l+0xb2>
 800c84a:	4995      	ldr	r1, [pc, #596]	; (800caa0 <_strtod_l+0x5d0>)
 800c84c:	a81b      	add	r0, sp, #108	; 0x6c
 800c84e:	f001 f961 	bl	800db14 <__match>
 800c852:	2800      	cmp	r0, #0
 800c854:	d100      	bne.n	800c858 <_strtod_l+0x388>
 800c856:	e694      	b.n	800c582 <_strtod_l+0xb2>
 800c858:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c85a:	4992      	ldr	r1, [pc, #584]	; (800caa4 <_strtod_l+0x5d4>)
 800c85c:	3b01      	subs	r3, #1
 800c85e:	a81b      	add	r0, sp, #108	; 0x6c
 800c860:	931b      	str	r3, [sp, #108]	; 0x6c
 800c862:	f001 f957 	bl	800db14 <__match>
 800c866:	2800      	cmp	r0, #0
 800c868:	d102      	bne.n	800c870 <_strtod_l+0x3a0>
 800c86a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c86c:	3301      	adds	r3, #1
 800c86e:	931b      	str	r3, [sp, #108]	; 0x6c
 800c870:	2600      	movs	r6, #0
 800c872:	4f8a      	ldr	r7, [pc, #552]	; (800ca9c <_strtod_l+0x5cc>)
 800c874:	e667      	b.n	800c546 <_strtod_l+0x76>
 800c876:	488c      	ldr	r0, [pc, #560]	; (800caa8 <_strtod_l+0x5d8>)
 800c878:	f000 fe5c 	bl	800d534 <nan>
 800c87c:	0006      	movs	r6, r0
 800c87e:	000f      	movs	r7, r1
 800c880:	e661      	b.n	800c546 <_strtod_l+0x76>
 800c882:	9b06      	ldr	r3, [sp, #24]
 800c884:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c886:	1a9b      	subs	r3, r3, r2
 800c888:	9309      	str	r3, [sp, #36]	; 0x24
 800c88a:	9b08      	ldr	r3, [sp, #32]
 800c88c:	2b00      	cmp	r3, #0
 800c88e:	d101      	bne.n	800c894 <_strtod_l+0x3c4>
 800c890:	9b05      	ldr	r3, [sp, #20]
 800c892:	9308      	str	r3, [sp, #32]
 800c894:	9c05      	ldr	r4, [sp, #20]
 800c896:	2c10      	cmp	r4, #16
 800c898:	dd00      	ble.n	800c89c <_strtod_l+0x3cc>
 800c89a:	2410      	movs	r4, #16
 800c89c:	980d      	ldr	r0, [sp, #52]	; 0x34
 800c89e:	f7f6 fab1 	bl	8002e04 <__aeabi_ui2d>
 800c8a2:	9b05      	ldr	r3, [sp, #20]
 800c8a4:	0006      	movs	r6, r0
 800c8a6:	000f      	movs	r7, r1
 800c8a8:	2b09      	cmp	r3, #9
 800c8aa:	dd15      	ble.n	800c8d8 <_strtod_l+0x408>
 800c8ac:	0022      	movs	r2, r4
 800c8ae:	4b7f      	ldr	r3, [pc, #508]	; (800caac <_strtod_l+0x5dc>)
 800c8b0:	3a09      	subs	r2, #9
 800c8b2:	00d2      	lsls	r2, r2, #3
 800c8b4:	189b      	adds	r3, r3, r2
 800c8b6:	681a      	ldr	r2, [r3, #0]
 800c8b8:	685b      	ldr	r3, [r3, #4]
 800c8ba:	f7f5 fbf9 	bl	80020b0 <__aeabi_dmul>
 800c8be:	0006      	movs	r6, r0
 800c8c0:	0028      	movs	r0, r5
 800c8c2:	000f      	movs	r7, r1
 800c8c4:	f7f6 fa9e 	bl	8002e04 <__aeabi_ui2d>
 800c8c8:	0002      	movs	r2, r0
 800c8ca:	000b      	movs	r3, r1
 800c8cc:	0030      	movs	r0, r6
 800c8ce:	0039      	movs	r1, r7
 800c8d0:	f7f4 fc94 	bl	80011fc <__aeabi_dadd>
 800c8d4:	0006      	movs	r6, r0
 800c8d6:	000f      	movs	r7, r1
 800c8d8:	9b05      	ldr	r3, [sp, #20]
 800c8da:	2b0f      	cmp	r3, #15
 800c8dc:	dc39      	bgt.n	800c952 <_strtod_l+0x482>
 800c8de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c8e0:	2b00      	cmp	r3, #0
 800c8e2:	d100      	bne.n	800c8e6 <_strtod_l+0x416>
 800c8e4:	e62f      	b.n	800c546 <_strtod_l+0x76>
 800c8e6:	dd24      	ble.n	800c932 <_strtod_l+0x462>
 800c8e8:	2b16      	cmp	r3, #22
 800c8ea:	dc09      	bgt.n	800c900 <_strtod_l+0x430>
 800c8ec:	496f      	ldr	r1, [pc, #444]	; (800caac <_strtod_l+0x5dc>)
 800c8ee:	00db      	lsls	r3, r3, #3
 800c8f0:	18c9      	adds	r1, r1, r3
 800c8f2:	0032      	movs	r2, r6
 800c8f4:	6808      	ldr	r0, [r1, #0]
 800c8f6:	6849      	ldr	r1, [r1, #4]
 800c8f8:	003b      	movs	r3, r7
 800c8fa:	f7f5 fbd9 	bl	80020b0 <__aeabi_dmul>
 800c8fe:	e7bd      	b.n	800c87c <_strtod_l+0x3ac>
 800c900:	2325      	movs	r3, #37	; 0x25
 800c902:	9a05      	ldr	r2, [sp, #20]
 800c904:	1a9b      	subs	r3, r3, r2
 800c906:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c908:	4293      	cmp	r3, r2
 800c90a:	db22      	blt.n	800c952 <_strtod_l+0x482>
 800c90c:	240f      	movs	r4, #15
 800c90e:	9b05      	ldr	r3, [sp, #20]
 800c910:	4d66      	ldr	r5, [pc, #408]	; (800caac <_strtod_l+0x5dc>)
 800c912:	1ae4      	subs	r4, r4, r3
 800c914:	00e1      	lsls	r1, r4, #3
 800c916:	1869      	adds	r1, r5, r1
 800c918:	0032      	movs	r2, r6
 800c91a:	6808      	ldr	r0, [r1, #0]
 800c91c:	6849      	ldr	r1, [r1, #4]
 800c91e:	003b      	movs	r3, r7
 800c920:	f7f5 fbc6 	bl	80020b0 <__aeabi_dmul>
 800c924:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c926:	1b1c      	subs	r4, r3, r4
 800c928:	00e4      	lsls	r4, r4, #3
 800c92a:	192d      	adds	r5, r5, r4
 800c92c:	682a      	ldr	r2, [r5, #0]
 800c92e:	686b      	ldr	r3, [r5, #4]
 800c930:	e7e3      	b.n	800c8fa <_strtod_l+0x42a>
 800c932:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c934:	3316      	adds	r3, #22
 800c936:	db0c      	blt.n	800c952 <_strtod_l+0x482>
 800c938:	9906      	ldr	r1, [sp, #24]
 800c93a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c93c:	4b5b      	ldr	r3, [pc, #364]	; (800caac <_strtod_l+0x5dc>)
 800c93e:	1a52      	subs	r2, r2, r1
 800c940:	00d2      	lsls	r2, r2, #3
 800c942:	189b      	adds	r3, r3, r2
 800c944:	0030      	movs	r0, r6
 800c946:	681a      	ldr	r2, [r3, #0]
 800c948:	685b      	ldr	r3, [r3, #4]
 800c94a:	0039      	movs	r1, r7
 800c94c:	f7f4 ffb6 	bl	80018bc <__aeabi_ddiv>
 800c950:	e794      	b.n	800c87c <_strtod_l+0x3ac>
 800c952:	9b05      	ldr	r3, [sp, #20]
 800c954:	1b1c      	subs	r4, r3, r4
 800c956:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c958:	18e4      	adds	r4, r4, r3
 800c95a:	2c00      	cmp	r4, #0
 800c95c:	dd72      	ble.n	800ca44 <_strtod_l+0x574>
 800c95e:	220f      	movs	r2, #15
 800c960:	0023      	movs	r3, r4
 800c962:	4013      	ands	r3, r2
 800c964:	4214      	tst	r4, r2
 800c966:	d00a      	beq.n	800c97e <_strtod_l+0x4ae>
 800c968:	4950      	ldr	r1, [pc, #320]	; (800caac <_strtod_l+0x5dc>)
 800c96a:	00db      	lsls	r3, r3, #3
 800c96c:	18c9      	adds	r1, r1, r3
 800c96e:	0032      	movs	r2, r6
 800c970:	6808      	ldr	r0, [r1, #0]
 800c972:	6849      	ldr	r1, [r1, #4]
 800c974:	003b      	movs	r3, r7
 800c976:	f7f5 fb9b 	bl	80020b0 <__aeabi_dmul>
 800c97a:	0006      	movs	r6, r0
 800c97c:	000f      	movs	r7, r1
 800c97e:	230f      	movs	r3, #15
 800c980:	439c      	bics	r4, r3
 800c982:	d04a      	beq.n	800ca1a <_strtod_l+0x54a>
 800c984:	3326      	adds	r3, #38	; 0x26
 800c986:	33ff      	adds	r3, #255	; 0xff
 800c988:	429c      	cmp	r4, r3
 800c98a:	dd22      	ble.n	800c9d2 <_strtod_l+0x502>
 800c98c:	2300      	movs	r3, #0
 800c98e:	9305      	str	r3, [sp, #20]
 800c990:	9306      	str	r3, [sp, #24]
 800c992:	930d      	str	r3, [sp, #52]	; 0x34
 800c994:	9308      	str	r3, [sp, #32]
 800c996:	2322      	movs	r3, #34	; 0x22
 800c998:	2600      	movs	r6, #0
 800c99a:	9a04      	ldr	r2, [sp, #16]
 800c99c:	4f3f      	ldr	r7, [pc, #252]	; (800ca9c <_strtod_l+0x5cc>)
 800c99e:	6013      	str	r3, [r2, #0]
 800c9a0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c9a2:	42b3      	cmp	r3, r6
 800c9a4:	d100      	bne.n	800c9a8 <_strtod_l+0x4d8>
 800c9a6:	e5ce      	b.n	800c546 <_strtod_l+0x76>
 800c9a8:	991c      	ldr	r1, [sp, #112]	; 0x70
 800c9aa:	9804      	ldr	r0, [sp, #16]
 800c9ac:	f001 fa78 	bl	800dea0 <_Bfree>
 800c9b0:	9908      	ldr	r1, [sp, #32]
 800c9b2:	9804      	ldr	r0, [sp, #16]
 800c9b4:	f001 fa74 	bl	800dea0 <_Bfree>
 800c9b8:	9906      	ldr	r1, [sp, #24]
 800c9ba:	9804      	ldr	r0, [sp, #16]
 800c9bc:	f001 fa70 	bl	800dea0 <_Bfree>
 800c9c0:	990d      	ldr	r1, [sp, #52]	; 0x34
 800c9c2:	9804      	ldr	r0, [sp, #16]
 800c9c4:	f001 fa6c 	bl	800dea0 <_Bfree>
 800c9c8:	9905      	ldr	r1, [sp, #20]
 800c9ca:	9804      	ldr	r0, [sp, #16]
 800c9cc:	f001 fa68 	bl	800dea0 <_Bfree>
 800c9d0:	e5b9      	b.n	800c546 <_strtod_l+0x76>
 800c9d2:	2300      	movs	r3, #0
 800c9d4:	0030      	movs	r0, r6
 800c9d6:	0039      	movs	r1, r7
 800c9d8:	4d35      	ldr	r5, [pc, #212]	; (800cab0 <_strtod_l+0x5e0>)
 800c9da:	1124      	asrs	r4, r4, #4
 800c9dc:	9307      	str	r3, [sp, #28]
 800c9de:	2c01      	cmp	r4, #1
 800c9e0:	dc1e      	bgt.n	800ca20 <_strtod_l+0x550>
 800c9e2:	2b00      	cmp	r3, #0
 800c9e4:	d001      	beq.n	800c9ea <_strtod_l+0x51a>
 800c9e6:	0006      	movs	r6, r0
 800c9e8:	000f      	movs	r7, r1
 800c9ea:	4b32      	ldr	r3, [pc, #200]	; (800cab4 <_strtod_l+0x5e4>)
 800c9ec:	9a07      	ldr	r2, [sp, #28]
 800c9ee:	18ff      	adds	r7, r7, r3
 800c9f0:	4b2f      	ldr	r3, [pc, #188]	; (800cab0 <_strtod_l+0x5e0>)
 800c9f2:	00d2      	lsls	r2, r2, #3
 800c9f4:	189d      	adds	r5, r3, r2
 800c9f6:	6828      	ldr	r0, [r5, #0]
 800c9f8:	6869      	ldr	r1, [r5, #4]
 800c9fa:	0032      	movs	r2, r6
 800c9fc:	003b      	movs	r3, r7
 800c9fe:	f7f5 fb57 	bl	80020b0 <__aeabi_dmul>
 800ca02:	4b26      	ldr	r3, [pc, #152]	; (800ca9c <_strtod_l+0x5cc>)
 800ca04:	4a2c      	ldr	r2, [pc, #176]	; (800cab8 <_strtod_l+0x5e8>)
 800ca06:	0006      	movs	r6, r0
 800ca08:	400b      	ands	r3, r1
 800ca0a:	4293      	cmp	r3, r2
 800ca0c:	d8be      	bhi.n	800c98c <_strtod_l+0x4bc>
 800ca0e:	4a2b      	ldr	r2, [pc, #172]	; (800cabc <_strtod_l+0x5ec>)
 800ca10:	4293      	cmp	r3, r2
 800ca12:	d913      	bls.n	800ca3c <_strtod_l+0x56c>
 800ca14:	2601      	movs	r6, #1
 800ca16:	4f2a      	ldr	r7, [pc, #168]	; (800cac0 <_strtod_l+0x5f0>)
 800ca18:	4276      	negs	r6, r6
 800ca1a:	2300      	movs	r3, #0
 800ca1c:	9307      	str	r3, [sp, #28]
 800ca1e:	e088      	b.n	800cb32 <_strtod_l+0x662>
 800ca20:	2201      	movs	r2, #1
 800ca22:	4214      	tst	r4, r2
 800ca24:	d004      	beq.n	800ca30 <_strtod_l+0x560>
 800ca26:	682a      	ldr	r2, [r5, #0]
 800ca28:	686b      	ldr	r3, [r5, #4]
 800ca2a:	f7f5 fb41 	bl	80020b0 <__aeabi_dmul>
 800ca2e:	2301      	movs	r3, #1
 800ca30:	9a07      	ldr	r2, [sp, #28]
 800ca32:	1064      	asrs	r4, r4, #1
 800ca34:	3201      	adds	r2, #1
 800ca36:	9207      	str	r2, [sp, #28]
 800ca38:	3508      	adds	r5, #8
 800ca3a:	e7d0      	b.n	800c9de <_strtod_l+0x50e>
 800ca3c:	23d4      	movs	r3, #212	; 0xd4
 800ca3e:	049b      	lsls	r3, r3, #18
 800ca40:	18cf      	adds	r7, r1, r3
 800ca42:	e7ea      	b.n	800ca1a <_strtod_l+0x54a>
 800ca44:	2c00      	cmp	r4, #0
 800ca46:	d0e8      	beq.n	800ca1a <_strtod_l+0x54a>
 800ca48:	4264      	negs	r4, r4
 800ca4a:	230f      	movs	r3, #15
 800ca4c:	0022      	movs	r2, r4
 800ca4e:	401a      	ands	r2, r3
 800ca50:	421c      	tst	r4, r3
 800ca52:	d00a      	beq.n	800ca6a <_strtod_l+0x59a>
 800ca54:	4b15      	ldr	r3, [pc, #84]	; (800caac <_strtod_l+0x5dc>)
 800ca56:	00d2      	lsls	r2, r2, #3
 800ca58:	189b      	adds	r3, r3, r2
 800ca5a:	0030      	movs	r0, r6
 800ca5c:	681a      	ldr	r2, [r3, #0]
 800ca5e:	685b      	ldr	r3, [r3, #4]
 800ca60:	0039      	movs	r1, r7
 800ca62:	f7f4 ff2b 	bl	80018bc <__aeabi_ddiv>
 800ca66:	0006      	movs	r6, r0
 800ca68:	000f      	movs	r7, r1
 800ca6a:	1124      	asrs	r4, r4, #4
 800ca6c:	d0d5      	beq.n	800ca1a <_strtod_l+0x54a>
 800ca6e:	2c1f      	cmp	r4, #31
 800ca70:	dd28      	ble.n	800cac4 <_strtod_l+0x5f4>
 800ca72:	2300      	movs	r3, #0
 800ca74:	9305      	str	r3, [sp, #20]
 800ca76:	9306      	str	r3, [sp, #24]
 800ca78:	930d      	str	r3, [sp, #52]	; 0x34
 800ca7a:	9308      	str	r3, [sp, #32]
 800ca7c:	2322      	movs	r3, #34	; 0x22
 800ca7e:	9a04      	ldr	r2, [sp, #16]
 800ca80:	2600      	movs	r6, #0
 800ca82:	6013      	str	r3, [r2, #0]
 800ca84:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ca86:	2700      	movs	r7, #0
 800ca88:	2b00      	cmp	r3, #0
 800ca8a:	d18d      	bne.n	800c9a8 <_strtod_l+0x4d8>
 800ca8c:	e55b      	b.n	800c546 <_strtod_l+0x76>
 800ca8e:	46c0      	nop			; (mov r8, r8)
 800ca90:	00004e1f 	.word	0x00004e1f
 800ca94:	0800f5e7 	.word	0x0800f5e7
 800ca98:	0800f600 	.word	0x0800f600
 800ca9c:	7ff00000 	.word	0x7ff00000
 800caa0:	0800f5de 	.word	0x0800f5de
 800caa4:	0800f5e1 	.word	0x0800f5e1
 800caa8:	0800f968 	.word	0x0800f968
 800caac:	0800f758 	.word	0x0800f758
 800cab0:	0800f730 	.word	0x0800f730
 800cab4:	fcb00000 	.word	0xfcb00000
 800cab8:	7ca00000 	.word	0x7ca00000
 800cabc:	7c900000 	.word	0x7c900000
 800cac0:	7fefffff 	.word	0x7fefffff
 800cac4:	2310      	movs	r3, #16
 800cac6:	0022      	movs	r2, r4
 800cac8:	401a      	ands	r2, r3
 800caca:	9207      	str	r2, [sp, #28]
 800cacc:	421c      	tst	r4, r3
 800cace:	d001      	beq.n	800cad4 <_strtod_l+0x604>
 800cad0:	335a      	adds	r3, #90	; 0x5a
 800cad2:	9307      	str	r3, [sp, #28]
 800cad4:	0030      	movs	r0, r6
 800cad6:	0039      	movs	r1, r7
 800cad8:	2300      	movs	r3, #0
 800cada:	4dc4      	ldr	r5, [pc, #784]	; (800cdec <_strtod_l+0x91c>)
 800cadc:	2201      	movs	r2, #1
 800cade:	4214      	tst	r4, r2
 800cae0:	d004      	beq.n	800caec <_strtod_l+0x61c>
 800cae2:	682a      	ldr	r2, [r5, #0]
 800cae4:	686b      	ldr	r3, [r5, #4]
 800cae6:	f7f5 fae3 	bl	80020b0 <__aeabi_dmul>
 800caea:	2301      	movs	r3, #1
 800caec:	1064      	asrs	r4, r4, #1
 800caee:	3508      	adds	r5, #8
 800caf0:	2c00      	cmp	r4, #0
 800caf2:	d1f3      	bne.n	800cadc <_strtod_l+0x60c>
 800caf4:	2b00      	cmp	r3, #0
 800caf6:	d001      	beq.n	800cafc <_strtod_l+0x62c>
 800caf8:	0006      	movs	r6, r0
 800cafa:	000f      	movs	r7, r1
 800cafc:	9b07      	ldr	r3, [sp, #28]
 800cafe:	2b00      	cmp	r3, #0
 800cb00:	d00f      	beq.n	800cb22 <_strtod_l+0x652>
 800cb02:	236b      	movs	r3, #107	; 0x6b
 800cb04:	007a      	lsls	r2, r7, #1
 800cb06:	0d52      	lsrs	r2, r2, #21
 800cb08:	0039      	movs	r1, r7
 800cb0a:	1a9b      	subs	r3, r3, r2
 800cb0c:	2b00      	cmp	r3, #0
 800cb0e:	dd08      	ble.n	800cb22 <_strtod_l+0x652>
 800cb10:	2b1f      	cmp	r3, #31
 800cb12:	dc00      	bgt.n	800cb16 <_strtod_l+0x646>
 800cb14:	e121      	b.n	800cd5a <_strtod_l+0x88a>
 800cb16:	2600      	movs	r6, #0
 800cb18:	2b34      	cmp	r3, #52	; 0x34
 800cb1a:	dc00      	bgt.n	800cb1e <_strtod_l+0x64e>
 800cb1c:	e116      	b.n	800cd4c <_strtod_l+0x87c>
 800cb1e:	27dc      	movs	r7, #220	; 0xdc
 800cb20:	04bf      	lsls	r7, r7, #18
 800cb22:	2200      	movs	r2, #0
 800cb24:	2300      	movs	r3, #0
 800cb26:	0030      	movs	r0, r6
 800cb28:	0039      	movs	r1, r7
 800cb2a:	f7f3 fc99 	bl	8000460 <__aeabi_dcmpeq>
 800cb2e:	2800      	cmp	r0, #0
 800cb30:	d19f      	bne.n	800ca72 <_strtod_l+0x5a2>
 800cb32:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cb34:	9a08      	ldr	r2, [sp, #32]
 800cb36:	9300      	str	r3, [sp, #0]
 800cb38:	9910      	ldr	r1, [sp, #64]	; 0x40
 800cb3a:	9b05      	ldr	r3, [sp, #20]
 800cb3c:	9804      	ldr	r0, [sp, #16]
 800cb3e:	f001 fa17 	bl	800df70 <__s2b>
 800cb42:	900d      	str	r0, [sp, #52]	; 0x34
 800cb44:	2800      	cmp	r0, #0
 800cb46:	d100      	bne.n	800cb4a <_strtod_l+0x67a>
 800cb48:	e720      	b.n	800c98c <_strtod_l+0x4bc>
 800cb4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cb4c:	9906      	ldr	r1, [sp, #24]
 800cb4e:	17da      	asrs	r2, r3, #31
 800cb50:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cb52:	1a5b      	subs	r3, r3, r1
 800cb54:	401a      	ands	r2, r3
 800cb56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cb58:	9215      	str	r2, [sp, #84]	; 0x54
 800cb5a:	43db      	mvns	r3, r3
 800cb5c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cb5e:	17db      	asrs	r3, r3, #31
 800cb60:	401a      	ands	r2, r3
 800cb62:	2300      	movs	r3, #0
 800cb64:	9218      	str	r2, [sp, #96]	; 0x60
 800cb66:	9305      	str	r3, [sp, #20]
 800cb68:	9306      	str	r3, [sp, #24]
 800cb6a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cb6c:	9804      	ldr	r0, [sp, #16]
 800cb6e:	6859      	ldr	r1, [r3, #4]
 800cb70:	f001 f952 	bl	800de18 <_Balloc>
 800cb74:	9008      	str	r0, [sp, #32]
 800cb76:	2800      	cmp	r0, #0
 800cb78:	d100      	bne.n	800cb7c <_strtod_l+0x6ac>
 800cb7a:	e70c      	b.n	800c996 <_strtod_l+0x4c6>
 800cb7c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cb7e:	300c      	adds	r0, #12
 800cb80:	0019      	movs	r1, r3
 800cb82:	691a      	ldr	r2, [r3, #16]
 800cb84:	310c      	adds	r1, #12
 800cb86:	3202      	adds	r2, #2
 800cb88:	0092      	lsls	r2, r2, #2
 800cb8a:	f000 fcca 	bl	800d522 <memcpy>
 800cb8e:	ab1e      	add	r3, sp, #120	; 0x78
 800cb90:	9301      	str	r3, [sp, #4]
 800cb92:	ab1d      	add	r3, sp, #116	; 0x74
 800cb94:	9300      	str	r3, [sp, #0]
 800cb96:	0032      	movs	r2, r6
 800cb98:	003b      	movs	r3, r7
 800cb9a:	9804      	ldr	r0, [sp, #16]
 800cb9c:	9610      	str	r6, [sp, #64]	; 0x40
 800cb9e:	9711      	str	r7, [sp, #68]	; 0x44
 800cba0:	f001 fd28 	bl	800e5f4 <__d2b>
 800cba4:	901c      	str	r0, [sp, #112]	; 0x70
 800cba6:	2800      	cmp	r0, #0
 800cba8:	d100      	bne.n	800cbac <_strtod_l+0x6dc>
 800cbaa:	e6f4      	b.n	800c996 <_strtod_l+0x4c6>
 800cbac:	2101      	movs	r1, #1
 800cbae:	9804      	ldr	r0, [sp, #16]
 800cbb0:	f001 fa72 	bl	800e098 <__i2b>
 800cbb4:	9006      	str	r0, [sp, #24]
 800cbb6:	2800      	cmp	r0, #0
 800cbb8:	d100      	bne.n	800cbbc <_strtod_l+0x6ec>
 800cbba:	e6ec      	b.n	800c996 <_strtod_l+0x4c6>
 800cbbc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800cbbe:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800cbc0:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800cbc2:	1ad4      	subs	r4, r2, r3
 800cbc4:	2b00      	cmp	r3, #0
 800cbc6:	db01      	blt.n	800cbcc <_strtod_l+0x6fc>
 800cbc8:	9c18      	ldr	r4, [sp, #96]	; 0x60
 800cbca:	195d      	adds	r5, r3, r5
 800cbcc:	9907      	ldr	r1, [sp, #28]
 800cbce:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800cbd0:	1a5b      	subs	r3, r3, r1
 800cbd2:	2136      	movs	r1, #54	; 0x36
 800cbd4:	189b      	adds	r3, r3, r2
 800cbd6:	1a8a      	subs	r2, r1, r2
 800cbd8:	4985      	ldr	r1, [pc, #532]	; (800cdf0 <_strtod_l+0x920>)
 800cbda:	2001      	movs	r0, #1
 800cbdc:	468c      	mov	ip, r1
 800cbde:	2100      	movs	r1, #0
 800cbe0:	3b01      	subs	r3, #1
 800cbe2:	9114      	str	r1, [sp, #80]	; 0x50
 800cbe4:	9012      	str	r0, [sp, #72]	; 0x48
 800cbe6:	4563      	cmp	r3, ip
 800cbe8:	da07      	bge.n	800cbfa <_strtod_l+0x72a>
 800cbea:	4661      	mov	r1, ip
 800cbec:	1ac9      	subs	r1, r1, r3
 800cbee:	1a52      	subs	r2, r2, r1
 800cbf0:	291f      	cmp	r1, #31
 800cbf2:	dd00      	ble.n	800cbf6 <_strtod_l+0x726>
 800cbf4:	e0b6      	b.n	800cd64 <_strtod_l+0x894>
 800cbf6:	4088      	lsls	r0, r1
 800cbf8:	9012      	str	r0, [sp, #72]	; 0x48
 800cbfa:	18ab      	adds	r3, r5, r2
 800cbfc:	930c      	str	r3, [sp, #48]	; 0x30
 800cbfe:	18a4      	adds	r4, r4, r2
 800cc00:	9b07      	ldr	r3, [sp, #28]
 800cc02:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800cc04:	191c      	adds	r4, r3, r4
 800cc06:	002b      	movs	r3, r5
 800cc08:	4295      	cmp	r5, r2
 800cc0a:	dd00      	ble.n	800cc0e <_strtod_l+0x73e>
 800cc0c:	0013      	movs	r3, r2
 800cc0e:	42a3      	cmp	r3, r4
 800cc10:	dd00      	ble.n	800cc14 <_strtod_l+0x744>
 800cc12:	0023      	movs	r3, r4
 800cc14:	2b00      	cmp	r3, #0
 800cc16:	dd04      	ble.n	800cc22 <_strtod_l+0x752>
 800cc18:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800cc1a:	1ae4      	subs	r4, r4, r3
 800cc1c:	1ad2      	subs	r2, r2, r3
 800cc1e:	920c      	str	r2, [sp, #48]	; 0x30
 800cc20:	1aed      	subs	r5, r5, r3
 800cc22:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cc24:	2b00      	cmp	r3, #0
 800cc26:	dd17      	ble.n	800cc58 <_strtod_l+0x788>
 800cc28:	001a      	movs	r2, r3
 800cc2a:	9906      	ldr	r1, [sp, #24]
 800cc2c:	9804      	ldr	r0, [sp, #16]
 800cc2e:	f001 fafb 	bl	800e228 <__pow5mult>
 800cc32:	9006      	str	r0, [sp, #24]
 800cc34:	2800      	cmp	r0, #0
 800cc36:	d100      	bne.n	800cc3a <_strtod_l+0x76a>
 800cc38:	e6ad      	b.n	800c996 <_strtod_l+0x4c6>
 800cc3a:	0001      	movs	r1, r0
 800cc3c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800cc3e:	9804      	ldr	r0, [sp, #16]
 800cc40:	f001 fa42 	bl	800e0c8 <__multiply>
 800cc44:	900e      	str	r0, [sp, #56]	; 0x38
 800cc46:	2800      	cmp	r0, #0
 800cc48:	d100      	bne.n	800cc4c <_strtod_l+0x77c>
 800cc4a:	e6a4      	b.n	800c996 <_strtod_l+0x4c6>
 800cc4c:	991c      	ldr	r1, [sp, #112]	; 0x70
 800cc4e:	9804      	ldr	r0, [sp, #16]
 800cc50:	f001 f926 	bl	800dea0 <_Bfree>
 800cc54:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cc56:	931c      	str	r3, [sp, #112]	; 0x70
 800cc58:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cc5a:	2b00      	cmp	r3, #0
 800cc5c:	dd00      	ble.n	800cc60 <_strtod_l+0x790>
 800cc5e:	e087      	b.n	800cd70 <_strtod_l+0x8a0>
 800cc60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cc62:	2b00      	cmp	r3, #0
 800cc64:	dd08      	ble.n	800cc78 <_strtod_l+0x7a8>
 800cc66:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800cc68:	9908      	ldr	r1, [sp, #32]
 800cc6a:	9804      	ldr	r0, [sp, #16]
 800cc6c:	f001 fadc 	bl	800e228 <__pow5mult>
 800cc70:	9008      	str	r0, [sp, #32]
 800cc72:	2800      	cmp	r0, #0
 800cc74:	d100      	bne.n	800cc78 <_strtod_l+0x7a8>
 800cc76:	e68e      	b.n	800c996 <_strtod_l+0x4c6>
 800cc78:	2c00      	cmp	r4, #0
 800cc7a:	dd08      	ble.n	800cc8e <_strtod_l+0x7be>
 800cc7c:	0022      	movs	r2, r4
 800cc7e:	9908      	ldr	r1, [sp, #32]
 800cc80:	9804      	ldr	r0, [sp, #16]
 800cc82:	f001 fb2d 	bl	800e2e0 <__lshift>
 800cc86:	9008      	str	r0, [sp, #32]
 800cc88:	2800      	cmp	r0, #0
 800cc8a:	d100      	bne.n	800cc8e <_strtod_l+0x7be>
 800cc8c:	e683      	b.n	800c996 <_strtod_l+0x4c6>
 800cc8e:	2d00      	cmp	r5, #0
 800cc90:	dd08      	ble.n	800cca4 <_strtod_l+0x7d4>
 800cc92:	002a      	movs	r2, r5
 800cc94:	9906      	ldr	r1, [sp, #24]
 800cc96:	9804      	ldr	r0, [sp, #16]
 800cc98:	f001 fb22 	bl	800e2e0 <__lshift>
 800cc9c:	9006      	str	r0, [sp, #24]
 800cc9e:	2800      	cmp	r0, #0
 800cca0:	d100      	bne.n	800cca4 <_strtod_l+0x7d4>
 800cca2:	e678      	b.n	800c996 <_strtod_l+0x4c6>
 800cca4:	9a08      	ldr	r2, [sp, #32]
 800cca6:	991c      	ldr	r1, [sp, #112]	; 0x70
 800cca8:	9804      	ldr	r0, [sp, #16]
 800ccaa:	f001 fba3 	bl	800e3f4 <__mdiff>
 800ccae:	9005      	str	r0, [sp, #20]
 800ccb0:	2800      	cmp	r0, #0
 800ccb2:	d100      	bne.n	800ccb6 <_strtod_l+0x7e6>
 800ccb4:	e66f      	b.n	800c996 <_strtod_l+0x4c6>
 800ccb6:	2200      	movs	r2, #0
 800ccb8:	68c3      	ldr	r3, [r0, #12]
 800ccba:	9906      	ldr	r1, [sp, #24]
 800ccbc:	60c2      	str	r2, [r0, #12]
 800ccbe:	930c      	str	r3, [sp, #48]	; 0x30
 800ccc0:	f001 fb7c 	bl	800e3bc <__mcmp>
 800ccc4:	2800      	cmp	r0, #0
 800ccc6:	da5d      	bge.n	800cd84 <_strtod_l+0x8b4>
 800ccc8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ccca:	4333      	orrs	r3, r6
 800cccc:	d000      	beq.n	800ccd0 <_strtod_l+0x800>
 800ccce:	e088      	b.n	800cde2 <_strtod_l+0x912>
 800ccd0:	033b      	lsls	r3, r7, #12
 800ccd2:	d000      	beq.n	800ccd6 <_strtod_l+0x806>
 800ccd4:	e085      	b.n	800cde2 <_strtod_l+0x912>
 800ccd6:	22d6      	movs	r2, #214	; 0xd6
 800ccd8:	4b46      	ldr	r3, [pc, #280]	; (800cdf4 <_strtod_l+0x924>)
 800ccda:	04d2      	lsls	r2, r2, #19
 800ccdc:	403b      	ands	r3, r7
 800ccde:	4293      	cmp	r3, r2
 800cce0:	d97f      	bls.n	800cde2 <_strtod_l+0x912>
 800cce2:	9b05      	ldr	r3, [sp, #20]
 800cce4:	695b      	ldr	r3, [r3, #20]
 800cce6:	2b00      	cmp	r3, #0
 800cce8:	d103      	bne.n	800ccf2 <_strtod_l+0x822>
 800ccea:	9b05      	ldr	r3, [sp, #20]
 800ccec:	691b      	ldr	r3, [r3, #16]
 800ccee:	2b01      	cmp	r3, #1
 800ccf0:	dd77      	ble.n	800cde2 <_strtod_l+0x912>
 800ccf2:	9905      	ldr	r1, [sp, #20]
 800ccf4:	2201      	movs	r2, #1
 800ccf6:	9804      	ldr	r0, [sp, #16]
 800ccf8:	f001 faf2 	bl	800e2e0 <__lshift>
 800ccfc:	9906      	ldr	r1, [sp, #24]
 800ccfe:	9005      	str	r0, [sp, #20]
 800cd00:	f001 fb5c 	bl	800e3bc <__mcmp>
 800cd04:	2800      	cmp	r0, #0
 800cd06:	dd6c      	ble.n	800cde2 <_strtod_l+0x912>
 800cd08:	9907      	ldr	r1, [sp, #28]
 800cd0a:	003b      	movs	r3, r7
 800cd0c:	4a39      	ldr	r2, [pc, #228]	; (800cdf4 <_strtod_l+0x924>)
 800cd0e:	2900      	cmp	r1, #0
 800cd10:	d100      	bne.n	800cd14 <_strtod_l+0x844>
 800cd12:	e094      	b.n	800ce3e <_strtod_l+0x96e>
 800cd14:	0011      	movs	r1, r2
 800cd16:	20d6      	movs	r0, #214	; 0xd6
 800cd18:	4039      	ands	r1, r7
 800cd1a:	04c0      	lsls	r0, r0, #19
 800cd1c:	4281      	cmp	r1, r0
 800cd1e:	dd00      	ble.n	800cd22 <_strtod_l+0x852>
 800cd20:	e08d      	b.n	800ce3e <_strtod_l+0x96e>
 800cd22:	23dc      	movs	r3, #220	; 0xdc
 800cd24:	049b      	lsls	r3, r3, #18
 800cd26:	4299      	cmp	r1, r3
 800cd28:	dc00      	bgt.n	800cd2c <_strtod_l+0x85c>
 800cd2a:	e6a7      	b.n	800ca7c <_strtod_l+0x5ac>
 800cd2c:	0030      	movs	r0, r6
 800cd2e:	0039      	movs	r1, r7
 800cd30:	4b31      	ldr	r3, [pc, #196]	; (800cdf8 <_strtod_l+0x928>)
 800cd32:	2200      	movs	r2, #0
 800cd34:	f7f5 f9bc 	bl	80020b0 <__aeabi_dmul>
 800cd38:	4b2e      	ldr	r3, [pc, #184]	; (800cdf4 <_strtod_l+0x924>)
 800cd3a:	0006      	movs	r6, r0
 800cd3c:	000f      	movs	r7, r1
 800cd3e:	420b      	tst	r3, r1
 800cd40:	d000      	beq.n	800cd44 <_strtod_l+0x874>
 800cd42:	e631      	b.n	800c9a8 <_strtod_l+0x4d8>
 800cd44:	2322      	movs	r3, #34	; 0x22
 800cd46:	9a04      	ldr	r2, [sp, #16]
 800cd48:	6013      	str	r3, [r2, #0]
 800cd4a:	e62d      	b.n	800c9a8 <_strtod_l+0x4d8>
 800cd4c:	234b      	movs	r3, #75	; 0x4b
 800cd4e:	1a9a      	subs	r2, r3, r2
 800cd50:	3b4c      	subs	r3, #76	; 0x4c
 800cd52:	4093      	lsls	r3, r2
 800cd54:	4019      	ands	r1, r3
 800cd56:	000f      	movs	r7, r1
 800cd58:	e6e3      	b.n	800cb22 <_strtod_l+0x652>
 800cd5a:	2201      	movs	r2, #1
 800cd5c:	4252      	negs	r2, r2
 800cd5e:	409a      	lsls	r2, r3
 800cd60:	4016      	ands	r6, r2
 800cd62:	e6de      	b.n	800cb22 <_strtod_l+0x652>
 800cd64:	4925      	ldr	r1, [pc, #148]	; (800cdfc <_strtod_l+0x92c>)
 800cd66:	1acb      	subs	r3, r1, r3
 800cd68:	0001      	movs	r1, r0
 800cd6a:	4099      	lsls	r1, r3
 800cd6c:	9114      	str	r1, [sp, #80]	; 0x50
 800cd6e:	e743      	b.n	800cbf8 <_strtod_l+0x728>
 800cd70:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800cd72:	991c      	ldr	r1, [sp, #112]	; 0x70
 800cd74:	9804      	ldr	r0, [sp, #16]
 800cd76:	f001 fab3 	bl	800e2e0 <__lshift>
 800cd7a:	901c      	str	r0, [sp, #112]	; 0x70
 800cd7c:	2800      	cmp	r0, #0
 800cd7e:	d000      	beq.n	800cd82 <_strtod_l+0x8b2>
 800cd80:	e76e      	b.n	800cc60 <_strtod_l+0x790>
 800cd82:	e608      	b.n	800c996 <_strtod_l+0x4c6>
 800cd84:	970e      	str	r7, [sp, #56]	; 0x38
 800cd86:	2800      	cmp	r0, #0
 800cd88:	d177      	bne.n	800ce7a <_strtod_l+0x9aa>
 800cd8a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800cd8c:	033b      	lsls	r3, r7, #12
 800cd8e:	0b1b      	lsrs	r3, r3, #12
 800cd90:	2a00      	cmp	r2, #0
 800cd92:	d039      	beq.n	800ce08 <_strtod_l+0x938>
 800cd94:	4a1a      	ldr	r2, [pc, #104]	; (800ce00 <_strtod_l+0x930>)
 800cd96:	4293      	cmp	r3, r2
 800cd98:	d139      	bne.n	800ce0e <_strtod_l+0x93e>
 800cd9a:	2101      	movs	r1, #1
 800cd9c:	9b07      	ldr	r3, [sp, #28]
 800cd9e:	4249      	negs	r1, r1
 800cda0:	0032      	movs	r2, r6
 800cda2:	0008      	movs	r0, r1
 800cda4:	2b00      	cmp	r3, #0
 800cda6:	d00b      	beq.n	800cdc0 <_strtod_l+0x8f0>
 800cda8:	24d4      	movs	r4, #212	; 0xd4
 800cdaa:	4b12      	ldr	r3, [pc, #72]	; (800cdf4 <_strtod_l+0x924>)
 800cdac:	0008      	movs	r0, r1
 800cdae:	403b      	ands	r3, r7
 800cdb0:	04e4      	lsls	r4, r4, #19
 800cdb2:	42a3      	cmp	r3, r4
 800cdb4:	d804      	bhi.n	800cdc0 <_strtod_l+0x8f0>
 800cdb6:	306c      	adds	r0, #108	; 0x6c
 800cdb8:	0d1b      	lsrs	r3, r3, #20
 800cdba:	1ac3      	subs	r3, r0, r3
 800cdbc:	4099      	lsls	r1, r3
 800cdbe:	0008      	movs	r0, r1
 800cdc0:	4282      	cmp	r2, r0
 800cdc2:	d124      	bne.n	800ce0e <_strtod_l+0x93e>
 800cdc4:	4b0f      	ldr	r3, [pc, #60]	; (800ce04 <_strtod_l+0x934>)
 800cdc6:	990e      	ldr	r1, [sp, #56]	; 0x38
 800cdc8:	4299      	cmp	r1, r3
 800cdca:	d102      	bne.n	800cdd2 <_strtod_l+0x902>
 800cdcc:	3201      	adds	r2, #1
 800cdce:	d100      	bne.n	800cdd2 <_strtod_l+0x902>
 800cdd0:	e5e1      	b.n	800c996 <_strtod_l+0x4c6>
 800cdd2:	4b08      	ldr	r3, [pc, #32]	; (800cdf4 <_strtod_l+0x924>)
 800cdd4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800cdd6:	2600      	movs	r6, #0
 800cdd8:	401a      	ands	r2, r3
 800cdda:	0013      	movs	r3, r2
 800cddc:	2280      	movs	r2, #128	; 0x80
 800cdde:	0352      	lsls	r2, r2, #13
 800cde0:	189f      	adds	r7, r3, r2
 800cde2:	9b07      	ldr	r3, [sp, #28]
 800cde4:	2b00      	cmp	r3, #0
 800cde6:	d1a1      	bne.n	800cd2c <_strtod_l+0x85c>
 800cde8:	e5de      	b.n	800c9a8 <_strtod_l+0x4d8>
 800cdea:	46c0      	nop			; (mov r8, r8)
 800cdec:	0800f618 	.word	0x0800f618
 800cdf0:	fffffc02 	.word	0xfffffc02
 800cdf4:	7ff00000 	.word	0x7ff00000
 800cdf8:	39500000 	.word	0x39500000
 800cdfc:	fffffbe2 	.word	0xfffffbe2
 800ce00:	000fffff 	.word	0x000fffff
 800ce04:	7fefffff 	.word	0x7fefffff
 800ce08:	4333      	orrs	r3, r6
 800ce0a:	d100      	bne.n	800ce0e <_strtod_l+0x93e>
 800ce0c:	e77c      	b.n	800cd08 <_strtod_l+0x838>
 800ce0e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ce10:	2b00      	cmp	r3, #0
 800ce12:	d01d      	beq.n	800ce50 <_strtod_l+0x980>
 800ce14:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ce16:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800ce18:	4213      	tst	r3, r2
 800ce1a:	d0e2      	beq.n	800cde2 <_strtod_l+0x912>
 800ce1c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ce1e:	0030      	movs	r0, r6
 800ce20:	0039      	movs	r1, r7
 800ce22:	9a07      	ldr	r2, [sp, #28]
 800ce24:	2b00      	cmp	r3, #0
 800ce26:	d017      	beq.n	800ce58 <_strtod_l+0x988>
 800ce28:	f7ff fb3a 	bl	800c4a0 <sulp>
 800ce2c:	0002      	movs	r2, r0
 800ce2e:	000b      	movs	r3, r1
 800ce30:	9810      	ldr	r0, [sp, #64]	; 0x40
 800ce32:	9911      	ldr	r1, [sp, #68]	; 0x44
 800ce34:	f7f4 f9e2 	bl	80011fc <__aeabi_dadd>
 800ce38:	0006      	movs	r6, r0
 800ce3a:	000f      	movs	r7, r1
 800ce3c:	e7d1      	b.n	800cde2 <_strtod_l+0x912>
 800ce3e:	2601      	movs	r6, #1
 800ce40:	4013      	ands	r3, r2
 800ce42:	4a98      	ldr	r2, [pc, #608]	; (800d0a4 <_strtod_l+0xbd4>)
 800ce44:	4276      	negs	r6, r6
 800ce46:	189b      	adds	r3, r3, r2
 800ce48:	4a97      	ldr	r2, [pc, #604]	; (800d0a8 <_strtod_l+0xbd8>)
 800ce4a:	431a      	orrs	r2, r3
 800ce4c:	0017      	movs	r7, r2
 800ce4e:	e7c8      	b.n	800cde2 <_strtod_l+0x912>
 800ce50:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ce52:	4233      	tst	r3, r6
 800ce54:	d0c5      	beq.n	800cde2 <_strtod_l+0x912>
 800ce56:	e7e1      	b.n	800ce1c <_strtod_l+0x94c>
 800ce58:	f7ff fb22 	bl	800c4a0 <sulp>
 800ce5c:	0002      	movs	r2, r0
 800ce5e:	000b      	movs	r3, r1
 800ce60:	9810      	ldr	r0, [sp, #64]	; 0x40
 800ce62:	9911      	ldr	r1, [sp, #68]	; 0x44
 800ce64:	f7f5 fbe6 	bl	8002634 <__aeabi_dsub>
 800ce68:	2200      	movs	r2, #0
 800ce6a:	2300      	movs	r3, #0
 800ce6c:	0006      	movs	r6, r0
 800ce6e:	000f      	movs	r7, r1
 800ce70:	f7f3 faf6 	bl	8000460 <__aeabi_dcmpeq>
 800ce74:	2800      	cmp	r0, #0
 800ce76:	d0b4      	beq.n	800cde2 <_strtod_l+0x912>
 800ce78:	e600      	b.n	800ca7c <_strtod_l+0x5ac>
 800ce7a:	9906      	ldr	r1, [sp, #24]
 800ce7c:	9805      	ldr	r0, [sp, #20]
 800ce7e:	f001 fc19 	bl	800e6b4 <__ratio>
 800ce82:	2380      	movs	r3, #128	; 0x80
 800ce84:	2200      	movs	r2, #0
 800ce86:	05db      	lsls	r3, r3, #23
 800ce88:	0004      	movs	r4, r0
 800ce8a:	000d      	movs	r5, r1
 800ce8c:	f7f3 faf8 	bl	8000480 <__aeabi_dcmple>
 800ce90:	2800      	cmp	r0, #0
 800ce92:	d06d      	beq.n	800cf70 <_strtod_l+0xaa0>
 800ce94:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ce96:	2b00      	cmp	r3, #0
 800ce98:	d000      	beq.n	800ce9c <_strtod_l+0x9cc>
 800ce9a:	e07e      	b.n	800cf9a <_strtod_l+0xaca>
 800ce9c:	2e00      	cmp	r6, #0
 800ce9e:	d158      	bne.n	800cf52 <_strtod_l+0xa82>
 800cea0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cea2:	031b      	lsls	r3, r3, #12
 800cea4:	d000      	beq.n	800cea8 <_strtod_l+0x9d8>
 800cea6:	e07f      	b.n	800cfa8 <_strtod_l+0xad8>
 800cea8:	2200      	movs	r2, #0
 800ceaa:	0020      	movs	r0, r4
 800ceac:	0029      	movs	r1, r5
 800ceae:	4b7f      	ldr	r3, [pc, #508]	; (800d0ac <_strtod_l+0xbdc>)
 800ceb0:	f7f3 fadc 	bl	800046c <__aeabi_dcmplt>
 800ceb4:	2800      	cmp	r0, #0
 800ceb6:	d158      	bne.n	800cf6a <_strtod_l+0xa9a>
 800ceb8:	0020      	movs	r0, r4
 800ceba:	0029      	movs	r1, r5
 800cebc:	2200      	movs	r2, #0
 800cebe:	4b7c      	ldr	r3, [pc, #496]	; (800d0b0 <_strtod_l+0xbe0>)
 800cec0:	f7f5 f8f6 	bl	80020b0 <__aeabi_dmul>
 800cec4:	0004      	movs	r4, r0
 800cec6:	000d      	movs	r5, r1
 800cec8:	2380      	movs	r3, #128	; 0x80
 800ceca:	061b      	lsls	r3, r3, #24
 800cecc:	940a      	str	r4, [sp, #40]	; 0x28
 800cece:	18eb      	adds	r3, r5, r3
 800ced0:	930b      	str	r3, [sp, #44]	; 0x2c
 800ced2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ced4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ced6:	9212      	str	r2, [sp, #72]	; 0x48
 800ced8:	9313      	str	r3, [sp, #76]	; 0x4c
 800ceda:	4a76      	ldr	r2, [pc, #472]	; (800d0b4 <_strtod_l+0xbe4>)
 800cedc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cede:	4013      	ands	r3, r2
 800cee0:	9314      	str	r3, [sp, #80]	; 0x50
 800cee2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800cee4:	4b74      	ldr	r3, [pc, #464]	; (800d0b8 <_strtod_l+0xbe8>)
 800cee6:	429a      	cmp	r2, r3
 800cee8:	d000      	beq.n	800ceec <_strtod_l+0xa1c>
 800ceea:	e091      	b.n	800d010 <_strtod_l+0xb40>
 800ceec:	4a73      	ldr	r2, [pc, #460]	; (800d0bc <_strtod_l+0xbec>)
 800ceee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cef0:	4694      	mov	ip, r2
 800cef2:	4463      	add	r3, ip
 800cef4:	001f      	movs	r7, r3
 800cef6:	0030      	movs	r0, r6
 800cef8:	0019      	movs	r1, r3
 800cefa:	f001 fb13 	bl	800e524 <__ulp>
 800cefe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cf00:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cf02:	f7f5 f8d5 	bl	80020b0 <__aeabi_dmul>
 800cf06:	0032      	movs	r2, r6
 800cf08:	003b      	movs	r3, r7
 800cf0a:	f7f4 f977 	bl	80011fc <__aeabi_dadd>
 800cf0e:	4a69      	ldr	r2, [pc, #420]	; (800d0b4 <_strtod_l+0xbe4>)
 800cf10:	4b6b      	ldr	r3, [pc, #428]	; (800d0c0 <_strtod_l+0xbf0>)
 800cf12:	0006      	movs	r6, r0
 800cf14:	400a      	ands	r2, r1
 800cf16:	429a      	cmp	r2, r3
 800cf18:	d949      	bls.n	800cfae <_strtod_l+0xade>
 800cf1a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800cf1c:	4b69      	ldr	r3, [pc, #420]	; (800d0c4 <_strtod_l+0xbf4>)
 800cf1e:	429a      	cmp	r2, r3
 800cf20:	d103      	bne.n	800cf2a <_strtod_l+0xa5a>
 800cf22:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800cf24:	3301      	adds	r3, #1
 800cf26:	d100      	bne.n	800cf2a <_strtod_l+0xa5a>
 800cf28:	e535      	b.n	800c996 <_strtod_l+0x4c6>
 800cf2a:	2601      	movs	r6, #1
 800cf2c:	4f65      	ldr	r7, [pc, #404]	; (800d0c4 <_strtod_l+0xbf4>)
 800cf2e:	4276      	negs	r6, r6
 800cf30:	991c      	ldr	r1, [sp, #112]	; 0x70
 800cf32:	9804      	ldr	r0, [sp, #16]
 800cf34:	f000 ffb4 	bl	800dea0 <_Bfree>
 800cf38:	9908      	ldr	r1, [sp, #32]
 800cf3a:	9804      	ldr	r0, [sp, #16]
 800cf3c:	f000 ffb0 	bl	800dea0 <_Bfree>
 800cf40:	9906      	ldr	r1, [sp, #24]
 800cf42:	9804      	ldr	r0, [sp, #16]
 800cf44:	f000 ffac 	bl	800dea0 <_Bfree>
 800cf48:	9905      	ldr	r1, [sp, #20]
 800cf4a:	9804      	ldr	r0, [sp, #16]
 800cf4c:	f000 ffa8 	bl	800dea0 <_Bfree>
 800cf50:	e60b      	b.n	800cb6a <_strtod_l+0x69a>
 800cf52:	2e01      	cmp	r6, #1
 800cf54:	d103      	bne.n	800cf5e <_strtod_l+0xa8e>
 800cf56:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cf58:	2b00      	cmp	r3, #0
 800cf5a:	d100      	bne.n	800cf5e <_strtod_l+0xa8e>
 800cf5c:	e58e      	b.n	800ca7c <_strtod_l+0x5ac>
 800cf5e:	2300      	movs	r3, #0
 800cf60:	4c59      	ldr	r4, [pc, #356]	; (800d0c8 <_strtod_l+0xbf8>)
 800cf62:	930a      	str	r3, [sp, #40]	; 0x28
 800cf64:	940b      	str	r4, [sp, #44]	; 0x2c
 800cf66:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800cf68:	e01c      	b.n	800cfa4 <_strtod_l+0xad4>
 800cf6a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800cf6c:	4d50      	ldr	r5, [pc, #320]	; (800d0b0 <_strtod_l+0xbe0>)
 800cf6e:	e7ab      	b.n	800cec8 <_strtod_l+0x9f8>
 800cf70:	2200      	movs	r2, #0
 800cf72:	0020      	movs	r0, r4
 800cf74:	0029      	movs	r1, r5
 800cf76:	4b4e      	ldr	r3, [pc, #312]	; (800d0b0 <_strtod_l+0xbe0>)
 800cf78:	f7f5 f89a 	bl	80020b0 <__aeabi_dmul>
 800cf7c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800cf7e:	0004      	movs	r4, r0
 800cf80:	000b      	movs	r3, r1
 800cf82:	000d      	movs	r5, r1
 800cf84:	2a00      	cmp	r2, #0
 800cf86:	d104      	bne.n	800cf92 <_strtod_l+0xac2>
 800cf88:	2280      	movs	r2, #128	; 0x80
 800cf8a:	0612      	lsls	r2, r2, #24
 800cf8c:	900a      	str	r0, [sp, #40]	; 0x28
 800cf8e:	188b      	adds	r3, r1, r2
 800cf90:	e79e      	b.n	800ced0 <_strtod_l+0xa00>
 800cf92:	0002      	movs	r2, r0
 800cf94:	920a      	str	r2, [sp, #40]	; 0x28
 800cf96:	930b      	str	r3, [sp, #44]	; 0x2c
 800cf98:	e79b      	b.n	800ced2 <_strtod_l+0xa02>
 800cf9a:	2300      	movs	r3, #0
 800cf9c:	4c43      	ldr	r4, [pc, #268]	; (800d0ac <_strtod_l+0xbdc>)
 800cf9e:	930a      	str	r3, [sp, #40]	; 0x28
 800cfa0:	940b      	str	r4, [sp, #44]	; 0x2c
 800cfa2:	2400      	movs	r4, #0
 800cfa4:	4d41      	ldr	r5, [pc, #260]	; (800d0ac <_strtod_l+0xbdc>)
 800cfa6:	e794      	b.n	800ced2 <_strtod_l+0xa02>
 800cfa8:	2300      	movs	r3, #0
 800cfaa:	4c47      	ldr	r4, [pc, #284]	; (800d0c8 <_strtod_l+0xbf8>)
 800cfac:	e7f7      	b.n	800cf9e <_strtod_l+0xace>
 800cfae:	23d4      	movs	r3, #212	; 0xd4
 800cfb0:	049b      	lsls	r3, r3, #18
 800cfb2:	18cf      	adds	r7, r1, r3
 800cfb4:	9b07      	ldr	r3, [sp, #28]
 800cfb6:	970e      	str	r7, [sp, #56]	; 0x38
 800cfb8:	2b00      	cmp	r3, #0
 800cfba:	d1b9      	bne.n	800cf30 <_strtod_l+0xa60>
 800cfbc:	4b3d      	ldr	r3, [pc, #244]	; (800d0b4 <_strtod_l+0xbe4>)
 800cfbe:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800cfc0:	403b      	ands	r3, r7
 800cfc2:	429a      	cmp	r2, r3
 800cfc4:	d1b4      	bne.n	800cf30 <_strtod_l+0xa60>
 800cfc6:	0020      	movs	r0, r4
 800cfc8:	0029      	movs	r1, r5
 800cfca:	f7f3 faef 	bl	80005ac <__aeabi_d2lz>
 800cfce:	f7f3 fb29 	bl	8000624 <__aeabi_l2d>
 800cfd2:	0002      	movs	r2, r0
 800cfd4:	000b      	movs	r3, r1
 800cfd6:	0020      	movs	r0, r4
 800cfd8:	0029      	movs	r1, r5
 800cfda:	f7f5 fb2b 	bl	8002634 <__aeabi_dsub>
 800cfde:	033b      	lsls	r3, r7, #12
 800cfe0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800cfe2:	0b1b      	lsrs	r3, r3, #12
 800cfe4:	4333      	orrs	r3, r6
 800cfe6:	4313      	orrs	r3, r2
 800cfe8:	0004      	movs	r4, r0
 800cfea:	000d      	movs	r5, r1
 800cfec:	4a37      	ldr	r2, [pc, #220]	; (800d0cc <_strtod_l+0xbfc>)
 800cfee:	2b00      	cmp	r3, #0
 800cff0:	d054      	beq.n	800d09c <_strtod_l+0xbcc>
 800cff2:	4b37      	ldr	r3, [pc, #220]	; (800d0d0 <_strtod_l+0xc00>)
 800cff4:	f7f3 fa3a 	bl	800046c <__aeabi_dcmplt>
 800cff8:	2800      	cmp	r0, #0
 800cffa:	d000      	beq.n	800cffe <_strtod_l+0xb2e>
 800cffc:	e4d4      	b.n	800c9a8 <_strtod_l+0x4d8>
 800cffe:	0020      	movs	r0, r4
 800d000:	0029      	movs	r1, r5
 800d002:	4a34      	ldr	r2, [pc, #208]	; (800d0d4 <_strtod_l+0xc04>)
 800d004:	4b2a      	ldr	r3, [pc, #168]	; (800d0b0 <_strtod_l+0xbe0>)
 800d006:	f7f3 fa45 	bl	8000494 <__aeabi_dcmpgt>
 800d00a:	2800      	cmp	r0, #0
 800d00c:	d090      	beq.n	800cf30 <_strtod_l+0xa60>
 800d00e:	e4cb      	b.n	800c9a8 <_strtod_l+0x4d8>
 800d010:	9b07      	ldr	r3, [sp, #28]
 800d012:	2b00      	cmp	r3, #0
 800d014:	d02b      	beq.n	800d06e <_strtod_l+0xb9e>
 800d016:	23d4      	movs	r3, #212	; 0xd4
 800d018:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800d01a:	04db      	lsls	r3, r3, #19
 800d01c:	429a      	cmp	r2, r3
 800d01e:	d826      	bhi.n	800d06e <_strtod_l+0xb9e>
 800d020:	0020      	movs	r0, r4
 800d022:	0029      	movs	r1, r5
 800d024:	4a2c      	ldr	r2, [pc, #176]	; (800d0d8 <_strtod_l+0xc08>)
 800d026:	4b2d      	ldr	r3, [pc, #180]	; (800d0dc <_strtod_l+0xc0c>)
 800d028:	f7f3 fa2a 	bl	8000480 <__aeabi_dcmple>
 800d02c:	2800      	cmp	r0, #0
 800d02e:	d017      	beq.n	800d060 <_strtod_l+0xb90>
 800d030:	0020      	movs	r0, r4
 800d032:	0029      	movs	r1, r5
 800d034:	f7f3 fa9c 	bl	8000570 <__aeabi_d2uiz>
 800d038:	2800      	cmp	r0, #0
 800d03a:	d100      	bne.n	800d03e <_strtod_l+0xb6e>
 800d03c:	3001      	adds	r0, #1
 800d03e:	f7f5 fee1 	bl	8002e04 <__aeabi_ui2d>
 800d042:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d044:	0004      	movs	r4, r0
 800d046:	000b      	movs	r3, r1
 800d048:	000d      	movs	r5, r1
 800d04a:	2a00      	cmp	r2, #0
 800d04c:	d122      	bne.n	800d094 <_strtod_l+0xbc4>
 800d04e:	2280      	movs	r2, #128	; 0x80
 800d050:	0612      	lsls	r2, r2, #24
 800d052:	188b      	adds	r3, r1, r2
 800d054:	9016      	str	r0, [sp, #88]	; 0x58
 800d056:	9317      	str	r3, [sp, #92]	; 0x5c
 800d058:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800d05a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d05c:	9212      	str	r2, [sp, #72]	; 0x48
 800d05e:	9313      	str	r3, [sp, #76]	; 0x4c
 800d060:	22d6      	movs	r2, #214	; 0xd6
 800d062:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d064:	04d2      	lsls	r2, r2, #19
 800d066:	189b      	adds	r3, r3, r2
 800d068:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800d06a:	1a9b      	subs	r3, r3, r2
 800d06c:	9313      	str	r3, [sp, #76]	; 0x4c
 800d06e:	9810      	ldr	r0, [sp, #64]	; 0x40
 800d070:	9911      	ldr	r1, [sp, #68]	; 0x44
 800d072:	9e12      	ldr	r6, [sp, #72]	; 0x48
 800d074:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 800d076:	f001 fa55 	bl	800e524 <__ulp>
 800d07a:	0002      	movs	r2, r0
 800d07c:	000b      	movs	r3, r1
 800d07e:	0030      	movs	r0, r6
 800d080:	0039      	movs	r1, r7
 800d082:	f7f5 f815 	bl	80020b0 <__aeabi_dmul>
 800d086:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800d088:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d08a:	f7f4 f8b7 	bl	80011fc <__aeabi_dadd>
 800d08e:	0006      	movs	r6, r0
 800d090:	000f      	movs	r7, r1
 800d092:	e78f      	b.n	800cfb4 <_strtod_l+0xae4>
 800d094:	0002      	movs	r2, r0
 800d096:	9216      	str	r2, [sp, #88]	; 0x58
 800d098:	9317      	str	r3, [sp, #92]	; 0x5c
 800d09a:	e7dd      	b.n	800d058 <_strtod_l+0xb88>
 800d09c:	4b10      	ldr	r3, [pc, #64]	; (800d0e0 <_strtod_l+0xc10>)
 800d09e:	f7f3 f9e5 	bl	800046c <__aeabi_dcmplt>
 800d0a2:	e7b2      	b.n	800d00a <_strtod_l+0xb3a>
 800d0a4:	fff00000 	.word	0xfff00000
 800d0a8:	000fffff 	.word	0x000fffff
 800d0ac:	3ff00000 	.word	0x3ff00000
 800d0b0:	3fe00000 	.word	0x3fe00000
 800d0b4:	7ff00000 	.word	0x7ff00000
 800d0b8:	7fe00000 	.word	0x7fe00000
 800d0bc:	fcb00000 	.word	0xfcb00000
 800d0c0:	7c9fffff 	.word	0x7c9fffff
 800d0c4:	7fefffff 	.word	0x7fefffff
 800d0c8:	bff00000 	.word	0xbff00000
 800d0cc:	94a03595 	.word	0x94a03595
 800d0d0:	3fdfffff 	.word	0x3fdfffff
 800d0d4:	35afe535 	.word	0x35afe535
 800d0d8:	ffc00000 	.word	0xffc00000
 800d0dc:	41dfffff 	.word	0x41dfffff
 800d0e0:	3fcfffff 	.word	0x3fcfffff

0800d0e4 <strtod>:
 800d0e4:	b510      	push	{r4, lr}
 800d0e6:	4c04      	ldr	r4, [pc, #16]	; (800d0f8 <strtod+0x14>)
 800d0e8:	000a      	movs	r2, r1
 800d0ea:	0001      	movs	r1, r0
 800d0ec:	4b03      	ldr	r3, [pc, #12]	; (800d0fc <strtod+0x18>)
 800d0ee:	6820      	ldr	r0, [r4, #0]
 800d0f0:	f7ff f9ee 	bl	800c4d0 <_strtod_l>
 800d0f4:	bd10      	pop	{r4, pc}
 800d0f6:	46c0      	nop			; (mov r8, r8)
 800d0f8:	200001d4 	.word	0x200001d4
 800d0fc:	2000001c 	.word	0x2000001c

0800d100 <std>:
 800d100:	2300      	movs	r3, #0
 800d102:	b510      	push	{r4, lr}
 800d104:	0004      	movs	r4, r0
 800d106:	6003      	str	r3, [r0, #0]
 800d108:	6043      	str	r3, [r0, #4]
 800d10a:	6083      	str	r3, [r0, #8]
 800d10c:	8181      	strh	r1, [r0, #12]
 800d10e:	6643      	str	r3, [r0, #100]	; 0x64
 800d110:	81c2      	strh	r2, [r0, #14]
 800d112:	6103      	str	r3, [r0, #16]
 800d114:	6143      	str	r3, [r0, #20]
 800d116:	6183      	str	r3, [r0, #24]
 800d118:	0019      	movs	r1, r3
 800d11a:	2208      	movs	r2, #8
 800d11c:	305c      	adds	r0, #92	; 0x5c
 800d11e:	f000 f90d 	bl	800d33c <memset>
 800d122:	4b0b      	ldr	r3, [pc, #44]	; (800d150 <std+0x50>)
 800d124:	6224      	str	r4, [r4, #32]
 800d126:	6263      	str	r3, [r4, #36]	; 0x24
 800d128:	4b0a      	ldr	r3, [pc, #40]	; (800d154 <std+0x54>)
 800d12a:	62a3      	str	r3, [r4, #40]	; 0x28
 800d12c:	4b0a      	ldr	r3, [pc, #40]	; (800d158 <std+0x58>)
 800d12e:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d130:	4b0a      	ldr	r3, [pc, #40]	; (800d15c <std+0x5c>)
 800d132:	6323      	str	r3, [r4, #48]	; 0x30
 800d134:	4b0a      	ldr	r3, [pc, #40]	; (800d160 <std+0x60>)
 800d136:	429c      	cmp	r4, r3
 800d138:	d005      	beq.n	800d146 <std+0x46>
 800d13a:	4b0a      	ldr	r3, [pc, #40]	; (800d164 <std+0x64>)
 800d13c:	429c      	cmp	r4, r3
 800d13e:	d002      	beq.n	800d146 <std+0x46>
 800d140:	4b09      	ldr	r3, [pc, #36]	; (800d168 <std+0x68>)
 800d142:	429c      	cmp	r4, r3
 800d144:	d103      	bne.n	800d14e <std+0x4e>
 800d146:	0020      	movs	r0, r4
 800d148:	3058      	adds	r0, #88	; 0x58
 800d14a:	f000 f9e7 	bl	800d51c <__retarget_lock_init_recursive>
 800d14e:	bd10      	pop	{r4, pc}
 800d150:	0800d289 	.word	0x0800d289
 800d154:	0800d2b1 	.word	0x0800d2b1
 800d158:	0800d2e9 	.word	0x0800d2e9
 800d15c:	0800d315 	.word	0x0800d315
 800d160:	200028e0 	.word	0x200028e0
 800d164:	20002948 	.word	0x20002948
 800d168:	200029b0 	.word	0x200029b0

0800d16c <stdio_exit_handler>:
 800d16c:	b510      	push	{r4, lr}
 800d16e:	4a03      	ldr	r2, [pc, #12]	; (800d17c <stdio_exit_handler+0x10>)
 800d170:	4903      	ldr	r1, [pc, #12]	; (800d180 <stdio_exit_handler+0x14>)
 800d172:	4804      	ldr	r0, [pc, #16]	; (800d184 <stdio_exit_handler+0x18>)
 800d174:	f000 f86c 	bl	800d250 <_fwalk_sglue>
 800d178:	bd10      	pop	{r4, pc}
 800d17a:	46c0      	nop			; (mov r8, r8)
 800d17c:	20000010 	.word	0x20000010
 800d180:	0800e8bd 	.word	0x0800e8bd
 800d184:	20000188 	.word	0x20000188

0800d188 <cleanup_stdio>:
 800d188:	6841      	ldr	r1, [r0, #4]
 800d18a:	4b0b      	ldr	r3, [pc, #44]	; (800d1b8 <cleanup_stdio+0x30>)
 800d18c:	b510      	push	{r4, lr}
 800d18e:	0004      	movs	r4, r0
 800d190:	4299      	cmp	r1, r3
 800d192:	d001      	beq.n	800d198 <cleanup_stdio+0x10>
 800d194:	f001 fb92 	bl	800e8bc <_fflush_r>
 800d198:	68a1      	ldr	r1, [r4, #8]
 800d19a:	4b08      	ldr	r3, [pc, #32]	; (800d1bc <cleanup_stdio+0x34>)
 800d19c:	4299      	cmp	r1, r3
 800d19e:	d002      	beq.n	800d1a6 <cleanup_stdio+0x1e>
 800d1a0:	0020      	movs	r0, r4
 800d1a2:	f001 fb8b 	bl	800e8bc <_fflush_r>
 800d1a6:	68e1      	ldr	r1, [r4, #12]
 800d1a8:	4b05      	ldr	r3, [pc, #20]	; (800d1c0 <cleanup_stdio+0x38>)
 800d1aa:	4299      	cmp	r1, r3
 800d1ac:	d002      	beq.n	800d1b4 <cleanup_stdio+0x2c>
 800d1ae:	0020      	movs	r0, r4
 800d1b0:	f001 fb84 	bl	800e8bc <_fflush_r>
 800d1b4:	bd10      	pop	{r4, pc}
 800d1b6:	46c0      	nop			; (mov r8, r8)
 800d1b8:	200028e0 	.word	0x200028e0
 800d1bc:	20002948 	.word	0x20002948
 800d1c0:	200029b0 	.word	0x200029b0

0800d1c4 <global_stdio_init.part.0>:
 800d1c4:	b510      	push	{r4, lr}
 800d1c6:	4b09      	ldr	r3, [pc, #36]	; (800d1ec <global_stdio_init.part.0+0x28>)
 800d1c8:	4a09      	ldr	r2, [pc, #36]	; (800d1f0 <global_stdio_init.part.0+0x2c>)
 800d1ca:	2104      	movs	r1, #4
 800d1cc:	601a      	str	r2, [r3, #0]
 800d1ce:	4809      	ldr	r0, [pc, #36]	; (800d1f4 <global_stdio_init.part.0+0x30>)
 800d1d0:	2200      	movs	r2, #0
 800d1d2:	f7ff ff95 	bl	800d100 <std>
 800d1d6:	2201      	movs	r2, #1
 800d1d8:	2109      	movs	r1, #9
 800d1da:	4807      	ldr	r0, [pc, #28]	; (800d1f8 <global_stdio_init.part.0+0x34>)
 800d1dc:	f7ff ff90 	bl	800d100 <std>
 800d1e0:	2202      	movs	r2, #2
 800d1e2:	2112      	movs	r1, #18
 800d1e4:	4805      	ldr	r0, [pc, #20]	; (800d1fc <global_stdio_init.part.0+0x38>)
 800d1e6:	f7ff ff8b 	bl	800d100 <std>
 800d1ea:	bd10      	pop	{r4, pc}
 800d1ec:	20002a18 	.word	0x20002a18
 800d1f0:	0800d16d 	.word	0x0800d16d
 800d1f4:	200028e0 	.word	0x200028e0
 800d1f8:	20002948 	.word	0x20002948
 800d1fc:	200029b0 	.word	0x200029b0

0800d200 <__sfp_lock_acquire>:
 800d200:	b510      	push	{r4, lr}
 800d202:	4802      	ldr	r0, [pc, #8]	; (800d20c <__sfp_lock_acquire+0xc>)
 800d204:	f000 f98b 	bl	800d51e <__retarget_lock_acquire_recursive>
 800d208:	bd10      	pop	{r4, pc}
 800d20a:	46c0      	nop			; (mov r8, r8)
 800d20c:	20002a21 	.word	0x20002a21

0800d210 <__sfp_lock_release>:
 800d210:	b510      	push	{r4, lr}
 800d212:	4802      	ldr	r0, [pc, #8]	; (800d21c <__sfp_lock_release+0xc>)
 800d214:	f000 f984 	bl	800d520 <__retarget_lock_release_recursive>
 800d218:	bd10      	pop	{r4, pc}
 800d21a:	46c0      	nop			; (mov r8, r8)
 800d21c:	20002a21 	.word	0x20002a21

0800d220 <__sinit>:
 800d220:	b510      	push	{r4, lr}
 800d222:	0004      	movs	r4, r0
 800d224:	f7ff ffec 	bl	800d200 <__sfp_lock_acquire>
 800d228:	6a23      	ldr	r3, [r4, #32]
 800d22a:	2b00      	cmp	r3, #0
 800d22c:	d002      	beq.n	800d234 <__sinit+0x14>
 800d22e:	f7ff ffef 	bl	800d210 <__sfp_lock_release>
 800d232:	bd10      	pop	{r4, pc}
 800d234:	4b04      	ldr	r3, [pc, #16]	; (800d248 <__sinit+0x28>)
 800d236:	6223      	str	r3, [r4, #32]
 800d238:	4b04      	ldr	r3, [pc, #16]	; (800d24c <__sinit+0x2c>)
 800d23a:	681b      	ldr	r3, [r3, #0]
 800d23c:	2b00      	cmp	r3, #0
 800d23e:	d1f6      	bne.n	800d22e <__sinit+0xe>
 800d240:	f7ff ffc0 	bl	800d1c4 <global_stdio_init.part.0>
 800d244:	e7f3      	b.n	800d22e <__sinit+0xe>
 800d246:	46c0      	nop			; (mov r8, r8)
 800d248:	0800d189 	.word	0x0800d189
 800d24c:	20002a18 	.word	0x20002a18

0800d250 <_fwalk_sglue>:
 800d250:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d252:	0014      	movs	r4, r2
 800d254:	2600      	movs	r6, #0
 800d256:	9000      	str	r0, [sp, #0]
 800d258:	9101      	str	r1, [sp, #4]
 800d25a:	68a5      	ldr	r5, [r4, #8]
 800d25c:	6867      	ldr	r7, [r4, #4]
 800d25e:	3f01      	subs	r7, #1
 800d260:	d504      	bpl.n	800d26c <_fwalk_sglue+0x1c>
 800d262:	6824      	ldr	r4, [r4, #0]
 800d264:	2c00      	cmp	r4, #0
 800d266:	d1f8      	bne.n	800d25a <_fwalk_sglue+0xa>
 800d268:	0030      	movs	r0, r6
 800d26a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800d26c:	89ab      	ldrh	r3, [r5, #12]
 800d26e:	2b01      	cmp	r3, #1
 800d270:	d908      	bls.n	800d284 <_fwalk_sglue+0x34>
 800d272:	220e      	movs	r2, #14
 800d274:	5eab      	ldrsh	r3, [r5, r2]
 800d276:	3301      	adds	r3, #1
 800d278:	d004      	beq.n	800d284 <_fwalk_sglue+0x34>
 800d27a:	0029      	movs	r1, r5
 800d27c:	9800      	ldr	r0, [sp, #0]
 800d27e:	9b01      	ldr	r3, [sp, #4]
 800d280:	4798      	blx	r3
 800d282:	4306      	orrs	r6, r0
 800d284:	3568      	adds	r5, #104	; 0x68
 800d286:	e7ea      	b.n	800d25e <_fwalk_sglue+0xe>

0800d288 <__sread>:
 800d288:	b570      	push	{r4, r5, r6, lr}
 800d28a:	000c      	movs	r4, r1
 800d28c:	250e      	movs	r5, #14
 800d28e:	5f49      	ldrsh	r1, [r1, r5]
 800d290:	f000 f8f2 	bl	800d478 <_read_r>
 800d294:	2800      	cmp	r0, #0
 800d296:	db03      	blt.n	800d2a0 <__sread+0x18>
 800d298:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800d29a:	181b      	adds	r3, r3, r0
 800d29c:	6563      	str	r3, [r4, #84]	; 0x54
 800d29e:	bd70      	pop	{r4, r5, r6, pc}
 800d2a0:	89a3      	ldrh	r3, [r4, #12]
 800d2a2:	4a02      	ldr	r2, [pc, #8]	; (800d2ac <__sread+0x24>)
 800d2a4:	4013      	ands	r3, r2
 800d2a6:	81a3      	strh	r3, [r4, #12]
 800d2a8:	e7f9      	b.n	800d29e <__sread+0x16>
 800d2aa:	46c0      	nop			; (mov r8, r8)
 800d2ac:	ffffefff 	.word	0xffffefff

0800d2b0 <__swrite>:
 800d2b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d2b2:	001f      	movs	r7, r3
 800d2b4:	898b      	ldrh	r3, [r1, #12]
 800d2b6:	0005      	movs	r5, r0
 800d2b8:	000c      	movs	r4, r1
 800d2ba:	0016      	movs	r6, r2
 800d2bc:	05db      	lsls	r3, r3, #23
 800d2be:	d505      	bpl.n	800d2cc <__swrite+0x1c>
 800d2c0:	230e      	movs	r3, #14
 800d2c2:	5ec9      	ldrsh	r1, [r1, r3]
 800d2c4:	2200      	movs	r2, #0
 800d2c6:	2302      	movs	r3, #2
 800d2c8:	f000 f8c2 	bl	800d450 <_lseek_r>
 800d2cc:	89a3      	ldrh	r3, [r4, #12]
 800d2ce:	4a05      	ldr	r2, [pc, #20]	; (800d2e4 <__swrite+0x34>)
 800d2d0:	0028      	movs	r0, r5
 800d2d2:	4013      	ands	r3, r2
 800d2d4:	81a3      	strh	r3, [r4, #12]
 800d2d6:	0032      	movs	r2, r6
 800d2d8:	230e      	movs	r3, #14
 800d2da:	5ee1      	ldrsh	r1, [r4, r3]
 800d2dc:	003b      	movs	r3, r7
 800d2de:	f000 f8df 	bl	800d4a0 <_write_r>
 800d2e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d2e4:	ffffefff 	.word	0xffffefff

0800d2e8 <__sseek>:
 800d2e8:	b570      	push	{r4, r5, r6, lr}
 800d2ea:	000c      	movs	r4, r1
 800d2ec:	250e      	movs	r5, #14
 800d2ee:	5f49      	ldrsh	r1, [r1, r5]
 800d2f0:	f000 f8ae 	bl	800d450 <_lseek_r>
 800d2f4:	89a3      	ldrh	r3, [r4, #12]
 800d2f6:	1c42      	adds	r2, r0, #1
 800d2f8:	d103      	bne.n	800d302 <__sseek+0x1a>
 800d2fa:	4a05      	ldr	r2, [pc, #20]	; (800d310 <__sseek+0x28>)
 800d2fc:	4013      	ands	r3, r2
 800d2fe:	81a3      	strh	r3, [r4, #12]
 800d300:	bd70      	pop	{r4, r5, r6, pc}
 800d302:	2280      	movs	r2, #128	; 0x80
 800d304:	0152      	lsls	r2, r2, #5
 800d306:	4313      	orrs	r3, r2
 800d308:	81a3      	strh	r3, [r4, #12]
 800d30a:	6560      	str	r0, [r4, #84]	; 0x54
 800d30c:	e7f8      	b.n	800d300 <__sseek+0x18>
 800d30e:	46c0      	nop			; (mov r8, r8)
 800d310:	ffffefff 	.word	0xffffefff

0800d314 <__sclose>:
 800d314:	b510      	push	{r4, lr}
 800d316:	230e      	movs	r3, #14
 800d318:	5ec9      	ldrsh	r1, [r1, r3]
 800d31a:	f000 f829 	bl	800d370 <_close_r>
 800d31e:	bd10      	pop	{r4, pc}

0800d320 <memcmp>:
 800d320:	b530      	push	{r4, r5, lr}
 800d322:	2400      	movs	r4, #0
 800d324:	3901      	subs	r1, #1
 800d326:	42a2      	cmp	r2, r4
 800d328:	d101      	bne.n	800d32e <memcmp+0xe>
 800d32a:	2000      	movs	r0, #0
 800d32c:	e005      	b.n	800d33a <memcmp+0x1a>
 800d32e:	5d03      	ldrb	r3, [r0, r4]
 800d330:	3401      	adds	r4, #1
 800d332:	5d0d      	ldrb	r5, [r1, r4]
 800d334:	42ab      	cmp	r3, r5
 800d336:	d0f6      	beq.n	800d326 <memcmp+0x6>
 800d338:	1b58      	subs	r0, r3, r5
 800d33a:	bd30      	pop	{r4, r5, pc}

0800d33c <memset>:
 800d33c:	0003      	movs	r3, r0
 800d33e:	1882      	adds	r2, r0, r2
 800d340:	4293      	cmp	r3, r2
 800d342:	d100      	bne.n	800d346 <memset+0xa>
 800d344:	4770      	bx	lr
 800d346:	7019      	strb	r1, [r3, #0]
 800d348:	3301      	adds	r3, #1
 800d34a:	e7f9      	b.n	800d340 <memset+0x4>

0800d34c <strncmp>:
 800d34c:	b530      	push	{r4, r5, lr}
 800d34e:	0005      	movs	r5, r0
 800d350:	1e10      	subs	r0, r2, #0
 800d352:	d00b      	beq.n	800d36c <strncmp+0x20>
 800d354:	2400      	movs	r4, #0
 800d356:	3a01      	subs	r2, #1
 800d358:	5d2b      	ldrb	r3, [r5, r4]
 800d35a:	5d08      	ldrb	r0, [r1, r4]
 800d35c:	4283      	cmp	r3, r0
 800d35e:	d104      	bne.n	800d36a <strncmp+0x1e>
 800d360:	42a2      	cmp	r2, r4
 800d362:	d002      	beq.n	800d36a <strncmp+0x1e>
 800d364:	3401      	adds	r4, #1
 800d366:	2b00      	cmp	r3, #0
 800d368:	d1f6      	bne.n	800d358 <strncmp+0xc>
 800d36a:	1a18      	subs	r0, r3, r0
 800d36c:	bd30      	pop	{r4, r5, pc}
	...

0800d370 <_close_r>:
 800d370:	2300      	movs	r3, #0
 800d372:	b570      	push	{r4, r5, r6, lr}
 800d374:	4d06      	ldr	r5, [pc, #24]	; (800d390 <_close_r+0x20>)
 800d376:	0004      	movs	r4, r0
 800d378:	0008      	movs	r0, r1
 800d37a:	602b      	str	r3, [r5, #0]
 800d37c:	f7f7 fdfb 	bl	8004f76 <_close>
 800d380:	1c43      	adds	r3, r0, #1
 800d382:	d103      	bne.n	800d38c <_close_r+0x1c>
 800d384:	682b      	ldr	r3, [r5, #0]
 800d386:	2b00      	cmp	r3, #0
 800d388:	d000      	beq.n	800d38c <_close_r+0x1c>
 800d38a:	6023      	str	r3, [r4, #0]
 800d38c:	bd70      	pop	{r4, r5, r6, pc}
 800d38e:	46c0      	nop			; (mov r8, r8)
 800d390:	20002a1c 	.word	0x20002a1c

0800d394 <_reclaim_reent>:
 800d394:	4b2d      	ldr	r3, [pc, #180]	; (800d44c <_reclaim_reent+0xb8>)
 800d396:	b570      	push	{r4, r5, r6, lr}
 800d398:	681b      	ldr	r3, [r3, #0]
 800d39a:	0004      	movs	r4, r0
 800d39c:	4283      	cmp	r3, r0
 800d39e:	d042      	beq.n	800d426 <_reclaim_reent+0x92>
 800d3a0:	69c3      	ldr	r3, [r0, #28]
 800d3a2:	2b00      	cmp	r3, #0
 800d3a4:	d00a      	beq.n	800d3bc <_reclaim_reent+0x28>
 800d3a6:	2500      	movs	r5, #0
 800d3a8:	68db      	ldr	r3, [r3, #12]
 800d3aa:	42ab      	cmp	r3, r5
 800d3ac:	d140      	bne.n	800d430 <_reclaim_reent+0x9c>
 800d3ae:	69e3      	ldr	r3, [r4, #28]
 800d3b0:	6819      	ldr	r1, [r3, #0]
 800d3b2:	2900      	cmp	r1, #0
 800d3b4:	d002      	beq.n	800d3bc <_reclaim_reent+0x28>
 800d3b6:	0020      	movs	r0, r4
 800d3b8:	f000 f8c2 	bl	800d540 <_free_r>
 800d3bc:	6961      	ldr	r1, [r4, #20]
 800d3be:	2900      	cmp	r1, #0
 800d3c0:	d002      	beq.n	800d3c8 <_reclaim_reent+0x34>
 800d3c2:	0020      	movs	r0, r4
 800d3c4:	f000 f8bc 	bl	800d540 <_free_r>
 800d3c8:	69e1      	ldr	r1, [r4, #28]
 800d3ca:	2900      	cmp	r1, #0
 800d3cc:	d002      	beq.n	800d3d4 <_reclaim_reent+0x40>
 800d3ce:	0020      	movs	r0, r4
 800d3d0:	f000 f8b6 	bl	800d540 <_free_r>
 800d3d4:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800d3d6:	2900      	cmp	r1, #0
 800d3d8:	d002      	beq.n	800d3e0 <_reclaim_reent+0x4c>
 800d3da:	0020      	movs	r0, r4
 800d3dc:	f000 f8b0 	bl	800d540 <_free_r>
 800d3e0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d3e2:	2900      	cmp	r1, #0
 800d3e4:	d002      	beq.n	800d3ec <_reclaim_reent+0x58>
 800d3e6:	0020      	movs	r0, r4
 800d3e8:	f000 f8aa 	bl	800d540 <_free_r>
 800d3ec:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800d3ee:	2900      	cmp	r1, #0
 800d3f0:	d002      	beq.n	800d3f8 <_reclaim_reent+0x64>
 800d3f2:	0020      	movs	r0, r4
 800d3f4:	f000 f8a4 	bl	800d540 <_free_r>
 800d3f8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800d3fa:	2900      	cmp	r1, #0
 800d3fc:	d002      	beq.n	800d404 <_reclaim_reent+0x70>
 800d3fe:	0020      	movs	r0, r4
 800d400:	f000 f89e 	bl	800d540 <_free_r>
 800d404:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800d406:	2900      	cmp	r1, #0
 800d408:	d002      	beq.n	800d410 <_reclaim_reent+0x7c>
 800d40a:	0020      	movs	r0, r4
 800d40c:	f000 f898 	bl	800d540 <_free_r>
 800d410:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800d412:	2900      	cmp	r1, #0
 800d414:	d002      	beq.n	800d41c <_reclaim_reent+0x88>
 800d416:	0020      	movs	r0, r4
 800d418:	f000 f892 	bl	800d540 <_free_r>
 800d41c:	6a23      	ldr	r3, [r4, #32]
 800d41e:	2b00      	cmp	r3, #0
 800d420:	d001      	beq.n	800d426 <_reclaim_reent+0x92>
 800d422:	0020      	movs	r0, r4
 800d424:	4798      	blx	r3
 800d426:	bd70      	pop	{r4, r5, r6, pc}
 800d428:	5949      	ldr	r1, [r1, r5]
 800d42a:	2900      	cmp	r1, #0
 800d42c:	d108      	bne.n	800d440 <_reclaim_reent+0xac>
 800d42e:	3504      	adds	r5, #4
 800d430:	69e3      	ldr	r3, [r4, #28]
 800d432:	68d9      	ldr	r1, [r3, #12]
 800d434:	2d80      	cmp	r5, #128	; 0x80
 800d436:	d1f7      	bne.n	800d428 <_reclaim_reent+0x94>
 800d438:	0020      	movs	r0, r4
 800d43a:	f000 f881 	bl	800d540 <_free_r>
 800d43e:	e7b6      	b.n	800d3ae <_reclaim_reent+0x1a>
 800d440:	680e      	ldr	r6, [r1, #0]
 800d442:	0020      	movs	r0, r4
 800d444:	f000 f87c 	bl	800d540 <_free_r>
 800d448:	0031      	movs	r1, r6
 800d44a:	e7ee      	b.n	800d42a <_reclaim_reent+0x96>
 800d44c:	200001d4 	.word	0x200001d4

0800d450 <_lseek_r>:
 800d450:	b570      	push	{r4, r5, r6, lr}
 800d452:	0004      	movs	r4, r0
 800d454:	0008      	movs	r0, r1
 800d456:	0011      	movs	r1, r2
 800d458:	001a      	movs	r2, r3
 800d45a:	2300      	movs	r3, #0
 800d45c:	4d05      	ldr	r5, [pc, #20]	; (800d474 <_lseek_r+0x24>)
 800d45e:	602b      	str	r3, [r5, #0]
 800d460:	f7f7 fdaa 	bl	8004fb8 <_lseek>
 800d464:	1c43      	adds	r3, r0, #1
 800d466:	d103      	bne.n	800d470 <_lseek_r+0x20>
 800d468:	682b      	ldr	r3, [r5, #0]
 800d46a:	2b00      	cmp	r3, #0
 800d46c:	d000      	beq.n	800d470 <_lseek_r+0x20>
 800d46e:	6023      	str	r3, [r4, #0]
 800d470:	bd70      	pop	{r4, r5, r6, pc}
 800d472:	46c0      	nop			; (mov r8, r8)
 800d474:	20002a1c 	.word	0x20002a1c

0800d478 <_read_r>:
 800d478:	b570      	push	{r4, r5, r6, lr}
 800d47a:	0004      	movs	r4, r0
 800d47c:	0008      	movs	r0, r1
 800d47e:	0011      	movs	r1, r2
 800d480:	001a      	movs	r2, r3
 800d482:	2300      	movs	r3, #0
 800d484:	4d05      	ldr	r5, [pc, #20]	; (800d49c <_read_r+0x24>)
 800d486:	602b      	str	r3, [r5, #0]
 800d488:	f7f7 fd3c 	bl	8004f04 <_read>
 800d48c:	1c43      	adds	r3, r0, #1
 800d48e:	d103      	bne.n	800d498 <_read_r+0x20>
 800d490:	682b      	ldr	r3, [r5, #0]
 800d492:	2b00      	cmp	r3, #0
 800d494:	d000      	beq.n	800d498 <_read_r+0x20>
 800d496:	6023      	str	r3, [r4, #0]
 800d498:	bd70      	pop	{r4, r5, r6, pc}
 800d49a:	46c0      	nop			; (mov r8, r8)
 800d49c:	20002a1c 	.word	0x20002a1c

0800d4a0 <_write_r>:
 800d4a0:	b570      	push	{r4, r5, r6, lr}
 800d4a2:	0004      	movs	r4, r0
 800d4a4:	0008      	movs	r0, r1
 800d4a6:	0011      	movs	r1, r2
 800d4a8:	001a      	movs	r2, r3
 800d4aa:	2300      	movs	r3, #0
 800d4ac:	4d05      	ldr	r5, [pc, #20]	; (800d4c4 <_write_r+0x24>)
 800d4ae:	602b      	str	r3, [r5, #0]
 800d4b0:	f7f7 fd45 	bl	8004f3e <_write>
 800d4b4:	1c43      	adds	r3, r0, #1
 800d4b6:	d103      	bne.n	800d4c0 <_write_r+0x20>
 800d4b8:	682b      	ldr	r3, [r5, #0]
 800d4ba:	2b00      	cmp	r3, #0
 800d4bc:	d000      	beq.n	800d4c0 <_write_r+0x20>
 800d4be:	6023      	str	r3, [r4, #0]
 800d4c0:	bd70      	pop	{r4, r5, r6, pc}
 800d4c2:	46c0      	nop			; (mov r8, r8)
 800d4c4:	20002a1c 	.word	0x20002a1c

0800d4c8 <__errno>:
 800d4c8:	4b01      	ldr	r3, [pc, #4]	; (800d4d0 <__errno+0x8>)
 800d4ca:	6818      	ldr	r0, [r3, #0]
 800d4cc:	4770      	bx	lr
 800d4ce:	46c0      	nop			; (mov r8, r8)
 800d4d0:	200001d4 	.word	0x200001d4

0800d4d4 <__libc_init_array>:
 800d4d4:	b570      	push	{r4, r5, r6, lr}
 800d4d6:	2600      	movs	r6, #0
 800d4d8:	4c0c      	ldr	r4, [pc, #48]	; (800d50c <__libc_init_array+0x38>)
 800d4da:	4d0d      	ldr	r5, [pc, #52]	; (800d510 <__libc_init_array+0x3c>)
 800d4dc:	1b64      	subs	r4, r4, r5
 800d4de:	10a4      	asrs	r4, r4, #2
 800d4e0:	42a6      	cmp	r6, r4
 800d4e2:	d109      	bne.n	800d4f8 <__libc_init_array+0x24>
 800d4e4:	2600      	movs	r6, #0
 800d4e6:	f001 fedd 	bl	800f2a4 <_init>
 800d4ea:	4c0a      	ldr	r4, [pc, #40]	; (800d514 <__libc_init_array+0x40>)
 800d4ec:	4d0a      	ldr	r5, [pc, #40]	; (800d518 <__libc_init_array+0x44>)
 800d4ee:	1b64      	subs	r4, r4, r5
 800d4f0:	10a4      	asrs	r4, r4, #2
 800d4f2:	42a6      	cmp	r6, r4
 800d4f4:	d105      	bne.n	800d502 <__libc_init_array+0x2e>
 800d4f6:	bd70      	pop	{r4, r5, r6, pc}
 800d4f8:	00b3      	lsls	r3, r6, #2
 800d4fa:	58eb      	ldr	r3, [r5, r3]
 800d4fc:	4798      	blx	r3
 800d4fe:	3601      	adds	r6, #1
 800d500:	e7ee      	b.n	800d4e0 <__libc_init_array+0xc>
 800d502:	00b3      	lsls	r3, r6, #2
 800d504:	58eb      	ldr	r3, [r5, r3]
 800d506:	4798      	blx	r3
 800d508:	3601      	adds	r6, #1
 800d50a:	e7f2      	b.n	800d4f2 <__libc_init_array+0x1e>
 800d50c:	0800f9a4 	.word	0x0800f9a4
 800d510:	0800f9a4 	.word	0x0800f9a4
 800d514:	0800f9a8 	.word	0x0800f9a8
 800d518:	0800f9a4 	.word	0x0800f9a4

0800d51c <__retarget_lock_init_recursive>:
 800d51c:	4770      	bx	lr

0800d51e <__retarget_lock_acquire_recursive>:
 800d51e:	4770      	bx	lr

0800d520 <__retarget_lock_release_recursive>:
 800d520:	4770      	bx	lr

0800d522 <memcpy>:
 800d522:	2300      	movs	r3, #0
 800d524:	b510      	push	{r4, lr}
 800d526:	429a      	cmp	r2, r3
 800d528:	d100      	bne.n	800d52c <memcpy+0xa>
 800d52a:	bd10      	pop	{r4, pc}
 800d52c:	5ccc      	ldrb	r4, [r1, r3]
 800d52e:	54c4      	strb	r4, [r0, r3]
 800d530:	3301      	adds	r3, #1
 800d532:	e7f8      	b.n	800d526 <memcpy+0x4>

0800d534 <nan>:
 800d534:	2000      	movs	r0, #0
 800d536:	4901      	ldr	r1, [pc, #4]	; (800d53c <nan+0x8>)
 800d538:	4770      	bx	lr
 800d53a:	46c0      	nop			; (mov r8, r8)
 800d53c:	7ff80000 	.word	0x7ff80000

0800d540 <_free_r>:
 800d540:	b570      	push	{r4, r5, r6, lr}
 800d542:	0005      	movs	r5, r0
 800d544:	2900      	cmp	r1, #0
 800d546:	d010      	beq.n	800d56a <_free_r+0x2a>
 800d548:	1f0c      	subs	r4, r1, #4
 800d54a:	6823      	ldr	r3, [r4, #0]
 800d54c:	2b00      	cmp	r3, #0
 800d54e:	da00      	bge.n	800d552 <_free_r+0x12>
 800d550:	18e4      	adds	r4, r4, r3
 800d552:	0028      	movs	r0, r5
 800d554:	f000 fc50 	bl	800ddf8 <__malloc_lock>
 800d558:	4a1d      	ldr	r2, [pc, #116]	; (800d5d0 <_free_r+0x90>)
 800d55a:	6813      	ldr	r3, [r2, #0]
 800d55c:	2b00      	cmp	r3, #0
 800d55e:	d105      	bne.n	800d56c <_free_r+0x2c>
 800d560:	6063      	str	r3, [r4, #4]
 800d562:	6014      	str	r4, [r2, #0]
 800d564:	0028      	movs	r0, r5
 800d566:	f000 fc4f 	bl	800de08 <__malloc_unlock>
 800d56a:	bd70      	pop	{r4, r5, r6, pc}
 800d56c:	42a3      	cmp	r3, r4
 800d56e:	d908      	bls.n	800d582 <_free_r+0x42>
 800d570:	6820      	ldr	r0, [r4, #0]
 800d572:	1821      	adds	r1, r4, r0
 800d574:	428b      	cmp	r3, r1
 800d576:	d1f3      	bne.n	800d560 <_free_r+0x20>
 800d578:	6819      	ldr	r1, [r3, #0]
 800d57a:	685b      	ldr	r3, [r3, #4]
 800d57c:	1809      	adds	r1, r1, r0
 800d57e:	6021      	str	r1, [r4, #0]
 800d580:	e7ee      	b.n	800d560 <_free_r+0x20>
 800d582:	001a      	movs	r2, r3
 800d584:	685b      	ldr	r3, [r3, #4]
 800d586:	2b00      	cmp	r3, #0
 800d588:	d001      	beq.n	800d58e <_free_r+0x4e>
 800d58a:	42a3      	cmp	r3, r4
 800d58c:	d9f9      	bls.n	800d582 <_free_r+0x42>
 800d58e:	6811      	ldr	r1, [r2, #0]
 800d590:	1850      	adds	r0, r2, r1
 800d592:	42a0      	cmp	r0, r4
 800d594:	d10b      	bne.n	800d5ae <_free_r+0x6e>
 800d596:	6820      	ldr	r0, [r4, #0]
 800d598:	1809      	adds	r1, r1, r0
 800d59a:	1850      	adds	r0, r2, r1
 800d59c:	6011      	str	r1, [r2, #0]
 800d59e:	4283      	cmp	r3, r0
 800d5a0:	d1e0      	bne.n	800d564 <_free_r+0x24>
 800d5a2:	6818      	ldr	r0, [r3, #0]
 800d5a4:	685b      	ldr	r3, [r3, #4]
 800d5a6:	1841      	adds	r1, r0, r1
 800d5a8:	6011      	str	r1, [r2, #0]
 800d5aa:	6053      	str	r3, [r2, #4]
 800d5ac:	e7da      	b.n	800d564 <_free_r+0x24>
 800d5ae:	42a0      	cmp	r0, r4
 800d5b0:	d902      	bls.n	800d5b8 <_free_r+0x78>
 800d5b2:	230c      	movs	r3, #12
 800d5b4:	602b      	str	r3, [r5, #0]
 800d5b6:	e7d5      	b.n	800d564 <_free_r+0x24>
 800d5b8:	6820      	ldr	r0, [r4, #0]
 800d5ba:	1821      	adds	r1, r4, r0
 800d5bc:	428b      	cmp	r3, r1
 800d5be:	d103      	bne.n	800d5c8 <_free_r+0x88>
 800d5c0:	6819      	ldr	r1, [r3, #0]
 800d5c2:	685b      	ldr	r3, [r3, #4]
 800d5c4:	1809      	adds	r1, r1, r0
 800d5c6:	6021      	str	r1, [r4, #0]
 800d5c8:	6063      	str	r3, [r4, #4]
 800d5ca:	6054      	str	r4, [r2, #4]
 800d5cc:	e7ca      	b.n	800d564 <_free_r+0x24>
 800d5ce:	46c0      	nop			; (mov r8, r8)
 800d5d0:	20002a24 	.word	0x20002a24

0800d5d4 <rshift>:
 800d5d4:	0002      	movs	r2, r0
 800d5d6:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d5d8:	6904      	ldr	r4, [r0, #16]
 800d5da:	114b      	asrs	r3, r1, #5
 800d5dc:	b085      	sub	sp, #20
 800d5de:	3214      	adds	r2, #20
 800d5e0:	9302      	str	r3, [sp, #8]
 800d5e2:	114d      	asrs	r5, r1, #5
 800d5e4:	0013      	movs	r3, r2
 800d5e6:	42ac      	cmp	r4, r5
 800d5e8:	dd32      	ble.n	800d650 <rshift+0x7c>
 800d5ea:	261f      	movs	r6, #31
 800d5ec:	000f      	movs	r7, r1
 800d5ee:	114b      	asrs	r3, r1, #5
 800d5f0:	009b      	lsls	r3, r3, #2
 800d5f2:	00a5      	lsls	r5, r4, #2
 800d5f4:	18d3      	adds	r3, r2, r3
 800d5f6:	4037      	ands	r7, r6
 800d5f8:	1955      	adds	r5, r2, r5
 800d5fa:	9300      	str	r3, [sp, #0]
 800d5fc:	9701      	str	r7, [sp, #4]
 800d5fe:	4231      	tst	r1, r6
 800d600:	d10d      	bne.n	800d61e <rshift+0x4a>
 800d602:	0016      	movs	r6, r2
 800d604:	0019      	movs	r1, r3
 800d606:	428d      	cmp	r5, r1
 800d608:	d836      	bhi.n	800d678 <rshift+0xa4>
 800d60a:	9900      	ldr	r1, [sp, #0]
 800d60c:	2300      	movs	r3, #0
 800d60e:	3903      	subs	r1, #3
 800d610:	428d      	cmp	r5, r1
 800d612:	d302      	bcc.n	800d61a <rshift+0x46>
 800d614:	9b02      	ldr	r3, [sp, #8]
 800d616:	1ae4      	subs	r4, r4, r3
 800d618:	00a3      	lsls	r3, r4, #2
 800d61a:	18d3      	adds	r3, r2, r3
 800d61c:	e018      	b.n	800d650 <rshift+0x7c>
 800d61e:	2120      	movs	r1, #32
 800d620:	9e01      	ldr	r6, [sp, #4]
 800d622:	9f01      	ldr	r7, [sp, #4]
 800d624:	1b89      	subs	r1, r1, r6
 800d626:	9e00      	ldr	r6, [sp, #0]
 800d628:	9103      	str	r1, [sp, #12]
 800d62a:	ce02      	ldmia	r6!, {r1}
 800d62c:	4694      	mov	ip, r2
 800d62e:	40f9      	lsrs	r1, r7
 800d630:	42b5      	cmp	r5, r6
 800d632:	d816      	bhi.n	800d662 <rshift+0x8e>
 800d634:	9e00      	ldr	r6, [sp, #0]
 800d636:	2300      	movs	r3, #0
 800d638:	3601      	adds	r6, #1
 800d63a:	42b5      	cmp	r5, r6
 800d63c:	d303      	bcc.n	800d646 <rshift+0x72>
 800d63e:	9b02      	ldr	r3, [sp, #8]
 800d640:	1ae3      	subs	r3, r4, r3
 800d642:	009b      	lsls	r3, r3, #2
 800d644:	3b04      	subs	r3, #4
 800d646:	18d3      	adds	r3, r2, r3
 800d648:	6019      	str	r1, [r3, #0]
 800d64a:	2900      	cmp	r1, #0
 800d64c:	d000      	beq.n	800d650 <rshift+0x7c>
 800d64e:	3304      	adds	r3, #4
 800d650:	1a99      	subs	r1, r3, r2
 800d652:	1089      	asrs	r1, r1, #2
 800d654:	6101      	str	r1, [r0, #16]
 800d656:	4293      	cmp	r3, r2
 800d658:	d101      	bne.n	800d65e <rshift+0x8a>
 800d65a:	2300      	movs	r3, #0
 800d65c:	6143      	str	r3, [r0, #20]
 800d65e:	b005      	add	sp, #20
 800d660:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d662:	6837      	ldr	r7, [r6, #0]
 800d664:	9b03      	ldr	r3, [sp, #12]
 800d666:	409f      	lsls	r7, r3
 800d668:	430f      	orrs	r7, r1
 800d66a:	4661      	mov	r1, ip
 800d66c:	c180      	stmia	r1!, {r7}
 800d66e:	468c      	mov	ip, r1
 800d670:	9b01      	ldr	r3, [sp, #4]
 800d672:	ce02      	ldmia	r6!, {r1}
 800d674:	40d9      	lsrs	r1, r3
 800d676:	e7db      	b.n	800d630 <rshift+0x5c>
 800d678:	c980      	ldmia	r1!, {r7}
 800d67a:	c680      	stmia	r6!, {r7}
 800d67c:	e7c3      	b.n	800d606 <rshift+0x32>

0800d67e <__hexdig_fun>:
 800d67e:	0002      	movs	r2, r0
 800d680:	3a30      	subs	r2, #48	; 0x30
 800d682:	0003      	movs	r3, r0
 800d684:	2a09      	cmp	r2, #9
 800d686:	d802      	bhi.n	800d68e <__hexdig_fun+0x10>
 800d688:	3b20      	subs	r3, #32
 800d68a:	b2d8      	uxtb	r0, r3
 800d68c:	4770      	bx	lr
 800d68e:	0002      	movs	r2, r0
 800d690:	3a61      	subs	r2, #97	; 0x61
 800d692:	2a05      	cmp	r2, #5
 800d694:	d801      	bhi.n	800d69a <__hexdig_fun+0x1c>
 800d696:	3b47      	subs	r3, #71	; 0x47
 800d698:	e7f7      	b.n	800d68a <__hexdig_fun+0xc>
 800d69a:	001a      	movs	r2, r3
 800d69c:	3a41      	subs	r2, #65	; 0x41
 800d69e:	2000      	movs	r0, #0
 800d6a0:	2a05      	cmp	r2, #5
 800d6a2:	d8f3      	bhi.n	800d68c <__hexdig_fun+0xe>
 800d6a4:	3b27      	subs	r3, #39	; 0x27
 800d6a6:	e7f0      	b.n	800d68a <__hexdig_fun+0xc>

0800d6a8 <__gethex>:
 800d6a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d6aa:	b089      	sub	sp, #36	; 0x24
 800d6ac:	9307      	str	r3, [sp, #28]
 800d6ae:	2302      	movs	r3, #2
 800d6b0:	9201      	str	r2, [sp, #4]
 800d6b2:	680a      	ldr	r2, [r1, #0]
 800d6b4:	425b      	negs	r3, r3
 800d6b6:	9003      	str	r0, [sp, #12]
 800d6b8:	9106      	str	r1, [sp, #24]
 800d6ba:	1c96      	adds	r6, r2, #2
 800d6bc:	1a9b      	subs	r3, r3, r2
 800d6be:	199a      	adds	r2, r3, r6
 800d6c0:	9600      	str	r6, [sp, #0]
 800d6c2:	9205      	str	r2, [sp, #20]
 800d6c4:	9a00      	ldr	r2, [sp, #0]
 800d6c6:	3601      	adds	r6, #1
 800d6c8:	7810      	ldrb	r0, [r2, #0]
 800d6ca:	2830      	cmp	r0, #48	; 0x30
 800d6cc:	d0f7      	beq.n	800d6be <__gethex+0x16>
 800d6ce:	f7ff ffd6 	bl	800d67e <__hexdig_fun>
 800d6d2:	2300      	movs	r3, #0
 800d6d4:	001d      	movs	r5, r3
 800d6d6:	9302      	str	r3, [sp, #8]
 800d6d8:	4298      	cmp	r0, r3
 800d6da:	d11d      	bne.n	800d718 <__gethex+0x70>
 800d6dc:	2201      	movs	r2, #1
 800d6de:	49a6      	ldr	r1, [pc, #664]	; (800d978 <__gethex+0x2d0>)
 800d6e0:	9800      	ldr	r0, [sp, #0]
 800d6e2:	f7ff fe33 	bl	800d34c <strncmp>
 800d6e6:	0007      	movs	r7, r0
 800d6e8:	42a8      	cmp	r0, r5
 800d6ea:	d169      	bne.n	800d7c0 <__gethex+0x118>
 800d6ec:	9b00      	ldr	r3, [sp, #0]
 800d6ee:	0034      	movs	r4, r6
 800d6f0:	7858      	ldrb	r0, [r3, #1]
 800d6f2:	f7ff ffc4 	bl	800d67e <__hexdig_fun>
 800d6f6:	2301      	movs	r3, #1
 800d6f8:	9302      	str	r3, [sp, #8]
 800d6fa:	42a8      	cmp	r0, r5
 800d6fc:	d02f      	beq.n	800d75e <__gethex+0xb6>
 800d6fe:	9600      	str	r6, [sp, #0]
 800d700:	9b00      	ldr	r3, [sp, #0]
 800d702:	7818      	ldrb	r0, [r3, #0]
 800d704:	2830      	cmp	r0, #48	; 0x30
 800d706:	d009      	beq.n	800d71c <__gethex+0x74>
 800d708:	f7ff ffb9 	bl	800d67e <__hexdig_fun>
 800d70c:	4242      	negs	r2, r0
 800d70e:	4142      	adcs	r2, r0
 800d710:	2301      	movs	r3, #1
 800d712:	0035      	movs	r5, r6
 800d714:	9202      	str	r2, [sp, #8]
 800d716:	9305      	str	r3, [sp, #20]
 800d718:	9c00      	ldr	r4, [sp, #0]
 800d71a:	e004      	b.n	800d726 <__gethex+0x7e>
 800d71c:	9b00      	ldr	r3, [sp, #0]
 800d71e:	3301      	adds	r3, #1
 800d720:	9300      	str	r3, [sp, #0]
 800d722:	e7ed      	b.n	800d700 <__gethex+0x58>
 800d724:	3401      	adds	r4, #1
 800d726:	7820      	ldrb	r0, [r4, #0]
 800d728:	f7ff ffa9 	bl	800d67e <__hexdig_fun>
 800d72c:	1e07      	subs	r7, r0, #0
 800d72e:	d1f9      	bne.n	800d724 <__gethex+0x7c>
 800d730:	2201      	movs	r2, #1
 800d732:	0020      	movs	r0, r4
 800d734:	4990      	ldr	r1, [pc, #576]	; (800d978 <__gethex+0x2d0>)
 800d736:	f7ff fe09 	bl	800d34c <strncmp>
 800d73a:	2800      	cmp	r0, #0
 800d73c:	d10d      	bne.n	800d75a <__gethex+0xb2>
 800d73e:	2d00      	cmp	r5, #0
 800d740:	d106      	bne.n	800d750 <__gethex+0xa8>
 800d742:	3401      	adds	r4, #1
 800d744:	0025      	movs	r5, r4
 800d746:	7820      	ldrb	r0, [r4, #0]
 800d748:	f7ff ff99 	bl	800d67e <__hexdig_fun>
 800d74c:	2800      	cmp	r0, #0
 800d74e:	d102      	bne.n	800d756 <__gethex+0xae>
 800d750:	1b2d      	subs	r5, r5, r4
 800d752:	00af      	lsls	r7, r5, #2
 800d754:	e003      	b.n	800d75e <__gethex+0xb6>
 800d756:	3401      	adds	r4, #1
 800d758:	e7f5      	b.n	800d746 <__gethex+0x9e>
 800d75a:	2d00      	cmp	r5, #0
 800d75c:	d1f8      	bne.n	800d750 <__gethex+0xa8>
 800d75e:	2220      	movs	r2, #32
 800d760:	7823      	ldrb	r3, [r4, #0]
 800d762:	0026      	movs	r6, r4
 800d764:	4393      	bics	r3, r2
 800d766:	2b50      	cmp	r3, #80	; 0x50
 800d768:	d11d      	bne.n	800d7a6 <__gethex+0xfe>
 800d76a:	7863      	ldrb	r3, [r4, #1]
 800d76c:	2b2b      	cmp	r3, #43	; 0x2b
 800d76e:	d02c      	beq.n	800d7ca <__gethex+0x122>
 800d770:	2b2d      	cmp	r3, #45	; 0x2d
 800d772:	d02e      	beq.n	800d7d2 <__gethex+0x12a>
 800d774:	2300      	movs	r3, #0
 800d776:	1c66      	adds	r6, r4, #1
 800d778:	9304      	str	r3, [sp, #16]
 800d77a:	7830      	ldrb	r0, [r6, #0]
 800d77c:	f7ff ff7f 	bl	800d67e <__hexdig_fun>
 800d780:	1e43      	subs	r3, r0, #1
 800d782:	b2db      	uxtb	r3, r3
 800d784:	2b18      	cmp	r3, #24
 800d786:	d82b      	bhi.n	800d7e0 <__gethex+0x138>
 800d788:	3810      	subs	r0, #16
 800d78a:	0005      	movs	r5, r0
 800d78c:	7870      	ldrb	r0, [r6, #1]
 800d78e:	f7ff ff76 	bl	800d67e <__hexdig_fun>
 800d792:	1e43      	subs	r3, r0, #1
 800d794:	b2db      	uxtb	r3, r3
 800d796:	3601      	adds	r6, #1
 800d798:	2b18      	cmp	r3, #24
 800d79a:	d91c      	bls.n	800d7d6 <__gethex+0x12e>
 800d79c:	9b04      	ldr	r3, [sp, #16]
 800d79e:	2b00      	cmp	r3, #0
 800d7a0:	d000      	beq.n	800d7a4 <__gethex+0xfc>
 800d7a2:	426d      	negs	r5, r5
 800d7a4:	197f      	adds	r7, r7, r5
 800d7a6:	9b06      	ldr	r3, [sp, #24]
 800d7a8:	601e      	str	r6, [r3, #0]
 800d7aa:	9b02      	ldr	r3, [sp, #8]
 800d7ac:	2b00      	cmp	r3, #0
 800d7ae:	d019      	beq.n	800d7e4 <__gethex+0x13c>
 800d7b0:	2600      	movs	r6, #0
 800d7b2:	9b05      	ldr	r3, [sp, #20]
 800d7b4:	42b3      	cmp	r3, r6
 800d7b6:	d100      	bne.n	800d7ba <__gethex+0x112>
 800d7b8:	3606      	adds	r6, #6
 800d7ba:	0030      	movs	r0, r6
 800d7bc:	b009      	add	sp, #36	; 0x24
 800d7be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d7c0:	2301      	movs	r3, #1
 800d7c2:	2700      	movs	r7, #0
 800d7c4:	9c00      	ldr	r4, [sp, #0]
 800d7c6:	9302      	str	r3, [sp, #8]
 800d7c8:	e7c9      	b.n	800d75e <__gethex+0xb6>
 800d7ca:	2300      	movs	r3, #0
 800d7cc:	9304      	str	r3, [sp, #16]
 800d7ce:	1ca6      	adds	r6, r4, #2
 800d7d0:	e7d3      	b.n	800d77a <__gethex+0xd2>
 800d7d2:	2301      	movs	r3, #1
 800d7d4:	e7fa      	b.n	800d7cc <__gethex+0x124>
 800d7d6:	230a      	movs	r3, #10
 800d7d8:	435d      	muls	r5, r3
 800d7da:	182d      	adds	r5, r5, r0
 800d7dc:	3d10      	subs	r5, #16
 800d7de:	e7d5      	b.n	800d78c <__gethex+0xe4>
 800d7e0:	0026      	movs	r6, r4
 800d7e2:	e7e0      	b.n	800d7a6 <__gethex+0xfe>
 800d7e4:	9b00      	ldr	r3, [sp, #0]
 800d7e6:	9902      	ldr	r1, [sp, #8]
 800d7e8:	1ae3      	subs	r3, r4, r3
 800d7ea:	3b01      	subs	r3, #1
 800d7ec:	2b07      	cmp	r3, #7
 800d7ee:	dc0a      	bgt.n	800d806 <__gethex+0x15e>
 800d7f0:	9803      	ldr	r0, [sp, #12]
 800d7f2:	f000 fb11 	bl	800de18 <_Balloc>
 800d7f6:	1e05      	subs	r5, r0, #0
 800d7f8:	d108      	bne.n	800d80c <__gethex+0x164>
 800d7fa:	002a      	movs	r2, r5
 800d7fc:	21e4      	movs	r1, #228	; 0xe4
 800d7fe:	4b5f      	ldr	r3, [pc, #380]	; (800d97c <__gethex+0x2d4>)
 800d800:	485f      	ldr	r0, [pc, #380]	; (800d980 <__gethex+0x2d8>)
 800d802:	f001 f899 	bl	800e938 <__assert_func>
 800d806:	3101      	adds	r1, #1
 800d808:	105b      	asrs	r3, r3, #1
 800d80a:	e7ef      	b.n	800d7ec <__gethex+0x144>
 800d80c:	0003      	movs	r3, r0
 800d80e:	3314      	adds	r3, #20
 800d810:	9302      	str	r3, [sp, #8]
 800d812:	9305      	str	r3, [sp, #20]
 800d814:	2300      	movs	r3, #0
 800d816:	001e      	movs	r6, r3
 800d818:	9304      	str	r3, [sp, #16]
 800d81a:	9b00      	ldr	r3, [sp, #0]
 800d81c:	42a3      	cmp	r3, r4
 800d81e:	d33f      	bcc.n	800d8a0 <__gethex+0x1f8>
 800d820:	9c05      	ldr	r4, [sp, #20]
 800d822:	9b02      	ldr	r3, [sp, #8]
 800d824:	c440      	stmia	r4!, {r6}
 800d826:	1ae4      	subs	r4, r4, r3
 800d828:	10a4      	asrs	r4, r4, #2
 800d82a:	0030      	movs	r0, r6
 800d82c:	612c      	str	r4, [r5, #16]
 800d82e:	f000 fbeb 	bl	800e008 <__hi0bits>
 800d832:	9b01      	ldr	r3, [sp, #4]
 800d834:	0164      	lsls	r4, r4, #5
 800d836:	681b      	ldr	r3, [r3, #0]
 800d838:	1a26      	subs	r6, r4, r0
 800d83a:	9300      	str	r3, [sp, #0]
 800d83c:	429e      	cmp	r6, r3
 800d83e:	dd51      	ble.n	800d8e4 <__gethex+0x23c>
 800d840:	1af6      	subs	r6, r6, r3
 800d842:	0031      	movs	r1, r6
 800d844:	0028      	movs	r0, r5
 800d846:	f000 ff7f 	bl	800e748 <__any_on>
 800d84a:	1e04      	subs	r4, r0, #0
 800d84c:	d016      	beq.n	800d87c <__gethex+0x1d4>
 800d84e:	2401      	movs	r4, #1
 800d850:	231f      	movs	r3, #31
 800d852:	0020      	movs	r0, r4
 800d854:	1e72      	subs	r2, r6, #1
 800d856:	4013      	ands	r3, r2
 800d858:	4098      	lsls	r0, r3
 800d85a:	0003      	movs	r3, r0
 800d85c:	1151      	asrs	r1, r2, #5
 800d85e:	9802      	ldr	r0, [sp, #8]
 800d860:	0089      	lsls	r1, r1, #2
 800d862:	5809      	ldr	r1, [r1, r0]
 800d864:	4219      	tst	r1, r3
 800d866:	d009      	beq.n	800d87c <__gethex+0x1d4>
 800d868:	42a2      	cmp	r2, r4
 800d86a:	dd06      	ble.n	800d87a <__gethex+0x1d2>
 800d86c:	0028      	movs	r0, r5
 800d86e:	1eb1      	subs	r1, r6, #2
 800d870:	f000 ff6a 	bl	800e748 <__any_on>
 800d874:	3402      	adds	r4, #2
 800d876:	2800      	cmp	r0, #0
 800d878:	d100      	bne.n	800d87c <__gethex+0x1d4>
 800d87a:	2402      	movs	r4, #2
 800d87c:	0031      	movs	r1, r6
 800d87e:	0028      	movs	r0, r5
 800d880:	f7ff fea8 	bl	800d5d4 <rshift>
 800d884:	19bf      	adds	r7, r7, r6
 800d886:	9b01      	ldr	r3, [sp, #4]
 800d888:	689b      	ldr	r3, [r3, #8]
 800d88a:	42bb      	cmp	r3, r7
 800d88c:	da3a      	bge.n	800d904 <__gethex+0x25c>
 800d88e:	0029      	movs	r1, r5
 800d890:	9803      	ldr	r0, [sp, #12]
 800d892:	f000 fb05 	bl	800dea0 <_Bfree>
 800d896:	2300      	movs	r3, #0
 800d898:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d89a:	26a3      	movs	r6, #163	; 0xa3
 800d89c:	6013      	str	r3, [r2, #0]
 800d89e:	e78c      	b.n	800d7ba <__gethex+0x112>
 800d8a0:	3c01      	subs	r4, #1
 800d8a2:	7823      	ldrb	r3, [r4, #0]
 800d8a4:	2b2e      	cmp	r3, #46	; 0x2e
 800d8a6:	d012      	beq.n	800d8ce <__gethex+0x226>
 800d8a8:	9b04      	ldr	r3, [sp, #16]
 800d8aa:	2b20      	cmp	r3, #32
 800d8ac:	d104      	bne.n	800d8b8 <__gethex+0x210>
 800d8ae:	9b05      	ldr	r3, [sp, #20]
 800d8b0:	c340      	stmia	r3!, {r6}
 800d8b2:	2600      	movs	r6, #0
 800d8b4:	9305      	str	r3, [sp, #20]
 800d8b6:	9604      	str	r6, [sp, #16]
 800d8b8:	7820      	ldrb	r0, [r4, #0]
 800d8ba:	f7ff fee0 	bl	800d67e <__hexdig_fun>
 800d8be:	230f      	movs	r3, #15
 800d8c0:	4018      	ands	r0, r3
 800d8c2:	9b04      	ldr	r3, [sp, #16]
 800d8c4:	4098      	lsls	r0, r3
 800d8c6:	3304      	adds	r3, #4
 800d8c8:	4306      	orrs	r6, r0
 800d8ca:	9304      	str	r3, [sp, #16]
 800d8cc:	e7a5      	b.n	800d81a <__gethex+0x172>
 800d8ce:	9b00      	ldr	r3, [sp, #0]
 800d8d0:	42a3      	cmp	r3, r4
 800d8d2:	d8e9      	bhi.n	800d8a8 <__gethex+0x200>
 800d8d4:	2201      	movs	r2, #1
 800d8d6:	0020      	movs	r0, r4
 800d8d8:	4927      	ldr	r1, [pc, #156]	; (800d978 <__gethex+0x2d0>)
 800d8da:	f7ff fd37 	bl	800d34c <strncmp>
 800d8de:	2800      	cmp	r0, #0
 800d8e0:	d1e2      	bne.n	800d8a8 <__gethex+0x200>
 800d8e2:	e79a      	b.n	800d81a <__gethex+0x172>
 800d8e4:	9b00      	ldr	r3, [sp, #0]
 800d8e6:	2400      	movs	r4, #0
 800d8e8:	429e      	cmp	r6, r3
 800d8ea:	dacc      	bge.n	800d886 <__gethex+0x1de>
 800d8ec:	1b9e      	subs	r6, r3, r6
 800d8ee:	0029      	movs	r1, r5
 800d8f0:	0032      	movs	r2, r6
 800d8f2:	9803      	ldr	r0, [sp, #12]
 800d8f4:	f000 fcf4 	bl	800e2e0 <__lshift>
 800d8f8:	0003      	movs	r3, r0
 800d8fa:	3314      	adds	r3, #20
 800d8fc:	0005      	movs	r5, r0
 800d8fe:	1bbf      	subs	r7, r7, r6
 800d900:	9302      	str	r3, [sp, #8]
 800d902:	e7c0      	b.n	800d886 <__gethex+0x1de>
 800d904:	9b01      	ldr	r3, [sp, #4]
 800d906:	685e      	ldr	r6, [r3, #4]
 800d908:	42be      	cmp	r6, r7
 800d90a:	dd70      	ble.n	800d9ee <__gethex+0x346>
 800d90c:	9b00      	ldr	r3, [sp, #0]
 800d90e:	1bf6      	subs	r6, r6, r7
 800d910:	42b3      	cmp	r3, r6
 800d912:	dc37      	bgt.n	800d984 <__gethex+0x2dc>
 800d914:	9b01      	ldr	r3, [sp, #4]
 800d916:	68db      	ldr	r3, [r3, #12]
 800d918:	2b02      	cmp	r3, #2
 800d91a:	d024      	beq.n	800d966 <__gethex+0x2be>
 800d91c:	2b03      	cmp	r3, #3
 800d91e:	d026      	beq.n	800d96e <__gethex+0x2c6>
 800d920:	2b01      	cmp	r3, #1
 800d922:	d117      	bne.n	800d954 <__gethex+0x2ac>
 800d924:	9b00      	ldr	r3, [sp, #0]
 800d926:	42b3      	cmp	r3, r6
 800d928:	d114      	bne.n	800d954 <__gethex+0x2ac>
 800d92a:	2b01      	cmp	r3, #1
 800d92c:	d10b      	bne.n	800d946 <__gethex+0x29e>
 800d92e:	9b01      	ldr	r3, [sp, #4]
 800d930:	9a07      	ldr	r2, [sp, #28]
 800d932:	685b      	ldr	r3, [r3, #4]
 800d934:	2662      	movs	r6, #98	; 0x62
 800d936:	6013      	str	r3, [r2, #0]
 800d938:	2301      	movs	r3, #1
 800d93a:	9a02      	ldr	r2, [sp, #8]
 800d93c:	612b      	str	r3, [r5, #16]
 800d93e:	6013      	str	r3, [r2, #0]
 800d940:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d942:	601d      	str	r5, [r3, #0]
 800d944:	e739      	b.n	800d7ba <__gethex+0x112>
 800d946:	9900      	ldr	r1, [sp, #0]
 800d948:	0028      	movs	r0, r5
 800d94a:	3901      	subs	r1, #1
 800d94c:	f000 fefc 	bl	800e748 <__any_on>
 800d950:	2800      	cmp	r0, #0
 800d952:	d1ec      	bne.n	800d92e <__gethex+0x286>
 800d954:	0029      	movs	r1, r5
 800d956:	9803      	ldr	r0, [sp, #12]
 800d958:	f000 faa2 	bl	800dea0 <_Bfree>
 800d95c:	2300      	movs	r3, #0
 800d95e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d960:	2650      	movs	r6, #80	; 0x50
 800d962:	6013      	str	r3, [r2, #0]
 800d964:	e729      	b.n	800d7ba <__gethex+0x112>
 800d966:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d968:	2b00      	cmp	r3, #0
 800d96a:	d1f3      	bne.n	800d954 <__gethex+0x2ac>
 800d96c:	e7df      	b.n	800d92e <__gethex+0x286>
 800d96e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d970:	2b00      	cmp	r3, #0
 800d972:	d1dc      	bne.n	800d92e <__gethex+0x286>
 800d974:	e7ee      	b.n	800d954 <__gethex+0x2ac>
 800d976:	46c0      	nop			; (mov r8, r8)
 800d978:	0800f5dc 	.word	0x0800f5dc
 800d97c:	0800f648 	.word	0x0800f648
 800d980:	0800f659 	.word	0x0800f659
 800d984:	1e77      	subs	r7, r6, #1
 800d986:	2c00      	cmp	r4, #0
 800d988:	d12f      	bne.n	800d9ea <__gethex+0x342>
 800d98a:	2f00      	cmp	r7, #0
 800d98c:	d004      	beq.n	800d998 <__gethex+0x2f0>
 800d98e:	0039      	movs	r1, r7
 800d990:	0028      	movs	r0, r5
 800d992:	f000 fed9 	bl	800e748 <__any_on>
 800d996:	0004      	movs	r4, r0
 800d998:	231f      	movs	r3, #31
 800d99a:	117a      	asrs	r2, r7, #5
 800d99c:	401f      	ands	r7, r3
 800d99e:	3b1e      	subs	r3, #30
 800d9a0:	40bb      	lsls	r3, r7
 800d9a2:	9902      	ldr	r1, [sp, #8]
 800d9a4:	0092      	lsls	r2, r2, #2
 800d9a6:	5852      	ldr	r2, [r2, r1]
 800d9a8:	421a      	tst	r2, r3
 800d9aa:	d001      	beq.n	800d9b0 <__gethex+0x308>
 800d9ac:	2302      	movs	r3, #2
 800d9ae:	431c      	orrs	r4, r3
 800d9b0:	9b00      	ldr	r3, [sp, #0]
 800d9b2:	0031      	movs	r1, r6
 800d9b4:	1b9b      	subs	r3, r3, r6
 800d9b6:	2602      	movs	r6, #2
 800d9b8:	0028      	movs	r0, r5
 800d9ba:	9300      	str	r3, [sp, #0]
 800d9bc:	f7ff fe0a 	bl	800d5d4 <rshift>
 800d9c0:	9b01      	ldr	r3, [sp, #4]
 800d9c2:	685f      	ldr	r7, [r3, #4]
 800d9c4:	2c00      	cmp	r4, #0
 800d9c6:	d041      	beq.n	800da4c <__gethex+0x3a4>
 800d9c8:	9b01      	ldr	r3, [sp, #4]
 800d9ca:	68db      	ldr	r3, [r3, #12]
 800d9cc:	2b02      	cmp	r3, #2
 800d9ce:	d010      	beq.n	800d9f2 <__gethex+0x34a>
 800d9d0:	2b03      	cmp	r3, #3
 800d9d2:	d012      	beq.n	800d9fa <__gethex+0x352>
 800d9d4:	2b01      	cmp	r3, #1
 800d9d6:	d106      	bne.n	800d9e6 <__gethex+0x33e>
 800d9d8:	07a2      	lsls	r2, r4, #30
 800d9da:	d504      	bpl.n	800d9e6 <__gethex+0x33e>
 800d9dc:	9a02      	ldr	r2, [sp, #8]
 800d9de:	6812      	ldr	r2, [r2, #0]
 800d9e0:	4314      	orrs	r4, r2
 800d9e2:	421c      	tst	r4, r3
 800d9e4:	d10c      	bne.n	800da00 <__gethex+0x358>
 800d9e6:	2310      	movs	r3, #16
 800d9e8:	e02f      	b.n	800da4a <__gethex+0x3a2>
 800d9ea:	2401      	movs	r4, #1
 800d9ec:	e7d4      	b.n	800d998 <__gethex+0x2f0>
 800d9ee:	2601      	movs	r6, #1
 800d9f0:	e7e8      	b.n	800d9c4 <__gethex+0x31c>
 800d9f2:	2301      	movs	r3, #1
 800d9f4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800d9f6:	1a9b      	subs	r3, r3, r2
 800d9f8:	930f      	str	r3, [sp, #60]	; 0x3c
 800d9fa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d9fc:	2b00      	cmp	r3, #0
 800d9fe:	d0f2      	beq.n	800d9e6 <__gethex+0x33e>
 800da00:	692b      	ldr	r3, [r5, #16]
 800da02:	2000      	movs	r0, #0
 800da04:	9302      	str	r3, [sp, #8]
 800da06:	009b      	lsls	r3, r3, #2
 800da08:	9304      	str	r3, [sp, #16]
 800da0a:	002b      	movs	r3, r5
 800da0c:	9a04      	ldr	r2, [sp, #16]
 800da0e:	3314      	adds	r3, #20
 800da10:	1899      	adds	r1, r3, r2
 800da12:	681a      	ldr	r2, [r3, #0]
 800da14:	1c54      	adds	r4, r2, #1
 800da16:	d01e      	beq.n	800da56 <__gethex+0x3ae>
 800da18:	3201      	adds	r2, #1
 800da1a:	601a      	str	r2, [r3, #0]
 800da1c:	002b      	movs	r3, r5
 800da1e:	3314      	adds	r3, #20
 800da20:	2e02      	cmp	r6, #2
 800da22:	d141      	bne.n	800daa8 <__gethex+0x400>
 800da24:	9a01      	ldr	r2, [sp, #4]
 800da26:	9900      	ldr	r1, [sp, #0]
 800da28:	6812      	ldr	r2, [r2, #0]
 800da2a:	3a01      	subs	r2, #1
 800da2c:	428a      	cmp	r2, r1
 800da2e:	d10b      	bne.n	800da48 <__gethex+0x3a0>
 800da30:	221f      	movs	r2, #31
 800da32:	9800      	ldr	r0, [sp, #0]
 800da34:	1149      	asrs	r1, r1, #5
 800da36:	4002      	ands	r2, r0
 800da38:	2001      	movs	r0, #1
 800da3a:	0004      	movs	r4, r0
 800da3c:	4094      	lsls	r4, r2
 800da3e:	0089      	lsls	r1, r1, #2
 800da40:	58cb      	ldr	r3, [r1, r3]
 800da42:	4223      	tst	r3, r4
 800da44:	d000      	beq.n	800da48 <__gethex+0x3a0>
 800da46:	2601      	movs	r6, #1
 800da48:	2320      	movs	r3, #32
 800da4a:	431e      	orrs	r6, r3
 800da4c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800da4e:	601d      	str	r5, [r3, #0]
 800da50:	9b07      	ldr	r3, [sp, #28]
 800da52:	601f      	str	r7, [r3, #0]
 800da54:	e6b1      	b.n	800d7ba <__gethex+0x112>
 800da56:	c301      	stmia	r3!, {r0}
 800da58:	4299      	cmp	r1, r3
 800da5a:	d8da      	bhi.n	800da12 <__gethex+0x36a>
 800da5c:	68ab      	ldr	r3, [r5, #8]
 800da5e:	9a02      	ldr	r2, [sp, #8]
 800da60:	429a      	cmp	r2, r3
 800da62:	db18      	blt.n	800da96 <__gethex+0x3ee>
 800da64:	6869      	ldr	r1, [r5, #4]
 800da66:	9803      	ldr	r0, [sp, #12]
 800da68:	3101      	adds	r1, #1
 800da6a:	f000 f9d5 	bl	800de18 <_Balloc>
 800da6e:	1e04      	subs	r4, r0, #0
 800da70:	d104      	bne.n	800da7c <__gethex+0x3d4>
 800da72:	0022      	movs	r2, r4
 800da74:	2184      	movs	r1, #132	; 0x84
 800da76:	4b1c      	ldr	r3, [pc, #112]	; (800dae8 <__gethex+0x440>)
 800da78:	481c      	ldr	r0, [pc, #112]	; (800daec <__gethex+0x444>)
 800da7a:	e6c2      	b.n	800d802 <__gethex+0x15a>
 800da7c:	0029      	movs	r1, r5
 800da7e:	692a      	ldr	r2, [r5, #16]
 800da80:	310c      	adds	r1, #12
 800da82:	3202      	adds	r2, #2
 800da84:	0092      	lsls	r2, r2, #2
 800da86:	300c      	adds	r0, #12
 800da88:	f7ff fd4b 	bl	800d522 <memcpy>
 800da8c:	0029      	movs	r1, r5
 800da8e:	9803      	ldr	r0, [sp, #12]
 800da90:	f000 fa06 	bl	800dea0 <_Bfree>
 800da94:	0025      	movs	r5, r4
 800da96:	692b      	ldr	r3, [r5, #16]
 800da98:	1c5a      	adds	r2, r3, #1
 800da9a:	612a      	str	r2, [r5, #16]
 800da9c:	2201      	movs	r2, #1
 800da9e:	3304      	adds	r3, #4
 800daa0:	009b      	lsls	r3, r3, #2
 800daa2:	18eb      	adds	r3, r5, r3
 800daa4:	605a      	str	r2, [r3, #4]
 800daa6:	e7b9      	b.n	800da1c <__gethex+0x374>
 800daa8:	692a      	ldr	r2, [r5, #16]
 800daaa:	9902      	ldr	r1, [sp, #8]
 800daac:	428a      	cmp	r2, r1
 800daae:	dd09      	ble.n	800dac4 <__gethex+0x41c>
 800dab0:	2101      	movs	r1, #1
 800dab2:	0028      	movs	r0, r5
 800dab4:	f7ff fd8e 	bl	800d5d4 <rshift>
 800dab8:	9b01      	ldr	r3, [sp, #4]
 800daba:	3701      	adds	r7, #1
 800dabc:	689b      	ldr	r3, [r3, #8]
 800dabe:	42bb      	cmp	r3, r7
 800dac0:	dac1      	bge.n	800da46 <__gethex+0x39e>
 800dac2:	e6e4      	b.n	800d88e <__gethex+0x1e6>
 800dac4:	221f      	movs	r2, #31
 800dac6:	9c00      	ldr	r4, [sp, #0]
 800dac8:	9900      	ldr	r1, [sp, #0]
 800daca:	2601      	movs	r6, #1
 800dacc:	4014      	ands	r4, r2
 800dace:	4211      	tst	r1, r2
 800dad0:	d0ba      	beq.n	800da48 <__gethex+0x3a0>
 800dad2:	9a04      	ldr	r2, [sp, #16]
 800dad4:	189b      	adds	r3, r3, r2
 800dad6:	3b04      	subs	r3, #4
 800dad8:	6818      	ldr	r0, [r3, #0]
 800dada:	f000 fa95 	bl	800e008 <__hi0bits>
 800dade:	2320      	movs	r3, #32
 800dae0:	1b1b      	subs	r3, r3, r4
 800dae2:	4298      	cmp	r0, r3
 800dae4:	dbe4      	blt.n	800dab0 <__gethex+0x408>
 800dae6:	e7af      	b.n	800da48 <__gethex+0x3a0>
 800dae8:	0800f648 	.word	0x0800f648
 800daec:	0800f659 	.word	0x0800f659

0800daf0 <L_shift>:
 800daf0:	2308      	movs	r3, #8
 800daf2:	b570      	push	{r4, r5, r6, lr}
 800daf4:	2520      	movs	r5, #32
 800daf6:	1a9a      	subs	r2, r3, r2
 800daf8:	0092      	lsls	r2, r2, #2
 800dafa:	1aad      	subs	r5, r5, r2
 800dafc:	6843      	ldr	r3, [r0, #4]
 800dafe:	6804      	ldr	r4, [r0, #0]
 800db00:	001e      	movs	r6, r3
 800db02:	40ae      	lsls	r6, r5
 800db04:	40d3      	lsrs	r3, r2
 800db06:	4334      	orrs	r4, r6
 800db08:	6004      	str	r4, [r0, #0]
 800db0a:	6043      	str	r3, [r0, #4]
 800db0c:	3004      	adds	r0, #4
 800db0e:	4288      	cmp	r0, r1
 800db10:	d3f4      	bcc.n	800dafc <L_shift+0xc>
 800db12:	bd70      	pop	{r4, r5, r6, pc}

0800db14 <__match>:
 800db14:	b530      	push	{r4, r5, lr}
 800db16:	6803      	ldr	r3, [r0, #0]
 800db18:	780c      	ldrb	r4, [r1, #0]
 800db1a:	3301      	adds	r3, #1
 800db1c:	2c00      	cmp	r4, #0
 800db1e:	d102      	bne.n	800db26 <__match+0x12>
 800db20:	6003      	str	r3, [r0, #0]
 800db22:	2001      	movs	r0, #1
 800db24:	bd30      	pop	{r4, r5, pc}
 800db26:	781a      	ldrb	r2, [r3, #0]
 800db28:	0015      	movs	r5, r2
 800db2a:	3d41      	subs	r5, #65	; 0x41
 800db2c:	2d19      	cmp	r5, #25
 800db2e:	d800      	bhi.n	800db32 <__match+0x1e>
 800db30:	3220      	adds	r2, #32
 800db32:	3101      	adds	r1, #1
 800db34:	42a2      	cmp	r2, r4
 800db36:	d0ef      	beq.n	800db18 <__match+0x4>
 800db38:	2000      	movs	r0, #0
 800db3a:	e7f3      	b.n	800db24 <__match+0x10>

0800db3c <__hexnan>:
 800db3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800db3e:	680b      	ldr	r3, [r1, #0]
 800db40:	b08b      	sub	sp, #44	; 0x2c
 800db42:	9201      	str	r2, [sp, #4]
 800db44:	9901      	ldr	r1, [sp, #4]
 800db46:	115a      	asrs	r2, r3, #5
 800db48:	0092      	lsls	r2, r2, #2
 800db4a:	188a      	adds	r2, r1, r2
 800db4c:	9202      	str	r2, [sp, #8]
 800db4e:	0019      	movs	r1, r3
 800db50:	221f      	movs	r2, #31
 800db52:	4011      	ands	r1, r2
 800db54:	9008      	str	r0, [sp, #32]
 800db56:	9106      	str	r1, [sp, #24]
 800db58:	4213      	tst	r3, r2
 800db5a:	d002      	beq.n	800db62 <__hexnan+0x26>
 800db5c:	9b02      	ldr	r3, [sp, #8]
 800db5e:	3304      	adds	r3, #4
 800db60:	9302      	str	r3, [sp, #8]
 800db62:	9b02      	ldr	r3, [sp, #8]
 800db64:	2500      	movs	r5, #0
 800db66:	1f1f      	subs	r7, r3, #4
 800db68:	003e      	movs	r6, r7
 800db6a:	003c      	movs	r4, r7
 800db6c:	9b08      	ldr	r3, [sp, #32]
 800db6e:	603d      	str	r5, [r7, #0]
 800db70:	681b      	ldr	r3, [r3, #0]
 800db72:	9507      	str	r5, [sp, #28]
 800db74:	9305      	str	r3, [sp, #20]
 800db76:	9503      	str	r5, [sp, #12]
 800db78:	9b05      	ldr	r3, [sp, #20]
 800db7a:	3301      	adds	r3, #1
 800db7c:	9309      	str	r3, [sp, #36]	; 0x24
 800db7e:	9b05      	ldr	r3, [sp, #20]
 800db80:	785b      	ldrb	r3, [r3, #1]
 800db82:	9304      	str	r3, [sp, #16]
 800db84:	2b00      	cmp	r3, #0
 800db86:	d028      	beq.n	800dbda <__hexnan+0x9e>
 800db88:	9804      	ldr	r0, [sp, #16]
 800db8a:	f7ff fd78 	bl	800d67e <__hexdig_fun>
 800db8e:	2800      	cmp	r0, #0
 800db90:	d154      	bne.n	800dc3c <__hexnan+0x100>
 800db92:	9b04      	ldr	r3, [sp, #16]
 800db94:	2b20      	cmp	r3, #32
 800db96:	d819      	bhi.n	800dbcc <__hexnan+0x90>
 800db98:	9b03      	ldr	r3, [sp, #12]
 800db9a:	9a07      	ldr	r2, [sp, #28]
 800db9c:	4293      	cmp	r3, r2
 800db9e:	dd12      	ble.n	800dbc6 <__hexnan+0x8a>
 800dba0:	42b4      	cmp	r4, r6
 800dba2:	d206      	bcs.n	800dbb2 <__hexnan+0x76>
 800dba4:	2d07      	cmp	r5, #7
 800dba6:	dc04      	bgt.n	800dbb2 <__hexnan+0x76>
 800dba8:	002a      	movs	r2, r5
 800dbaa:	0031      	movs	r1, r6
 800dbac:	0020      	movs	r0, r4
 800dbae:	f7ff ff9f 	bl	800daf0 <L_shift>
 800dbb2:	9b01      	ldr	r3, [sp, #4]
 800dbb4:	2508      	movs	r5, #8
 800dbb6:	429c      	cmp	r4, r3
 800dbb8:	d905      	bls.n	800dbc6 <__hexnan+0x8a>
 800dbba:	1f26      	subs	r6, r4, #4
 800dbbc:	2500      	movs	r5, #0
 800dbbe:	0034      	movs	r4, r6
 800dbc0:	9b03      	ldr	r3, [sp, #12]
 800dbc2:	6035      	str	r5, [r6, #0]
 800dbc4:	9307      	str	r3, [sp, #28]
 800dbc6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dbc8:	9305      	str	r3, [sp, #20]
 800dbca:	e7d5      	b.n	800db78 <__hexnan+0x3c>
 800dbcc:	9b04      	ldr	r3, [sp, #16]
 800dbce:	2b29      	cmp	r3, #41	; 0x29
 800dbd0:	d159      	bne.n	800dc86 <__hexnan+0x14a>
 800dbd2:	9b05      	ldr	r3, [sp, #20]
 800dbd4:	9a08      	ldr	r2, [sp, #32]
 800dbd6:	3302      	adds	r3, #2
 800dbd8:	6013      	str	r3, [r2, #0]
 800dbda:	9b03      	ldr	r3, [sp, #12]
 800dbdc:	2b00      	cmp	r3, #0
 800dbde:	d052      	beq.n	800dc86 <__hexnan+0x14a>
 800dbe0:	42b4      	cmp	r4, r6
 800dbe2:	d206      	bcs.n	800dbf2 <__hexnan+0xb6>
 800dbe4:	2d07      	cmp	r5, #7
 800dbe6:	dc04      	bgt.n	800dbf2 <__hexnan+0xb6>
 800dbe8:	002a      	movs	r2, r5
 800dbea:	0031      	movs	r1, r6
 800dbec:	0020      	movs	r0, r4
 800dbee:	f7ff ff7f 	bl	800daf0 <L_shift>
 800dbf2:	9b01      	ldr	r3, [sp, #4]
 800dbf4:	429c      	cmp	r4, r3
 800dbf6:	d935      	bls.n	800dc64 <__hexnan+0x128>
 800dbf8:	001a      	movs	r2, r3
 800dbfa:	0023      	movs	r3, r4
 800dbfc:	cb02      	ldmia	r3!, {r1}
 800dbfe:	c202      	stmia	r2!, {r1}
 800dc00:	429f      	cmp	r7, r3
 800dc02:	d2fb      	bcs.n	800dbfc <__hexnan+0xc0>
 800dc04:	9b02      	ldr	r3, [sp, #8]
 800dc06:	1c62      	adds	r2, r4, #1
 800dc08:	1ed9      	subs	r1, r3, #3
 800dc0a:	2304      	movs	r3, #4
 800dc0c:	4291      	cmp	r1, r2
 800dc0e:	d305      	bcc.n	800dc1c <__hexnan+0xe0>
 800dc10:	9b02      	ldr	r3, [sp, #8]
 800dc12:	3b04      	subs	r3, #4
 800dc14:	1b1b      	subs	r3, r3, r4
 800dc16:	089b      	lsrs	r3, r3, #2
 800dc18:	3301      	adds	r3, #1
 800dc1a:	009b      	lsls	r3, r3, #2
 800dc1c:	9a01      	ldr	r2, [sp, #4]
 800dc1e:	18d3      	adds	r3, r2, r3
 800dc20:	2200      	movs	r2, #0
 800dc22:	c304      	stmia	r3!, {r2}
 800dc24:	429f      	cmp	r7, r3
 800dc26:	d2fc      	bcs.n	800dc22 <__hexnan+0xe6>
 800dc28:	683b      	ldr	r3, [r7, #0]
 800dc2a:	2b00      	cmp	r3, #0
 800dc2c:	d104      	bne.n	800dc38 <__hexnan+0xfc>
 800dc2e:	9b01      	ldr	r3, [sp, #4]
 800dc30:	429f      	cmp	r7, r3
 800dc32:	d126      	bne.n	800dc82 <__hexnan+0x146>
 800dc34:	2301      	movs	r3, #1
 800dc36:	603b      	str	r3, [r7, #0]
 800dc38:	2005      	movs	r0, #5
 800dc3a:	e025      	b.n	800dc88 <__hexnan+0x14c>
 800dc3c:	9b03      	ldr	r3, [sp, #12]
 800dc3e:	3501      	adds	r5, #1
 800dc40:	3301      	adds	r3, #1
 800dc42:	9303      	str	r3, [sp, #12]
 800dc44:	2d08      	cmp	r5, #8
 800dc46:	dd06      	ble.n	800dc56 <__hexnan+0x11a>
 800dc48:	9b01      	ldr	r3, [sp, #4]
 800dc4a:	429c      	cmp	r4, r3
 800dc4c:	d9bb      	bls.n	800dbc6 <__hexnan+0x8a>
 800dc4e:	2300      	movs	r3, #0
 800dc50:	2501      	movs	r5, #1
 800dc52:	3c04      	subs	r4, #4
 800dc54:	6023      	str	r3, [r4, #0]
 800dc56:	220f      	movs	r2, #15
 800dc58:	6823      	ldr	r3, [r4, #0]
 800dc5a:	4010      	ands	r0, r2
 800dc5c:	011b      	lsls	r3, r3, #4
 800dc5e:	4303      	orrs	r3, r0
 800dc60:	6023      	str	r3, [r4, #0]
 800dc62:	e7b0      	b.n	800dbc6 <__hexnan+0x8a>
 800dc64:	9b06      	ldr	r3, [sp, #24]
 800dc66:	2b00      	cmp	r3, #0
 800dc68:	d0de      	beq.n	800dc28 <__hexnan+0xec>
 800dc6a:	2320      	movs	r3, #32
 800dc6c:	9a06      	ldr	r2, [sp, #24]
 800dc6e:	9902      	ldr	r1, [sp, #8]
 800dc70:	1a9b      	subs	r3, r3, r2
 800dc72:	2201      	movs	r2, #1
 800dc74:	4252      	negs	r2, r2
 800dc76:	40da      	lsrs	r2, r3
 800dc78:	3904      	subs	r1, #4
 800dc7a:	680b      	ldr	r3, [r1, #0]
 800dc7c:	4013      	ands	r3, r2
 800dc7e:	600b      	str	r3, [r1, #0]
 800dc80:	e7d2      	b.n	800dc28 <__hexnan+0xec>
 800dc82:	3f04      	subs	r7, #4
 800dc84:	e7d0      	b.n	800dc28 <__hexnan+0xec>
 800dc86:	2004      	movs	r0, #4
 800dc88:	b00b      	add	sp, #44	; 0x2c
 800dc8a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800dc8c <sbrk_aligned>:
 800dc8c:	b570      	push	{r4, r5, r6, lr}
 800dc8e:	4e0f      	ldr	r6, [pc, #60]	; (800dccc <sbrk_aligned+0x40>)
 800dc90:	000d      	movs	r5, r1
 800dc92:	6831      	ldr	r1, [r6, #0]
 800dc94:	0004      	movs	r4, r0
 800dc96:	2900      	cmp	r1, #0
 800dc98:	d102      	bne.n	800dca0 <sbrk_aligned+0x14>
 800dc9a:	f000 fe3b 	bl	800e914 <_sbrk_r>
 800dc9e:	6030      	str	r0, [r6, #0]
 800dca0:	0029      	movs	r1, r5
 800dca2:	0020      	movs	r0, r4
 800dca4:	f000 fe36 	bl	800e914 <_sbrk_r>
 800dca8:	1c43      	adds	r3, r0, #1
 800dcaa:	d00a      	beq.n	800dcc2 <sbrk_aligned+0x36>
 800dcac:	2303      	movs	r3, #3
 800dcae:	1cc5      	adds	r5, r0, #3
 800dcb0:	439d      	bics	r5, r3
 800dcb2:	42a8      	cmp	r0, r5
 800dcb4:	d007      	beq.n	800dcc6 <sbrk_aligned+0x3a>
 800dcb6:	1a29      	subs	r1, r5, r0
 800dcb8:	0020      	movs	r0, r4
 800dcba:	f000 fe2b 	bl	800e914 <_sbrk_r>
 800dcbe:	3001      	adds	r0, #1
 800dcc0:	d101      	bne.n	800dcc6 <sbrk_aligned+0x3a>
 800dcc2:	2501      	movs	r5, #1
 800dcc4:	426d      	negs	r5, r5
 800dcc6:	0028      	movs	r0, r5
 800dcc8:	bd70      	pop	{r4, r5, r6, pc}
 800dcca:	46c0      	nop			; (mov r8, r8)
 800dccc:	20002a28 	.word	0x20002a28

0800dcd0 <_malloc_r>:
 800dcd0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800dcd2:	2203      	movs	r2, #3
 800dcd4:	1ccb      	adds	r3, r1, #3
 800dcd6:	4393      	bics	r3, r2
 800dcd8:	3308      	adds	r3, #8
 800dcda:	0006      	movs	r6, r0
 800dcdc:	001f      	movs	r7, r3
 800dcde:	2b0c      	cmp	r3, #12
 800dce0:	d238      	bcs.n	800dd54 <_malloc_r+0x84>
 800dce2:	270c      	movs	r7, #12
 800dce4:	42b9      	cmp	r1, r7
 800dce6:	d837      	bhi.n	800dd58 <_malloc_r+0x88>
 800dce8:	0030      	movs	r0, r6
 800dcea:	f000 f885 	bl	800ddf8 <__malloc_lock>
 800dcee:	4b38      	ldr	r3, [pc, #224]	; (800ddd0 <_malloc_r+0x100>)
 800dcf0:	9300      	str	r3, [sp, #0]
 800dcf2:	681b      	ldr	r3, [r3, #0]
 800dcf4:	001c      	movs	r4, r3
 800dcf6:	2c00      	cmp	r4, #0
 800dcf8:	d133      	bne.n	800dd62 <_malloc_r+0x92>
 800dcfa:	0039      	movs	r1, r7
 800dcfc:	0030      	movs	r0, r6
 800dcfe:	f7ff ffc5 	bl	800dc8c <sbrk_aligned>
 800dd02:	0004      	movs	r4, r0
 800dd04:	1c43      	adds	r3, r0, #1
 800dd06:	d15e      	bne.n	800ddc6 <_malloc_r+0xf6>
 800dd08:	9b00      	ldr	r3, [sp, #0]
 800dd0a:	681c      	ldr	r4, [r3, #0]
 800dd0c:	0025      	movs	r5, r4
 800dd0e:	2d00      	cmp	r5, #0
 800dd10:	d14e      	bne.n	800ddb0 <_malloc_r+0xe0>
 800dd12:	2c00      	cmp	r4, #0
 800dd14:	d051      	beq.n	800ddba <_malloc_r+0xea>
 800dd16:	6823      	ldr	r3, [r4, #0]
 800dd18:	0029      	movs	r1, r5
 800dd1a:	18e3      	adds	r3, r4, r3
 800dd1c:	0030      	movs	r0, r6
 800dd1e:	9301      	str	r3, [sp, #4]
 800dd20:	f000 fdf8 	bl	800e914 <_sbrk_r>
 800dd24:	9b01      	ldr	r3, [sp, #4]
 800dd26:	4283      	cmp	r3, r0
 800dd28:	d147      	bne.n	800ddba <_malloc_r+0xea>
 800dd2a:	6823      	ldr	r3, [r4, #0]
 800dd2c:	0030      	movs	r0, r6
 800dd2e:	1aff      	subs	r7, r7, r3
 800dd30:	0039      	movs	r1, r7
 800dd32:	f7ff ffab 	bl	800dc8c <sbrk_aligned>
 800dd36:	3001      	adds	r0, #1
 800dd38:	d03f      	beq.n	800ddba <_malloc_r+0xea>
 800dd3a:	6823      	ldr	r3, [r4, #0]
 800dd3c:	19db      	adds	r3, r3, r7
 800dd3e:	6023      	str	r3, [r4, #0]
 800dd40:	9b00      	ldr	r3, [sp, #0]
 800dd42:	681b      	ldr	r3, [r3, #0]
 800dd44:	2b00      	cmp	r3, #0
 800dd46:	d040      	beq.n	800ddca <_malloc_r+0xfa>
 800dd48:	685a      	ldr	r2, [r3, #4]
 800dd4a:	42a2      	cmp	r2, r4
 800dd4c:	d133      	bne.n	800ddb6 <_malloc_r+0xe6>
 800dd4e:	2200      	movs	r2, #0
 800dd50:	605a      	str	r2, [r3, #4]
 800dd52:	e014      	b.n	800dd7e <_malloc_r+0xae>
 800dd54:	2b00      	cmp	r3, #0
 800dd56:	dac5      	bge.n	800dce4 <_malloc_r+0x14>
 800dd58:	230c      	movs	r3, #12
 800dd5a:	2500      	movs	r5, #0
 800dd5c:	6033      	str	r3, [r6, #0]
 800dd5e:	0028      	movs	r0, r5
 800dd60:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800dd62:	6821      	ldr	r1, [r4, #0]
 800dd64:	1bc9      	subs	r1, r1, r7
 800dd66:	d420      	bmi.n	800ddaa <_malloc_r+0xda>
 800dd68:	290b      	cmp	r1, #11
 800dd6a:	d918      	bls.n	800dd9e <_malloc_r+0xce>
 800dd6c:	19e2      	adds	r2, r4, r7
 800dd6e:	6027      	str	r7, [r4, #0]
 800dd70:	42a3      	cmp	r3, r4
 800dd72:	d112      	bne.n	800dd9a <_malloc_r+0xca>
 800dd74:	9b00      	ldr	r3, [sp, #0]
 800dd76:	601a      	str	r2, [r3, #0]
 800dd78:	6863      	ldr	r3, [r4, #4]
 800dd7a:	6011      	str	r1, [r2, #0]
 800dd7c:	6053      	str	r3, [r2, #4]
 800dd7e:	0030      	movs	r0, r6
 800dd80:	0025      	movs	r5, r4
 800dd82:	f000 f841 	bl	800de08 <__malloc_unlock>
 800dd86:	2207      	movs	r2, #7
 800dd88:	350b      	adds	r5, #11
 800dd8a:	1d23      	adds	r3, r4, #4
 800dd8c:	4395      	bics	r5, r2
 800dd8e:	1aea      	subs	r2, r5, r3
 800dd90:	429d      	cmp	r5, r3
 800dd92:	d0e4      	beq.n	800dd5e <_malloc_r+0x8e>
 800dd94:	1b5b      	subs	r3, r3, r5
 800dd96:	50a3      	str	r3, [r4, r2]
 800dd98:	e7e1      	b.n	800dd5e <_malloc_r+0x8e>
 800dd9a:	605a      	str	r2, [r3, #4]
 800dd9c:	e7ec      	b.n	800dd78 <_malloc_r+0xa8>
 800dd9e:	6862      	ldr	r2, [r4, #4]
 800dda0:	42a3      	cmp	r3, r4
 800dda2:	d1d5      	bne.n	800dd50 <_malloc_r+0x80>
 800dda4:	9b00      	ldr	r3, [sp, #0]
 800dda6:	601a      	str	r2, [r3, #0]
 800dda8:	e7e9      	b.n	800dd7e <_malloc_r+0xae>
 800ddaa:	0023      	movs	r3, r4
 800ddac:	6864      	ldr	r4, [r4, #4]
 800ddae:	e7a2      	b.n	800dcf6 <_malloc_r+0x26>
 800ddb0:	002c      	movs	r4, r5
 800ddb2:	686d      	ldr	r5, [r5, #4]
 800ddb4:	e7ab      	b.n	800dd0e <_malloc_r+0x3e>
 800ddb6:	0013      	movs	r3, r2
 800ddb8:	e7c4      	b.n	800dd44 <_malloc_r+0x74>
 800ddba:	230c      	movs	r3, #12
 800ddbc:	0030      	movs	r0, r6
 800ddbe:	6033      	str	r3, [r6, #0]
 800ddc0:	f000 f822 	bl	800de08 <__malloc_unlock>
 800ddc4:	e7cb      	b.n	800dd5e <_malloc_r+0x8e>
 800ddc6:	6027      	str	r7, [r4, #0]
 800ddc8:	e7d9      	b.n	800dd7e <_malloc_r+0xae>
 800ddca:	605b      	str	r3, [r3, #4]
 800ddcc:	deff      	udf	#255	; 0xff
 800ddce:	46c0      	nop			; (mov r8, r8)
 800ddd0:	20002a24 	.word	0x20002a24

0800ddd4 <__ascii_mbtowc>:
 800ddd4:	b082      	sub	sp, #8
 800ddd6:	2900      	cmp	r1, #0
 800ddd8:	d100      	bne.n	800dddc <__ascii_mbtowc+0x8>
 800ddda:	a901      	add	r1, sp, #4
 800dddc:	1e10      	subs	r0, r2, #0
 800ddde:	d006      	beq.n	800ddee <__ascii_mbtowc+0x1a>
 800dde0:	2b00      	cmp	r3, #0
 800dde2:	d006      	beq.n	800ddf2 <__ascii_mbtowc+0x1e>
 800dde4:	7813      	ldrb	r3, [r2, #0]
 800dde6:	600b      	str	r3, [r1, #0]
 800dde8:	7810      	ldrb	r0, [r2, #0]
 800ddea:	1e43      	subs	r3, r0, #1
 800ddec:	4198      	sbcs	r0, r3
 800ddee:	b002      	add	sp, #8
 800ddf0:	4770      	bx	lr
 800ddf2:	2002      	movs	r0, #2
 800ddf4:	4240      	negs	r0, r0
 800ddf6:	e7fa      	b.n	800ddee <__ascii_mbtowc+0x1a>

0800ddf8 <__malloc_lock>:
 800ddf8:	b510      	push	{r4, lr}
 800ddfa:	4802      	ldr	r0, [pc, #8]	; (800de04 <__malloc_lock+0xc>)
 800ddfc:	f7ff fb8f 	bl	800d51e <__retarget_lock_acquire_recursive>
 800de00:	bd10      	pop	{r4, pc}
 800de02:	46c0      	nop			; (mov r8, r8)
 800de04:	20002a20 	.word	0x20002a20

0800de08 <__malloc_unlock>:
 800de08:	b510      	push	{r4, lr}
 800de0a:	4802      	ldr	r0, [pc, #8]	; (800de14 <__malloc_unlock+0xc>)
 800de0c:	f7ff fb88 	bl	800d520 <__retarget_lock_release_recursive>
 800de10:	bd10      	pop	{r4, pc}
 800de12:	46c0      	nop			; (mov r8, r8)
 800de14:	20002a20 	.word	0x20002a20

0800de18 <_Balloc>:
 800de18:	b570      	push	{r4, r5, r6, lr}
 800de1a:	69c5      	ldr	r5, [r0, #28]
 800de1c:	0006      	movs	r6, r0
 800de1e:	000c      	movs	r4, r1
 800de20:	2d00      	cmp	r5, #0
 800de22:	d10e      	bne.n	800de42 <_Balloc+0x2a>
 800de24:	2010      	movs	r0, #16
 800de26:	f000 fdd3 	bl	800e9d0 <malloc>
 800de2a:	1e02      	subs	r2, r0, #0
 800de2c:	61f0      	str	r0, [r6, #28]
 800de2e:	d104      	bne.n	800de3a <_Balloc+0x22>
 800de30:	216b      	movs	r1, #107	; 0x6b
 800de32:	4b19      	ldr	r3, [pc, #100]	; (800de98 <_Balloc+0x80>)
 800de34:	4819      	ldr	r0, [pc, #100]	; (800de9c <_Balloc+0x84>)
 800de36:	f000 fd7f 	bl	800e938 <__assert_func>
 800de3a:	6045      	str	r5, [r0, #4]
 800de3c:	6085      	str	r5, [r0, #8]
 800de3e:	6005      	str	r5, [r0, #0]
 800de40:	60c5      	str	r5, [r0, #12]
 800de42:	69f5      	ldr	r5, [r6, #28]
 800de44:	68eb      	ldr	r3, [r5, #12]
 800de46:	2b00      	cmp	r3, #0
 800de48:	d013      	beq.n	800de72 <_Balloc+0x5a>
 800de4a:	69f3      	ldr	r3, [r6, #28]
 800de4c:	00a2      	lsls	r2, r4, #2
 800de4e:	68db      	ldr	r3, [r3, #12]
 800de50:	189b      	adds	r3, r3, r2
 800de52:	6818      	ldr	r0, [r3, #0]
 800de54:	2800      	cmp	r0, #0
 800de56:	d118      	bne.n	800de8a <_Balloc+0x72>
 800de58:	2101      	movs	r1, #1
 800de5a:	000d      	movs	r5, r1
 800de5c:	40a5      	lsls	r5, r4
 800de5e:	1d6a      	adds	r2, r5, #5
 800de60:	0030      	movs	r0, r6
 800de62:	0092      	lsls	r2, r2, #2
 800de64:	f000 fd86 	bl	800e974 <_calloc_r>
 800de68:	2800      	cmp	r0, #0
 800de6a:	d00c      	beq.n	800de86 <_Balloc+0x6e>
 800de6c:	6044      	str	r4, [r0, #4]
 800de6e:	6085      	str	r5, [r0, #8]
 800de70:	e00d      	b.n	800de8e <_Balloc+0x76>
 800de72:	2221      	movs	r2, #33	; 0x21
 800de74:	2104      	movs	r1, #4
 800de76:	0030      	movs	r0, r6
 800de78:	f000 fd7c 	bl	800e974 <_calloc_r>
 800de7c:	69f3      	ldr	r3, [r6, #28]
 800de7e:	60e8      	str	r0, [r5, #12]
 800de80:	68db      	ldr	r3, [r3, #12]
 800de82:	2b00      	cmp	r3, #0
 800de84:	d1e1      	bne.n	800de4a <_Balloc+0x32>
 800de86:	2000      	movs	r0, #0
 800de88:	bd70      	pop	{r4, r5, r6, pc}
 800de8a:	6802      	ldr	r2, [r0, #0]
 800de8c:	601a      	str	r2, [r3, #0]
 800de8e:	2300      	movs	r3, #0
 800de90:	6103      	str	r3, [r0, #16]
 800de92:	60c3      	str	r3, [r0, #12]
 800de94:	e7f8      	b.n	800de88 <_Balloc+0x70>
 800de96:	46c0      	nop			; (mov r8, r8)
 800de98:	0800f6b9 	.word	0x0800f6b9
 800de9c:	0800f6d0 	.word	0x0800f6d0

0800dea0 <_Bfree>:
 800dea0:	b570      	push	{r4, r5, r6, lr}
 800dea2:	69c6      	ldr	r6, [r0, #28]
 800dea4:	0005      	movs	r5, r0
 800dea6:	000c      	movs	r4, r1
 800dea8:	2e00      	cmp	r6, #0
 800deaa:	d10e      	bne.n	800deca <_Bfree+0x2a>
 800deac:	2010      	movs	r0, #16
 800deae:	f000 fd8f 	bl	800e9d0 <malloc>
 800deb2:	1e02      	subs	r2, r0, #0
 800deb4:	61e8      	str	r0, [r5, #28]
 800deb6:	d104      	bne.n	800dec2 <_Bfree+0x22>
 800deb8:	218f      	movs	r1, #143	; 0x8f
 800deba:	4b09      	ldr	r3, [pc, #36]	; (800dee0 <_Bfree+0x40>)
 800debc:	4809      	ldr	r0, [pc, #36]	; (800dee4 <_Bfree+0x44>)
 800debe:	f000 fd3b 	bl	800e938 <__assert_func>
 800dec2:	6046      	str	r6, [r0, #4]
 800dec4:	6086      	str	r6, [r0, #8]
 800dec6:	6006      	str	r6, [r0, #0]
 800dec8:	60c6      	str	r6, [r0, #12]
 800deca:	2c00      	cmp	r4, #0
 800decc:	d007      	beq.n	800dede <_Bfree+0x3e>
 800dece:	69eb      	ldr	r3, [r5, #28]
 800ded0:	6862      	ldr	r2, [r4, #4]
 800ded2:	68db      	ldr	r3, [r3, #12]
 800ded4:	0092      	lsls	r2, r2, #2
 800ded6:	189b      	adds	r3, r3, r2
 800ded8:	681a      	ldr	r2, [r3, #0]
 800deda:	6022      	str	r2, [r4, #0]
 800dedc:	601c      	str	r4, [r3, #0]
 800dede:	bd70      	pop	{r4, r5, r6, pc}
 800dee0:	0800f6b9 	.word	0x0800f6b9
 800dee4:	0800f6d0 	.word	0x0800f6d0

0800dee8 <__multadd>:
 800dee8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800deea:	000e      	movs	r6, r1
 800deec:	9001      	str	r0, [sp, #4]
 800deee:	000c      	movs	r4, r1
 800def0:	001d      	movs	r5, r3
 800def2:	2000      	movs	r0, #0
 800def4:	690f      	ldr	r7, [r1, #16]
 800def6:	3614      	adds	r6, #20
 800def8:	6833      	ldr	r3, [r6, #0]
 800defa:	3001      	adds	r0, #1
 800defc:	b299      	uxth	r1, r3
 800defe:	4351      	muls	r1, r2
 800df00:	0c1b      	lsrs	r3, r3, #16
 800df02:	4353      	muls	r3, r2
 800df04:	1949      	adds	r1, r1, r5
 800df06:	0c0d      	lsrs	r5, r1, #16
 800df08:	195b      	adds	r3, r3, r5
 800df0a:	0c1d      	lsrs	r5, r3, #16
 800df0c:	b289      	uxth	r1, r1
 800df0e:	041b      	lsls	r3, r3, #16
 800df10:	185b      	adds	r3, r3, r1
 800df12:	c608      	stmia	r6!, {r3}
 800df14:	4287      	cmp	r7, r0
 800df16:	dcef      	bgt.n	800def8 <__multadd+0x10>
 800df18:	2d00      	cmp	r5, #0
 800df1a:	d022      	beq.n	800df62 <__multadd+0x7a>
 800df1c:	68a3      	ldr	r3, [r4, #8]
 800df1e:	42bb      	cmp	r3, r7
 800df20:	dc19      	bgt.n	800df56 <__multadd+0x6e>
 800df22:	6861      	ldr	r1, [r4, #4]
 800df24:	9801      	ldr	r0, [sp, #4]
 800df26:	3101      	adds	r1, #1
 800df28:	f7ff ff76 	bl	800de18 <_Balloc>
 800df2c:	1e06      	subs	r6, r0, #0
 800df2e:	d105      	bne.n	800df3c <__multadd+0x54>
 800df30:	0032      	movs	r2, r6
 800df32:	21ba      	movs	r1, #186	; 0xba
 800df34:	4b0c      	ldr	r3, [pc, #48]	; (800df68 <__multadd+0x80>)
 800df36:	480d      	ldr	r0, [pc, #52]	; (800df6c <__multadd+0x84>)
 800df38:	f000 fcfe 	bl	800e938 <__assert_func>
 800df3c:	0021      	movs	r1, r4
 800df3e:	6922      	ldr	r2, [r4, #16]
 800df40:	310c      	adds	r1, #12
 800df42:	3202      	adds	r2, #2
 800df44:	0092      	lsls	r2, r2, #2
 800df46:	300c      	adds	r0, #12
 800df48:	f7ff faeb 	bl	800d522 <memcpy>
 800df4c:	0021      	movs	r1, r4
 800df4e:	9801      	ldr	r0, [sp, #4]
 800df50:	f7ff ffa6 	bl	800dea0 <_Bfree>
 800df54:	0034      	movs	r4, r6
 800df56:	1d3b      	adds	r3, r7, #4
 800df58:	009b      	lsls	r3, r3, #2
 800df5a:	18e3      	adds	r3, r4, r3
 800df5c:	605d      	str	r5, [r3, #4]
 800df5e:	1c7b      	adds	r3, r7, #1
 800df60:	6123      	str	r3, [r4, #16]
 800df62:	0020      	movs	r0, r4
 800df64:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800df66:	46c0      	nop			; (mov r8, r8)
 800df68:	0800f648 	.word	0x0800f648
 800df6c:	0800f6d0 	.word	0x0800f6d0

0800df70 <__s2b>:
 800df70:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800df72:	0006      	movs	r6, r0
 800df74:	0018      	movs	r0, r3
 800df76:	000c      	movs	r4, r1
 800df78:	3008      	adds	r0, #8
 800df7a:	2109      	movs	r1, #9
 800df7c:	9301      	str	r3, [sp, #4]
 800df7e:	0015      	movs	r5, r2
 800df80:	f7f2 f972 	bl	8000268 <__divsi3>
 800df84:	2301      	movs	r3, #1
 800df86:	2100      	movs	r1, #0
 800df88:	4283      	cmp	r3, r0
 800df8a:	db0a      	blt.n	800dfa2 <__s2b+0x32>
 800df8c:	0030      	movs	r0, r6
 800df8e:	f7ff ff43 	bl	800de18 <_Balloc>
 800df92:	1e01      	subs	r1, r0, #0
 800df94:	d108      	bne.n	800dfa8 <__s2b+0x38>
 800df96:	000a      	movs	r2, r1
 800df98:	4b19      	ldr	r3, [pc, #100]	; (800e000 <__s2b+0x90>)
 800df9a:	481a      	ldr	r0, [pc, #104]	; (800e004 <__s2b+0x94>)
 800df9c:	31d3      	adds	r1, #211	; 0xd3
 800df9e:	f000 fccb 	bl	800e938 <__assert_func>
 800dfa2:	005b      	lsls	r3, r3, #1
 800dfa4:	3101      	adds	r1, #1
 800dfa6:	e7ef      	b.n	800df88 <__s2b+0x18>
 800dfa8:	9b08      	ldr	r3, [sp, #32]
 800dfaa:	6143      	str	r3, [r0, #20]
 800dfac:	2301      	movs	r3, #1
 800dfae:	6103      	str	r3, [r0, #16]
 800dfb0:	2d09      	cmp	r5, #9
 800dfb2:	dd18      	ble.n	800dfe6 <__s2b+0x76>
 800dfb4:	0023      	movs	r3, r4
 800dfb6:	3309      	adds	r3, #9
 800dfb8:	001f      	movs	r7, r3
 800dfba:	9300      	str	r3, [sp, #0]
 800dfbc:	1964      	adds	r4, r4, r5
 800dfbe:	783b      	ldrb	r3, [r7, #0]
 800dfc0:	220a      	movs	r2, #10
 800dfc2:	0030      	movs	r0, r6
 800dfc4:	3b30      	subs	r3, #48	; 0x30
 800dfc6:	f7ff ff8f 	bl	800dee8 <__multadd>
 800dfca:	3701      	adds	r7, #1
 800dfcc:	0001      	movs	r1, r0
 800dfce:	42a7      	cmp	r7, r4
 800dfd0:	d1f5      	bne.n	800dfbe <__s2b+0x4e>
 800dfd2:	002c      	movs	r4, r5
 800dfd4:	9b00      	ldr	r3, [sp, #0]
 800dfd6:	3c08      	subs	r4, #8
 800dfd8:	191c      	adds	r4, r3, r4
 800dfda:	002f      	movs	r7, r5
 800dfdc:	9b01      	ldr	r3, [sp, #4]
 800dfde:	429f      	cmp	r7, r3
 800dfe0:	db04      	blt.n	800dfec <__s2b+0x7c>
 800dfe2:	0008      	movs	r0, r1
 800dfe4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800dfe6:	2509      	movs	r5, #9
 800dfe8:	340a      	adds	r4, #10
 800dfea:	e7f6      	b.n	800dfda <__s2b+0x6a>
 800dfec:	1b63      	subs	r3, r4, r5
 800dfee:	5ddb      	ldrb	r3, [r3, r7]
 800dff0:	220a      	movs	r2, #10
 800dff2:	0030      	movs	r0, r6
 800dff4:	3b30      	subs	r3, #48	; 0x30
 800dff6:	f7ff ff77 	bl	800dee8 <__multadd>
 800dffa:	3701      	adds	r7, #1
 800dffc:	0001      	movs	r1, r0
 800dffe:	e7ed      	b.n	800dfdc <__s2b+0x6c>
 800e000:	0800f648 	.word	0x0800f648
 800e004:	0800f6d0 	.word	0x0800f6d0

0800e008 <__hi0bits>:
 800e008:	0003      	movs	r3, r0
 800e00a:	0c02      	lsrs	r2, r0, #16
 800e00c:	2000      	movs	r0, #0
 800e00e:	4282      	cmp	r2, r0
 800e010:	d101      	bne.n	800e016 <__hi0bits+0xe>
 800e012:	041b      	lsls	r3, r3, #16
 800e014:	3010      	adds	r0, #16
 800e016:	0e1a      	lsrs	r2, r3, #24
 800e018:	d101      	bne.n	800e01e <__hi0bits+0x16>
 800e01a:	3008      	adds	r0, #8
 800e01c:	021b      	lsls	r3, r3, #8
 800e01e:	0f1a      	lsrs	r2, r3, #28
 800e020:	d101      	bne.n	800e026 <__hi0bits+0x1e>
 800e022:	3004      	adds	r0, #4
 800e024:	011b      	lsls	r3, r3, #4
 800e026:	0f9a      	lsrs	r2, r3, #30
 800e028:	d101      	bne.n	800e02e <__hi0bits+0x26>
 800e02a:	3002      	adds	r0, #2
 800e02c:	009b      	lsls	r3, r3, #2
 800e02e:	2b00      	cmp	r3, #0
 800e030:	db03      	blt.n	800e03a <__hi0bits+0x32>
 800e032:	3001      	adds	r0, #1
 800e034:	005b      	lsls	r3, r3, #1
 800e036:	d400      	bmi.n	800e03a <__hi0bits+0x32>
 800e038:	2020      	movs	r0, #32
 800e03a:	4770      	bx	lr

0800e03c <__lo0bits>:
 800e03c:	6803      	ldr	r3, [r0, #0]
 800e03e:	0001      	movs	r1, r0
 800e040:	2207      	movs	r2, #7
 800e042:	0018      	movs	r0, r3
 800e044:	4010      	ands	r0, r2
 800e046:	4213      	tst	r3, r2
 800e048:	d00d      	beq.n	800e066 <__lo0bits+0x2a>
 800e04a:	3a06      	subs	r2, #6
 800e04c:	2000      	movs	r0, #0
 800e04e:	4213      	tst	r3, r2
 800e050:	d105      	bne.n	800e05e <__lo0bits+0x22>
 800e052:	3002      	adds	r0, #2
 800e054:	4203      	tst	r3, r0
 800e056:	d003      	beq.n	800e060 <__lo0bits+0x24>
 800e058:	40d3      	lsrs	r3, r2
 800e05a:	0010      	movs	r0, r2
 800e05c:	600b      	str	r3, [r1, #0]
 800e05e:	4770      	bx	lr
 800e060:	089b      	lsrs	r3, r3, #2
 800e062:	600b      	str	r3, [r1, #0]
 800e064:	e7fb      	b.n	800e05e <__lo0bits+0x22>
 800e066:	b29a      	uxth	r2, r3
 800e068:	2a00      	cmp	r2, #0
 800e06a:	d101      	bne.n	800e070 <__lo0bits+0x34>
 800e06c:	2010      	movs	r0, #16
 800e06e:	0c1b      	lsrs	r3, r3, #16
 800e070:	b2da      	uxtb	r2, r3
 800e072:	2a00      	cmp	r2, #0
 800e074:	d101      	bne.n	800e07a <__lo0bits+0x3e>
 800e076:	3008      	adds	r0, #8
 800e078:	0a1b      	lsrs	r3, r3, #8
 800e07a:	071a      	lsls	r2, r3, #28
 800e07c:	d101      	bne.n	800e082 <__lo0bits+0x46>
 800e07e:	3004      	adds	r0, #4
 800e080:	091b      	lsrs	r3, r3, #4
 800e082:	079a      	lsls	r2, r3, #30
 800e084:	d101      	bne.n	800e08a <__lo0bits+0x4e>
 800e086:	3002      	adds	r0, #2
 800e088:	089b      	lsrs	r3, r3, #2
 800e08a:	07da      	lsls	r2, r3, #31
 800e08c:	d4e9      	bmi.n	800e062 <__lo0bits+0x26>
 800e08e:	3001      	adds	r0, #1
 800e090:	085b      	lsrs	r3, r3, #1
 800e092:	d1e6      	bne.n	800e062 <__lo0bits+0x26>
 800e094:	2020      	movs	r0, #32
 800e096:	e7e2      	b.n	800e05e <__lo0bits+0x22>

0800e098 <__i2b>:
 800e098:	b510      	push	{r4, lr}
 800e09a:	000c      	movs	r4, r1
 800e09c:	2101      	movs	r1, #1
 800e09e:	f7ff febb 	bl	800de18 <_Balloc>
 800e0a2:	2800      	cmp	r0, #0
 800e0a4:	d107      	bne.n	800e0b6 <__i2b+0x1e>
 800e0a6:	2146      	movs	r1, #70	; 0x46
 800e0a8:	4c05      	ldr	r4, [pc, #20]	; (800e0c0 <__i2b+0x28>)
 800e0aa:	0002      	movs	r2, r0
 800e0ac:	4b05      	ldr	r3, [pc, #20]	; (800e0c4 <__i2b+0x2c>)
 800e0ae:	0020      	movs	r0, r4
 800e0b0:	31ff      	adds	r1, #255	; 0xff
 800e0b2:	f000 fc41 	bl	800e938 <__assert_func>
 800e0b6:	2301      	movs	r3, #1
 800e0b8:	6144      	str	r4, [r0, #20]
 800e0ba:	6103      	str	r3, [r0, #16]
 800e0bc:	bd10      	pop	{r4, pc}
 800e0be:	46c0      	nop			; (mov r8, r8)
 800e0c0:	0800f6d0 	.word	0x0800f6d0
 800e0c4:	0800f648 	.word	0x0800f648

0800e0c8 <__multiply>:
 800e0c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e0ca:	0015      	movs	r5, r2
 800e0cc:	690a      	ldr	r2, [r1, #16]
 800e0ce:	692b      	ldr	r3, [r5, #16]
 800e0d0:	000c      	movs	r4, r1
 800e0d2:	b08b      	sub	sp, #44	; 0x2c
 800e0d4:	429a      	cmp	r2, r3
 800e0d6:	da01      	bge.n	800e0dc <__multiply+0x14>
 800e0d8:	002c      	movs	r4, r5
 800e0da:	000d      	movs	r5, r1
 800e0dc:	6927      	ldr	r7, [r4, #16]
 800e0de:	692e      	ldr	r6, [r5, #16]
 800e0e0:	6861      	ldr	r1, [r4, #4]
 800e0e2:	19bb      	adds	r3, r7, r6
 800e0e4:	9303      	str	r3, [sp, #12]
 800e0e6:	68a3      	ldr	r3, [r4, #8]
 800e0e8:	19ba      	adds	r2, r7, r6
 800e0ea:	4293      	cmp	r3, r2
 800e0ec:	da00      	bge.n	800e0f0 <__multiply+0x28>
 800e0ee:	3101      	adds	r1, #1
 800e0f0:	f7ff fe92 	bl	800de18 <_Balloc>
 800e0f4:	9002      	str	r0, [sp, #8]
 800e0f6:	2800      	cmp	r0, #0
 800e0f8:	d106      	bne.n	800e108 <__multiply+0x40>
 800e0fa:	21b1      	movs	r1, #177	; 0xb1
 800e0fc:	4b48      	ldr	r3, [pc, #288]	; (800e220 <__multiply+0x158>)
 800e0fe:	4849      	ldr	r0, [pc, #292]	; (800e224 <__multiply+0x15c>)
 800e100:	9a02      	ldr	r2, [sp, #8]
 800e102:	0049      	lsls	r1, r1, #1
 800e104:	f000 fc18 	bl	800e938 <__assert_func>
 800e108:	9b02      	ldr	r3, [sp, #8]
 800e10a:	2200      	movs	r2, #0
 800e10c:	3314      	adds	r3, #20
 800e10e:	469c      	mov	ip, r3
 800e110:	19bb      	adds	r3, r7, r6
 800e112:	009b      	lsls	r3, r3, #2
 800e114:	4463      	add	r3, ip
 800e116:	9304      	str	r3, [sp, #16]
 800e118:	4663      	mov	r3, ip
 800e11a:	9904      	ldr	r1, [sp, #16]
 800e11c:	428b      	cmp	r3, r1
 800e11e:	d32a      	bcc.n	800e176 <__multiply+0xae>
 800e120:	0023      	movs	r3, r4
 800e122:	00bf      	lsls	r7, r7, #2
 800e124:	3314      	adds	r3, #20
 800e126:	3514      	adds	r5, #20
 800e128:	9308      	str	r3, [sp, #32]
 800e12a:	00b6      	lsls	r6, r6, #2
 800e12c:	19db      	adds	r3, r3, r7
 800e12e:	9305      	str	r3, [sp, #20]
 800e130:	19ab      	adds	r3, r5, r6
 800e132:	9309      	str	r3, [sp, #36]	; 0x24
 800e134:	2304      	movs	r3, #4
 800e136:	9306      	str	r3, [sp, #24]
 800e138:	0023      	movs	r3, r4
 800e13a:	9a05      	ldr	r2, [sp, #20]
 800e13c:	3315      	adds	r3, #21
 800e13e:	9501      	str	r5, [sp, #4]
 800e140:	429a      	cmp	r2, r3
 800e142:	d305      	bcc.n	800e150 <__multiply+0x88>
 800e144:	1b13      	subs	r3, r2, r4
 800e146:	3b15      	subs	r3, #21
 800e148:	089b      	lsrs	r3, r3, #2
 800e14a:	3301      	adds	r3, #1
 800e14c:	009b      	lsls	r3, r3, #2
 800e14e:	9306      	str	r3, [sp, #24]
 800e150:	9b01      	ldr	r3, [sp, #4]
 800e152:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e154:	4293      	cmp	r3, r2
 800e156:	d310      	bcc.n	800e17a <__multiply+0xb2>
 800e158:	9b03      	ldr	r3, [sp, #12]
 800e15a:	2b00      	cmp	r3, #0
 800e15c:	dd05      	ble.n	800e16a <__multiply+0xa2>
 800e15e:	9b04      	ldr	r3, [sp, #16]
 800e160:	3b04      	subs	r3, #4
 800e162:	9304      	str	r3, [sp, #16]
 800e164:	681b      	ldr	r3, [r3, #0]
 800e166:	2b00      	cmp	r3, #0
 800e168:	d056      	beq.n	800e218 <__multiply+0x150>
 800e16a:	9b02      	ldr	r3, [sp, #8]
 800e16c:	9a03      	ldr	r2, [sp, #12]
 800e16e:	0018      	movs	r0, r3
 800e170:	611a      	str	r2, [r3, #16]
 800e172:	b00b      	add	sp, #44	; 0x2c
 800e174:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e176:	c304      	stmia	r3!, {r2}
 800e178:	e7cf      	b.n	800e11a <__multiply+0x52>
 800e17a:	9b01      	ldr	r3, [sp, #4]
 800e17c:	6818      	ldr	r0, [r3, #0]
 800e17e:	b280      	uxth	r0, r0
 800e180:	2800      	cmp	r0, #0
 800e182:	d01e      	beq.n	800e1c2 <__multiply+0xfa>
 800e184:	4667      	mov	r7, ip
 800e186:	2500      	movs	r5, #0
 800e188:	9e08      	ldr	r6, [sp, #32]
 800e18a:	ce02      	ldmia	r6!, {r1}
 800e18c:	683b      	ldr	r3, [r7, #0]
 800e18e:	9307      	str	r3, [sp, #28]
 800e190:	b28b      	uxth	r3, r1
 800e192:	4343      	muls	r3, r0
 800e194:	001a      	movs	r2, r3
 800e196:	466b      	mov	r3, sp
 800e198:	8b9b      	ldrh	r3, [r3, #28]
 800e19a:	18d3      	adds	r3, r2, r3
 800e19c:	195b      	adds	r3, r3, r5
 800e19e:	0c0d      	lsrs	r5, r1, #16
 800e1a0:	4345      	muls	r5, r0
 800e1a2:	9a07      	ldr	r2, [sp, #28]
 800e1a4:	0c11      	lsrs	r1, r2, #16
 800e1a6:	1869      	adds	r1, r5, r1
 800e1a8:	0c1a      	lsrs	r2, r3, #16
 800e1aa:	188a      	adds	r2, r1, r2
 800e1ac:	b29b      	uxth	r3, r3
 800e1ae:	0c15      	lsrs	r5, r2, #16
 800e1b0:	0412      	lsls	r2, r2, #16
 800e1b2:	431a      	orrs	r2, r3
 800e1b4:	9b05      	ldr	r3, [sp, #20]
 800e1b6:	c704      	stmia	r7!, {r2}
 800e1b8:	42b3      	cmp	r3, r6
 800e1ba:	d8e6      	bhi.n	800e18a <__multiply+0xc2>
 800e1bc:	4663      	mov	r3, ip
 800e1be:	9a06      	ldr	r2, [sp, #24]
 800e1c0:	509d      	str	r5, [r3, r2]
 800e1c2:	9b01      	ldr	r3, [sp, #4]
 800e1c4:	6818      	ldr	r0, [r3, #0]
 800e1c6:	0c00      	lsrs	r0, r0, #16
 800e1c8:	d020      	beq.n	800e20c <__multiply+0x144>
 800e1ca:	4663      	mov	r3, ip
 800e1cc:	0025      	movs	r5, r4
 800e1ce:	4661      	mov	r1, ip
 800e1d0:	2700      	movs	r7, #0
 800e1d2:	681b      	ldr	r3, [r3, #0]
 800e1d4:	3514      	adds	r5, #20
 800e1d6:	682a      	ldr	r2, [r5, #0]
 800e1d8:	680e      	ldr	r6, [r1, #0]
 800e1da:	b292      	uxth	r2, r2
 800e1dc:	4342      	muls	r2, r0
 800e1de:	0c36      	lsrs	r6, r6, #16
 800e1e0:	1992      	adds	r2, r2, r6
 800e1e2:	19d2      	adds	r2, r2, r7
 800e1e4:	0416      	lsls	r6, r2, #16
 800e1e6:	b29b      	uxth	r3, r3
 800e1e8:	431e      	orrs	r6, r3
 800e1ea:	600e      	str	r6, [r1, #0]
 800e1ec:	cd40      	ldmia	r5!, {r6}
 800e1ee:	684b      	ldr	r3, [r1, #4]
 800e1f0:	0c36      	lsrs	r6, r6, #16
 800e1f2:	4346      	muls	r6, r0
 800e1f4:	b29b      	uxth	r3, r3
 800e1f6:	0c12      	lsrs	r2, r2, #16
 800e1f8:	18f3      	adds	r3, r6, r3
 800e1fa:	189b      	adds	r3, r3, r2
 800e1fc:	9a05      	ldr	r2, [sp, #20]
 800e1fe:	0c1f      	lsrs	r7, r3, #16
 800e200:	3104      	adds	r1, #4
 800e202:	42aa      	cmp	r2, r5
 800e204:	d8e7      	bhi.n	800e1d6 <__multiply+0x10e>
 800e206:	4662      	mov	r2, ip
 800e208:	9906      	ldr	r1, [sp, #24]
 800e20a:	5053      	str	r3, [r2, r1]
 800e20c:	9b01      	ldr	r3, [sp, #4]
 800e20e:	3304      	adds	r3, #4
 800e210:	9301      	str	r3, [sp, #4]
 800e212:	2304      	movs	r3, #4
 800e214:	449c      	add	ip, r3
 800e216:	e79b      	b.n	800e150 <__multiply+0x88>
 800e218:	9b03      	ldr	r3, [sp, #12]
 800e21a:	3b01      	subs	r3, #1
 800e21c:	9303      	str	r3, [sp, #12]
 800e21e:	e79b      	b.n	800e158 <__multiply+0x90>
 800e220:	0800f648 	.word	0x0800f648
 800e224:	0800f6d0 	.word	0x0800f6d0

0800e228 <__pow5mult>:
 800e228:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e22a:	2303      	movs	r3, #3
 800e22c:	0015      	movs	r5, r2
 800e22e:	0007      	movs	r7, r0
 800e230:	000e      	movs	r6, r1
 800e232:	401a      	ands	r2, r3
 800e234:	421d      	tst	r5, r3
 800e236:	d008      	beq.n	800e24a <__pow5mult+0x22>
 800e238:	4925      	ldr	r1, [pc, #148]	; (800e2d0 <__pow5mult+0xa8>)
 800e23a:	3a01      	subs	r2, #1
 800e23c:	0092      	lsls	r2, r2, #2
 800e23e:	5852      	ldr	r2, [r2, r1]
 800e240:	2300      	movs	r3, #0
 800e242:	0031      	movs	r1, r6
 800e244:	f7ff fe50 	bl	800dee8 <__multadd>
 800e248:	0006      	movs	r6, r0
 800e24a:	10ad      	asrs	r5, r5, #2
 800e24c:	d03d      	beq.n	800e2ca <__pow5mult+0xa2>
 800e24e:	69fc      	ldr	r4, [r7, #28]
 800e250:	2c00      	cmp	r4, #0
 800e252:	d10f      	bne.n	800e274 <__pow5mult+0x4c>
 800e254:	2010      	movs	r0, #16
 800e256:	f000 fbbb 	bl	800e9d0 <malloc>
 800e25a:	1e02      	subs	r2, r0, #0
 800e25c:	61f8      	str	r0, [r7, #28]
 800e25e:	d105      	bne.n	800e26c <__pow5mult+0x44>
 800e260:	21b4      	movs	r1, #180	; 0xb4
 800e262:	4b1c      	ldr	r3, [pc, #112]	; (800e2d4 <__pow5mult+0xac>)
 800e264:	481c      	ldr	r0, [pc, #112]	; (800e2d8 <__pow5mult+0xb0>)
 800e266:	31ff      	adds	r1, #255	; 0xff
 800e268:	f000 fb66 	bl	800e938 <__assert_func>
 800e26c:	6044      	str	r4, [r0, #4]
 800e26e:	6084      	str	r4, [r0, #8]
 800e270:	6004      	str	r4, [r0, #0]
 800e272:	60c4      	str	r4, [r0, #12]
 800e274:	69fb      	ldr	r3, [r7, #28]
 800e276:	689c      	ldr	r4, [r3, #8]
 800e278:	9301      	str	r3, [sp, #4]
 800e27a:	2c00      	cmp	r4, #0
 800e27c:	d108      	bne.n	800e290 <__pow5mult+0x68>
 800e27e:	0038      	movs	r0, r7
 800e280:	4916      	ldr	r1, [pc, #88]	; (800e2dc <__pow5mult+0xb4>)
 800e282:	f7ff ff09 	bl	800e098 <__i2b>
 800e286:	9b01      	ldr	r3, [sp, #4]
 800e288:	0004      	movs	r4, r0
 800e28a:	6098      	str	r0, [r3, #8]
 800e28c:	2300      	movs	r3, #0
 800e28e:	6003      	str	r3, [r0, #0]
 800e290:	2301      	movs	r3, #1
 800e292:	421d      	tst	r5, r3
 800e294:	d00a      	beq.n	800e2ac <__pow5mult+0x84>
 800e296:	0031      	movs	r1, r6
 800e298:	0022      	movs	r2, r4
 800e29a:	0038      	movs	r0, r7
 800e29c:	f7ff ff14 	bl	800e0c8 <__multiply>
 800e2a0:	0031      	movs	r1, r6
 800e2a2:	9001      	str	r0, [sp, #4]
 800e2a4:	0038      	movs	r0, r7
 800e2a6:	f7ff fdfb 	bl	800dea0 <_Bfree>
 800e2aa:	9e01      	ldr	r6, [sp, #4]
 800e2ac:	106d      	asrs	r5, r5, #1
 800e2ae:	d00c      	beq.n	800e2ca <__pow5mult+0xa2>
 800e2b0:	6820      	ldr	r0, [r4, #0]
 800e2b2:	2800      	cmp	r0, #0
 800e2b4:	d107      	bne.n	800e2c6 <__pow5mult+0x9e>
 800e2b6:	0022      	movs	r2, r4
 800e2b8:	0021      	movs	r1, r4
 800e2ba:	0038      	movs	r0, r7
 800e2bc:	f7ff ff04 	bl	800e0c8 <__multiply>
 800e2c0:	2300      	movs	r3, #0
 800e2c2:	6020      	str	r0, [r4, #0]
 800e2c4:	6003      	str	r3, [r0, #0]
 800e2c6:	0004      	movs	r4, r0
 800e2c8:	e7e2      	b.n	800e290 <__pow5mult+0x68>
 800e2ca:	0030      	movs	r0, r6
 800e2cc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800e2ce:	46c0      	nop			; (mov r8, r8)
 800e2d0:	0800f820 	.word	0x0800f820
 800e2d4:	0800f6b9 	.word	0x0800f6b9
 800e2d8:	0800f6d0 	.word	0x0800f6d0
 800e2dc:	00000271 	.word	0x00000271

0800e2e0 <__lshift>:
 800e2e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e2e2:	000c      	movs	r4, r1
 800e2e4:	0017      	movs	r7, r2
 800e2e6:	6923      	ldr	r3, [r4, #16]
 800e2e8:	1155      	asrs	r5, r2, #5
 800e2ea:	b087      	sub	sp, #28
 800e2ec:	18eb      	adds	r3, r5, r3
 800e2ee:	9302      	str	r3, [sp, #8]
 800e2f0:	3301      	adds	r3, #1
 800e2f2:	9301      	str	r3, [sp, #4]
 800e2f4:	6849      	ldr	r1, [r1, #4]
 800e2f6:	68a3      	ldr	r3, [r4, #8]
 800e2f8:	9004      	str	r0, [sp, #16]
 800e2fa:	9a01      	ldr	r2, [sp, #4]
 800e2fc:	4293      	cmp	r3, r2
 800e2fe:	db10      	blt.n	800e322 <__lshift+0x42>
 800e300:	9804      	ldr	r0, [sp, #16]
 800e302:	f7ff fd89 	bl	800de18 <_Balloc>
 800e306:	2300      	movs	r3, #0
 800e308:	0002      	movs	r2, r0
 800e30a:	0006      	movs	r6, r0
 800e30c:	0019      	movs	r1, r3
 800e30e:	3214      	adds	r2, #20
 800e310:	4298      	cmp	r0, r3
 800e312:	d10c      	bne.n	800e32e <__lshift+0x4e>
 800e314:	31df      	adds	r1, #223	; 0xdf
 800e316:	0032      	movs	r2, r6
 800e318:	4b26      	ldr	r3, [pc, #152]	; (800e3b4 <__lshift+0xd4>)
 800e31a:	4827      	ldr	r0, [pc, #156]	; (800e3b8 <__lshift+0xd8>)
 800e31c:	31ff      	adds	r1, #255	; 0xff
 800e31e:	f000 fb0b 	bl	800e938 <__assert_func>
 800e322:	3101      	adds	r1, #1
 800e324:	005b      	lsls	r3, r3, #1
 800e326:	e7e8      	b.n	800e2fa <__lshift+0x1a>
 800e328:	0098      	lsls	r0, r3, #2
 800e32a:	5011      	str	r1, [r2, r0]
 800e32c:	3301      	adds	r3, #1
 800e32e:	42ab      	cmp	r3, r5
 800e330:	dbfa      	blt.n	800e328 <__lshift+0x48>
 800e332:	43eb      	mvns	r3, r5
 800e334:	17db      	asrs	r3, r3, #31
 800e336:	401d      	ands	r5, r3
 800e338:	211f      	movs	r1, #31
 800e33a:	0023      	movs	r3, r4
 800e33c:	0038      	movs	r0, r7
 800e33e:	00ad      	lsls	r5, r5, #2
 800e340:	1955      	adds	r5, r2, r5
 800e342:	6922      	ldr	r2, [r4, #16]
 800e344:	3314      	adds	r3, #20
 800e346:	0092      	lsls	r2, r2, #2
 800e348:	4008      	ands	r0, r1
 800e34a:	4684      	mov	ip, r0
 800e34c:	189a      	adds	r2, r3, r2
 800e34e:	420f      	tst	r7, r1
 800e350:	d02a      	beq.n	800e3a8 <__lshift+0xc8>
 800e352:	3101      	adds	r1, #1
 800e354:	1a09      	subs	r1, r1, r0
 800e356:	9105      	str	r1, [sp, #20]
 800e358:	2100      	movs	r1, #0
 800e35a:	9503      	str	r5, [sp, #12]
 800e35c:	4667      	mov	r7, ip
 800e35e:	6818      	ldr	r0, [r3, #0]
 800e360:	40b8      	lsls	r0, r7
 800e362:	4308      	orrs	r0, r1
 800e364:	9903      	ldr	r1, [sp, #12]
 800e366:	c101      	stmia	r1!, {r0}
 800e368:	9103      	str	r1, [sp, #12]
 800e36a:	9805      	ldr	r0, [sp, #20]
 800e36c:	cb02      	ldmia	r3!, {r1}
 800e36e:	40c1      	lsrs	r1, r0
 800e370:	429a      	cmp	r2, r3
 800e372:	d8f3      	bhi.n	800e35c <__lshift+0x7c>
 800e374:	0020      	movs	r0, r4
 800e376:	3015      	adds	r0, #21
 800e378:	2304      	movs	r3, #4
 800e37a:	4282      	cmp	r2, r0
 800e37c:	d304      	bcc.n	800e388 <__lshift+0xa8>
 800e37e:	1b13      	subs	r3, r2, r4
 800e380:	3b15      	subs	r3, #21
 800e382:	089b      	lsrs	r3, r3, #2
 800e384:	3301      	adds	r3, #1
 800e386:	009b      	lsls	r3, r3, #2
 800e388:	50e9      	str	r1, [r5, r3]
 800e38a:	2900      	cmp	r1, #0
 800e38c:	d002      	beq.n	800e394 <__lshift+0xb4>
 800e38e:	9b02      	ldr	r3, [sp, #8]
 800e390:	3302      	adds	r3, #2
 800e392:	9301      	str	r3, [sp, #4]
 800e394:	9b01      	ldr	r3, [sp, #4]
 800e396:	9804      	ldr	r0, [sp, #16]
 800e398:	3b01      	subs	r3, #1
 800e39a:	0021      	movs	r1, r4
 800e39c:	6133      	str	r3, [r6, #16]
 800e39e:	f7ff fd7f 	bl	800dea0 <_Bfree>
 800e3a2:	0030      	movs	r0, r6
 800e3a4:	b007      	add	sp, #28
 800e3a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e3a8:	cb02      	ldmia	r3!, {r1}
 800e3aa:	c502      	stmia	r5!, {r1}
 800e3ac:	429a      	cmp	r2, r3
 800e3ae:	d8fb      	bhi.n	800e3a8 <__lshift+0xc8>
 800e3b0:	e7f0      	b.n	800e394 <__lshift+0xb4>
 800e3b2:	46c0      	nop			; (mov r8, r8)
 800e3b4:	0800f648 	.word	0x0800f648
 800e3b8:	0800f6d0 	.word	0x0800f6d0

0800e3bc <__mcmp>:
 800e3bc:	b530      	push	{r4, r5, lr}
 800e3be:	690b      	ldr	r3, [r1, #16]
 800e3c0:	6904      	ldr	r4, [r0, #16]
 800e3c2:	0002      	movs	r2, r0
 800e3c4:	1ae0      	subs	r0, r4, r3
 800e3c6:	429c      	cmp	r4, r3
 800e3c8:	d10e      	bne.n	800e3e8 <__mcmp+0x2c>
 800e3ca:	3214      	adds	r2, #20
 800e3cc:	009b      	lsls	r3, r3, #2
 800e3ce:	3114      	adds	r1, #20
 800e3d0:	0014      	movs	r4, r2
 800e3d2:	18c9      	adds	r1, r1, r3
 800e3d4:	18d2      	adds	r2, r2, r3
 800e3d6:	3a04      	subs	r2, #4
 800e3d8:	3904      	subs	r1, #4
 800e3da:	6815      	ldr	r5, [r2, #0]
 800e3dc:	680b      	ldr	r3, [r1, #0]
 800e3de:	429d      	cmp	r5, r3
 800e3e0:	d003      	beq.n	800e3ea <__mcmp+0x2e>
 800e3e2:	2001      	movs	r0, #1
 800e3e4:	429d      	cmp	r5, r3
 800e3e6:	d303      	bcc.n	800e3f0 <__mcmp+0x34>
 800e3e8:	bd30      	pop	{r4, r5, pc}
 800e3ea:	4294      	cmp	r4, r2
 800e3ec:	d3f3      	bcc.n	800e3d6 <__mcmp+0x1a>
 800e3ee:	e7fb      	b.n	800e3e8 <__mcmp+0x2c>
 800e3f0:	4240      	negs	r0, r0
 800e3f2:	e7f9      	b.n	800e3e8 <__mcmp+0x2c>

0800e3f4 <__mdiff>:
 800e3f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e3f6:	000e      	movs	r6, r1
 800e3f8:	0007      	movs	r7, r0
 800e3fa:	0011      	movs	r1, r2
 800e3fc:	0030      	movs	r0, r6
 800e3fe:	b087      	sub	sp, #28
 800e400:	0014      	movs	r4, r2
 800e402:	f7ff ffdb 	bl	800e3bc <__mcmp>
 800e406:	1e05      	subs	r5, r0, #0
 800e408:	d110      	bne.n	800e42c <__mdiff+0x38>
 800e40a:	0001      	movs	r1, r0
 800e40c:	0038      	movs	r0, r7
 800e40e:	f7ff fd03 	bl	800de18 <_Balloc>
 800e412:	1e02      	subs	r2, r0, #0
 800e414:	d104      	bne.n	800e420 <__mdiff+0x2c>
 800e416:	4b3f      	ldr	r3, [pc, #252]	; (800e514 <__mdiff+0x120>)
 800e418:	483f      	ldr	r0, [pc, #252]	; (800e518 <__mdiff+0x124>)
 800e41a:	4940      	ldr	r1, [pc, #256]	; (800e51c <__mdiff+0x128>)
 800e41c:	f000 fa8c 	bl	800e938 <__assert_func>
 800e420:	2301      	movs	r3, #1
 800e422:	6145      	str	r5, [r0, #20]
 800e424:	6103      	str	r3, [r0, #16]
 800e426:	0010      	movs	r0, r2
 800e428:	b007      	add	sp, #28
 800e42a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e42c:	2301      	movs	r3, #1
 800e42e:	9301      	str	r3, [sp, #4]
 800e430:	2800      	cmp	r0, #0
 800e432:	db04      	blt.n	800e43e <__mdiff+0x4a>
 800e434:	0023      	movs	r3, r4
 800e436:	0034      	movs	r4, r6
 800e438:	001e      	movs	r6, r3
 800e43a:	2300      	movs	r3, #0
 800e43c:	9301      	str	r3, [sp, #4]
 800e43e:	0038      	movs	r0, r7
 800e440:	6861      	ldr	r1, [r4, #4]
 800e442:	f7ff fce9 	bl	800de18 <_Balloc>
 800e446:	1e02      	subs	r2, r0, #0
 800e448:	d103      	bne.n	800e452 <__mdiff+0x5e>
 800e44a:	4b32      	ldr	r3, [pc, #200]	; (800e514 <__mdiff+0x120>)
 800e44c:	4832      	ldr	r0, [pc, #200]	; (800e518 <__mdiff+0x124>)
 800e44e:	4934      	ldr	r1, [pc, #208]	; (800e520 <__mdiff+0x12c>)
 800e450:	e7e4      	b.n	800e41c <__mdiff+0x28>
 800e452:	9b01      	ldr	r3, [sp, #4]
 800e454:	2700      	movs	r7, #0
 800e456:	60c3      	str	r3, [r0, #12]
 800e458:	6920      	ldr	r0, [r4, #16]
 800e45a:	3414      	adds	r4, #20
 800e45c:	0083      	lsls	r3, r0, #2
 800e45e:	18e3      	adds	r3, r4, r3
 800e460:	0021      	movs	r1, r4
 800e462:	9401      	str	r4, [sp, #4]
 800e464:	0034      	movs	r4, r6
 800e466:	9302      	str	r3, [sp, #8]
 800e468:	6933      	ldr	r3, [r6, #16]
 800e46a:	3414      	adds	r4, #20
 800e46c:	009b      	lsls	r3, r3, #2
 800e46e:	18e3      	adds	r3, r4, r3
 800e470:	9303      	str	r3, [sp, #12]
 800e472:	0013      	movs	r3, r2
 800e474:	3314      	adds	r3, #20
 800e476:	469c      	mov	ip, r3
 800e478:	9305      	str	r3, [sp, #20]
 800e47a:	9104      	str	r1, [sp, #16]
 800e47c:	9b04      	ldr	r3, [sp, #16]
 800e47e:	cc02      	ldmia	r4!, {r1}
 800e480:	cb20      	ldmia	r3!, {r5}
 800e482:	9304      	str	r3, [sp, #16]
 800e484:	b2ab      	uxth	r3, r5
 800e486:	19df      	adds	r7, r3, r7
 800e488:	b28b      	uxth	r3, r1
 800e48a:	1afb      	subs	r3, r7, r3
 800e48c:	0c09      	lsrs	r1, r1, #16
 800e48e:	0c2d      	lsrs	r5, r5, #16
 800e490:	1a6d      	subs	r5, r5, r1
 800e492:	1419      	asrs	r1, r3, #16
 800e494:	1869      	adds	r1, r5, r1
 800e496:	b29b      	uxth	r3, r3
 800e498:	140f      	asrs	r7, r1, #16
 800e49a:	0409      	lsls	r1, r1, #16
 800e49c:	4319      	orrs	r1, r3
 800e49e:	4663      	mov	r3, ip
 800e4a0:	c302      	stmia	r3!, {r1}
 800e4a2:	469c      	mov	ip, r3
 800e4a4:	9b03      	ldr	r3, [sp, #12]
 800e4a6:	42a3      	cmp	r3, r4
 800e4a8:	d8e8      	bhi.n	800e47c <__mdiff+0x88>
 800e4aa:	0031      	movs	r1, r6
 800e4ac:	9c03      	ldr	r4, [sp, #12]
 800e4ae:	3115      	adds	r1, #21
 800e4b0:	2304      	movs	r3, #4
 800e4b2:	428c      	cmp	r4, r1
 800e4b4:	d304      	bcc.n	800e4c0 <__mdiff+0xcc>
 800e4b6:	1ba3      	subs	r3, r4, r6
 800e4b8:	3b15      	subs	r3, #21
 800e4ba:	089b      	lsrs	r3, r3, #2
 800e4bc:	3301      	adds	r3, #1
 800e4be:	009b      	lsls	r3, r3, #2
 800e4c0:	9901      	ldr	r1, [sp, #4]
 800e4c2:	18cd      	adds	r5, r1, r3
 800e4c4:	9905      	ldr	r1, [sp, #20]
 800e4c6:	002e      	movs	r6, r5
 800e4c8:	18cb      	adds	r3, r1, r3
 800e4ca:	469c      	mov	ip, r3
 800e4cc:	9902      	ldr	r1, [sp, #8]
 800e4ce:	428e      	cmp	r6, r1
 800e4d0:	d310      	bcc.n	800e4f4 <__mdiff+0x100>
 800e4d2:	9e02      	ldr	r6, [sp, #8]
 800e4d4:	1ee9      	subs	r1, r5, #3
 800e4d6:	2400      	movs	r4, #0
 800e4d8:	428e      	cmp	r6, r1
 800e4da:	d304      	bcc.n	800e4e6 <__mdiff+0xf2>
 800e4dc:	0031      	movs	r1, r6
 800e4de:	3103      	adds	r1, #3
 800e4e0:	1b49      	subs	r1, r1, r5
 800e4e2:	0889      	lsrs	r1, r1, #2
 800e4e4:	008c      	lsls	r4, r1, #2
 800e4e6:	191b      	adds	r3, r3, r4
 800e4e8:	3b04      	subs	r3, #4
 800e4ea:	6819      	ldr	r1, [r3, #0]
 800e4ec:	2900      	cmp	r1, #0
 800e4ee:	d00f      	beq.n	800e510 <__mdiff+0x11c>
 800e4f0:	6110      	str	r0, [r2, #16]
 800e4f2:	e798      	b.n	800e426 <__mdiff+0x32>
 800e4f4:	ce02      	ldmia	r6!, {r1}
 800e4f6:	b28c      	uxth	r4, r1
 800e4f8:	19e4      	adds	r4, r4, r7
 800e4fa:	0c0f      	lsrs	r7, r1, #16
 800e4fc:	1421      	asrs	r1, r4, #16
 800e4fe:	1879      	adds	r1, r7, r1
 800e500:	b2a4      	uxth	r4, r4
 800e502:	140f      	asrs	r7, r1, #16
 800e504:	0409      	lsls	r1, r1, #16
 800e506:	4321      	orrs	r1, r4
 800e508:	4664      	mov	r4, ip
 800e50a:	c402      	stmia	r4!, {r1}
 800e50c:	46a4      	mov	ip, r4
 800e50e:	e7dd      	b.n	800e4cc <__mdiff+0xd8>
 800e510:	3801      	subs	r0, #1
 800e512:	e7e9      	b.n	800e4e8 <__mdiff+0xf4>
 800e514:	0800f648 	.word	0x0800f648
 800e518:	0800f6d0 	.word	0x0800f6d0
 800e51c:	00000237 	.word	0x00000237
 800e520:	00000245 	.word	0x00000245

0800e524 <__ulp>:
 800e524:	2000      	movs	r0, #0
 800e526:	4b0b      	ldr	r3, [pc, #44]	; (800e554 <__ulp+0x30>)
 800e528:	4019      	ands	r1, r3
 800e52a:	4b0b      	ldr	r3, [pc, #44]	; (800e558 <__ulp+0x34>)
 800e52c:	18c9      	adds	r1, r1, r3
 800e52e:	4281      	cmp	r1, r0
 800e530:	dc06      	bgt.n	800e540 <__ulp+0x1c>
 800e532:	4249      	negs	r1, r1
 800e534:	150b      	asrs	r3, r1, #20
 800e536:	2b13      	cmp	r3, #19
 800e538:	dc03      	bgt.n	800e542 <__ulp+0x1e>
 800e53a:	2180      	movs	r1, #128	; 0x80
 800e53c:	0309      	lsls	r1, r1, #12
 800e53e:	4119      	asrs	r1, r3
 800e540:	4770      	bx	lr
 800e542:	3b14      	subs	r3, #20
 800e544:	2001      	movs	r0, #1
 800e546:	2b1e      	cmp	r3, #30
 800e548:	dc02      	bgt.n	800e550 <__ulp+0x2c>
 800e54a:	2080      	movs	r0, #128	; 0x80
 800e54c:	0600      	lsls	r0, r0, #24
 800e54e:	40d8      	lsrs	r0, r3
 800e550:	2100      	movs	r1, #0
 800e552:	e7f5      	b.n	800e540 <__ulp+0x1c>
 800e554:	7ff00000 	.word	0x7ff00000
 800e558:	fcc00000 	.word	0xfcc00000

0800e55c <__b2d>:
 800e55c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e55e:	0006      	movs	r6, r0
 800e560:	6903      	ldr	r3, [r0, #16]
 800e562:	3614      	adds	r6, #20
 800e564:	009b      	lsls	r3, r3, #2
 800e566:	18f3      	adds	r3, r6, r3
 800e568:	1f1d      	subs	r5, r3, #4
 800e56a:	682c      	ldr	r4, [r5, #0]
 800e56c:	000f      	movs	r7, r1
 800e56e:	0020      	movs	r0, r4
 800e570:	9301      	str	r3, [sp, #4]
 800e572:	f7ff fd49 	bl	800e008 <__hi0bits>
 800e576:	2220      	movs	r2, #32
 800e578:	1a12      	subs	r2, r2, r0
 800e57a:	603a      	str	r2, [r7, #0]
 800e57c:	0003      	movs	r3, r0
 800e57e:	4a1c      	ldr	r2, [pc, #112]	; (800e5f0 <__b2d+0x94>)
 800e580:	280a      	cmp	r0, #10
 800e582:	dc15      	bgt.n	800e5b0 <__b2d+0x54>
 800e584:	210b      	movs	r1, #11
 800e586:	0027      	movs	r7, r4
 800e588:	1a09      	subs	r1, r1, r0
 800e58a:	40cf      	lsrs	r7, r1
 800e58c:	433a      	orrs	r2, r7
 800e58e:	468c      	mov	ip, r1
 800e590:	0011      	movs	r1, r2
 800e592:	2200      	movs	r2, #0
 800e594:	42ae      	cmp	r6, r5
 800e596:	d202      	bcs.n	800e59e <__b2d+0x42>
 800e598:	9a01      	ldr	r2, [sp, #4]
 800e59a:	3a08      	subs	r2, #8
 800e59c:	6812      	ldr	r2, [r2, #0]
 800e59e:	3315      	adds	r3, #21
 800e5a0:	409c      	lsls	r4, r3
 800e5a2:	4663      	mov	r3, ip
 800e5a4:	0027      	movs	r7, r4
 800e5a6:	40da      	lsrs	r2, r3
 800e5a8:	4317      	orrs	r7, r2
 800e5aa:	0038      	movs	r0, r7
 800e5ac:	b003      	add	sp, #12
 800e5ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e5b0:	2700      	movs	r7, #0
 800e5b2:	42ae      	cmp	r6, r5
 800e5b4:	d202      	bcs.n	800e5bc <__b2d+0x60>
 800e5b6:	9d01      	ldr	r5, [sp, #4]
 800e5b8:	3d08      	subs	r5, #8
 800e5ba:	682f      	ldr	r7, [r5, #0]
 800e5bc:	210b      	movs	r1, #11
 800e5be:	4249      	negs	r1, r1
 800e5c0:	468c      	mov	ip, r1
 800e5c2:	449c      	add	ip, r3
 800e5c4:	2b0b      	cmp	r3, #11
 800e5c6:	d010      	beq.n	800e5ea <__b2d+0x8e>
 800e5c8:	4661      	mov	r1, ip
 800e5ca:	2320      	movs	r3, #32
 800e5cc:	408c      	lsls	r4, r1
 800e5ce:	1a5b      	subs	r3, r3, r1
 800e5d0:	0039      	movs	r1, r7
 800e5d2:	40d9      	lsrs	r1, r3
 800e5d4:	430c      	orrs	r4, r1
 800e5d6:	4322      	orrs	r2, r4
 800e5d8:	0011      	movs	r1, r2
 800e5da:	2200      	movs	r2, #0
 800e5dc:	42b5      	cmp	r5, r6
 800e5de:	d901      	bls.n	800e5e4 <__b2d+0x88>
 800e5e0:	3d04      	subs	r5, #4
 800e5e2:	682a      	ldr	r2, [r5, #0]
 800e5e4:	4664      	mov	r4, ip
 800e5e6:	40a7      	lsls	r7, r4
 800e5e8:	e7dd      	b.n	800e5a6 <__b2d+0x4a>
 800e5ea:	4322      	orrs	r2, r4
 800e5ec:	0011      	movs	r1, r2
 800e5ee:	e7dc      	b.n	800e5aa <__b2d+0x4e>
 800e5f0:	3ff00000 	.word	0x3ff00000

0800e5f4 <__d2b>:
 800e5f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e5f6:	2101      	movs	r1, #1
 800e5f8:	0014      	movs	r4, r2
 800e5fa:	001d      	movs	r5, r3
 800e5fc:	9f08      	ldr	r7, [sp, #32]
 800e5fe:	f7ff fc0b 	bl	800de18 <_Balloc>
 800e602:	1e06      	subs	r6, r0, #0
 800e604:	d105      	bne.n	800e612 <__d2b+0x1e>
 800e606:	0032      	movs	r2, r6
 800e608:	4b24      	ldr	r3, [pc, #144]	; (800e69c <__d2b+0xa8>)
 800e60a:	4825      	ldr	r0, [pc, #148]	; (800e6a0 <__d2b+0xac>)
 800e60c:	4925      	ldr	r1, [pc, #148]	; (800e6a4 <__d2b+0xb0>)
 800e60e:	f000 f993 	bl	800e938 <__assert_func>
 800e612:	032b      	lsls	r3, r5, #12
 800e614:	006d      	lsls	r5, r5, #1
 800e616:	0b1b      	lsrs	r3, r3, #12
 800e618:	0d6d      	lsrs	r5, r5, #21
 800e61a:	d125      	bne.n	800e668 <__d2b+0x74>
 800e61c:	9301      	str	r3, [sp, #4]
 800e61e:	2c00      	cmp	r4, #0
 800e620:	d028      	beq.n	800e674 <__d2b+0x80>
 800e622:	4668      	mov	r0, sp
 800e624:	9400      	str	r4, [sp, #0]
 800e626:	f7ff fd09 	bl	800e03c <__lo0bits>
 800e62a:	9b01      	ldr	r3, [sp, #4]
 800e62c:	9900      	ldr	r1, [sp, #0]
 800e62e:	2800      	cmp	r0, #0
 800e630:	d01e      	beq.n	800e670 <__d2b+0x7c>
 800e632:	2220      	movs	r2, #32
 800e634:	001c      	movs	r4, r3
 800e636:	1a12      	subs	r2, r2, r0
 800e638:	4094      	lsls	r4, r2
 800e63a:	0022      	movs	r2, r4
 800e63c:	40c3      	lsrs	r3, r0
 800e63e:	430a      	orrs	r2, r1
 800e640:	6172      	str	r2, [r6, #20]
 800e642:	9301      	str	r3, [sp, #4]
 800e644:	9c01      	ldr	r4, [sp, #4]
 800e646:	61b4      	str	r4, [r6, #24]
 800e648:	1e63      	subs	r3, r4, #1
 800e64a:	419c      	sbcs	r4, r3
 800e64c:	3401      	adds	r4, #1
 800e64e:	6134      	str	r4, [r6, #16]
 800e650:	2d00      	cmp	r5, #0
 800e652:	d017      	beq.n	800e684 <__d2b+0x90>
 800e654:	2435      	movs	r4, #53	; 0x35
 800e656:	4b14      	ldr	r3, [pc, #80]	; (800e6a8 <__d2b+0xb4>)
 800e658:	18ed      	adds	r5, r5, r3
 800e65a:	182d      	adds	r5, r5, r0
 800e65c:	603d      	str	r5, [r7, #0]
 800e65e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e660:	1a24      	subs	r4, r4, r0
 800e662:	601c      	str	r4, [r3, #0]
 800e664:	0030      	movs	r0, r6
 800e666:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800e668:	2280      	movs	r2, #128	; 0x80
 800e66a:	0352      	lsls	r2, r2, #13
 800e66c:	4313      	orrs	r3, r2
 800e66e:	e7d5      	b.n	800e61c <__d2b+0x28>
 800e670:	6171      	str	r1, [r6, #20]
 800e672:	e7e7      	b.n	800e644 <__d2b+0x50>
 800e674:	a801      	add	r0, sp, #4
 800e676:	f7ff fce1 	bl	800e03c <__lo0bits>
 800e67a:	9b01      	ldr	r3, [sp, #4]
 800e67c:	2401      	movs	r4, #1
 800e67e:	6173      	str	r3, [r6, #20]
 800e680:	3020      	adds	r0, #32
 800e682:	e7e4      	b.n	800e64e <__d2b+0x5a>
 800e684:	4b09      	ldr	r3, [pc, #36]	; (800e6ac <__d2b+0xb8>)
 800e686:	18c0      	adds	r0, r0, r3
 800e688:	4b09      	ldr	r3, [pc, #36]	; (800e6b0 <__d2b+0xbc>)
 800e68a:	6038      	str	r0, [r7, #0]
 800e68c:	18e3      	adds	r3, r4, r3
 800e68e:	009b      	lsls	r3, r3, #2
 800e690:	18f3      	adds	r3, r6, r3
 800e692:	6958      	ldr	r0, [r3, #20]
 800e694:	f7ff fcb8 	bl	800e008 <__hi0bits>
 800e698:	0164      	lsls	r4, r4, #5
 800e69a:	e7e0      	b.n	800e65e <__d2b+0x6a>
 800e69c:	0800f648 	.word	0x0800f648
 800e6a0:	0800f6d0 	.word	0x0800f6d0
 800e6a4:	0000030f 	.word	0x0000030f
 800e6a8:	fffffbcd 	.word	0xfffffbcd
 800e6ac:	fffffbce 	.word	0xfffffbce
 800e6b0:	3fffffff 	.word	0x3fffffff

0800e6b4 <__ratio>:
 800e6b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e6b6:	b087      	sub	sp, #28
 800e6b8:	000f      	movs	r7, r1
 800e6ba:	a904      	add	r1, sp, #16
 800e6bc:	0006      	movs	r6, r0
 800e6be:	f7ff ff4d 	bl	800e55c <__b2d>
 800e6c2:	9000      	str	r0, [sp, #0]
 800e6c4:	9101      	str	r1, [sp, #4]
 800e6c6:	9c00      	ldr	r4, [sp, #0]
 800e6c8:	9d01      	ldr	r5, [sp, #4]
 800e6ca:	0038      	movs	r0, r7
 800e6cc:	a905      	add	r1, sp, #20
 800e6ce:	f7ff ff45 	bl	800e55c <__b2d>
 800e6d2:	9002      	str	r0, [sp, #8]
 800e6d4:	9103      	str	r1, [sp, #12]
 800e6d6:	9a02      	ldr	r2, [sp, #8]
 800e6d8:	9b03      	ldr	r3, [sp, #12]
 800e6da:	6930      	ldr	r0, [r6, #16]
 800e6dc:	6939      	ldr	r1, [r7, #16]
 800e6de:	9e04      	ldr	r6, [sp, #16]
 800e6e0:	1a40      	subs	r0, r0, r1
 800e6e2:	9905      	ldr	r1, [sp, #20]
 800e6e4:	0140      	lsls	r0, r0, #5
 800e6e6:	1a71      	subs	r1, r6, r1
 800e6e8:	1841      	adds	r1, r0, r1
 800e6ea:	0508      	lsls	r0, r1, #20
 800e6ec:	2900      	cmp	r1, #0
 800e6ee:	dd07      	ble.n	800e700 <__ratio+0x4c>
 800e6f0:	9901      	ldr	r1, [sp, #4]
 800e6f2:	1845      	adds	r5, r0, r1
 800e6f4:	0020      	movs	r0, r4
 800e6f6:	0029      	movs	r1, r5
 800e6f8:	f7f3 f8e0 	bl	80018bc <__aeabi_ddiv>
 800e6fc:	b007      	add	sp, #28
 800e6fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e700:	9903      	ldr	r1, [sp, #12]
 800e702:	1a0b      	subs	r3, r1, r0
 800e704:	e7f6      	b.n	800e6f4 <__ratio+0x40>

0800e706 <__copybits>:
 800e706:	b570      	push	{r4, r5, r6, lr}
 800e708:	0014      	movs	r4, r2
 800e70a:	0005      	movs	r5, r0
 800e70c:	3901      	subs	r1, #1
 800e70e:	6913      	ldr	r3, [r2, #16]
 800e710:	1149      	asrs	r1, r1, #5
 800e712:	3101      	adds	r1, #1
 800e714:	0089      	lsls	r1, r1, #2
 800e716:	3414      	adds	r4, #20
 800e718:	009b      	lsls	r3, r3, #2
 800e71a:	1841      	adds	r1, r0, r1
 800e71c:	18e3      	adds	r3, r4, r3
 800e71e:	42a3      	cmp	r3, r4
 800e720:	d80d      	bhi.n	800e73e <__copybits+0x38>
 800e722:	0014      	movs	r4, r2
 800e724:	3411      	adds	r4, #17
 800e726:	2500      	movs	r5, #0
 800e728:	429c      	cmp	r4, r3
 800e72a:	d803      	bhi.n	800e734 <__copybits+0x2e>
 800e72c:	1a9b      	subs	r3, r3, r2
 800e72e:	3b11      	subs	r3, #17
 800e730:	089b      	lsrs	r3, r3, #2
 800e732:	009d      	lsls	r5, r3, #2
 800e734:	2300      	movs	r3, #0
 800e736:	1940      	adds	r0, r0, r5
 800e738:	4281      	cmp	r1, r0
 800e73a:	d803      	bhi.n	800e744 <__copybits+0x3e>
 800e73c:	bd70      	pop	{r4, r5, r6, pc}
 800e73e:	cc40      	ldmia	r4!, {r6}
 800e740:	c540      	stmia	r5!, {r6}
 800e742:	e7ec      	b.n	800e71e <__copybits+0x18>
 800e744:	c008      	stmia	r0!, {r3}
 800e746:	e7f7      	b.n	800e738 <__copybits+0x32>

0800e748 <__any_on>:
 800e748:	0002      	movs	r2, r0
 800e74a:	6900      	ldr	r0, [r0, #16]
 800e74c:	b510      	push	{r4, lr}
 800e74e:	3214      	adds	r2, #20
 800e750:	114b      	asrs	r3, r1, #5
 800e752:	4298      	cmp	r0, r3
 800e754:	db13      	blt.n	800e77e <__any_on+0x36>
 800e756:	dd0c      	ble.n	800e772 <__any_on+0x2a>
 800e758:	241f      	movs	r4, #31
 800e75a:	0008      	movs	r0, r1
 800e75c:	4020      	ands	r0, r4
 800e75e:	4221      	tst	r1, r4
 800e760:	d007      	beq.n	800e772 <__any_on+0x2a>
 800e762:	0099      	lsls	r1, r3, #2
 800e764:	588c      	ldr	r4, [r1, r2]
 800e766:	0021      	movs	r1, r4
 800e768:	40c1      	lsrs	r1, r0
 800e76a:	4081      	lsls	r1, r0
 800e76c:	2001      	movs	r0, #1
 800e76e:	428c      	cmp	r4, r1
 800e770:	d104      	bne.n	800e77c <__any_on+0x34>
 800e772:	009b      	lsls	r3, r3, #2
 800e774:	18d3      	adds	r3, r2, r3
 800e776:	4293      	cmp	r3, r2
 800e778:	d803      	bhi.n	800e782 <__any_on+0x3a>
 800e77a:	2000      	movs	r0, #0
 800e77c:	bd10      	pop	{r4, pc}
 800e77e:	0003      	movs	r3, r0
 800e780:	e7f7      	b.n	800e772 <__any_on+0x2a>
 800e782:	3b04      	subs	r3, #4
 800e784:	6819      	ldr	r1, [r3, #0]
 800e786:	2900      	cmp	r1, #0
 800e788:	d0f5      	beq.n	800e776 <__any_on+0x2e>
 800e78a:	2001      	movs	r0, #1
 800e78c:	e7f6      	b.n	800e77c <__any_on+0x34>

0800e78e <__ascii_wctomb>:
 800e78e:	0003      	movs	r3, r0
 800e790:	1e08      	subs	r0, r1, #0
 800e792:	d005      	beq.n	800e7a0 <__ascii_wctomb+0x12>
 800e794:	2aff      	cmp	r2, #255	; 0xff
 800e796:	d904      	bls.n	800e7a2 <__ascii_wctomb+0x14>
 800e798:	228a      	movs	r2, #138	; 0x8a
 800e79a:	2001      	movs	r0, #1
 800e79c:	601a      	str	r2, [r3, #0]
 800e79e:	4240      	negs	r0, r0
 800e7a0:	4770      	bx	lr
 800e7a2:	2001      	movs	r0, #1
 800e7a4:	700a      	strb	r2, [r1, #0]
 800e7a6:	e7fb      	b.n	800e7a0 <__ascii_wctomb+0x12>

0800e7a8 <__sflush_r>:
 800e7a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e7aa:	898b      	ldrh	r3, [r1, #12]
 800e7ac:	0005      	movs	r5, r0
 800e7ae:	000c      	movs	r4, r1
 800e7b0:	071a      	lsls	r2, r3, #28
 800e7b2:	d45c      	bmi.n	800e86e <__sflush_r+0xc6>
 800e7b4:	684a      	ldr	r2, [r1, #4]
 800e7b6:	2a00      	cmp	r2, #0
 800e7b8:	dc04      	bgt.n	800e7c4 <__sflush_r+0x1c>
 800e7ba:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 800e7bc:	2a00      	cmp	r2, #0
 800e7be:	dc01      	bgt.n	800e7c4 <__sflush_r+0x1c>
 800e7c0:	2000      	movs	r0, #0
 800e7c2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800e7c4:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800e7c6:	2f00      	cmp	r7, #0
 800e7c8:	d0fa      	beq.n	800e7c0 <__sflush_r+0x18>
 800e7ca:	2200      	movs	r2, #0
 800e7cc:	2080      	movs	r0, #128	; 0x80
 800e7ce:	682e      	ldr	r6, [r5, #0]
 800e7d0:	602a      	str	r2, [r5, #0]
 800e7d2:	001a      	movs	r2, r3
 800e7d4:	0140      	lsls	r0, r0, #5
 800e7d6:	6a21      	ldr	r1, [r4, #32]
 800e7d8:	4002      	ands	r2, r0
 800e7da:	4203      	tst	r3, r0
 800e7dc:	d034      	beq.n	800e848 <__sflush_r+0xa0>
 800e7de:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e7e0:	89a3      	ldrh	r3, [r4, #12]
 800e7e2:	075b      	lsls	r3, r3, #29
 800e7e4:	d506      	bpl.n	800e7f4 <__sflush_r+0x4c>
 800e7e6:	6863      	ldr	r3, [r4, #4]
 800e7e8:	1ac0      	subs	r0, r0, r3
 800e7ea:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e7ec:	2b00      	cmp	r3, #0
 800e7ee:	d001      	beq.n	800e7f4 <__sflush_r+0x4c>
 800e7f0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e7f2:	1ac0      	subs	r0, r0, r3
 800e7f4:	0002      	movs	r2, r0
 800e7f6:	2300      	movs	r3, #0
 800e7f8:	0028      	movs	r0, r5
 800e7fa:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800e7fc:	6a21      	ldr	r1, [r4, #32]
 800e7fe:	47b8      	blx	r7
 800e800:	89a2      	ldrh	r2, [r4, #12]
 800e802:	1c43      	adds	r3, r0, #1
 800e804:	d106      	bne.n	800e814 <__sflush_r+0x6c>
 800e806:	6829      	ldr	r1, [r5, #0]
 800e808:	291d      	cmp	r1, #29
 800e80a:	d82c      	bhi.n	800e866 <__sflush_r+0xbe>
 800e80c:	4b2a      	ldr	r3, [pc, #168]	; (800e8b8 <__sflush_r+0x110>)
 800e80e:	410b      	asrs	r3, r1
 800e810:	07db      	lsls	r3, r3, #31
 800e812:	d428      	bmi.n	800e866 <__sflush_r+0xbe>
 800e814:	2300      	movs	r3, #0
 800e816:	6063      	str	r3, [r4, #4]
 800e818:	6923      	ldr	r3, [r4, #16]
 800e81a:	6023      	str	r3, [r4, #0]
 800e81c:	04d2      	lsls	r2, r2, #19
 800e81e:	d505      	bpl.n	800e82c <__sflush_r+0x84>
 800e820:	1c43      	adds	r3, r0, #1
 800e822:	d102      	bne.n	800e82a <__sflush_r+0x82>
 800e824:	682b      	ldr	r3, [r5, #0]
 800e826:	2b00      	cmp	r3, #0
 800e828:	d100      	bne.n	800e82c <__sflush_r+0x84>
 800e82a:	6560      	str	r0, [r4, #84]	; 0x54
 800e82c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e82e:	602e      	str	r6, [r5, #0]
 800e830:	2900      	cmp	r1, #0
 800e832:	d0c5      	beq.n	800e7c0 <__sflush_r+0x18>
 800e834:	0023      	movs	r3, r4
 800e836:	3344      	adds	r3, #68	; 0x44
 800e838:	4299      	cmp	r1, r3
 800e83a:	d002      	beq.n	800e842 <__sflush_r+0x9a>
 800e83c:	0028      	movs	r0, r5
 800e83e:	f7fe fe7f 	bl	800d540 <_free_r>
 800e842:	2000      	movs	r0, #0
 800e844:	6360      	str	r0, [r4, #52]	; 0x34
 800e846:	e7bc      	b.n	800e7c2 <__sflush_r+0x1a>
 800e848:	2301      	movs	r3, #1
 800e84a:	0028      	movs	r0, r5
 800e84c:	47b8      	blx	r7
 800e84e:	1c43      	adds	r3, r0, #1
 800e850:	d1c6      	bne.n	800e7e0 <__sflush_r+0x38>
 800e852:	682b      	ldr	r3, [r5, #0]
 800e854:	2b00      	cmp	r3, #0
 800e856:	d0c3      	beq.n	800e7e0 <__sflush_r+0x38>
 800e858:	2b1d      	cmp	r3, #29
 800e85a:	d001      	beq.n	800e860 <__sflush_r+0xb8>
 800e85c:	2b16      	cmp	r3, #22
 800e85e:	d101      	bne.n	800e864 <__sflush_r+0xbc>
 800e860:	602e      	str	r6, [r5, #0]
 800e862:	e7ad      	b.n	800e7c0 <__sflush_r+0x18>
 800e864:	89a2      	ldrh	r2, [r4, #12]
 800e866:	2340      	movs	r3, #64	; 0x40
 800e868:	4313      	orrs	r3, r2
 800e86a:	81a3      	strh	r3, [r4, #12]
 800e86c:	e7a9      	b.n	800e7c2 <__sflush_r+0x1a>
 800e86e:	690e      	ldr	r6, [r1, #16]
 800e870:	2e00      	cmp	r6, #0
 800e872:	d0a5      	beq.n	800e7c0 <__sflush_r+0x18>
 800e874:	680f      	ldr	r7, [r1, #0]
 800e876:	600e      	str	r6, [r1, #0]
 800e878:	1bba      	subs	r2, r7, r6
 800e87a:	9201      	str	r2, [sp, #4]
 800e87c:	2200      	movs	r2, #0
 800e87e:	079b      	lsls	r3, r3, #30
 800e880:	d100      	bne.n	800e884 <__sflush_r+0xdc>
 800e882:	694a      	ldr	r2, [r1, #20]
 800e884:	60a2      	str	r2, [r4, #8]
 800e886:	9b01      	ldr	r3, [sp, #4]
 800e888:	2b00      	cmp	r3, #0
 800e88a:	dd99      	ble.n	800e7c0 <__sflush_r+0x18>
 800e88c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800e88e:	0032      	movs	r2, r6
 800e890:	001f      	movs	r7, r3
 800e892:	0028      	movs	r0, r5
 800e894:	9b01      	ldr	r3, [sp, #4]
 800e896:	6a21      	ldr	r1, [r4, #32]
 800e898:	47b8      	blx	r7
 800e89a:	2800      	cmp	r0, #0
 800e89c:	dc06      	bgt.n	800e8ac <__sflush_r+0x104>
 800e89e:	2340      	movs	r3, #64	; 0x40
 800e8a0:	2001      	movs	r0, #1
 800e8a2:	89a2      	ldrh	r2, [r4, #12]
 800e8a4:	4240      	negs	r0, r0
 800e8a6:	4313      	orrs	r3, r2
 800e8a8:	81a3      	strh	r3, [r4, #12]
 800e8aa:	e78a      	b.n	800e7c2 <__sflush_r+0x1a>
 800e8ac:	9b01      	ldr	r3, [sp, #4]
 800e8ae:	1836      	adds	r6, r6, r0
 800e8b0:	1a1b      	subs	r3, r3, r0
 800e8b2:	9301      	str	r3, [sp, #4]
 800e8b4:	e7e7      	b.n	800e886 <__sflush_r+0xde>
 800e8b6:	46c0      	nop			; (mov r8, r8)
 800e8b8:	dfbffffe 	.word	0xdfbffffe

0800e8bc <_fflush_r>:
 800e8bc:	690b      	ldr	r3, [r1, #16]
 800e8be:	b570      	push	{r4, r5, r6, lr}
 800e8c0:	0005      	movs	r5, r0
 800e8c2:	000c      	movs	r4, r1
 800e8c4:	2b00      	cmp	r3, #0
 800e8c6:	d102      	bne.n	800e8ce <_fflush_r+0x12>
 800e8c8:	2500      	movs	r5, #0
 800e8ca:	0028      	movs	r0, r5
 800e8cc:	bd70      	pop	{r4, r5, r6, pc}
 800e8ce:	2800      	cmp	r0, #0
 800e8d0:	d004      	beq.n	800e8dc <_fflush_r+0x20>
 800e8d2:	6a03      	ldr	r3, [r0, #32]
 800e8d4:	2b00      	cmp	r3, #0
 800e8d6:	d101      	bne.n	800e8dc <_fflush_r+0x20>
 800e8d8:	f7fe fca2 	bl	800d220 <__sinit>
 800e8dc:	220c      	movs	r2, #12
 800e8de:	5ea3      	ldrsh	r3, [r4, r2]
 800e8e0:	2b00      	cmp	r3, #0
 800e8e2:	d0f1      	beq.n	800e8c8 <_fflush_r+0xc>
 800e8e4:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e8e6:	07d2      	lsls	r2, r2, #31
 800e8e8:	d404      	bmi.n	800e8f4 <_fflush_r+0x38>
 800e8ea:	059b      	lsls	r3, r3, #22
 800e8ec:	d402      	bmi.n	800e8f4 <_fflush_r+0x38>
 800e8ee:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e8f0:	f7fe fe15 	bl	800d51e <__retarget_lock_acquire_recursive>
 800e8f4:	0028      	movs	r0, r5
 800e8f6:	0021      	movs	r1, r4
 800e8f8:	f7ff ff56 	bl	800e7a8 <__sflush_r>
 800e8fc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e8fe:	0005      	movs	r5, r0
 800e900:	07db      	lsls	r3, r3, #31
 800e902:	d4e2      	bmi.n	800e8ca <_fflush_r+0xe>
 800e904:	89a3      	ldrh	r3, [r4, #12]
 800e906:	059b      	lsls	r3, r3, #22
 800e908:	d4df      	bmi.n	800e8ca <_fflush_r+0xe>
 800e90a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e90c:	f7fe fe08 	bl	800d520 <__retarget_lock_release_recursive>
 800e910:	e7db      	b.n	800e8ca <_fflush_r+0xe>
	...

0800e914 <_sbrk_r>:
 800e914:	2300      	movs	r3, #0
 800e916:	b570      	push	{r4, r5, r6, lr}
 800e918:	4d06      	ldr	r5, [pc, #24]	; (800e934 <_sbrk_r+0x20>)
 800e91a:	0004      	movs	r4, r0
 800e91c:	0008      	movs	r0, r1
 800e91e:	602b      	str	r3, [r5, #0]
 800e920:	f7f6 fb56 	bl	8004fd0 <_sbrk>
 800e924:	1c43      	adds	r3, r0, #1
 800e926:	d103      	bne.n	800e930 <_sbrk_r+0x1c>
 800e928:	682b      	ldr	r3, [r5, #0]
 800e92a:	2b00      	cmp	r3, #0
 800e92c:	d000      	beq.n	800e930 <_sbrk_r+0x1c>
 800e92e:	6023      	str	r3, [r4, #0]
 800e930:	bd70      	pop	{r4, r5, r6, pc}
 800e932:	46c0      	nop			; (mov r8, r8)
 800e934:	20002a1c 	.word	0x20002a1c

0800e938 <__assert_func>:
 800e938:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800e93a:	0014      	movs	r4, r2
 800e93c:	001a      	movs	r2, r3
 800e93e:	4b09      	ldr	r3, [pc, #36]	; (800e964 <__assert_func+0x2c>)
 800e940:	0005      	movs	r5, r0
 800e942:	681b      	ldr	r3, [r3, #0]
 800e944:	000e      	movs	r6, r1
 800e946:	68d8      	ldr	r0, [r3, #12]
 800e948:	4b07      	ldr	r3, [pc, #28]	; (800e968 <__assert_func+0x30>)
 800e94a:	2c00      	cmp	r4, #0
 800e94c:	d101      	bne.n	800e952 <__assert_func+0x1a>
 800e94e:	4b07      	ldr	r3, [pc, #28]	; (800e96c <__assert_func+0x34>)
 800e950:	001c      	movs	r4, r3
 800e952:	4907      	ldr	r1, [pc, #28]	; (800e970 <__assert_func+0x38>)
 800e954:	9301      	str	r3, [sp, #4]
 800e956:	9402      	str	r4, [sp, #8]
 800e958:	002b      	movs	r3, r5
 800e95a:	9600      	str	r6, [sp, #0]
 800e95c:	f000 f842 	bl	800e9e4 <fiprintf>
 800e960:	f000 f850 	bl	800ea04 <abort>
 800e964:	200001d4 	.word	0x200001d4
 800e968:	0800f92d 	.word	0x0800f92d
 800e96c:	0800f968 	.word	0x0800f968
 800e970:	0800f93a 	.word	0x0800f93a

0800e974 <_calloc_r>:
 800e974:	b570      	push	{r4, r5, r6, lr}
 800e976:	0c0b      	lsrs	r3, r1, #16
 800e978:	0c15      	lsrs	r5, r2, #16
 800e97a:	2b00      	cmp	r3, #0
 800e97c:	d11e      	bne.n	800e9bc <_calloc_r+0x48>
 800e97e:	2d00      	cmp	r5, #0
 800e980:	d10c      	bne.n	800e99c <_calloc_r+0x28>
 800e982:	b289      	uxth	r1, r1
 800e984:	b294      	uxth	r4, r2
 800e986:	434c      	muls	r4, r1
 800e988:	0021      	movs	r1, r4
 800e98a:	f7ff f9a1 	bl	800dcd0 <_malloc_r>
 800e98e:	1e05      	subs	r5, r0, #0
 800e990:	d01b      	beq.n	800e9ca <_calloc_r+0x56>
 800e992:	0022      	movs	r2, r4
 800e994:	2100      	movs	r1, #0
 800e996:	f7fe fcd1 	bl	800d33c <memset>
 800e99a:	e016      	b.n	800e9ca <_calloc_r+0x56>
 800e99c:	1c2b      	adds	r3, r5, #0
 800e99e:	1c0c      	adds	r4, r1, #0
 800e9a0:	b289      	uxth	r1, r1
 800e9a2:	b292      	uxth	r2, r2
 800e9a4:	434a      	muls	r2, r1
 800e9a6:	b2a1      	uxth	r1, r4
 800e9a8:	b29c      	uxth	r4, r3
 800e9aa:	434c      	muls	r4, r1
 800e9ac:	0c13      	lsrs	r3, r2, #16
 800e9ae:	18e4      	adds	r4, r4, r3
 800e9b0:	0c23      	lsrs	r3, r4, #16
 800e9b2:	d107      	bne.n	800e9c4 <_calloc_r+0x50>
 800e9b4:	0424      	lsls	r4, r4, #16
 800e9b6:	b292      	uxth	r2, r2
 800e9b8:	4314      	orrs	r4, r2
 800e9ba:	e7e5      	b.n	800e988 <_calloc_r+0x14>
 800e9bc:	2d00      	cmp	r5, #0
 800e9be:	d101      	bne.n	800e9c4 <_calloc_r+0x50>
 800e9c0:	1c14      	adds	r4, r2, #0
 800e9c2:	e7ed      	b.n	800e9a0 <_calloc_r+0x2c>
 800e9c4:	230c      	movs	r3, #12
 800e9c6:	2500      	movs	r5, #0
 800e9c8:	6003      	str	r3, [r0, #0]
 800e9ca:	0028      	movs	r0, r5
 800e9cc:	bd70      	pop	{r4, r5, r6, pc}
	...

0800e9d0 <malloc>:
 800e9d0:	b510      	push	{r4, lr}
 800e9d2:	4b03      	ldr	r3, [pc, #12]	; (800e9e0 <malloc+0x10>)
 800e9d4:	0001      	movs	r1, r0
 800e9d6:	6818      	ldr	r0, [r3, #0]
 800e9d8:	f7ff f97a 	bl	800dcd0 <_malloc_r>
 800e9dc:	bd10      	pop	{r4, pc}
 800e9de:	46c0      	nop			; (mov r8, r8)
 800e9e0:	200001d4 	.word	0x200001d4

0800e9e4 <fiprintf>:
 800e9e4:	b40e      	push	{r1, r2, r3}
 800e9e6:	b517      	push	{r0, r1, r2, r4, lr}
 800e9e8:	4c05      	ldr	r4, [pc, #20]	; (800ea00 <fiprintf+0x1c>)
 800e9ea:	ab05      	add	r3, sp, #20
 800e9ec:	cb04      	ldmia	r3!, {r2}
 800e9ee:	0001      	movs	r1, r0
 800e9f0:	6820      	ldr	r0, [r4, #0]
 800e9f2:	9301      	str	r3, [sp, #4]
 800e9f4:	f000 f834 	bl	800ea60 <_vfiprintf_r>
 800e9f8:	bc1e      	pop	{r1, r2, r3, r4}
 800e9fa:	bc08      	pop	{r3}
 800e9fc:	b003      	add	sp, #12
 800e9fe:	4718      	bx	r3
 800ea00:	200001d4 	.word	0x200001d4

0800ea04 <abort>:
 800ea04:	2006      	movs	r0, #6
 800ea06:	b510      	push	{r4, lr}
 800ea08:	f000 fb96 	bl	800f138 <raise>
 800ea0c:	2001      	movs	r0, #1
 800ea0e:	f7f6 fa6d 	bl	8004eec <_exit>

0800ea12 <__sfputc_r>:
 800ea12:	6893      	ldr	r3, [r2, #8]
 800ea14:	b510      	push	{r4, lr}
 800ea16:	3b01      	subs	r3, #1
 800ea18:	6093      	str	r3, [r2, #8]
 800ea1a:	2b00      	cmp	r3, #0
 800ea1c:	da04      	bge.n	800ea28 <__sfputc_r+0x16>
 800ea1e:	6994      	ldr	r4, [r2, #24]
 800ea20:	42a3      	cmp	r3, r4
 800ea22:	db07      	blt.n	800ea34 <__sfputc_r+0x22>
 800ea24:	290a      	cmp	r1, #10
 800ea26:	d005      	beq.n	800ea34 <__sfputc_r+0x22>
 800ea28:	6813      	ldr	r3, [r2, #0]
 800ea2a:	1c58      	adds	r0, r3, #1
 800ea2c:	6010      	str	r0, [r2, #0]
 800ea2e:	7019      	strb	r1, [r3, #0]
 800ea30:	0008      	movs	r0, r1
 800ea32:	bd10      	pop	{r4, pc}
 800ea34:	f000 fab0 	bl	800ef98 <__swbuf_r>
 800ea38:	0001      	movs	r1, r0
 800ea3a:	e7f9      	b.n	800ea30 <__sfputc_r+0x1e>

0800ea3c <__sfputs_r>:
 800ea3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ea3e:	0006      	movs	r6, r0
 800ea40:	000f      	movs	r7, r1
 800ea42:	0014      	movs	r4, r2
 800ea44:	18d5      	adds	r5, r2, r3
 800ea46:	42ac      	cmp	r4, r5
 800ea48:	d101      	bne.n	800ea4e <__sfputs_r+0x12>
 800ea4a:	2000      	movs	r0, #0
 800ea4c:	e007      	b.n	800ea5e <__sfputs_r+0x22>
 800ea4e:	7821      	ldrb	r1, [r4, #0]
 800ea50:	003a      	movs	r2, r7
 800ea52:	0030      	movs	r0, r6
 800ea54:	f7ff ffdd 	bl	800ea12 <__sfputc_r>
 800ea58:	3401      	adds	r4, #1
 800ea5a:	1c43      	adds	r3, r0, #1
 800ea5c:	d1f3      	bne.n	800ea46 <__sfputs_r+0xa>
 800ea5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800ea60 <_vfiprintf_r>:
 800ea60:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ea62:	b0a1      	sub	sp, #132	; 0x84
 800ea64:	000f      	movs	r7, r1
 800ea66:	0015      	movs	r5, r2
 800ea68:	001e      	movs	r6, r3
 800ea6a:	9003      	str	r0, [sp, #12]
 800ea6c:	2800      	cmp	r0, #0
 800ea6e:	d004      	beq.n	800ea7a <_vfiprintf_r+0x1a>
 800ea70:	6a03      	ldr	r3, [r0, #32]
 800ea72:	2b00      	cmp	r3, #0
 800ea74:	d101      	bne.n	800ea7a <_vfiprintf_r+0x1a>
 800ea76:	f7fe fbd3 	bl	800d220 <__sinit>
 800ea7a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ea7c:	07db      	lsls	r3, r3, #31
 800ea7e:	d405      	bmi.n	800ea8c <_vfiprintf_r+0x2c>
 800ea80:	89bb      	ldrh	r3, [r7, #12]
 800ea82:	059b      	lsls	r3, r3, #22
 800ea84:	d402      	bmi.n	800ea8c <_vfiprintf_r+0x2c>
 800ea86:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800ea88:	f7fe fd49 	bl	800d51e <__retarget_lock_acquire_recursive>
 800ea8c:	89bb      	ldrh	r3, [r7, #12]
 800ea8e:	071b      	lsls	r3, r3, #28
 800ea90:	d502      	bpl.n	800ea98 <_vfiprintf_r+0x38>
 800ea92:	693b      	ldr	r3, [r7, #16]
 800ea94:	2b00      	cmp	r3, #0
 800ea96:	d113      	bne.n	800eac0 <_vfiprintf_r+0x60>
 800ea98:	0039      	movs	r1, r7
 800ea9a:	9803      	ldr	r0, [sp, #12]
 800ea9c:	f000 fabe 	bl	800f01c <__swsetup_r>
 800eaa0:	2800      	cmp	r0, #0
 800eaa2:	d00d      	beq.n	800eac0 <_vfiprintf_r+0x60>
 800eaa4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800eaa6:	07db      	lsls	r3, r3, #31
 800eaa8:	d503      	bpl.n	800eab2 <_vfiprintf_r+0x52>
 800eaaa:	2001      	movs	r0, #1
 800eaac:	4240      	negs	r0, r0
 800eaae:	b021      	add	sp, #132	; 0x84
 800eab0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800eab2:	89bb      	ldrh	r3, [r7, #12]
 800eab4:	059b      	lsls	r3, r3, #22
 800eab6:	d4f8      	bmi.n	800eaaa <_vfiprintf_r+0x4a>
 800eab8:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800eaba:	f7fe fd31 	bl	800d520 <__retarget_lock_release_recursive>
 800eabe:	e7f4      	b.n	800eaaa <_vfiprintf_r+0x4a>
 800eac0:	2300      	movs	r3, #0
 800eac2:	ac08      	add	r4, sp, #32
 800eac4:	6163      	str	r3, [r4, #20]
 800eac6:	3320      	adds	r3, #32
 800eac8:	7663      	strb	r3, [r4, #25]
 800eaca:	3310      	adds	r3, #16
 800eacc:	76a3      	strb	r3, [r4, #26]
 800eace:	9607      	str	r6, [sp, #28]
 800ead0:	002e      	movs	r6, r5
 800ead2:	7833      	ldrb	r3, [r6, #0]
 800ead4:	2b00      	cmp	r3, #0
 800ead6:	d001      	beq.n	800eadc <_vfiprintf_r+0x7c>
 800ead8:	2b25      	cmp	r3, #37	; 0x25
 800eada:	d148      	bne.n	800eb6e <_vfiprintf_r+0x10e>
 800eadc:	1b73      	subs	r3, r6, r5
 800eade:	9305      	str	r3, [sp, #20]
 800eae0:	42ae      	cmp	r6, r5
 800eae2:	d00b      	beq.n	800eafc <_vfiprintf_r+0x9c>
 800eae4:	002a      	movs	r2, r5
 800eae6:	0039      	movs	r1, r7
 800eae8:	9803      	ldr	r0, [sp, #12]
 800eaea:	f7ff ffa7 	bl	800ea3c <__sfputs_r>
 800eaee:	3001      	adds	r0, #1
 800eaf0:	d100      	bne.n	800eaf4 <_vfiprintf_r+0x94>
 800eaf2:	e0af      	b.n	800ec54 <_vfiprintf_r+0x1f4>
 800eaf4:	6963      	ldr	r3, [r4, #20]
 800eaf6:	9a05      	ldr	r2, [sp, #20]
 800eaf8:	189b      	adds	r3, r3, r2
 800eafa:	6163      	str	r3, [r4, #20]
 800eafc:	7833      	ldrb	r3, [r6, #0]
 800eafe:	2b00      	cmp	r3, #0
 800eb00:	d100      	bne.n	800eb04 <_vfiprintf_r+0xa4>
 800eb02:	e0a7      	b.n	800ec54 <_vfiprintf_r+0x1f4>
 800eb04:	2201      	movs	r2, #1
 800eb06:	2300      	movs	r3, #0
 800eb08:	4252      	negs	r2, r2
 800eb0a:	6062      	str	r2, [r4, #4]
 800eb0c:	a904      	add	r1, sp, #16
 800eb0e:	3254      	adds	r2, #84	; 0x54
 800eb10:	1852      	adds	r2, r2, r1
 800eb12:	1c75      	adds	r5, r6, #1
 800eb14:	6023      	str	r3, [r4, #0]
 800eb16:	60e3      	str	r3, [r4, #12]
 800eb18:	60a3      	str	r3, [r4, #8]
 800eb1a:	7013      	strb	r3, [r2, #0]
 800eb1c:	65a3      	str	r3, [r4, #88]	; 0x58
 800eb1e:	4b59      	ldr	r3, [pc, #356]	; (800ec84 <_vfiprintf_r+0x224>)
 800eb20:	2205      	movs	r2, #5
 800eb22:	0018      	movs	r0, r3
 800eb24:	7829      	ldrb	r1, [r5, #0]
 800eb26:	9305      	str	r3, [sp, #20]
 800eb28:	f000 fb26 	bl	800f178 <memchr>
 800eb2c:	1c6e      	adds	r6, r5, #1
 800eb2e:	2800      	cmp	r0, #0
 800eb30:	d11f      	bne.n	800eb72 <_vfiprintf_r+0x112>
 800eb32:	6822      	ldr	r2, [r4, #0]
 800eb34:	06d3      	lsls	r3, r2, #27
 800eb36:	d504      	bpl.n	800eb42 <_vfiprintf_r+0xe2>
 800eb38:	2353      	movs	r3, #83	; 0x53
 800eb3a:	a904      	add	r1, sp, #16
 800eb3c:	185b      	adds	r3, r3, r1
 800eb3e:	2120      	movs	r1, #32
 800eb40:	7019      	strb	r1, [r3, #0]
 800eb42:	0713      	lsls	r3, r2, #28
 800eb44:	d504      	bpl.n	800eb50 <_vfiprintf_r+0xf0>
 800eb46:	2353      	movs	r3, #83	; 0x53
 800eb48:	a904      	add	r1, sp, #16
 800eb4a:	185b      	adds	r3, r3, r1
 800eb4c:	212b      	movs	r1, #43	; 0x2b
 800eb4e:	7019      	strb	r1, [r3, #0]
 800eb50:	782b      	ldrb	r3, [r5, #0]
 800eb52:	2b2a      	cmp	r3, #42	; 0x2a
 800eb54:	d016      	beq.n	800eb84 <_vfiprintf_r+0x124>
 800eb56:	002e      	movs	r6, r5
 800eb58:	2100      	movs	r1, #0
 800eb5a:	200a      	movs	r0, #10
 800eb5c:	68e3      	ldr	r3, [r4, #12]
 800eb5e:	7832      	ldrb	r2, [r6, #0]
 800eb60:	1c75      	adds	r5, r6, #1
 800eb62:	3a30      	subs	r2, #48	; 0x30
 800eb64:	2a09      	cmp	r2, #9
 800eb66:	d94e      	bls.n	800ec06 <_vfiprintf_r+0x1a6>
 800eb68:	2900      	cmp	r1, #0
 800eb6a:	d111      	bne.n	800eb90 <_vfiprintf_r+0x130>
 800eb6c:	e017      	b.n	800eb9e <_vfiprintf_r+0x13e>
 800eb6e:	3601      	adds	r6, #1
 800eb70:	e7af      	b.n	800ead2 <_vfiprintf_r+0x72>
 800eb72:	9b05      	ldr	r3, [sp, #20]
 800eb74:	6822      	ldr	r2, [r4, #0]
 800eb76:	1ac0      	subs	r0, r0, r3
 800eb78:	2301      	movs	r3, #1
 800eb7a:	4083      	lsls	r3, r0
 800eb7c:	4313      	orrs	r3, r2
 800eb7e:	0035      	movs	r5, r6
 800eb80:	6023      	str	r3, [r4, #0]
 800eb82:	e7cc      	b.n	800eb1e <_vfiprintf_r+0xbe>
 800eb84:	9b07      	ldr	r3, [sp, #28]
 800eb86:	1d19      	adds	r1, r3, #4
 800eb88:	681b      	ldr	r3, [r3, #0]
 800eb8a:	9107      	str	r1, [sp, #28]
 800eb8c:	2b00      	cmp	r3, #0
 800eb8e:	db01      	blt.n	800eb94 <_vfiprintf_r+0x134>
 800eb90:	930b      	str	r3, [sp, #44]	; 0x2c
 800eb92:	e004      	b.n	800eb9e <_vfiprintf_r+0x13e>
 800eb94:	425b      	negs	r3, r3
 800eb96:	60e3      	str	r3, [r4, #12]
 800eb98:	2302      	movs	r3, #2
 800eb9a:	4313      	orrs	r3, r2
 800eb9c:	6023      	str	r3, [r4, #0]
 800eb9e:	7833      	ldrb	r3, [r6, #0]
 800eba0:	2b2e      	cmp	r3, #46	; 0x2e
 800eba2:	d10a      	bne.n	800ebba <_vfiprintf_r+0x15a>
 800eba4:	7873      	ldrb	r3, [r6, #1]
 800eba6:	2b2a      	cmp	r3, #42	; 0x2a
 800eba8:	d135      	bne.n	800ec16 <_vfiprintf_r+0x1b6>
 800ebaa:	9b07      	ldr	r3, [sp, #28]
 800ebac:	3602      	adds	r6, #2
 800ebae:	1d1a      	adds	r2, r3, #4
 800ebb0:	681b      	ldr	r3, [r3, #0]
 800ebb2:	9207      	str	r2, [sp, #28]
 800ebb4:	2b00      	cmp	r3, #0
 800ebb6:	db2b      	blt.n	800ec10 <_vfiprintf_r+0x1b0>
 800ebb8:	9309      	str	r3, [sp, #36]	; 0x24
 800ebba:	4d33      	ldr	r5, [pc, #204]	; (800ec88 <_vfiprintf_r+0x228>)
 800ebbc:	2203      	movs	r2, #3
 800ebbe:	0028      	movs	r0, r5
 800ebc0:	7831      	ldrb	r1, [r6, #0]
 800ebc2:	f000 fad9 	bl	800f178 <memchr>
 800ebc6:	2800      	cmp	r0, #0
 800ebc8:	d006      	beq.n	800ebd8 <_vfiprintf_r+0x178>
 800ebca:	2340      	movs	r3, #64	; 0x40
 800ebcc:	1b40      	subs	r0, r0, r5
 800ebce:	4083      	lsls	r3, r0
 800ebd0:	6822      	ldr	r2, [r4, #0]
 800ebd2:	3601      	adds	r6, #1
 800ebd4:	4313      	orrs	r3, r2
 800ebd6:	6023      	str	r3, [r4, #0]
 800ebd8:	7831      	ldrb	r1, [r6, #0]
 800ebda:	2206      	movs	r2, #6
 800ebdc:	482b      	ldr	r0, [pc, #172]	; (800ec8c <_vfiprintf_r+0x22c>)
 800ebde:	1c75      	adds	r5, r6, #1
 800ebe0:	7621      	strb	r1, [r4, #24]
 800ebe2:	f000 fac9 	bl	800f178 <memchr>
 800ebe6:	2800      	cmp	r0, #0
 800ebe8:	d043      	beq.n	800ec72 <_vfiprintf_r+0x212>
 800ebea:	4b29      	ldr	r3, [pc, #164]	; (800ec90 <_vfiprintf_r+0x230>)
 800ebec:	2b00      	cmp	r3, #0
 800ebee:	d125      	bne.n	800ec3c <_vfiprintf_r+0x1dc>
 800ebf0:	2207      	movs	r2, #7
 800ebf2:	9b07      	ldr	r3, [sp, #28]
 800ebf4:	3307      	adds	r3, #7
 800ebf6:	4393      	bics	r3, r2
 800ebf8:	3308      	adds	r3, #8
 800ebfa:	9307      	str	r3, [sp, #28]
 800ebfc:	6963      	ldr	r3, [r4, #20]
 800ebfe:	9a04      	ldr	r2, [sp, #16]
 800ec00:	189b      	adds	r3, r3, r2
 800ec02:	6163      	str	r3, [r4, #20]
 800ec04:	e764      	b.n	800ead0 <_vfiprintf_r+0x70>
 800ec06:	4343      	muls	r3, r0
 800ec08:	002e      	movs	r6, r5
 800ec0a:	2101      	movs	r1, #1
 800ec0c:	189b      	adds	r3, r3, r2
 800ec0e:	e7a6      	b.n	800eb5e <_vfiprintf_r+0xfe>
 800ec10:	2301      	movs	r3, #1
 800ec12:	425b      	negs	r3, r3
 800ec14:	e7d0      	b.n	800ebb8 <_vfiprintf_r+0x158>
 800ec16:	2300      	movs	r3, #0
 800ec18:	200a      	movs	r0, #10
 800ec1a:	001a      	movs	r2, r3
 800ec1c:	3601      	adds	r6, #1
 800ec1e:	6063      	str	r3, [r4, #4]
 800ec20:	7831      	ldrb	r1, [r6, #0]
 800ec22:	1c75      	adds	r5, r6, #1
 800ec24:	3930      	subs	r1, #48	; 0x30
 800ec26:	2909      	cmp	r1, #9
 800ec28:	d903      	bls.n	800ec32 <_vfiprintf_r+0x1d2>
 800ec2a:	2b00      	cmp	r3, #0
 800ec2c:	d0c5      	beq.n	800ebba <_vfiprintf_r+0x15a>
 800ec2e:	9209      	str	r2, [sp, #36]	; 0x24
 800ec30:	e7c3      	b.n	800ebba <_vfiprintf_r+0x15a>
 800ec32:	4342      	muls	r2, r0
 800ec34:	002e      	movs	r6, r5
 800ec36:	2301      	movs	r3, #1
 800ec38:	1852      	adds	r2, r2, r1
 800ec3a:	e7f1      	b.n	800ec20 <_vfiprintf_r+0x1c0>
 800ec3c:	aa07      	add	r2, sp, #28
 800ec3e:	9200      	str	r2, [sp, #0]
 800ec40:	0021      	movs	r1, r4
 800ec42:	003a      	movs	r2, r7
 800ec44:	4b13      	ldr	r3, [pc, #76]	; (800ec94 <_vfiprintf_r+0x234>)
 800ec46:	9803      	ldr	r0, [sp, #12]
 800ec48:	e000      	b.n	800ec4c <_vfiprintf_r+0x1ec>
 800ec4a:	bf00      	nop
 800ec4c:	9004      	str	r0, [sp, #16]
 800ec4e:	9b04      	ldr	r3, [sp, #16]
 800ec50:	3301      	adds	r3, #1
 800ec52:	d1d3      	bne.n	800ebfc <_vfiprintf_r+0x19c>
 800ec54:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ec56:	07db      	lsls	r3, r3, #31
 800ec58:	d405      	bmi.n	800ec66 <_vfiprintf_r+0x206>
 800ec5a:	89bb      	ldrh	r3, [r7, #12]
 800ec5c:	059b      	lsls	r3, r3, #22
 800ec5e:	d402      	bmi.n	800ec66 <_vfiprintf_r+0x206>
 800ec60:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800ec62:	f7fe fc5d 	bl	800d520 <__retarget_lock_release_recursive>
 800ec66:	89bb      	ldrh	r3, [r7, #12]
 800ec68:	065b      	lsls	r3, r3, #25
 800ec6a:	d500      	bpl.n	800ec6e <_vfiprintf_r+0x20e>
 800ec6c:	e71d      	b.n	800eaaa <_vfiprintf_r+0x4a>
 800ec6e:	980d      	ldr	r0, [sp, #52]	; 0x34
 800ec70:	e71d      	b.n	800eaae <_vfiprintf_r+0x4e>
 800ec72:	aa07      	add	r2, sp, #28
 800ec74:	9200      	str	r2, [sp, #0]
 800ec76:	0021      	movs	r1, r4
 800ec78:	003a      	movs	r2, r7
 800ec7a:	4b06      	ldr	r3, [pc, #24]	; (800ec94 <_vfiprintf_r+0x234>)
 800ec7c:	9803      	ldr	r0, [sp, #12]
 800ec7e:	f000 f87b 	bl	800ed78 <_printf_i>
 800ec82:	e7e3      	b.n	800ec4c <_vfiprintf_r+0x1ec>
 800ec84:	0800f969 	.word	0x0800f969
 800ec88:	0800f96f 	.word	0x0800f96f
 800ec8c:	0800f973 	.word	0x0800f973
 800ec90:	00000000 	.word	0x00000000
 800ec94:	0800ea3d 	.word	0x0800ea3d

0800ec98 <_printf_common>:
 800ec98:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ec9a:	0016      	movs	r6, r2
 800ec9c:	9301      	str	r3, [sp, #4]
 800ec9e:	688a      	ldr	r2, [r1, #8]
 800eca0:	690b      	ldr	r3, [r1, #16]
 800eca2:	000c      	movs	r4, r1
 800eca4:	9000      	str	r0, [sp, #0]
 800eca6:	4293      	cmp	r3, r2
 800eca8:	da00      	bge.n	800ecac <_printf_common+0x14>
 800ecaa:	0013      	movs	r3, r2
 800ecac:	0022      	movs	r2, r4
 800ecae:	6033      	str	r3, [r6, #0]
 800ecb0:	3243      	adds	r2, #67	; 0x43
 800ecb2:	7812      	ldrb	r2, [r2, #0]
 800ecb4:	2a00      	cmp	r2, #0
 800ecb6:	d001      	beq.n	800ecbc <_printf_common+0x24>
 800ecb8:	3301      	adds	r3, #1
 800ecba:	6033      	str	r3, [r6, #0]
 800ecbc:	6823      	ldr	r3, [r4, #0]
 800ecbe:	069b      	lsls	r3, r3, #26
 800ecc0:	d502      	bpl.n	800ecc8 <_printf_common+0x30>
 800ecc2:	6833      	ldr	r3, [r6, #0]
 800ecc4:	3302      	adds	r3, #2
 800ecc6:	6033      	str	r3, [r6, #0]
 800ecc8:	6822      	ldr	r2, [r4, #0]
 800ecca:	2306      	movs	r3, #6
 800eccc:	0015      	movs	r5, r2
 800ecce:	401d      	ands	r5, r3
 800ecd0:	421a      	tst	r2, r3
 800ecd2:	d027      	beq.n	800ed24 <_printf_common+0x8c>
 800ecd4:	0023      	movs	r3, r4
 800ecd6:	3343      	adds	r3, #67	; 0x43
 800ecd8:	781b      	ldrb	r3, [r3, #0]
 800ecda:	1e5a      	subs	r2, r3, #1
 800ecdc:	4193      	sbcs	r3, r2
 800ecde:	6822      	ldr	r2, [r4, #0]
 800ece0:	0692      	lsls	r2, r2, #26
 800ece2:	d430      	bmi.n	800ed46 <_printf_common+0xae>
 800ece4:	0022      	movs	r2, r4
 800ece6:	9901      	ldr	r1, [sp, #4]
 800ece8:	9800      	ldr	r0, [sp, #0]
 800ecea:	9d08      	ldr	r5, [sp, #32]
 800ecec:	3243      	adds	r2, #67	; 0x43
 800ecee:	47a8      	blx	r5
 800ecf0:	3001      	adds	r0, #1
 800ecf2:	d025      	beq.n	800ed40 <_printf_common+0xa8>
 800ecf4:	2206      	movs	r2, #6
 800ecf6:	6823      	ldr	r3, [r4, #0]
 800ecf8:	2500      	movs	r5, #0
 800ecfa:	4013      	ands	r3, r2
 800ecfc:	2b04      	cmp	r3, #4
 800ecfe:	d105      	bne.n	800ed0c <_printf_common+0x74>
 800ed00:	6833      	ldr	r3, [r6, #0]
 800ed02:	68e5      	ldr	r5, [r4, #12]
 800ed04:	1aed      	subs	r5, r5, r3
 800ed06:	43eb      	mvns	r3, r5
 800ed08:	17db      	asrs	r3, r3, #31
 800ed0a:	401d      	ands	r5, r3
 800ed0c:	68a3      	ldr	r3, [r4, #8]
 800ed0e:	6922      	ldr	r2, [r4, #16]
 800ed10:	4293      	cmp	r3, r2
 800ed12:	dd01      	ble.n	800ed18 <_printf_common+0x80>
 800ed14:	1a9b      	subs	r3, r3, r2
 800ed16:	18ed      	adds	r5, r5, r3
 800ed18:	2600      	movs	r6, #0
 800ed1a:	42b5      	cmp	r5, r6
 800ed1c:	d120      	bne.n	800ed60 <_printf_common+0xc8>
 800ed1e:	2000      	movs	r0, #0
 800ed20:	e010      	b.n	800ed44 <_printf_common+0xac>
 800ed22:	3501      	adds	r5, #1
 800ed24:	68e3      	ldr	r3, [r4, #12]
 800ed26:	6832      	ldr	r2, [r6, #0]
 800ed28:	1a9b      	subs	r3, r3, r2
 800ed2a:	42ab      	cmp	r3, r5
 800ed2c:	ddd2      	ble.n	800ecd4 <_printf_common+0x3c>
 800ed2e:	0022      	movs	r2, r4
 800ed30:	2301      	movs	r3, #1
 800ed32:	9901      	ldr	r1, [sp, #4]
 800ed34:	9800      	ldr	r0, [sp, #0]
 800ed36:	9f08      	ldr	r7, [sp, #32]
 800ed38:	3219      	adds	r2, #25
 800ed3a:	47b8      	blx	r7
 800ed3c:	3001      	adds	r0, #1
 800ed3e:	d1f0      	bne.n	800ed22 <_printf_common+0x8a>
 800ed40:	2001      	movs	r0, #1
 800ed42:	4240      	negs	r0, r0
 800ed44:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800ed46:	2030      	movs	r0, #48	; 0x30
 800ed48:	18e1      	adds	r1, r4, r3
 800ed4a:	3143      	adds	r1, #67	; 0x43
 800ed4c:	7008      	strb	r0, [r1, #0]
 800ed4e:	0021      	movs	r1, r4
 800ed50:	1c5a      	adds	r2, r3, #1
 800ed52:	3145      	adds	r1, #69	; 0x45
 800ed54:	7809      	ldrb	r1, [r1, #0]
 800ed56:	18a2      	adds	r2, r4, r2
 800ed58:	3243      	adds	r2, #67	; 0x43
 800ed5a:	3302      	adds	r3, #2
 800ed5c:	7011      	strb	r1, [r2, #0]
 800ed5e:	e7c1      	b.n	800ece4 <_printf_common+0x4c>
 800ed60:	0022      	movs	r2, r4
 800ed62:	2301      	movs	r3, #1
 800ed64:	9901      	ldr	r1, [sp, #4]
 800ed66:	9800      	ldr	r0, [sp, #0]
 800ed68:	9f08      	ldr	r7, [sp, #32]
 800ed6a:	321a      	adds	r2, #26
 800ed6c:	47b8      	blx	r7
 800ed6e:	3001      	adds	r0, #1
 800ed70:	d0e6      	beq.n	800ed40 <_printf_common+0xa8>
 800ed72:	3601      	adds	r6, #1
 800ed74:	e7d1      	b.n	800ed1a <_printf_common+0x82>
	...

0800ed78 <_printf_i>:
 800ed78:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ed7a:	b08b      	sub	sp, #44	; 0x2c
 800ed7c:	9206      	str	r2, [sp, #24]
 800ed7e:	000a      	movs	r2, r1
 800ed80:	3243      	adds	r2, #67	; 0x43
 800ed82:	9307      	str	r3, [sp, #28]
 800ed84:	9005      	str	r0, [sp, #20]
 800ed86:	9204      	str	r2, [sp, #16]
 800ed88:	7e0a      	ldrb	r2, [r1, #24]
 800ed8a:	000c      	movs	r4, r1
 800ed8c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ed8e:	2a78      	cmp	r2, #120	; 0x78
 800ed90:	d809      	bhi.n	800eda6 <_printf_i+0x2e>
 800ed92:	2a62      	cmp	r2, #98	; 0x62
 800ed94:	d80b      	bhi.n	800edae <_printf_i+0x36>
 800ed96:	2a00      	cmp	r2, #0
 800ed98:	d100      	bne.n	800ed9c <_printf_i+0x24>
 800ed9a:	e0be      	b.n	800ef1a <_printf_i+0x1a2>
 800ed9c:	497c      	ldr	r1, [pc, #496]	; (800ef90 <_printf_i+0x218>)
 800ed9e:	9103      	str	r1, [sp, #12]
 800eda0:	2a58      	cmp	r2, #88	; 0x58
 800eda2:	d100      	bne.n	800eda6 <_printf_i+0x2e>
 800eda4:	e093      	b.n	800eece <_printf_i+0x156>
 800eda6:	0026      	movs	r6, r4
 800eda8:	3642      	adds	r6, #66	; 0x42
 800edaa:	7032      	strb	r2, [r6, #0]
 800edac:	e022      	b.n	800edf4 <_printf_i+0x7c>
 800edae:	0010      	movs	r0, r2
 800edb0:	3863      	subs	r0, #99	; 0x63
 800edb2:	2815      	cmp	r0, #21
 800edb4:	d8f7      	bhi.n	800eda6 <_printf_i+0x2e>
 800edb6:	f7f1 f9c3 	bl	8000140 <__gnu_thumb1_case_shi>
 800edba:	0016      	.short	0x0016
 800edbc:	fff6001f 	.word	0xfff6001f
 800edc0:	fff6fff6 	.word	0xfff6fff6
 800edc4:	001ffff6 	.word	0x001ffff6
 800edc8:	fff6fff6 	.word	0xfff6fff6
 800edcc:	fff6fff6 	.word	0xfff6fff6
 800edd0:	003600a3 	.word	0x003600a3
 800edd4:	fff60083 	.word	0xfff60083
 800edd8:	00b4fff6 	.word	0x00b4fff6
 800eddc:	0036fff6 	.word	0x0036fff6
 800ede0:	fff6fff6 	.word	0xfff6fff6
 800ede4:	0087      	.short	0x0087
 800ede6:	0026      	movs	r6, r4
 800ede8:	681a      	ldr	r2, [r3, #0]
 800edea:	3642      	adds	r6, #66	; 0x42
 800edec:	1d11      	adds	r1, r2, #4
 800edee:	6019      	str	r1, [r3, #0]
 800edf0:	6813      	ldr	r3, [r2, #0]
 800edf2:	7033      	strb	r3, [r6, #0]
 800edf4:	2301      	movs	r3, #1
 800edf6:	e0a2      	b.n	800ef3e <_printf_i+0x1c6>
 800edf8:	6818      	ldr	r0, [r3, #0]
 800edfa:	6809      	ldr	r1, [r1, #0]
 800edfc:	1d02      	adds	r2, r0, #4
 800edfe:	060d      	lsls	r5, r1, #24
 800ee00:	d50b      	bpl.n	800ee1a <_printf_i+0xa2>
 800ee02:	6805      	ldr	r5, [r0, #0]
 800ee04:	601a      	str	r2, [r3, #0]
 800ee06:	2d00      	cmp	r5, #0
 800ee08:	da03      	bge.n	800ee12 <_printf_i+0x9a>
 800ee0a:	232d      	movs	r3, #45	; 0x2d
 800ee0c:	9a04      	ldr	r2, [sp, #16]
 800ee0e:	426d      	negs	r5, r5
 800ee10:	7013      	strb	r3, [r2, #0]
 800ee12:	4b5f      	ldr	r3, [pc, #380]	; (800ef90 <_printf_i+0x218>)
 800ee14:	270a      	movs	r7, #10
 800ee16:	9303      	str	r3, [sp, #12]
 800ee18:	e01b      	b.n	800ee52 <_printf_i+0xda>
 800ee1a:	6805      	ldr	r5, [r0, #0]
 800ee1c:	601a      	str	r2, [r3, #0]
 800ee1e:	0649      	lsls	r1, r1, #25
 800ee20:	d5f1      	bpl.n	800ee06 <_printf_i+0x8e>
 800ee22:	b22d      	sxth	r5, r5
 800ee24:	e7ef      	b.n	800ee06 <_printf_i+0x8e>
 800ee26:	680d      	ldr	r5, [r1, #0]
 800ee28:	6819      	ldr	r1, [r3, #0]
 800ee2a:	1d08      	adds	r0, r1, #4
 800ee2c:	6018      	str	r0, [r3, #0]
 800ee2e:	062e      	lsls	r6, r5, #24
 800ee30:	d501      	bpl.n	800ee36 <_printf_i+0xbe>
 800ee32:	680d      	ldr	r5, [r1, #0]
 800ee34:	e003      	b.n	800ee3e <_printf_i+0xc6>
 800ee36:	066d      	lsls	r5, r5, #25
 800ee38:	d5fb      	bpl.n	800ee32 <_printf_i+0xba>
 800ee3a:	680d      	ldr	r5, [r1, #0]
 800ee3c:	b2ad      	uxth	r5, r5
 800ee3e:	4b54      	ldr	r3, [pc, #336]	; (800ef90 <_printf_i+0x218>)
 800ee40:	2708      	movs	r7, #8
 800ee42:	9303      	str	r3, [sp, #12]
 800ee44:	2a6f      	cmp	r2, #111	; 0x6f
 800ee46:	d000      	beq.n	800ee4a <_printf_i+0xd2>
 800ee48:	3702      	adds	r7, #2
 800ee4a:	0023      	movs	r3, r4
 800ee4c:	2200      	movs	r2, #0
 800ee4e:	3343      	adds	r3, #67	; 0x43
 800ee50:	701a      	strb	r2, [r3, #0]
 800ee52:	6863      	ldr	r3, [r4, #4]
 800ee54:	60a3      	str	r3, [r4, #8]
 800ee56:	2b00      	cmp	r3, #0
 800ee58:	db03      	blt.n	800ee62 <_printf_i+0xea>
 800ee5a:	2104      	movs	r1, #4
 800ee5c:	6822      	ldr	r2, [r4, #0]
 800ee5e:	438a      	bics	r2, r1
 800ee60:	6022      	str	r2, [r4, #0]
 800ee62:	2d00      	cmp	r5, #0
 800ee64:	d102      	bne.n	800ee6c <_printf_i+0xf4>
 800ee66:	9e04      	ldr	r6, [sp, #16]
 800ee68:	2b00      	cmp	r3, #0
 800ee6a:	d00c      	beq.n	800ee86 <_printf_i+0x10e>
 800ee6c:	9e04      	ldr	r6, [sp, #16]
 800ee6e:	0028      	movs	r0, r5
 800ee70:	0039      	movs	r1, r7
 800ee72:	f7f1 f9f5 	bl	8000260 <__aeabi_uidivmod>
 800ee76:	9b03      	ldr	r3, [sp, #12]
 800ee78:	3e01      	subs	r6, #1
 800ee7a:	5c5b      	ldrb	r3, [r3, r1]
 800ee7c:	7033      	strb	r3, [r6, #0]
 800ee7e:	002b      	movs	r3, r5
 800ee80:	0005      	movs	r5, r0
 800ee82:	429f      	cmp	r7, r3
 800ee84:	d9f3      	bls.n	800ee6e <_printf_i+0xf6>
 800ee86:	2f08      	cmp	r7, #8
 800ee88:	d109      	bne.n	800ee9e <_printf_i+0x126>
 800ee8a:	6823      	ldr	r3, [r4, #0]
 800ee8c:	07db      	lsls	r3, r3, #31
 800ee8e:	d506      	bpl.n	800ee9e <_printf_i+0x126>
 800ee90:	6862      	ldr	r2, [r4, #4]
 800ee92:	6923      	ldr	r3, [r4, #16]
 800ee94:	429a      	cmp	r2, r3
 800ee96:	dc02      	bgt.n	800ee9e <_printf_i+0x126>
 800ee98:	2330      	movs	r3, #48	; 0x30
 800ee9a:	3e01      	subs	r6, #1
 800ee9c:	7033      	strb	r3, [r6, #0]
 800ee9e:	9b04      	ldr	r3, [sp, #16]
 800eea0:	1b9b      	subs	r3, r3, r6
 800eea2:	6123      	str	r3, [r4, #16]
 800eea4:	9b07      	ldr	r3, [sp, #28]
 800eea6:	0021      	movs	r1, r4
 800eea8:	9300      	str	r3, [sp, #0]
 800eeaa:	9805      	ldr	r0, [sp, #20]
 800eeac:	9b06      	ldr	r3, [sp, #24]
 800eeae:	aa09      	add	r2, sp, #36	; 0x24
 800eeb0:	f7ff fef2 	bl	800ec98 <_printf_common>
 800eeb4:	3001      	adds	r0, #1
 800eeb6:	d147      	bne.n	800ef48 <_printf_i+0x1d0>
 800eeb8:	2001      	movs	r0, #1
 800eeba:	4240      	negs	r0, r0
 800eebc:	b00b      	add	sp, #44	; 0x2c
 800eebe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800eec0:	2220      	movs	r2, #32
 800eec2:	6809      	ldr	r1, [r1, #0]
 800eec4:	430a      	orrs	r2, r1
 800eec6:	6022      	str	r2, [r4, #0]
 800eec8:	2278      	movs	r2, #120	; 0x78
 800eeca:	4932      	ldr	r1, [pc, #200]	; (800ef94 <_printf_i+0x21c>)
 800eecc:	9103      	str	r1, [sp, #12]
 800eece:	0021      	movs	r1, r4
 800eed0:	3145      	adds	r1, #69	; 0x45
 800eed2:	700a      	strb	r2, [r1, #0]
 800eed4:	6819      	ldr	r1, [r3, #0]
 800eed6:	6822      	ldr	r2, [r4, #0]
 800eed8:	c920      	ldmia	r1!, {r5}
 800eeda:	0610      	lsls	r0, r2, #24
 800eedc:	d402      	bmi.n	800eee4 <_printf_i+0x16c>
 800eede:	0650      	lsls	r0, r2, #25
 800eee0:	d500      	bpl.n	800eee4 <_printf_i+0x16c>
 800eee2:	b2ad      	uxth	r5, r5
 800eee4:	6019      	str	r1, [r3, #0]
 800eee6:	07d3      	lsls	r3, r2, #31
 800eee8:	d502      	bpl.n	800eef0 <_printf_i+0x178>
 800eeea:	2320      	movs	r3, #32
 800eeec:	4313      	orrs	r3, r2
 800eeee:	6023      	str	r3, [r4, #0]
 800eef0:	2710      	movs	r7, #16
 800eef2:	2d00      	cmp	r5, #0
 800eef4:	d1a9      	bne.n	800ee4a <_printf_i+0xd2>
 800eef6:	2220      	movs	r2, #32
 800eef8:	6823      	ldr	r3, [r4, #0]
 800eefa:	4393      	bics	r3, r2
 800eefc:	6023      	str	r3, [r4, #0]
 800eefe:	e7a4      	b.n	800ee4a <_printf_i+0xd2>
 800ef00:	681a      	ldr	r2, [r3, #0]
 800ef02:	680d      	ldr	r5, [r1, #0]
 800ef04:	1d10      	adds	r0, r2, #4
 800ef06:	6949      	ldr	r1, [r1, #20]
 800ef08:	6018      	str	r0, [r3, #0]
 800ef0a:	6813      	ldr	r3, [r2, #0]
 800ef0c:	062e      	lsls	r6, r5, #24
 800ef0e:	d501      	bpl.n	800ef14 <_printf_i+0x19c>
 800ef10:	6019      	str	r1, [r3, #0]
 800ef12:	e002      	b.n	800ef1a <_printf_i+0x1a2>
 800ef14:	066d      	lsls	r5, r5, #25
 800ef16:	d5fb      	bpl.n	800ef10 <_printf_i+0x198>
 800ef18:	8019      	strh	r1, [r3, #0]
 800ef1a:	2300      	movs	r3, #0
 800ef1c:	9e04      	ldr	r6, [sp, #16]
 800ef1e:	6123      	str	r3, [r4, #16]
 800ef20:	e7c0      	b.n	800eea4 <_printf_i+0x12c>
 800ef22:	681a      	ldr	r2, [r3, #0]
 800ef24:	1d11      	adds	r1, r2, #4
 800ef26:	6019      	str	r1, [r3, #0]
 800ef28:	6816      	ldr	r6, [r2, #0]
 800ef2a:	2100      	movs	r1, #0
 800ef2c:	0030      	movs	r0, r6
 800ef2e:	6862      	ldr	r2, [r4, #4]
 800ef30:	f000 f922 	bl	800f178 <memchr>
 800ef34:	2800      	cmp	r0, #0
 800ef36:	d001      	beq.n	800ef3c <_printf_i+0x1c4>
 800ef38:	1b80      	subs	r0, r0, r6
 800ef3a:	6060      	str	r0, [r4, #4]
 800ef3c:	6863      	ldr	r3, [r4, #4]
 800ef3e:	6123      	str	r3, [r4, #16]
 800ef40:	2300      	movs	r3, #0
 800ef42:	9a04      	ldr	r2, [sp, #16]
 800ef44:	7013      	strb	r3, [r2, #0]
 800ef46:	e7ad      	b.n	800eea4 <_printf_i+0x12c>
 800ef48:	0032      	movs	r2, r6
 800ef4a:	6923      	ldr	r3, [r4, #16]
 800ef4c:	9906      	ldr	r1, [sp, #24]
 800ef4e:	9805      	ldr	r0, [sp, #20]
 800ef50:	9d07      	ldr	r5, [sp, #28]
 800ef52:	47a8      	blx	r5
 800ef54:	3001      	adds	r0, #1
 800ef56:	d0af      	beq.n	800eeb8 <_printf_i+0x140>
 800ef58:	6823      	ldr	r3, [r4, #0]
 800ef5a:	079b      	lsls	r3, r3, #30
 800ef5c:	d415      	bmi.n	800ef8a <_printf_i+0x212>
 800ef5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ef60:	68e0      	ldr	r0, [r4, #12]
 800ef62:	4298      	cmp	r0, r3
 800ef64:	daaa      	bge.n	800eebc <_printf_i+0x144>
 800ef66:	0018      	movs	r0, r3
 800ef68:	e7a8      	b.n	800eebc <_printf_i+0x144>
 800ef6a:	0022      	movs	r2, r4
 800ef6c:	2301      	movs	r3, #1
 800ef6e:	9906      	ldr	r1, [sp, #24]
 800ef70:	9805      	ldr	r0, [sp, #20]
 800ef72:	9e07      	ldr	r6, [sp, #28]
 800ef74:	3219      	adds	r2, #25
 800ef76:	47b0      	blx	r6
 800ef78:	3001      	adds	r0, #1
 800ef7a:	d09d      	beq.n	800eeb8 <_printf_i+0x140>
 800ef7c:	3501      	adds	r5, #1
 800ef7e:	68e3      	ldr	r3, [r4, #12]
 800ef80:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ef82:	1a9b      	subs	r3, r3, r2
 800ef84:	42ab      	cmp	r3, r5
 800ef86:	dcf0      	bgt.n	800ef6a <_printf_i+0x1f2>
 800ef88:	e7e9      	b.n	800ef5e <_printf_i+0x1e6>
 800ef8a:	2500      	movs	r5, #0
 800ef8c:	e7f7      	b.n	800ef7e <_printf_i+0x206>
 800ef8e:	46c0      	nop			; (mov r8, r8)
 800ef90:	0800f97a 	.word	0x0800f97a
 800ef94:	0800f98b 	.word	0x0800f98b

0800ef98 <__swbuf_r>:
 800ef98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ef9a:	0006      	movs	r6, r0
 800ef9c:	000d      	movs	r5, r1
 800ef9e:	0014      	movs	r4, r2
 800efa0:	2800      	cmp	r0, #0
 800efa2:	d004      	beq.n	800efae <__swbuf_r+0x16>
 800efa4:	6a03      	ldr	r3, [r0, #32]
 800efa6:	2b00      	cmp	r3, #0
 800efa8:	d101      	bne.n	800efae <__swbuf_r+0x16>
 800efaa:	f7fe f939 	bl	800d220 <__sinit>
 800efae:	69a3      	ldr	r3, [r4, #24]
 800efb0:	60a3      	str	r3, [r4, #8]
 800efb2:	89a3      	ldrh	r3, [r4, #12]
 800efb4:	071b      	lsls	r3, r3, #28
 800efb6:	d528      	bpl.n	800f00a <__swbuf_r+0x72>
 800efb8:	6923      	ldr	r3, [r4, #16]
 800efba:	2b00      	cmp	r3, #0
 800efbc:	d025      	beq.n	800f00a <__swbuf_r+0x72>
 800efbe:	6923      	ldr	r3, [r4, #16]
 800efc0:	6820      	ldr	r0, [r4, #0]
 800efc2:	b2ef      	uxtb	r7, r5
 800efc4:	1ac0      	subs	r0, r0, r3
 800efc6:	6963      	ldr	r3, [r4, #20]
 800efc8:	b2ed      	uxtb	r5, r5
 800efca:	4283      	cmp	r3, r0
 800efcc:	dc05      	bgt.n	800efda <__swbuf_r+0x42>
 800efce:	0021      	movs	r1, r4
 800efd0:	0030      	movs	r0, r6
 800efd2:	f7ff fc73 	bl	800e8bc <_fflush_r>
 800efd6:	2800      	cmp	r0, #0
 800efd8:	d11d      	bne.n	800f016 <__swbuf_r+0x7e>
 800efda:	68a3      	ldr	r3, [r4, #8]
 800efdc:	3001      	adds	r0, #1
 800efde:	3b01      	subs	r3, #1
 800efe0:	60a3      	str	r3, [r4, #8]
 800efe2:	6823      	ldr	r3, [r4, #0]
 800efe4:	1c5a      	adds	r2, r3, #1
 800efe6:	6022      	str	r2, [r4, #0]
 800efe8:	701f      	strb	r7, [r3, #0]
 800efea:	6963      	ldr	r3, [r4, #20]
 800efec:	4283      	cmp	r3, r0
 800efee:	d004      	beq.n	800effa <__swbuf_r+0x62>
 800eff0:	89a3      	ldrh	r3, [r4, #12]
 800eff2:	07db      	lsls	r3, r3, #31
 800eff4:	d507      	bpl.n	800f006 <__swbuf_r+0x6e>
 800eff6:	2d0a      	cmp	r5, #10
 800eff8:	d105      	bne.n	800f006 <__swbuf_r+0x6e>
 800effa:	0021      	movs	r1, r4
 800effc:	0030      	movs	r0, r6
 800effe:	f7ff fc5d 	bl	800e8bc <_fflush_r>
 800f002:	2800      	cmp	r0, #0
 800f004:	d107      	bne.n	800f016 <__swbuf_r+0x7e>
 800f006:	0028      	movs	r0, r5
 800f008:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f00a:	0021      	movs	r1, r4
 800f00c:	0030      	movs	r0, r6
 800f00e:	f000 f805 	bl	800f01c <__swsetup_r>
 800f012:	2800      	cmp	r0, #0
 800f014:	d0d3      	beq.n	800efbe <__swbuf_r+0x26>
 800f016:	2501      	movs	r5, #1
 800f018:	426d      	negs	r5, r5
 800f01a:	e7f4      	b.n	800f006 <__swbuf_r+0x6e>

0800f01c <__swsetup_r>:
 800f01c:	4b30      	ldr	r3, [pc, #192]	; (800f0e0 <__swsetup_r+0xc4>)
 800f01e:	b570      	push	{r4, r5, r6, lr}
 800f020:	0005      	movs	r5, r0
 800f022:	6818      	ldr	r0, [r3, #0]
 800f024:	000c      	movs	r4, r1
 800f026:	2800      	cmp	r0, #0
 800f028:	d004      	beq.n	800f034 <__swsetup_r+0x18>
 800f02a:	6a03      	ldr	r3, [r0, #32]
 800f02c:	2b00      	cmp	r3, #0
 800f02e:	d101      	bne.n	800f034 <__swsetup_r+0x18>
 800f030:	f7fe f8f6 	bl	800d220 <__sinit>
 800f034:	230c      	movs	r3, #12
 800f036:	5ee2      	ldrsh	r2, [r4, r3]
 800f038:	b293      	uxth	r3, r2
 800f03a:	0711      	lsls	r1, r2, #28
 800f03c:	d423      	bmi.n	800f086 <__swsetup_r+0x6a>
 800f03e:	06d9      	lsls	r1, r3, #27
 800f040:	d407      	bmi.n	800f052 <__swsetup_r+0x36>
 800f042:	2309      	movs	r3, #9
 800f044:	2001      	movs	r0, #1
 800f046:	602b      	str	r3, [r5, #0]
 800f048:	3337      	adds	r3, #55	; 0x37
 800f04a:	4313      	orrs	r3, r2
 800f04c:	81a3      	strh	r3, [r4, #12]
 800f04e:	4240      	negs	r0, r0
 800f050:	bd70      	pop	{r4, r5, r6, pc}
 800f052:	075b      	lsls	r3, r3, #29
 800f054:	d513      	bpl.n	800f07e <__swsetup_r+0x62>
 800f056:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f058:	2900      	cmp	r1, #0
 800f05a:	d008      	beq.n	800f06e <__swsetup_r+0x52>
 800f05c:	0023      	movs	r3, r4
 800f05e:	3344      	adds	r3, #68	; 0x44
 800f060:	4299      	cmp	r1, r3
 800f062:	d002      	beq.n	800f06a <__swsetup_r+0x4e>
 800f064:	0028      	movs	r0, r5
 800f066:	f7fe fa6b 	bl	800d540 <_free_r>
 800f06a:	2300      	movs	r3, #0
 800f06c:	6363      	str	r3, [r4, #52]	; 0x34
 800f06e:	2224      	movs	r2, #36	; 0x24
 800f070:	89a3      	ldrh	r3, [r4, #12]
 800f072:	4393      	bics	r3, r2
 800f074:	81a3      	strh	r3, [r4, #12]
 800f076:	2300      	movs	r3, #0
 800f078:	6063      	str	r3, [r4, #4]
 800f07a:	6923      	ldr	r3, [r4, #16]
 800f07c:	6023      	str	r3, [r4, #0]
 800f07e:	2308      	movs	r3, #8
 800f080:	89a2      	ldrh	r2, [r4, #12]
 800f082:	4313      	orrs	r3, r2
 800f084:	81a3      	strh	r3, [r4, #12]
 800f086:	6923      	ldr	r3, [r4, #16]
 800f088:	2b00      	cmp	r3, #0
 800f08a:	d10b      	bne.n	800f0a4 <__swsetup_r+0x88>
 800f08c:	21a0      	movs	r1, #160	; 0xa0
 800f08e:	2280      	movs	r2, #128	; 0x80
 800f090:	89a3      	ldrh	r3, [r4, #12]
 800f092:	0089      	lsls	r1, r1, #2
 800f094:	0092      	lsls	r2, r2, #2
 800f096:	400b      	ands	r3, r1
 800f098:	4293      	cmp	r3, r2
 800f09a:	d003      	beq.n	800f0a4 <__swsetup_r+0x88>
 800f09c:	0021      	movs	r1, r4
 800f09e:	0028      	movs	r0, r5
 800f0a0:	f000 f89e 	bl	800f1e0 <__smakebuf_r>
 800f0a4:	220c      	movs	r2, #12
 800f0a6:	5ea3      	ldrsh	r3, [r4, r2]
 800f0a8:	2001      	movs	r0, #1
 800f0aa:	001a      	movs	r2, r3
 800f0ac:	b299      	uxth	r1, r3
 800f0ae:	4002      	ands	r2, r0
 800f0b0:	4203      	tst	r3, r0
 800f0b2:	d00f      	beq.n	800f0d4 <__swsetup_r+0xb8>
 800f0b4:	2200      	movs	r2, #0
 800f0b6:	60a2      	str	r2, [r4, #8]
 800f0b8:	6962      	ldr	r2, [r4, #20]
 800f0ba:	4252      	negs	r2, r2
 800f0bc:	61a2      	str	r2, [r4, #24]
 800f0be:	2000      	movs	r0, #0
 800f0c0:	6922      	ldr	r2, [r4, #16]
 800f0c2:	4282      	cmp	r2, r0
 800f0c4:	d1c4      	bne.n	800f050 <__swsetup_r+0x34>
 800f0c6:	0609      	lsls	r1, r1, #24
 800f0c8:	d5c2      	bpl.n	800f050 <__swsetup_r+0x34>
 800f0ca:	2240      	movs	r2, #64	; 0x40
 800f0cc:	4313      	orrs	r3, r2
 800f0ce:	81a3      	strh	r3, [r4, #12]
 800f0d0:	3801      	subs	r0, #1
 800f0d2:	e7bd      	b.n	800f050 <__swsetup_r+0x34>
 800f0d4:	0788      	lsls	r0, r1, #30
 800f0d6:	d400      	bmi.n	800f0da <__swsetup_r+0xbe>
 800f0d8:	6962      	ldr	r2, [r4, #20]
 800f0da:	60a2      	str	r2, [r4, #8]
 800f0dc:	e7ef      	b.n	800f0be <__swsetup_r+0xa2>
 800f0de:	46c0      	nop			; (mov r8, r8)
 800f0e0:	200001d4 	.word	0x200001d4

0800f0e4 <_raise_r>:
 800f0e4:	b570      	push	{r4, r5, r6, lr}
 800f0e6:	0004      	movs	r4, r0
 800f0e8:	000d      	movs	r5, r1
 800f0ea:	291f      	cmp	r1, #31
 800f0ec:	d904      	bls.n	800f0f8 <_raise_r+0x14>
 800f0ee:	2316      	movs	r3, #22
 800f0f0:	6003      	str	r3, [r0, #0]
 800f0f2:	2001      	movs	r0, #1
 800f0f4:	4240      	negs	r0, r0
 800f0f6:	bd70      	pop	{r4, r5, r6, pc}
 800f0f8:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800f0fa:	2b00      	cmp	r3, #0
 800f0fc:	d004      	beq.n	800f108 <_raise_r+0x24>
 800f0fe:	008a      	lsls	r2, r1, #2
 800f100:	189b      	adds	r3, r3, r2
 800f102:	681a      	ldr	r2, [r3, #0]
 800f104:	2a00      	cmp	r2, #0
 800f106:	d108      	bne.n	800f11a <_raise_r+0x36>
 800f108:	0020      	movs	r0, r4
 800f10a:	f000 f831 	bl	800f170 <_getpid_r>
 800f10e:	002a      	movs	r2, r5
 800f110:	0001      	movs	r1, r0
 800f112:	0020      	movs	r0, r4
 800f114:	f000 f81a 	bl	800f14c <_kill_r>
 800f118:	e7ed      	b.n	800f0f6 <_raise_r+0x12>
 800f11a:	2000      	movs	r0, #0
 800f11c:	2a01      	cmp	r2, #1
 800f11e:	d0ea      	beq.n	800f0f6 <_raise_r+0x12>
 800f120:	1c51      	adds	r1, r2, #1
 800f122:	d103      	bne.n	800f12c <_raise_r+0x48>
 800f124:	2316      	movs	r3, #22
 800f126:	3001      	adds	r0, #1
 800f128:	6023      	str	r3, [r4, #0]
 800f12a:	e7e4      	b.n	800f0f6 <_raise_r+0x12>
 800f12c:	2400      	movs	r4, #0
 800f12e:	0028      	movs	r0, r5
 800f130:	601c      	str	r4, [r3, #0]
 800f132:	4790      	blx	r2
 800f134:	0020      	movs	r0, r4
 800f136:	e7de      	b.n	800f0f6 <_raise_r+0x12>

0800f138 <raise>:
 800f138:	b510      	push	{r4, lr}
 800f13a:	4b03      	ldr	r3, [pc, #12]	; (800f148 <raise+0x10>)
 800f13c:	0001      	movs	r1, r0
 800f13e:	6818      	ldr	r0, [r3, #0]
 800f140:	f7ff ffd0 	bl	800f0e4 <_raise_r>
 800f144:	bd10      	pop	{r4, pc}
 800f146:	46c0      	nop			; (mov r8, r8)
 800f148:	200001d4 	.word	0x200001d4

0800f14c <_kill_r>:
 800f14c:	2300      	movs	r3, #0
 800f14e:	b570      	push	{r4, r5, r6, lr}
 800f150:	4d06      	ldr	r5, [pc, #24]	; (800f16c <_kill_r+0x20>)
 800f152:	0004      	movs	r4, r0
 800f154:	0008      	movs	r0, r1
 800f156:	0011      	movs	r1, r2
 800f158:	602b      	str	r3, [r5, #0]
 800f15a:	f7f5 feb7 	bl	8004ecc <_kill>
 800f15e:	1c43      	adds	r3, r0, #1
 800f160:	d103      	bne.n	800f16a <_kill_r+0x1e>
 800f162:	682b      	ldr	r3, [r5, #0]
 800f164:	2b00      	cmp	r3, #0
 800f166:	d000      	beq.n	800f16a <_kill_r+0x1e>
 800f168:	6023      	str	r3, [r4, #0]
 800f16a:	bd70      	pop	{r4, r5, r6, pc}
 800f16c:	20002a1c 	.word	0x20002a1c

0800f170 <_getpid_r>:
 800f170:	b510      	push	{r4, lr}
 800f172:	f7f5 fea5 	bl	8004ec0 <_getpid>
 800f176:	bd10      	pop	{r4, pc}

0800f178 <memchr>:
 800f178:	b2c9      	uxtb	r1, r1
 800f17a:	1882      	adds	r2, r0, r2
 800f17c:	4290      	cmp	r0, r2
 800f17e:	d101      	bne.n	800f184 <memchr+0xc>
 800f180:	2000      	movs	r0, #0
 800f182:	4770      	bx	lr
 800f184:	7803      	ldrb	r3, [r0, #0]
 800f186:	428b      	cmp	r3, r1
 800f188:	d0fb      	beq.n	800f182 <memchr+0xa>
 800f18a:	3001      	adds	r0, #1
 800f18c:	e7f6      	b.n	800f17c <memchr+0x4>
	...

0800f190 <__swhatbuf_r>:
 800f190:	b570      	push	{r4, r5, r6, lr}
 800f192:	000e      	movs	r6, r1
 800f194:	001d      	movs	r5, r3
 800f196:	230e      	movs	r3, #14
 800f198:	5ec9      	ldrsh	r1, [r1, r3]
 800f19a:	0014      	movs	r4, r2
 800f19c:	b096      	sub	sp, #88	; 0x58
 800f19e:	2900      	cmp	r1, #0
 800f1a0:	da0c      	bge.n	800f1bc <__swhatbuf_r+0x2c>
 800f1a2:	89b2      	ldrh	r2, [r6, #12]
 800f1a4:	2380      	movs	r3, #128	; 0x80
 800f1a6:	0011      	movs	r1, r2
 800f1a8:	4019      	ands	r1, r3
 800f1aa:	421a      	tst	r2, r3
 800f1ac:	d013      	beq.n	800f1d6 <__swhatbuf_r+0x46>
 800f1ae:	2100      	movs	r1, #0
 800f1b0:	3b40      	subs	r3, #64	; 0x40
 800f1b2:	2000      	movs	r0, #0
 800f1b4:	6029      	str	r1, [r5, #0]
 800f1b6:	6023      	str	r3, [r4, #0]
 800f1b8:	b016      	add	sp, #88	; 0x58
 800f1ba:	bd70      	pop	{r4, r5, r6, pc}
 800f1bc:	466a      	mov	r2, sp
 800f1be:	f000 f84d 	bl	800f25c <_fstat_r>
 800f1c2:	2800      	cmp	r0, #0
 800f1c4:	dbed      	blt.n	800f1a2 <__swhatbuf_r+0x12>
 800f1c6:	23f0      	movs	r3, #240	; 0xf0
 800f1c8:	9901      	ldr	r1, [sp, #4]
 800f1ca:	021b      	lsls	r3, r3, #8
 800f1cc:	4019      	ands	r1, r3
 800f1ce:	4b03      	ldr	r3, [pc, #12]	; (800f1dc <__swhatbuf_r+0x4c>)
 800f1d0:	18c9      	adds	r1, r1, r3
 800f1d2:	424b      	negs	r3, r1
 800f1d4:	4159      	adcs	r1, r3
 800f1d6:	2380      	movs	r3, #128	; 0x80
 800f1d8:	00db      	lsls	r3, r3, #3
 800f1da:	e7ea      	b.n	800f1b2 <__swhatbuf_r+0x22>
 800f1dc:	ffffe000 	.word	0xffffe000

0800f1e0 <__smakebuf_r>:
 800f1e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f1e2:	2602      	movs	r6, #2
 800f1e4:	898b      	ldrh	r3, [r1, #12]
 800f1e6:	0005      	movs	r5, r0
 800f1e8:	000c      	movs	r4, r1
 800f1ea:	4233      	tst	r3, r6
 800f1ec:	d006      	beq.n	800f1fc <__smakebuf_r+0x1c>
 800f1ee:	0023      	movs	r3, r4
 800f1f0:	3347      	adds	r3, #71	; 0x47
 800f1f2:	6023      	str	r3, [r4, #0]
 800f1f4:	6123      	str	r3, [r4, #16]
 800f1f6:	2301      	movs	r3, #1
 800f1f8:	6163      	str	r3, [r4, #20]
 800f1fa:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800f1fc:	466a      	mov	r2, sp
 800f1fe:	ab01      	add	r3, sp, #4
 800f200:	f7ff ffc6 	bl	800f190 <__swhatbuf_r>
 800f204:	9900      	ldr	r1, [sp, #0]
 800f206:	0007      	movs	r7, r0
 800f208:	0028      	movs	r0, r5
 800f20a:	f7fe fd61 	bl	800dcd0 <_malloc_r>
 800f20e:	2800      	cmp	r0, #0
 800f210:	d108      	bne.n	800f224 <__smakebuf_r+0x44>
 800f212:	220c      	movs	r2, #12
 800f214:	5ea3      	ldrsh	r3, [r4, r2]
 800f216:	059a      	lsls	r2, r3, #22
 800f218:	d4ef      	bmi.n	800f1fa <__smakebuf_r+0x1a>
 800f21a:	2203      	movs	r2, #3
 800f21c:	4393      	bics	r3, r2
 800f21e:	431e      	orrs	r6, r3
 800f220:	81a6      	strh	r6, [r4, #12]
 800f222:	e7e4      	b.n	800f1ee <__smakebuf_r+0xe>
 800f224:	2380      	movs	r3, #128	; 0x80
 800f226:	89a2      	ldrh	r2, [r4, #12]
 800f228:	6020      	str	r0, [r4, #0]
 800f22a:	4313      	orrs	r3, r2
 800f22c:	81a3      	strh	r3, [r4, #12]
 800f22e:	9b00      	ldr	r3, [sp, #0]
 800f230:	6120      	str	r0, [r4, #16]
 800f232:	6163      	str	r3, [r4, #20]
 800f234:	9b01      	ldr	r3, [sp, #4]
 800f236:	2b00      	cmp	r3, #0
 800f238:	d00c      	beq.n	800f254 <__smakebuf_r+0x74>
 800f23a:	0028      	movs	r0, r5
 800f23c:	230e      	movs	r3, #14
 800f23e:	5ee1      	ldrsh	r1, [r4, r3]
 800f240:	f000 f81e 	bl	800f280 <_isatty_r>
 800f244:	2800      	cmp	r0, #0
 800f246:	d005      	beq.n	800f254 <__smakebuf_r+0x74>
 800f248:	2303      	movs	r3, #3
 800f24a:	89a2      	ldrh	r2, [r4, #12]
 800f24c:	439a      	bics	r2, r3
 800f24e:	3b02      	subs	r3, #2
 800f250:	4313      	orrs	r3, r2
 800f252:	81a3      	strh	r3, [r4, #12]
 800f254:	89a3      	ldrh	r3, [r4, #12]
 800f256:	433b      	orrs	r3, r7
 800f258:	81a3      	strh	r3, [r4, #12]
 800f25a:	e7ce      	b.n	800f1fa <__smakebuf_r+0x1a>

0800f25c <_fstat_r>:
 800f25c:	2300      	movs	r3, #0
 800f25e:	b570      	push	{r4, r5, r6, lr}
 800f260:	4d06      	ldr	r5, [pc, #24]	; (800f27c <_fstat_r+0x20>)
 800f262:	0004      	movs	r4, r0
 800f264:	0008      	movs	r0, r1
 800f266:	0011      	movs	r1, r2
 800f268:	602b      	str	r3, [r5, #0]
 800f26a:	f7f5 fe8e 	bl	8004f8a <_fstat>
 800f26e:	1c43      	adds	r3, r0, #1
 800f270:	d103      	bne.n	800f27a <_fstat_r+0x1e>
 800f272:	682b      	ldr	r3, [r5, #0]
 800f274:	2b00      	cmp	r3, #0
 800f276:	d000      	beq.n	800f27a <_fstat_r+0x1e>
 800f278:	6023      	str	r3, [r4, #0]
 800f27a:	bd70      	pop	{r4, r5, r6, pc}
 800f27c:	20002a1c 	.word	0x20002a1c

0800f280 <_isatty_r>:
 800f280:	2300      	movs	r3, #0
 800f282:	b570      	push	{r4, r5, r6, lr}
 800f284:	4d06      	ldr	r5, [pc, #24]	; (800f2a0 <_isatty_r+0x20>)
 800f286:	0004      	movs	r4, r0
 800f288:	0008      	movs	r0, r1
 800f28a:	602b      	str	r3, [r5, #0]
 800f28c:	f7f5 fe8b 	bl	8004fa6 <_isatty>
 800f290:	1c43      	adds	r3, r0, #1
 800f292:	d103      	bne.n	800f29c <_isatty_r+0x1c>
 800f294:	682b      	ldr	r3, [r5, #0]
 800f296:	2b00      	cmp	r3, #0
 800f298:	d000      	beq.n	800f29c <_isatty_r+0x1c>
 800f29a:	6023      	str	r3, [r4, #0]
 800f29c:	bd70      	pop	{r4, r5, r6, pc}
 800f29e:	46c0      	nop			; (mov r8, r8)
 800f2a0:	20002a1c 	.word	0x20002a1c

0800f2a4 <_init>:
 800f2a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f2a6:	46c0      	nop			; (mov r8, r8)
 800f2a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f2aa:	bc08      	pop	{r3}
 800f2ac:	469e      	mov	lr, r3
 800f2ae:	4770      	bx	lr

0800f2b0 <_fini>:
 800f2b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f2b2:	46c0      	nop			; (mov r8, r8)
 800f2b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f2b6:	bc08      	pop	{r3}
 800f2b8:	469e      	mov	lr, r3
 800f2ba:	4770      	bx	lr
